asprin_vL version 1.0
Reading from stdin
-:1240:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1250:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1265:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1346:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1607:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1620:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1797:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1926:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1998:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:2002:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:2002:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2008:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2107:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2133:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2253:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2287:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2309:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1157:1-16: info: no atoms over signature occur in program:
  output/3

-:1149:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1150:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(80,eq,84) output(84,eq,22) output(22,eq,53) output(53,eq,71) output(71,eq,83) output(49,eq,52) output(74,eq,82) output(82,eq,65) output(65,eq,22) output(22,eq,33) output(33,eq,10) output(39,eq,88) output(22,eq,10) output(84,eq,33) output(65,eq,33) output(82,eq,22) output(74,eq,65) output(53,eq,83) output(22,eq,71) output(84,eq,53) output(65,eq,53) output(80,eq,22) output(82,eq,53) output(74,eq,53) output(80,eq,53) output(84,eq,71) output(65,eq,71) output(82,eq,71) output(80,eq,71) output(22,eq,83) output(84,eq,83) output(65,eq,83) output(74,eq,22) output(82,eq,33) output(74,eq,33) output(80,eq,33) output(84,eq,10) output(65,eq,10) output(82,eq,10) output(80,eq,10) output(74,eq,10) output(82,eq,83) output(74,eq,83) output(80,eq,83) output(74,eq,71)
Optimization: 45 0
Answer: 2
preference(1,(1,3),1,for(atom(hasCost(1))),3) preference(1,(1,5),1,for(atom(hasDifficulty(1))),3) preference(1,(1,8),1,for(atom(hasPrep(0))),3) preference(1,(1,9),1,for(atom(hasPrep(1))),4) preference(1,(1,10),1,for(atom(hasPrepTime(2))),3) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(53,better,71) output(53,better,83) output(84,better,33) output(84,better,71) output(84,better,83) output(84,better,10) output(49,better,52) output(65,better,33) output(65,better,71) output(65,better,83) output(65,better,10) output(39,worse,88) output(74,worse,65) output(74,worse,53) output(74,worse,22) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(82,worse,65) output(82,worse,22) output(82,worse,53) output(84,eq,22) output(22,eq,53) output(71,eq,83) output(74,eq,82) output(65,eq,22) output(33,eq,10) output(84,eq,53) output(65,eq,53) output(82,eq,71) output(80,eq,71) output(82,eq,33) output(74,eq,33) output(80,eq,33) output(82,eq,10) output(80,eq,10) output(74,eq,10) output(82,eq,83) output(74,eq,83) output(80,eq,83) output(74,eq,71)
Optimization: 30 5
Answer: 3
preference(1,(1,1),1,for(atom(hasDifficulty(1))),4) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasPrep(6))),6) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(53,better,71) output(53,better,83) output(74,better,65) output(74,better,33) output(74,better,83) output(74,better,71) output(82,better,65) output(82,better,71) output(82,better,33) output(82,better,83) output(84,better,33) output(84,better,71) output(84,better,83) output(84,better,10) output(65,better,33) output(65,better,71) output(65,better,83) output(39,worse,88) output(71,worse,83) output(74,worse,53) output(74,worse,22) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(80,worse,33) output(80,worse,10) output(80,worse,83) output(82,worse,22) output(82,worse,53) output(33,worse,10) output(49,worse,52) output(65,worse,22) output(65,worse,53) output(65,worse,10) output(84,eq,22) output(22,eq,53) output(74,eq,82) output(84,eq,53) output(80,eq,71) output(82,eq,10) output(74,eq,10)
Optimization: 24 7
Answer: 4
preference(1,(1,1),1,for(atom(hasDifficulty(1))),4) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasPrep(6))),6) preference(1,(1,13),1,for(atom(hasCost(2))),6) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(39,better,88) output(53,better,71) output(53,better,83) output(74,better,65) output(74,better,33) output(74,better,83) output(74,better,71) output(82,better,65) output(82,better,71) output(82,better,33) output(82,better,83) output(84,better,33) output(84,better,71) output(84,better,83) output(84,better,10) output(65,better,33) output(65,better,71) output(65,better,83) output(71,worse,83) output(74,worse,53) output(74,worse,22) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(80,worse,33) output(80,worse,10) output(80,worse,83) output(82,worse,22) output(82,worse,53) output(33,worse,10) output(49,worse,52) output(65,worse,22) output(65,worse,53) output(65,worse,10) output(84,eq,22) output(22,eq,53) output(74,eq,82) output(84,eq,53) output(80,eq,71) output(82,eq,10) output(74,eq,10)
Optimization: 23 8
Answer: 5
preference(1,(1,1),1,for(atom(hasDifficulty(1))),4) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasPrep(6))),6) preference(1,(1,13),1,for(atom(hasPrep(5))),6) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(22,better,33) output(22,better,71) output(22,better,83) output(39,better,88) output(53,better,71) output(53,better,83) output(74,better,65) output(74,better,22) output(74,better,33) output(74,better,83) output(74,better,71) output(82,better,65) output(82,better,22) output(82,better,71) output(82,better,33) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,71) output(84,better,83) output(84,better,10) output(65,better,33) output(65,better,71) output(65,better,83) output(22,worse,53) output(22,worse,10) output(71,worse,83) output(74,worse,53) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(80,worse,33) output(80,worse,10) output(80,worse,83) output(82,worse,53) output(33,worse,10) output(49,worse,52) output(65,worse,53) output(65,worse,10) output(74,eq,82) output(65,eq,22) output(84,eq,53) output(80,eq,71) output(82,eq,10) output(74,eq,10)
Optimization: 21 8
Answer: 6
preference(1,(1,1),1,for(atom(hasDifficulty(1))),4) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasPrep(6))),6) preference(1,(1,13),1,for(atom(hasDifficulty(2))),8) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(53,better,71) output(53,better,83) output(74,better,65) output(74,better,33) output(74,better,10) output(74,better,83) output(74,better,71) output(82,better,65) output(82,better,71) output(82,better,33) output(82,better,10) output(82,better,83) output(84,better,33) output(84,better,71) output(84,better,83) output(84,better,10) output(33,better,10) output(65,better,33) output(65,better,71) output(65,better,83) output(65,better,10) output(39,worse,88) output(71,worse,83) output(74,worse,53) output(74,worse,22) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(80,worse,33) output(80,worse,10) output(80,worse,83) output(82,worse,22) output(82,worse,53) output(49,worse,52) output(65,worse,22) output(65,worse,53) output(84,eq,22) output(22,eq,53) output(74,eq,82) output(84,eq,53) output(80,eq,71)
Optimization: 20 8
Answer: 7
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,2),1,for(atom(hasPrep(1))),7) preference(1,(1,3),1,for(atom(hasPrep(6))),3) preference(1,(1,4),1,for(atom(hasPrepTime(2))),6) preference(1,(1,5),1,for(atom(hasDifficulty(1))),4) preference(1,(1,6),1,for(atom(hasPrep(0))),5) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasPrepTime(3))),5) preference(1,(1,10),1,for(atom(hasPrep(7))),5) preference(1,(1,11),1,for(atom(hasPrep(3))),1) preference(1,(1,12),1,for(atom(hasPrepTime(1))),2) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,(1,14),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(22,better,83) output(53,better,83) output(71,better,83) output(74,better,82) output(74,better,53) output(74,better,22) output(74,better,33) output(74,better,10) output(74,better,83) output(80,better,84) output(80,better,22) output(80,better,53) output(80,better,33) output(80,better,83) output(82,better,22) output(82,better,33) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,83) output(49,better,52) output(65,better,22) output(65,better,33) output(65,better,53) output(65,better,71) output(65,better,83) output(65,better,10) output(22,worse,53) output(22,worse,10) output(22,worse,71) output(39,worse,88) output(53,worse,71) output(74,worse,65) output(80,worse,71) output(80,worse,10) output(82,worse,65) output(82,worse,71) output(82,worse,10) output(84,worse,71) output(84,worse,10) output(33,worse,10) output(22,eq,33) output(84,eq,53) output(82,eq,53) output(74,eq,71)
Optimization: 18 14
Answer: 8
preference(1,(1,1),1,for(atom(hasDifficulty(1))),4) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),8) preference(1,(1,5),1,for(atom(hasCost(2))),6) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,9),1,for(atom(hasDifficulty(2))),8) preference(1,(1,10),1,for(atom(hasPrep(6))),6) preference(1,(1,11),1,for(atom(hasPrep(5))),8) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(53,better,71) output(53,better,83) output(74,better,65) output(74,better,22) output(74,better,33) output(74,better,10) output(74,better,83) output(74,better,71) output(82,better,65) output(82,better,22) output(82,better,71) output(82,better,33) output(82,better,10) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,71) output(84,better,83) output(84,better,10) output(33,better,10) output(65,better,22) output(65,better,33) output(65,better,71) output(65,better,83) output(65,better,10) output(22,worse,53) output(39,worse,88) output(74,worse,53) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(80,worse,33) output(80,worse,10) output(82,worse,53) output(49,worse,52) output(65,worse,53) output(71,eq,83) output(74,eq,82) output(84,eq,53) output(80,eq,71) output(80,eq,83)
Optimization: 16 10
Answer: 9
preference(1,(1,1),1,for(atom(hasDifficulty(1))),4) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),8) preference(1,(1,5),1,for(atom(hasPrep(5))),7) preference(1,(1,6),1,for(atom(hasCost(2))),6) preference(1,(1,7),1,for(atom(hasDifficulty(2))),7) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasPrep(6))),6) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(39,better,88) output(53,better,71) output(53,better,83) output(74,better,65) output(74,better,22) output(74,better,33) output(74,better,10) output(74,better,83) output(74,better,71) output(82,better,65) output(82,better,22) output(82,better,71) output(82,better,33) output(82,better,10) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,71) output(84,better,83) output(84,better,10) output(33,better,10) output(65,better,22) output(65,better,33) output(65,better,71) output(65,better,83) output(65,better,10) output(22,worse,53) output(71,worse,83) output(74,worse,53) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(80,worse,33) output(80,worse,10) output(80,worse,83) output(82,worse,53) output(49,worse,52) output(65,worse,53) output(74,eq,82) output(84,eq,53) output(80,eq,71)
Optimization: 15 10
Progression : [ 1;15] (Error: 14)
Progression : [ 2;15] (Error: 6.5)
Answer: 10
preference(1,(1,2),1,for(atom(hasPrep(5))),5) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,4),1,for(atom(hasPrep(1))),2) preference(1,(1,7),1,for(atom(hasPrepTime(1))),3) preference(1,(1,8),1,for(atom(hasPrep(0))),7) preference(1,(1,9),1,for(atom(hasPrepTime(2))),3) preference(1,(1,10),1,for(atom(hasPrep(6))),7) preference(1,(1,11),1,for(atom(hasDifficulty(2))),4) preference(1,(1,12),1,for(atom(hasPrep(7))),8) preference(1,(1,13),1,for(atom(hasCost(2))),5) preference(1,(1,14),1,for(atom(hasCost(1))),6) preference(1,less(weight)) output(22,better,53) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(53,better,71) output(53,better,83) output(71,better,83) output(74,better,82) output(74,better,65) output(74,better,53) output(74,better,22) output(74,better,33) output(74,better,10) output(74,better,83) output(74,better,71) output(80,better,33) output(80,better,10) output(80,better,83) output(82,better,65) output(82,better,33) output(82,better,10) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,53) output(84,better,71) output(84,better,83) output(84,better,10) output(33,better,10) output(65,better,10) output(39,worse,88) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(82,worse,22) output(82,worse,53) output(49,worse,52) output(65,worse,22) output(65,worse,33) output(65,worse,53) output(65,worse,71) output(65,worse,83) output(82,eq,71) output(80,eq,71)
Optimization: 14 11
Answer: 11
preference(1,(1,1),1,for(atom(hasCost(2))),3) preference(1,(1,3),1,for(atom(hasPrep(0))),4) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrep(6))),1) preference(1,(1,8),1,for(atom(hasDifficulty(1))),5) preference(1,(1,9),1,for(atom(hasCost(1))),5) preference(1,(1,10),1,for(atom(hasPrep(1))),4) preference(1,(1,11),1,for(atom(hasPrepTime(2))),6) preference(1,(1,12),1,for(atom(hasPrep(5))),3) preference(1,(1,13),1,for(atom(hasPrepTime(1))),5) preference(1,(1,14),1,for(atom(hasPrep(7))),4) preference(1,less(weight)) output(22,better,53) output(22,better,33) output(22,better,10) output(22,better,83) output(53,better,83) output(71,better,83) output(74,better,82) output(74,better,65) output(74,better,53) output(74,better,22) output(74,better,33) output(74,better,10) output(74,better,83) output(74,better,71) output(80,better,84) output(80,better,22) output(80,better,53) output(80,better,33) output(80,better,10) output(80,better,83) output(82,better,33) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,53) output(84,better,83) output(84,better,10) output(49,better,52) output(65,better,22) output(65,better,33) output(65,better,53) output(65,better,83) output(65,better,10) output(22,worse,71) output(39,worse,88) output(53,worse,71) output(82,worse,65) output(82,worse,22) output(82,worse,71) output(84,worse,71) output(33,worse,10) output(65,worse,71) output(82,eq,53) output(80,eq,71) output(82,eq,10)
Optimization: 12 11
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(1))),1) preference(1,(1,2),1,for(atom(hasPrep(1))),5) preference(1,(1,3),1,for(atom(hasPrep(0))),5) preference(1,(1,5),1,for(atom(hasPrep(3))),2) preference(1,(1,6),1,for(atom(hasCost(2))),6) preference(1,(1,7),1,for(atom(hasPrep(6))),1) preference(1,(1,9),1,for(atom(hasDifficulty(2))),4) preference(1,(1,10),1,for(atom(hasPrep(5))),4) preference(1,(1,11),1,for(atom(hasPrepTime(1))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,(1,13),1,for(atom(hasCost(1))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),3) preference(1,less(weight)) output(22,better,53) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(39,better,88) output(53,better,71) output(53,better,83) output(71,better,83) output(74,better,82) output(74,better,65) output(74,better,53) output(74,better,22) output(74,better,33) output(74,better,10) output(74,better,83) output(74,better,71) output(80,better,33) output(80,better,10) output(80,better,83) output(82,better,71) output(82,better,33) output(82,better,10) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,53) output(84,better,71) output(84,better,83) output(84,better,10) output(33,better,10) output(49,better,52) output(65,better,22) output(65,better,33) output(65,better,53) output(65,better,71) output(65,better,83) output(65,better,10) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(82,worse,65) output(82,worse,22) output(82,eq,53) output(80,eq,71)
Optimization: 7 12
Progression : [3;7] (Error: 1.33333)
Progression : [4;7] (Error: 0.75)
Progression : [5;7] (Error: 0.4)
Progression : [6;7] (Error: 0.166667)
Progression : [7;7] (Error: 0)
Progression : 7 [ 1;12] (Error: 11)
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(7))),3) preference(1,(1,2),1,for(atom(hasPrep(5))),1) preference(1,(1,3),1,for(atom(hasPrepTime(2))),5) preference(1,(1,4),1,for(atom(hasDifficulty(1))),6) preference(1,(1,6),1,for(atom(hasPrepTime(1))),5) preference(1,(1,7),1,for(atom(hasCost(2))),3) preference(1,(1,8),1,for(atom(hasPrep(6))),2) preference(1,(1,9),1,for(atom(hasDifficulty(2))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),4) preference(1,(1,13),1,for(atom(hasPrep(0))),4) preference(1,(1,14),1,for(atom(hasCost(1))),6) preference(1,less(weight)) output(22,better,53) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(39,better,88) output(53,better,71) output(53,better,83) output(71,better,83) output(74,better,82) output(74,better,65) output(74,better,53) output(74,better,22) output(74,better,33) output(74,better,10) output(74,better,83) output(74,better,71) output(80,better,33) output(80,better,10) output(80,better,83) output(82,better,71) output(82,better,33) output(82,better,10) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,53) output(84,better,71) output(84,better,83) output(84,better,10) output(33,better,10) output(49,better,52) output(65,better,22) output(65,better,33) output(65,better,53) output(65,better,71) output(65,better,83) output(65,better,10) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(82,worse,65) output(82,worse,22) output(82,eq,53) output(80,eq,71)
Optimization: 7 11
Answer: 14
preference(1,(1,1),1,for(atom(hasPrepTime(1))),7) preference(1,(1,2),1,for(atom(hasCost(2))),7) preference(1,(1,3),1,for(atom(hasDifficulty(2))),8) preference(1,(1,4),1,for(atom(hasPrepTime(2))),5) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasPrep(0))),4) preference(1,(1,12),1,for(atom(hasPrep(1))),4) preference(1,(1,13),1,for(atom(hasPrep(7))),7) preference(1,less(weight)) output(22,better,53) output(22,better,33) output(22,better,10) output(22,better,71) output(22,better,83) output(39,better,88) output(53,better,71) output(53,better,83) output(71,better,83) output(74,better,82) output(74,better,65) output(74,better,53) output(74,better,22) output(74,better,33) output(74,better,10) output(74,better,83) output(74,better,71) output(80,better,33) output(80,better,10) output(80,better,83) output(82,better,71) output(82,better,33) output(82,better,10) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,53) output(84,better,71) output(84,better,83) output(84,better,10) output(33,better,10) output(49,better,52) output(65,better,22) output(65,better,33) output(65,better,53) output(65,better,71) output(65,better,83) output(65,better,10) output(80,worse,84) output(80,worse,22) output(80,worse,53) output(82,worse,65) output(82,worse,22) output(82,eq,53) output(80,eq,71)
Optimization: 7 8
Progression : 7 [2;8] (Error: 3)
Progression : 7 [3;8] (Error: 1.66667)
Answer: 15
preference(1,(1,1),1,for(atom(hasPrep(6))),5) preference(1,(1,2),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasPrepTime(1))),1) preference(1,(1,6),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasDifficulty(2))),8) preference(1,(1,11),1,for(atom(hasPrep(5))),4) preference(1,(1,12),1,for(atom(hasPrep(0))),1) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,88) output(53,better,71) output(53,better,83) output(71,better,83) output(74,better,82) output(74,better,65) output(74,better,53) output(74,better,22) output(74,better,33) output(74,better,10) output(74,better,83) output(74,better,71) output(80,better,22) output(80,better,33) output(80,better,10) output(80,better,83) output(82,better,65) output(82,better,22) output(82,better,71) output(82,better,33) output(82,better,10) output(82,better,83) output(84,better,22) output(84,better,33) output(84,better,53) output(84,better,71) output(84,better,83) output(84,better,10) output(33,better,10) output(49,better,52) output(65,better,22) output(65,better,33) output(65,better,71) output(65,better,83) output(65,better,10) output(22,worse,53) output(22,worse,71) output(80,worse,84) output(80,worse,53) output(65,worse,53) output(82,eq,53) output(80,eq,71)
Optimization: 7 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.035 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 15+
  Optimum    : unknown
Optimization : 7 7
Bounds       : 7 [3;7]
Calls        : 1
Time         : 297.444s (Solving: 295.70s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1182.120s
Threads      : 4        (Winner: 4)

Choices      : 8044494  (Domain: 718557)
Conflicts    : 7197533  (Analyzed: 7197523)
Restarts     : 6663     (Average: 1080.22 Last: 497182)
Model-Level  : 55.8    
Problems     : 16       (Average Length: 0.25 Splits: 0)
Lemmas       : 7335006  (Deleted: 7047961)
  Binary     : 1684     (Ratio:   0.02%)
  Ternary    : 4168     (Ratio:   0.06%)
  Conflict   : 7197521  (Average Length:  245.1 Ratio:  98.13%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 137485   (Average Length:  228.4 Ratio:   1.87%) 
  Distributed: 45981    (Ratio:   0.64% Average LBD: 3.74) 
  Integrated : 137943   (Ratio: 300.00% Unit: 120 Average Jumps: 5.58)
Backjumps    : 7197523  (Average:  1.11 Max:  54 Sum: 7964974)
  Executed   : 7197509  (Average:  1.11 Max:  54 Sum: 7964710 Ratio: 100.00%)
  Bounded    : 14       (Average: 18.86 Max:  44 Sum:    264 Ratio:   0.00%)

Rules        : 115039  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 10030   
Bodies       : 5736    
  Sum        : 90      
  Count      : 14      
Equivalences : 3993     (Atom=Atom: 463 Body=Body: 194 Other: 3336)
Tight        : Yes
Variables    : 4845     (Eliminated:    0 Frozen: 3375)
Constraints  : 113060   (Binary:  97.2% Ternary:   1.3% Other:   1.5%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(1)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(0)) ; 
  7 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrep(3)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(5)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCost(2)) ; 
  6 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(3)) ; 
  6 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(7)) ; 
  1 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(0)) 
}.
