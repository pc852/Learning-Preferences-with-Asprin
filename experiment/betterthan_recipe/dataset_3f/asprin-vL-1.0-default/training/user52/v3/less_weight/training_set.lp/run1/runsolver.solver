asprin_vL version 1.0
Reading from stdin
-:1229:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1239:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1254:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1335:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1596:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1609:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1786:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1915:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1987:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1991:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1991:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1997:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2096:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2122:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2242:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2276:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2298:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1146:1-16: info: no atoms over signature occur in program:
  output/3

-:1138:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1139:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(71,eq,7) output(39,eq,18) output(84,eq,30) output(30,eq,32) output(32,eq,17) output(17,eq,69) output(69,eq,61) output(10,eq,39) output(21,eq,50) output(50,eq,58) output(67,eq,84) output(84,eq,66) output(66,eq,32) output(84,eq,32) output(67,eq,66) output(21,eq,58) output(17,eq,61) output(32,eq,69) output(30,eq,17) output(66,eq,17) output(67,eq,30) output(10,eq,18) output(84,eq,17) output(67,eq,17) output(30,eq,69) output(66,eq,69) output(84,eq,69) output(32,eq,61) output(30,eq,61) output(66,eq,61) output(67,eq,32) output(84,eq,61) output(67,eq,61) output(67,eq,69)
Optimization: 34 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCost(1))),3) preference(1,(1,2),1,for(atom(hasPrep(2))),1) preference(1,(1,3),1,for(atom(hasPrep(5))),1) preference(1,(1,5),1,for(atom(hasPrep(1))),2) preference(1,(1,8),1,for(atom(hasPrepTime(1))),1) preference(1,less(weight)) output(17,better,69) output(50,better,58) output(67,better,66) output(67,better,30) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,69) output(32,better,17) output(32,better,69) output(32,better,61) output(10,worse,18) output(17,worse,61) output(21,worse,50) output(21,worse,58) output(30,worse,32) output(30,worse,17) output(30,worse,61) output(39,worse,18) output(66,worse,32) output(66,worse,17) output(66,worse,61) output(67,worse,32) output(67,worse,61) output(69,worse,61) output(71,worse,7) output(84,worse,32) output(84,worse,61) output(10,eq,39) output(67,eq,84) output(84,eq,17) output(67,eq,17) output(30,eq,69) output(66,eq,69)
Optimization: 23 5
Answer: 3
preference(1,(1,1),1,for(atom(hasCost(2))),6) preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasPrepTime(1))),6) preference(1,(1,4),1,for(atom(hasPrep(4))),8) preference(1,(1,5),1,for(atom(hasPrep(7))),7) preference(1,(1,6),1,for(atom(hasPrep(6))),5) preference(1,(1,7),1,for(atom(hasDifficulty(1))),5) preference(1,(1,8),1,for(atom(hasCost(1))),5) preference(1,(1,9),1,for(atom(hasPrep(1))),5) preference(1,(1,10),1,for(atom(hasPrepTime(2))),5) preference(1,(1,11),1,for(atom(hasPrepTime(3))),5) preference(1,(1,12),1,for(atom(hasPrep(0))),5) preference(1,(1,13),1,for(atom(hasPrep(2))),5) preference(1,(1,14),1,for(atom(hasPrep(5))),5) preference(1,less(weight)) output(17,better,69) output(21,better,58) output(30,better,32) output(30,better,69) output(39,better,18) output(50,better,58) output(66,better,32) output(66,better,69) output(67,better,32) output(67,better,69) output(84,better,32) output(84,better,69) output(32,better,69) output(10,worse,39) output(10,worse,18) output(69,worse,61) output(32,worse,17) output(32,worse,61) output(71,eq,7) output(84,eq,30) output(21,eq,50) output(67,eq,84) output(84,eq,66) output(67,eq,66) output(17,eq,61) output(30,eq,17) output(66,eq,17) output(67,eq,30) output(84,eq,17) output(67,eq,17) output(30,eq,61) output(66,eq,61) output(84,eq,61) output(67,eq,61)
Optimization: 21 14
Answer: 4
preference(1,(1,1),1,for(atom(hasCost(2))),6) preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasPrep(7))),8) preference(1,(1,5),1,for(atom(hasPrep(4))),8) preference(1,(1,6),1,for(atom(hasPrep(6))),5) preference(1,(1,7),1,for(atom(hasDifficulty(1))),5) preference(1,(1,8),1,for(atom(hasCost(1))),5) preference(1,(1,9),1,for(atom(hasPrep(1))),5) preference(1,(1,10),1,for(atom(hasPrepTime(2))),5) preference(1,(1,11),1,for(atom(hasPrepTime(3))),5) preference(1,(1,12),1,for(atom(hasPrep(0))),5) preference(1,(1,13),1,for(atom(hasPrep(2))),5) preference(1,(1,14),1,for(atom(hasPrep(5))),5) preference(1,less(weight)) output(17,better,69) output(21,better,58) output(30,better,32) output(30,better,69) output(39,better,18) output(50,better,58) output(66,better,32) output(66,better,69) output(67,better,32) output(67,better,69) output(71,better,7) output(84,better,32) output(84,better,69) output(32,better,69) output(10,worse,39) output(10,worse,18) output(69,worse,61) output(32,worse,17) output(32,worse,61) output(84,eq,30) output(21,eq,50) output(67,eq,84) output(84,eq,66) output(67,eq,66) output(17,eq,61) output(30,eq,17) output(66,eq,17) output(67,eq,30) output(84,eq,17) output(67,eq,17) output(30,eq,61) output(66,eq,61) output(84,eq,61) output(67,eq,61)
Optimization: 20 13
Answer: 5
preference(1,(1,1),1,for(atom(hasDifficulty(1))),8) preference(1,(1,2),1,for(atom(hasPrep(6))),8) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasPrep(1))),4) preference(1,(1,5),1,for(atom(hasPrep(5))),7) preference(1,(1,6),1,for(atom(hasPrepTime(2))),7) preference(1,(1,7),1,for(atom(hasCost(2))),7) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),7) preference(1,(1,10),1,for(atom(hasPrep(7))),7) preference(1,(1,11),1,for(atom(hasPrep(4))),5) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,less(weight)) output(17,better,69) output(21,better,50) output(21,better,58) output(30,better,69) output(50,better,58) output(66,better,69) output(67,better,66) output(67,better,30) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,69) output(32,better,69) output(10,worse,18) output(30,worse,32) output(30,worse,17) output(30,worse,61) output(39,worse,18) output(66,worse,32) output(66,worse,17) output(66,worse,61) output(69,worse,61) output(32,eq,17) output(10,eq,39) output(67,eq,84) output(84,eq,32) output(17,eq,61) output(84,eq,17) output(67,eq,17) output(32,eq,61) output(67,eq,32) output(84,eq,61) output(67,eq,61)
Optimization: 20 12
Answer: 6
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrep(5))),7) preference(1,(1,3),1,for(atom(hasPrep(0))),1) preference(1,(1,6),1,for(atom(hasDifficulty(1))),6) preference(1,(1,10),1,for(atom(hasCost(2))),8) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasPrepTime(2))),7) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(30,better,32) output(39,better,18) output(50,better,58) output(66,better,32) output(67,better,66) output(67,better,30) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,69) output(84,better,61) output(21,worse,50) output(30,worse,17) output(66,worse,17) output(32,worse,17) output(32,worse,69) output(32,worse,61) output(69,eq,61) output(67,eq,84) output(21,eq,58) output(84,eq,17) output(67,eq,17) output(30,eq,69) output(66,eq,69) output(30,eq,61) output(66,eq,61)
Optimization: 15 8
Answer: 7
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrep(5))),7) preference(1,(1,3),1,for(atom(hasPrep(0))),1) preference(1,(1,6),1,for(atom(hasDifficulty(1))),6) preference(1,(1,8),1,for(atom(hasPrepTime(3))),3) preference(1,(1,10),1,for(atom(hasCost(2))),8) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasPrepTime(2))),7) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,58) output(30,better,32) output(39,better,18) output(50,better,58) output(66,better,32) output(67,better,66) output(67,better,30) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,69) output(84,better,61) output(21,worse,50) output(30,worse,17) output(66,worse,17) output(32,worse,17) output(32,worse,69) output(32,worse,61) output(69,eq,61) output(67,eq,84) output(84,eq,17) output(67,eq,17) output(30,eq,69) output(66,eq,69) output(30,eq,61) output(66,eq,61)
Optimization: 14 9
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(0))),6) preference(1,(1,3),1,for(atom(hasPrep(1))),5) preference(1,(1,4),1,for(atom(hasPrep(5))),7) preference(1,(1,5),1,for(atom(hasPrepTime(2))),6) preference(1,(1,6),1,for(atom(hasPrep(7))),6) preference(1,(1,7),1,for(atom(hasCost(2))),7) preference(1,(1,8),1,for(atom(hasCost(1))),3) preference(1,(1,9),1,for(atom(hasPrepTime(1))),7) preference(1,(1,10),1,for(atom(hasPrep(2))),6) preference(1,(1,11),1,for(atom(hasPrep(4))),4) preference(1,(1,12),1,for(atom(hasPrepTime(3))),3) preference(1,(1,13),1,for(atom(hasPrep(6))),7) preference(1,(1,14),1,for(atom(hasDifficulty(1))),8) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(21,better,50) output(21,better,58) output(30,better,69) output(39,better,18) output(50,better,58) output(66,better,69) output(67,better,66) output(67,better,30) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(32,better,17) output(32,better,69) output(32,better,61) output(30,worse,32) output(30,worse,17) output(30,worse,61) output(66,worse,32) output(66,worse,17) output(66,worse,61) output(67,worse,84) output(67,worse,32) output(69,worse,61) output(71,worse,7) output(17,eq,61) output(67,eq,17) output(67,eq,61)
Optimization: 13 13
Answer: 9
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrep(5))),7) preference(1,(1,3),1,for(atom(hasPrep(0))),1) preference(1,(1,6),1,for(atom(hasDifficulty(1))),6) preference(1,(1,8),1,for(atom(hasPrep(4))),8) preference(1,(1,10),1,for(atom(hasCost(2))),8) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasPrepTime(2))),7) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(30,better,32) output(30,better,69) output(39,better,18) output(50,better,58) output(66,better,32) output(66,better,69) output(67,better,66) output(67,better,30) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,69) output(84,better,61) output(32,better,69) output(21,worse,50) output(30,worse,17) output(66,worse,17) output(69,worse,61) output(32,worse,17) output(32,worse,61) output(67,eq,84) output(21,eq,58) output(84,eq,17) output(67,eq,17) output(30,eq,61) output(66,eq,61)
Optimization: 12 9
Progression : [ 2;12] (Error: 5)
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(2))),6) preference(1,(1,2),1,for(atom(hasPrepTime(3))),3) preference(1,(1,3),1,for(atom(hasPrepTime(2))),8) preference(1,(1,4),1,for(atom(hasPrep(6))),6) preference(1,(1,5),1,for(atom(hasDifficulty(1))),6) preference(1,(1,6),1,for(atom(hasCost(2))),4) preference(1,(1,7),1,for(atom(hasPrep(4))),7) preference(1,(1,8),1,for(atom(hasPrep(0))),3) preference(1,(1,9),1,for(atom(hasPrep(5))),1) preference(1,(1,11),1,for(atom(hasCost(1))),6) preference(1,(1,12),1,for(atom(hasPrep(1))),1) preference(1,(1,13),1,for(atom(hasPrepTime(1))),6) preference(1,less(weight)) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,58) output(30,better,32) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(66,better,32) output(66,better,69) output(67,better,66) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(32,better,69) output(21,worse,50) output(66,worse,17) output(66,worse,61) output(67,worse,84) output(69,worse,61) output(32,worse,17) output(32,worse,61) output(10,eq,39) output(30,eq,17) output(67,eq,30) output(67,eq,17)
Optimization: 11 12
Answer: 11
preference(1,(1,2),1,for(atom(hasCost(2))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),6) preference(1,(1,5),1,for(atom(hasCost(1))),3) preference(1,(1,6),1,for(atom(hasPrep(6))),2) preference(1,(1,7),1,for(atom(hasPrep(5))),8) preference(1,(1,8),1,for(atom(hasPrep(4))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),1) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasPrep(0))),5) preference(1,(1,12),1,for(atom(hasPrepTime(3))),3) preference(1,(1,13),1,for(atom(hasDifficulty(1))),7) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(66,better,32) output(66,better,17) output(66,better,69) output(67,better,32) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(32,better,69) output(17,worse,61) output(21,worse,50) output(67,worse,84) output(67,worse,66) output(67,worse,30) output(67,worse,61) output(69,worse,61) output(32,worse,17) output(32,worse,61) output(67,eq,17) output(66,eq,61)
Optimization: 11 11
Progression : [ 3;11] (Error: 2.66667)
Answer: 12
preference(1,(1,1),1,for(atom(hasPrepTime(1))),3) preference(1,(1,2),1,for(atom(hasPrepTime(3))),7) preference(1,(1,5),1,for(atom(hasPrep(4))),8) preference(1,(1,6),1,for(atom(hasPrep(5))),1) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,10),1,for(atom(hasPrep(2))),3) preference(1,(1,11),1,for(atom(hasPrep(0))),7) preference(1,(1,12),1,for(atom(hasPrepTime(2))),1) preference(1,(1,13),1,for(atom(hasCost(1))),2) preference(1,(1,14),1,for(atom(hasDifficulty(1))),6) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,58) output(30,better,32) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(66,better,69) output(67,better,84) output(67,better,66) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,66) output(84,better,32) output(84,better,69) output(84,better,61) output(32,better,69) output(32,better,61) output(66,worse,32) output(66,worse,17) output(69,worse,61) output(84,worse,30) output(84,worse,17) output(32,worse,17) output(21,eq,50) output(30,eq,17) output(67,eq,30) output(67,eq,17) output(66,eq,61)
Optimization: 11 10
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(5))),4) preference(1,(1,2),1,for(atom(hasPrep(4))),4) preference(1,(1,3),1,for(atom(hasPrep(6))),8) preference(1,(1,4),1,for(atom(hasPrep(3))),1) preference(1,(1,5),1,for(atom(hasPrepTime(1))),8) preference(1,(1,7),1,for(atom(hasPrep(7))),5) preference(1,(1,8),1,for(atom(hasCost(2))),4) preference(1,(1,9),1,for(atom(hasPrep(2))),3) preference(1,(1,10),1,for(atom(hasDifficulty(2))),3) preference(1,(1,11),1,for(atom(hasPrep(0))),3) preference(1,(1,12),1,for(atom(hasPrepTime(3))),5) preference(1,(1,13),1,for(atom(hasPrep(1))),8) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,50) output(21,better,58) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(66,better,69) output(67,better,66) output(67,better,30) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(32,better,69) output(32,better,61) output(30,worse,32) output(30,worse,17) output(66,worse,32) output(66,worse,17) output(67,worse,84) output(69,worse,61) output(32,eq,17) output(67,eq,17) output(66,eq,61) output(67,eq,32)
Optimization: 10 12
Progression : [ 4;10] (Error: 1.5)
Answer: 14
preference(1,(1,1),1,for(atom(hasPrep(6))),3) preference(1,(1,2),1,for(atom(hasPrep(5))),4) preference(1,(1,3),1,for(atom(hasPrep(7))),6) preference(1,(1,4),1,for(atom(hasCost(2))),8) preference(1,(1,6),1,for(atom(hasPrepTime(3))),3) preference(1,(1,7),1,for(atom(hasCost(1))),5) preference(1,(1,8),1,for(atom(hasPrep(0))),2) preference(1,(1,9),1,for(atom(hasPrep(2))),2) preference(1,(1,10),1,for(atom(hasPrepTime(1))),3) preference(1,(1,12),1,for(atom(hasDifficulty(1))),1) preference(1,(1,14),1,for(atom(hasPrep(4))),8) preference(1,less(weight)) output(17,better,69) output(17,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(66,better,32) output(66,better,69) output(67,better,66) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(32,better,69) output(10,worse,39) output(10,worse,18) output(66,worse,17) output(67,worse,84) output(67,worse,30) output(69,worse,61) output(32,worse,17) output(32,worse,61) output(67,eq,17) output(66,eq,61)
Optimization: 10 11
Progression : [ 5;10] (Error: 1)
Answer: 15
preference(1,(1,2),1,for(atom(hasCost(2))),7) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),6) preference(1,(1,5),1,for(atom(hasPrep(0))),4) preference(1,(1,6),1,for(atom(hasPrep(6))),6) preference(1,(1,8),1,for(atom(hasPrep(7))),8) preference(1,(1,10),1,for(atom(hasPrep(2))),2) preference(1,(1,11),1,for(atom(hasPrep(4))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),4) preference(1,(1,13),1,for(atom(hasPrep(5))),5) preference(1,(1,14),1,for(atom(hasPrepTime(2))),4) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,69) output(39,better,18) output(50,better,58) output(66,better,32) output(66,better,69) output(67,better,66) output(67,better,30) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(32,better,69) output(30,worse,17) output(66,worse,17) output(67,worse,84) output(69,worse,61) output(32,worse,17) output(32,worse,61) output(67,eq,17) output(30,eq,61) output(66,eq,61)
Optimization: 9 11
Progression : [6;9] (Error: 0.5)
Progression : [7;9] (Error: 0.285714)
Answer: 16
preference(1,(1,1),1,for(atom(hasPrep(6))),2) preference(1,(1,2),1,for(atom(hasPrep(0))),8) preference(1,(1,3),1,for(atom(hasPrepTime(1))),2) preference(1,(1,4),1,for(atom(hasDifficulty(1))),3) preference(1,(1,6),1,for(atom(hasCost(2))),5) preference(1,(1,7),1,for(atom(hasPrepTime(3))),6) preference(1,(1,8),1,for(atom(hasPrep(2))),1) preference(1,(1,9),1,for(atom(hasPrep(5))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),5) preference(1,(1,11),1,for(atom(hasCost(1))),4) preference(1,(1,13),1,for(atom(hasPrep(4))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),2) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(67,better,66) output(67,better,61) output(67,better,69) output(69,better,61) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(32,better,17) output(32,better,69) output(32,better,61) output(66,worse,32) output(66,worse,17) output(66,worse,69) output(67,worse,84) output(67,worse,30) output(67,worse,32) output(67,eq,17) output(66,eq,61)
Optimization: 8 12
Progression : [8;8] (Error: 0)
Progression : 8 [ 1;12] (Error: 11)
Answer: 17
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,3),1,for(atom(hasPrep(4))),7) preference(1,(1,4),1,for(atom(hasPrepTime(3))),8) preference(1,(1,5),1,for(atom(hasCost(2))),5) preference(1,(1,6),1,for(atom(hasPrep(2))),1) preference(1,(1,8),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrep(6))),3) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasCost(1))),4) preference(1,(1,13),1,for(atom(hasPrepTime(1))),3) preference(1,(1,14),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(66,better,32) output(66,better,69) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,69) output(84,better,61) output(32,better,69) output(30,worse,17) output(66,worse,17) output(69,worse,61) output(84,worse,17) output(32,worse,17) output(32,worse,61) output(67,eq,17) output(66,eq,61)
Optimization: 8 11
Progression : 8 [ 2;11] (Error: 4.5)
Answer: 18
preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrepTime(1))),6) preference(1,(1,5),1,for(atom(hasCost(1))),3) preference(1,(1,6),1,for(atom(hasCost(2))),5) preference(1,(1,7),1,for(atom(hasPrep(4))),4) preference(1,(1,8),1,for(atom(hasPrep(2))),4) preference(1,(1,11),1,for(atom(hasPrep(0))),2) preference(1,(1,12),1,for(atom(hasDifficulty(1))),3) preference(1,(1,13),1,for(atom(hasPrepTime(3))),8) preference(1,(1,14),1,for(atom(hasPrep(5))),2) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(66,better,69) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,69) output(84,better,61) output(32,better,69) output(32,better,61) output(30,worse,17) output(66,worse,32) output(66,worse,17) output(69,worse,61) output(84,worse,17) output(32,worse,17) output(67,eq,17) output(66,eq,61)
Optimization: 8 10
Answer: 19
preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrepTime(1))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),8) preference(1,(1,6),1,for(atom(hasCost(2))),5) preference(1,(1,8),1,for(atom(hasPrep(4))),4) preference(1,(1,11),1,for(atom(hasPrep(0))),2) preference(1,(1,12),1,for(atom(hasPrep(2))),4) preference(1,(1,13),1,for(atom(hasPrepTime(2))),3) preference(1,(1,14),1,for(atom(hasPrep(5))),2) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(66,better,69) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,69) output(84,better,61) output(32,better,69) output(32,better,61) output(30,worse,17) output(66,worse,32) output(66,worse,17) output(69,worse,61) output(84,worse,17) output(32,worse,17) output(67,eq,17) output(66,eq,61)
Optimization: 8 9
Answer: 20
preference(1,(1,3),1,for(atom(hasPrepTime(3))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),2) preference(1,(1,8),1,for(atom(hasPrep(2))),3) preference(1,(1,9),1,for(atom(hasPrep(6))),7) preference(1,(1,11),1,for(atom(hasCost(2))),4) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,(1,14),1,for(atom(hasPrep(4))),6) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(66,better,32) output(66,better,69) output(67,better,66) output(67,better,32) output(67,better,61) output(67,better,69) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(32,better,69) output(66,worse,17) output(67,worse,84) output(67,worse,30) output(69,worse,61) output(32,worse,17) output(32,worse,61) output(67,eq,17) output(66,eq,61)
Optimization: 8 8
Answer: 21
preference(1,(1,1),1,for(atom(hasCost(2))),3) preference(1,(1,2),1,for(atom(hasPrep(6))),2) preference(1,(1,5),1,for(atom(hasPrep(4))),3) preference(1,(1,8),1,for(atom(hasPrepTime(1))),2) preference(1,(1,9),1,for(atom(hasPrep(0))),4) preference(1,(1,11),1,for(atom(hasPrepTime(3))),4) preference(1,(1,14),1,for(atom(hasPrep(2))),1) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(17,better,69) output(17,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,69) output(30,better,61) output(39,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,32) output(67,better,61) output(67,better,69) output(69,better,61) output(71,better,7) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,69) output(84,better,61) output(32,better,69) output(32,better,61) output(30,worse,17) output(66,worse,32) output(66,worse,17) output(66,worse,69) output(84,worse,17) output(32,worse,17) output(67,eq,17) output(66,eq,61)
Optimization: 8 7
Progression : 8 [3;7] (Error: 1.33333)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.031 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 21+
  Optimum    : unknown
Optimization : 8 7
Bounds       : 8 [3;7]
Calls        : 1
Time         : 297.685s (Solving: 296.07s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1185.738s
Threads      : 4        (Winner: 4)

Choices      : 9212616  (Domain: 866658)
Conflicts    : 8402875  (Analyzed: 8402865)
Restarts     : 7146     (Average: 1175.88 Last: 358056)
Model-Level  : 31.3    
Problems     : 17       (Average Length: 0.24 Splits: 0)
Lemmas       : 8620546  (Deleted: 8238128)
  Binary     : 2136     (Ratio:   0.02%)
  Ternary    : 4742     (Ratio:   0.06%)
  Conflict   : 8402863  (Average Length:  274.8 Ratio:  97.47%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 217683   (Average Length:  276.7 Ratio:   2.53%) 
  Distributed: 72582    (Ratio:   0.86% Average LBD: 3.85) 
  Integrated : 217746   (Ratio: 300.00% Unit: 145 Average Jumps: 5.27)
Backjumps    : 8402865  (Average:  1.08 Max:  49 Sum: 9112899)
  Executed   : 8402860  (Average:  1.08 Max:  49 Sum: 9112874 Ratio: 100.00%)
  Bounded    : 5        (Average:  5.00 Max:   9 Sum:     25 Ratio:   0.00%)

Rules        : 97799   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8944    
Bodies       : 5610    
  Sum        : 63      
  Count      : 14      
Equivalences : 6209     (Atom=Atom: 361 Body=Body: 161 Other: 5687)
Tight        : Yes
Variables    : 4785     (Eliminated:    0 Frozen: 3315)
Constraints  : 96801    (Binary:  96.8% Ternary:   1.6% Other:   1.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  8 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCost(2)) ; 
  3 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(6)) ; 
  8 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(4)) ; 
  1 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  1 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(7)) ; 
  4 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(2)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(2)) ; 
  4 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(4)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(2)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(0)) ; 
  4 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasCost(1)) ; 
  5 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  4 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(2)) 
}.
