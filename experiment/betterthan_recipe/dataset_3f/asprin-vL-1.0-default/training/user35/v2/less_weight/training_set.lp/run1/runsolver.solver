asprin_vL version 1.0
Reading from stdin
-:1227:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1237:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1252:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1333:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1594:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1607:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1784:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1913:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1985:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1989:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1989:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1995:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2094:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2120:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2240:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2274:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2296:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1144:1-16: info: no atoms over signature occur in program:
  output/3

-:1136:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1137:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(71,eq,76) output(76,eq,67) output(67,eq,51) output(51,eq,52) output(57,eq,8) output(91,eq,55) output(60,eq,30) output(30,eq,76) output(78,eq,71) output(71,eq,98) output(98,eq,53) output(17,eq,99) output(71,eq,53) output(78,eq,98) output(60,eq,76) output(67,eq,52) output(76,eq,51) output(71,eq,67) output(30,eq,67) output(78,eq,76) output(60,eq,67) output(78,eq,67) output(71,eq,51) output(30,eq,51) output(60,eq,51) output(78,eq,51) output(76,eq,52) output(71,eq,52) output(30,eq,52) output(78,eq,53) output(60,eq,52) output(78,eq,52)
Optimization: 32 0
Answer: 2
preference(1,(1,2),1,for(atom(hasPrep(1))),8) preference(1,(1,8),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(17,better,99) output(60,better,30) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(76,better,51) output(76,better,52) output(30,worse,76) output(30,worse,67) output(57,worse,8) output(71,worse,76) output(71,worse,53) output(71,worse,67) output(78,worse,76) output(78,worse,67) output(78,worse,53) output(98,worse,53) output(76,eq,67) output(51,eq,52) output(91,eq,55) output(78,eq,71) output(71,eq,98) output(78,eq,98) output(60,eq,76) output(60,eq,67) output(71,eq,51) output(30,eq,51) output(78,eq,51) output(71,eq,52) output(30,eq,52) output(78,eq,52)
Optimization: 24 2
Answer: 3
preference(1,(1,1),1,for(atom(hasPrep(6))),8) preference(1,(1,2),1,for(atom(hasPrepTime(1))),8) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasPrep(1))),8) preference(1,(1,6),1,for(atom(hasPrepTime(3))),8) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,8),1,for(atom(hasDifficulty(2))),8) preference(1,(1,9),1,for(atom(hasPrep(0))),8) preference(1,(1,10),1,for(atom(hasPrep(3))),8) preference(1,(1,11),1,for(atom(hasPrepTime(2))),8) preference(1,(1,12),1,for(atom(hasPrep(4))),8) preference(1,(1,13),1,for(atom(hasPrep(7))),8) preference(1,(1,14),1,for(atom(hasPrep(5))),2) preference(1,less(weight)) output(30,better,76) output(30,better,67) output(57,better,8) output(60,better,76) output(60,better,67) output(71,better,76) output(71,better,67) output(78,better,76) output(78,better,67) output(17,worse,99) output(67,worse,51) output(67,worse,52) output(76,worse,51) output(76,worse,52) output(76,eq,67) output(51,eq,52) output(91,eq,55) output(60,eq,30) output(78,eq,71) output(71,eq,98) output(98,eq,53) output(71,eq,53) output(78,eq,98) output(71,eq,51) output(30,eq,51) output(60,eq,51) output(78,eq,51) output(71,eq,52) output(30,eq,52) output(78,eq,53) output(60,eq,52) output(78,eq,52)
Optimization: 23 14
Answer: 4
preference(1,(1,1),1,for(atom(hasDifficulty(1))),3) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,3),1,for(atom(hasPrepTime(3))),4) preference(1,(1,4),1,for(atom(hasPrep(5))),1) preference(1,(1,5),1,for(atom(hasPrep(0))),2) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasPrep(1))),2) preference(1,(1,8),1,for(atom(hasPrep(6))),2) preference(1,(1,9),1,for(atom(hasCost(2))),2) preference(1,(1,10),1,for(atom(hasDifficulty(2))),4) preference(1,(1,11),1,for(atom(hasPrep(7))),1) preference(1,(1,12),1,for(atom(hasPrep(2))),4) preference(1,(1,13),1,for(atom(hasPrep(4))),1) preference(1,(1,14),1,for(atom(hasPrepTime(1))),2) preference(1,less(weight)) output(30,better,67) output(51,better,52) output(57,better,8) output(60,better,67) output(71,better,67) output(76,better,67) output(76,better,52) output(78,better,71) output(78,better,76) output(78,better,67) output(78,better,53) output(78,better,52) output(91,better,55) output(98,better,53) output(17,worse,99) output(30,worse,76) output(30,worse,51) output(60,worse,76) output(60,worse,51) output(67,worse,51) output(67,worse,52) output(71,worse,76) output(71,worse,98) output(71,worse,51) output(76,worse,51) output(78,worse,98) output(78,worse,51) output(60,eq,30) output(71,eq,53) output(71,eq,52) output(30,eq,52) output(60,eq,52)
Optimization: 18 14
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(6))),8) preference(1,(1,2),1,for(atom(hasPrepTime(1))),8) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasPrep(1))),8) preference(1,(1,6),1,for(atom(hasPrepTime(3))),8) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,8),1,for(atom(hasDifficulty(2))),8) preference(1,(1,9),1,for(atom(hasPrep(0))),8) preference(1,(1,10),1,for(atom(hasPrep(3))),8) preference(1,(1,11),1,for(atom(hasPrepTime(2))),1) preference(1,(1,12),1,for(atom(hasPrep(4))),8) preference(1,(1,13),1,for(atom(hasPrep(7))),8) preference(1,(1,14),1,for(atom(hasPrep(5))),2) preference(1,less(weight)) output(30,better,76) output(30,better,67) output(51,better,52) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,52) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,52) output(76,better,67) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,53) output(78,better,52) output(17,worse,99) output(30,worse,51) output(67,worse,51) output(67,worse,52) output(76,worse,51) output(76,worse,52) output(91,worse,55) output(78,eq,71) output(98,eq,53) output(71,eq,51) output(60,eq,51) output(78,eq,51) output(30,eq,52)
Optimization: 13 14
Answer: 6
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrepTime(2))),1) preference(1,(1,3),1,for(atom(hasPrep(1))),1) preference(1,(1,4),1,for(atom(hasPrep(7))),1) preference(1,(1,5),1,for(atom(hasPrep(5))),8) preference(1,(1,6),1,for(atom(hasPrepTime(1))),7) preference(1,(1,7),1,for(atom(hasDifficulty(1))),7) preference(1,(1,8),1,for(atom(hasPrep(3))),1) preference(1,(1,10),1,for(atom(hasPrep(4))),1) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasCost(2))),4) preference(1,(1,13),1,for(atom(hasDifficulty(2))),1) preference(1,less(weight)) output(30,better,76) output(30,better,67) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(71,better,76) output(71,better,98) output(71,better,67) output(76,better,67) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(17,worse,99) output(67,worse,51) output(67,worse,52) output(76,worse,51) output(76,worse,52) output(98,worse,53) output(51,eq,52) output(71,eq,53) output(71,eq,51) output(30,eq,51) output(71,eq,52) output(30,eq,52)
Optimization: 12 12
Progression : [ 2;12] (Error: 5)
Answer: 7
preference(1,(1,3),1,for(atom(hasDifficulty(1))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),3) preference(1,(1,5),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasDifficulty(2))),1) preference(1,(1,8),1,for(atom(hasPrep(7))),6) preference(1,(1,9),1,for(atom(hasPrep(6))),4) preference(1,(1,10),1,for(atom(hasPrep(1))),3) preference(1,(1,11),1,for(atom(hasPrepTime(2))),6) preference(1,(1,12),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasCost(1))),2) preference(1,less(weight)) output(17,better,99) output(51,better,52) output(67,better,51) output(67,better,52) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,51) output(76,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(30,worse,76) output(30,worse,67) output(30,worse,51) output(60,worse,30) output(60,worse,76) output(60,worse,67) output(60,worse,51) output(60,worse,52) output(98,worse,53) output(71,eq,76) output(57,eq,8) output(30,eq,52)
Optimization: 12 11
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(1))),3) preference(1,(1,2),1,for(atom(hasDifficulty(2))),2) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,4),1,for(atom(hasPrep(5))),5) preference(1,(1,5),1,for(atom(hasPrep(7))),7) preference(1,(1,7),1,for(atom(hasPrepTime(2))),4) preference(1,(1,8),1,for(atom(hasPrepTime(3))),3) preference(1,(1,9),1,for(atom(hasCost(2))),2) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,13),1,for(atom(hasDifficulty(1))),4) preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(30,better,76) output(30,better,67) output(30,better,51) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(71,better,76) output(71,better,98) output(71,better,67) output(71,better,51) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(17,worse,99) output(51,worse,52) output(67,worse,52) output(71,worse,53) output(76,worse,67) output(76,worse,51) output(76,worse,52) output(98,worse,53) output(67,eq,51) output(71,eq,52) output(30,eq,52)
Optimization: 11 11
Answer: 9
preference(1,(1,1),1,for(atom(hasPrepTime(2))),7) preference(1,(1,2),1,for(atom(hasPrepTime(3))),5) preference(1,(1,3),1,for(atom(hasPrep(0))),4) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,6),1,for(atom(hasDifficulty(2))),7) preference(1,(1,9),1,for(atom(hasPrep(6))),1) preference(1,(1,10),1,for(atom(hasPrep(1))),3) preference(1,(1,12),1,for(atom(hasPrep(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(1))),6) preference(1,(1,14),1,for(atom(hasCost(1))),2) preference(1,less(weight)) output(17,better,99) output(51,better,52) output(60,better,30) output(60,better,52) output(67,better,52) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,51) output(76,better,52) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(30,worse,76) output(30,worse,67) output(30,worse,51) output(57,worse,8) output(60,worse,76) output(60,worse,67) output(60,worse,51) output(67,worse,51) output(78,worse,71) output(98,worse,53) output(30,eq,52)
Optimization: 11 10
Answer: 10
preference(1,(1,1),1,for(atom(hasDifficulty(1))),3) preference(1,(1,2),1,for(atom(hasPrepTime(3))),3) preference(1,(1,4),1,for(atom(hasPrep(1))),6) preference(1,(1,6),1,for(atom(hasPrep(5))),8) preference(1,(1,7),1,for(atom(hasPrep(7))),4) preference(1,(1,8),1,for(atom(hasPrep(2))),2) preference(1,(1,9),1,for(atom(hasCost(1))),3) preference(1,(1,10),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasPrepTime(1))),1) preference(1,(1,12),1,for(atom(hasPrepTime(2))),5) preference(1,(1,13),1,for(atom(hasPrep(0))),5) preference(1,less(weight)) output(30,better,67) output(51,better,52) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(71,better,76) output(71,better,98) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,52) output(91,better,55) output(17,worse,99) output(30,worse,76) output(30,worse,51) output(67,worse,51) output(67,worse,52) output(71,worse,53) output(78,worse,53) output(98,worse,53) output(76,eq,51) output(30,eq,52)
Optimization: 10 11
Answer: 11
preference(1,(1,1),1,for(atom(hasDifficulty(1))),3) preference(1,(1,2),1,for(atom(hasPrepTime(3))),3) preference(1,(1,4),1,for(atom(hasPrep(1))),6) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasPrep(7))),4) preference(1,(1,8),1,for(atom(hasDifficulty(2))),5) preference(1,(1,9),1,for(atom(hasCost(1))),3) preference(1,(1,10),1,for(atom(hasPrep(2))),6) preference(1,(1,12),1,for(atom(hasPrepTime(2))),5) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(30,better,67) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,51) output(76,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(17,worse,99) output(30,worse,76) output(67,worse,51) output(67,worse,52) output(51,eq,52) output(98,eq,53) output(30,eq,51) output(30,eq,52)
Optimization: 8 10
Answer: 12
preference(1,(1,1),1,for(atom(hasPrepTime(3))),1) preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,3),1,for(atom(hasCost(2))),6) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrep(7))),7) preference(1,(1,7),1,for(atom(hasPrepTime(2))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,12),1,for(atom(hasPrep(1))),2) preference(1,(1,13),1,for(atom(hasPrep(5))),3) preference(1,(1,14),1,for(atom(hasDifficulty(1))),8) preference(1,less(weight)) output(17,better,99) output(30,better,76) output(30,better,67) output(30,better,51) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(71,better,76) output(71,better,98) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,51) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(51,worse,52) output(67,worse,52) output(71,worse,53) output(76,worse,52) output(98,worse,53) output(76,eq,67) output(30,eq,52)
Optimization: 7 10
Answer: 13
preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasCost(2))),6) preference(1,(1,7),1,for(atom(hasPrepTime(2))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),3) preference(1,(1,13),1,for(atom(hasPrep(5))),3) preference(1,(1,14),1,for(atom(hasDifficulty(1))),8) preference(1,less(weight)) output(17,better,99) output(30,better,76) output(30,better,67) output(30,better,51) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,51) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(51,worse,52) output(67,worse,52) output(76,worse,52) output(91,worse,55) output(98,worse,53) output(30,eq,52)
Optimization: 6 9
Answer: 14
preference(1,(1,1),1,for(atom(hasDifficulty(1))),3) preference(1,(1,2),1,for(atom(hasPrepTime(3))),3) preference(1,(1,3),1,for(atom(hasPrep(2))),6) preference(1,(1,4),1,for(atom(hasPrep(1))),6) preference(1,(1,6),1,for(atom(hasPrep(5))),8) preference(1,(1,7),1,for(atom(hasPrep(7))),4) preference(1,(1,9),1,for(atom(hasCost(1))),3) preference(1,(1,12),1,for(atom(hasDifficulty(2))),5) preference(1,(1,13),1,for(atom(hasPrep(0))),6) preference(1,(1,14),1,for(atom(hasPrepTime(2))),1) preference(1,less(weight)) output(17,better,99) output(30,better,76) output(30,better,67) output(30,better,51) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,51) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(51,worse,52) output(67,worse,52) output(76,worse,52) output(98,eq,53) output(30,eq,52)
Optimization: 5 10
Answer: 15
preference(1,(1,1),1,for(atom(hasPrep(5))),8) preference(1,(1,3),1,for(atom(hasCost(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),5) preference(1,(1,5),1,for(atom(hasDifficulty(1))),5) preference(1,(1,6),1,for(atom(hasCost(1))),6) preference(1,(1,7),1,for(atom(hasPrepTime(2))),3) preference(1,(1,8),1,for(atom(hasPrep(0))),7) preference(1,(1,9),1,for(atom(hasPrep(2))),7) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),7) preference(1,(1,14),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(17,better,99) output(30,better,67) output(30,better,51) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,51) output(76,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(98,better,53) output(30,worse,76) output(51,worse,52) output(67,worse,52) output(30,eq,52)
Optimization: 4 11
Progression : [4;4] (Error: 0)
Answer: 16
preference(1,(1,2),1,for(atom(hasPrep(0))),7) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasCost(1))),2) preference(1,(1,7),1,for(atom(hasDifficulty(2))),8) preference(1,(1,10),1,for(atom(hasPrep(1))),7) preference(1,(1,11),1,for(atom(hasDifficulty(1))),4) preference(1,(1,12),1,for(atom(hasPrepTime(3))),4) preference(1,(1,13),1,for(atom(hasPrep(7))),8) preference(1,(1,14),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(17,better,99) output(30,better,67) output(30,better,51) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,51) output(76,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(98,better,53) output(30,worse,76) output(51,worse,52) output(67,worse,52) output(30,eq,52)
Optimization: 4 10
Progression : 4 [ 1;10] (Error: 9)
Progression : 4 [ 2;10] (Error: 4)
Answer: 17
preference(1,(1,2),1,for(atom(hasPrep(1))),7) preference(1,(1,4),1,for(atom(hasCost(1))),1) preference(1,(1,5),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasPrepTime(2))),2) preference(1,(1,9),1,for(atom(hasPrep(5))),8) preference(1,(1,10),1,for(atom(hasDifficulty(2))),4) preference(1,(1,11),1,for(atom(hasPrep(0))),7) preference(1,(1,14),1,for(atom(hasPrepTime(3))),1) preference(1,less(weight)) output(17,better,99) output(30,better,67) output(30,better,51) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,51) output(76,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(98,better,53) output(30,worse,76) output(51,worse,52) output(67,worse,52) output(30,eq,52)
Optimization: 4 9
Progression : 4 [3;9] (Error: 2)
Answer: 18
preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasPrep(5))),8) preference(1,(1,6),1,for(atom(hasPrep(1))),7) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasCost(1))),1) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,13),1,for(atom(hasPrepTime(2))),2) preference(1,(1,14),1,for(atom(hasPrep(0))),7) preference(1,less(weight)) output(17,better,99) output(30,better,67) output(30,better,51) output(57,better,8) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(76,better,67) output(76,better,51) output(76,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(91,better,55) output(98,better,53) output(30,worse,76) output(51,worse,52) output(67,worse,52) output(30,eq,52)
Optimization: 4 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.026 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 18+
  Optimum    : unknown
Optimization : 4 8
Bounds       : 4 [3;8]
Calls        : 1
Time         : 297.308s (Solving: 295.70s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1184.159s
Threads      : 4        (Winner: 4)

Choices      : 8389877  (Domain: 872691)
Conflicts    : 7710576  (Analyzed: 7710569)
Restarts     : 6566     (Average: 1174.32 Last: 610690)
Model-Level  : 26.8    
Problems     : 14       (Average Length: 0.29 Splits: 0)
Lemmas       : 7974997  (Deleted: 7647633)
  Binary     : 443      (Ratio:   0.01%)
  Ternary    : 11573    (Ratio:   0.15%)
  Conflict   : 7710567  (Average Length:  194.1 Ratio:  96.68%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 264430   (Average Length:  181.7 Ratio:   3.32%) 
  Distributed: 88287    (Ratio:   1.15% Average LBD: 3.84) 
  Integrated : 264861   (Ratio: 300.00% Unit: 299 Average Jumps: 4.64)
Backjumps    : 7710569  (Average:  1.08 Max:  56 Sum: 8317202)
  Executed   : 7710564  (Average:  1.08 Max:  56 Sum: 8317142 Ratio: 100.00%)
  Bounded    : 5        (Average: 12.00 Max:  17 Sum:     60 Ratio:   0.00%)

Rules        : 93881   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8748    
Bodies       : 5590    
  Sum        : 61      
  Count      : 14      
Equivalences : 6128     (Atom=Atom: 336 Body=Body: 148 Other: 5644)
Tight        : Yes
Variables    : 4780     (Eliminated:    0 Frozen: 3310)
Constraints  : 93070    (Binary:  96.7% Ternary:   1.6% Other:   1.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrep(6)) ; 
  2 :: atom(hasCost(2)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(3)) ; 
  1 :: atom(hasPrep(4)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasCost(2)) ; 
  1 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(0)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(5)) ; 
  2 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(1)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(5)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(2)) ; 
  3 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(7)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCost(1)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(7)) ; 
  3 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(1)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(1)) ; 
  1 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  1 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(0)) 
}.
