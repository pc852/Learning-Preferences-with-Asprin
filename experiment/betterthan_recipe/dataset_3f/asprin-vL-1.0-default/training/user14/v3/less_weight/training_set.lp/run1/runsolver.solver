asprin_vL version 1.0
Reading from stdin
-:1220:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1230:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1245:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1326:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1587:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1600:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1777:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1906:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1978:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1982:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1982:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1988:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2087:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2113:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2233:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2267:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2289:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1137:1-16: info: no atoms over signature occur in program:
  output/3

-:1129:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1130:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(84,eq,69) output(69,eq,61) output(39,eq,18) output(30,eq,32) output(32,eq,17) output(17,eq,7) output(67,eq,50) output(50,eq,39) output(21,eq,66) output(66,eq,58) output(62,eq,10) output(10,eq,32) output(62,eq,32) output(21,eq,58) output(67,eq,39) output(32,eq,7) output(30,eq,17) output(10,eq,17) output(50,eq,18) output(84,eq,61) output(67,eq,18) output(62,eq,17) output(30,eq,7) output(10,eq,7) output(62,eq,7)
Optimization: 25 0
Answer: 2
preference(1,(1,2),1,for(atom(hasDifficulty(1))),7) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(17,worse,7) output(30,worse,7) output(62,worse,10) output(62,worse,7) output(32,worse,7) output(84,eq,69) output(69,eq,61) output(39,eq,18) output(30,eq,32) output(32,eq,17) output(67,eq,50) output(50,eq,39) output(21,eq,66) output(66,eq,58) output(62,eq,32) output(21,eq,58) output(67,eq,39) output(30,eq,17) output(50,eq,18) output(84,eq,61) output(67,eq,18) output(62,eq,17) output(10,eq,7)
Optimization: 23 1
Answer: 3
preference(1,(1,1),1,for(atom(hasPrep(1))),8) preference(1,(1,2),1,for(atom(hasPrep(4))),1) preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasPrep(5))),2) preference(1,(1,9),1,for(atom(hasCost(1))),7) preference(1,(1,10),1,for(atom(hasCost(2))),1) preference(1,(1,14),1,for(atom(hasPrep(6))),8) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(30,better,32) output(30,better,17) output(50,better,39) output(62,better,32) output(84,better,69) output(10,worse,7) output(17,worse,7) output(30,worse,7) output(39,worse,18) output(50,worse,18) output(62,worse,10) output(62,worse,7) output(67,worse,50) output(67,worse,18) output(69,worse,61) output(32,worse,17) output(32,worse,7) output(21,eq,66) output(66,eq,58) output(21,eq,58) output(67,eq,39) output(84,eq,61) output(62,eq,17)
Optimization: 18 8
Answer: 4
preference(1,(1,2),1,for(atom(hasPrep(3))),5) preference(1,(1,4),1,for(atom(hasCost(2))),5) preference(1,less(weight)) output(10,better,32) output(10,better,7) output(17,better,7) output(30,better,32) output(30,better,7) output(39,better,18) output(50,better,18) output(62,better,32) output(62,better,7) output(67,better,18) output(32,worse,17) output(84,eq,69) output(69,eq,61) output(67,eq,50) output(50,eq,39) output(21,eq,66) output(66,eq,58) output(62,eq,10) output(21,eq,58) output(67,eq,39) output(32,eq,7) output(30,eq,17) output(10,eq,17) output(84,eq,61) output(62,eq,17)
Optimization: 15 2
Answer: 5
preference(1,(1,2),1,for(atom(hasPrep(3))),5) preference(1,(1,4),1,for(atom(hasCost(2))),5) preference(1,(1,12),1,for(atom(hasPrep(7))),5) preference(1,less(weight)) output(17,better,7) output(21,better,58) output(30,better,32) output(30,better,7) output(39,better,18) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,7) output(66,better,58) output(67,better,18) output(10,worse,17) output(32,worse,17) output(84,eq,69) output(69,eq,61) output(67,eq,50) output(50,eq,39) output(21,eq,66) output(10,eq,32) output(67,eq,39) output(32,eq,7) output(30,eq,17) output(84,eq,61) output(62,eq,17) output(10,eq,7)
Optimization: 14 3
Answer: 6
preference(1,(1,2),1,for(atom(hasPrep(3))),5) preference(1,(1,4),1,for(atom(hasPrep(7))),5) preference(1,(1,5),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasPrep(4))),5) preference(1,less(weight)) output(17,better,7) output(21,better,58) output(30,better,32) output(30,better,7) output(39,better,18) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,7) output(66,better,58) output(67,better,18) output(84,better,69) output(10,worse,17) output(69,worse,61) output(32,worse,17) output(67,eq,50) output(50,eq,39) output(21,eq,66) output(10,eq,32) output(67,eq,39) output(32,eq,7) output(30,eq,17) output(84,eq,61) output(62,eq,17) output(10,eq,7)
Optimization: 13 4
Answer: 7
preference(1,(1,1),1,for(atom(hasCost(1))),5) preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,7),1,for(atom(hasPrepTime(2))),2) preference(1,(1,10),1,for(atom(hasPrep(5))),1) preference(1,(1,11),1,for(atom(hasPrep(6))),5) preference(1,(1,12),1,for(atom(hasCost(2))),2) preference(1,(1,13),1,for(atom(hasPrepTime(3))),8) preference(1,(1,14),1,for(atom(hasPrep(0))),8) preference(1,less(weight)) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,7) output(67,better,39) output(67,better,18) output(69,better,61) output(84,better,61) output(32,better,7) output(10,worse,32) output(10,worse,17) output(62,worse,10) output(62,worse,32) output(62,worse,17) output(66,worse,58) output(67,worse,50) output(84,eq,69) output(32,eq,17)
Optimization: 9 8
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(1))),6) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),3) preference(1,(1,4),1,for(atom(hasPrep(0))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),4) preference(1,(1,6),1,for(atom(hasCost(1))),6) preference(1,(1,7),1,for(atom(hasPrep(4))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasPrep(7))),6) preference(1,(1,10),1,for(atom(hasDifficulty(1))),6) preference(1,(1,11),1,for(atom(hasPrepTime(1))),3) preference(1,(1,12),1,for(atom(hasDifficulty(2))),5) preference(1,(1,13),1,for(atom(hasPrep(2))),6) preference(1,(1,14),1,for(atom(hasCost(2))),7) preference(1,less(weight)) output(10,better,32) output(10,better,7) output(17,better,7) output(21,better,58) output(30,better,32) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,7) output(66,better,58) output(67,better,39) output(67,better,18) output(84,better,69) output(32,better,7) output(10,worse,17) output(62,worse,17) output(69,worse,61) output(32,worse,17) output(67,eq,50) output(21,eq,66) output(30,eq,17) output(84,eq,61)
Optimization: 8 14
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(1))),6) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),3) preference(1,(1,4),1,for(atom(hasPrep(0))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),4) preference(1,(1,6),1,for(atom(hasCost(1))),6) preference(1,(1,7),1,for(atom(hasPrep(4))),8) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasPrep(7))),6) preference(1,(1,10),1,for(atom(hasDifficulty(1))),6) preference(1,(1,11),1,for(atom(hasPrepTime(1))),3) preference(1,(1,12),1,for(atom(hasDifficulty(2))),3) preference(1,(1,13),1,for(atom(hasPrep(2))),1) preference(1,(1,14),1,for(atom(hasCost(2))),7) preference(1,less(weight)) output(10,better,32) output(10,better,7) output(17,better,7) output(21,better,58) output(30,better,32) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,7) output(66,better,58) output(67,better,50) output(67,better,39) output(67,better,18) output(84,better,69) output(32,better,7) output(10,worse,17) output(62,worse,17) output(69,worse,61) output(84,worse,61) output(32,worse,17) output(21,eq,66) output(30,eq,17)
Optimization: 7 14
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(1))),6) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),3) preference(1,(1,4),1,for(atom(hasPrep(0))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),4) preference(1,(1,6),1,for(atom(hasCost(1))),6) preference(1,(1,8),1,for(atom(hasPrep(4))),8) preference(1,(1,9),1,for(atom(hasPrep(7))),6) preference(1,(1,10),1,for(atom(hasDifficulty(1))),6) preference(1,(1,12),1,for(atom(hasCost(2))),8) preference(1,(1,13),1,for(atom(hasPrep(2))),5) preference(1,(1,14),1,for(atom(hasPrep(5))),3) preference(1,less(weight)) output(10,better,32) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,7) output(66,better,58) output(67,better,50) output(67,better,39) output(67,better,18) output(84,better,69) output(32,better,7) output(10,worse,17) output(62,worse,17) output(69,worse,61) output(84,worse,61) output(32,worse,17) output(30,eq,17)
Optimization: 6 12
Answer: 11
preference(1,(1,5),1,for(atom(hasCost(2))),3) preference(1,(1,7),1,for(atom(hasPrepTime(2))),2) preference(1,(1,8),1,for(atom(hasPrep(5))),8) preference(1,(1,9),1,for(atom(hasPrep(6))),7) preference(1,(1,11),1,for(atom(hasPrep(1))),5) preference(1,(1,12),1,for(atom(hasPrep(0))),8) preference(1,(1,13),1,for(atom(hasDifficulty(1))),5) preference(1,(1,14),1,for(atom(hasCost(1))),5) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(10,better,7) output(17,better,7) output(21,better,66) output(30,better,32) output(30,better,17) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,32) output(62,better,17) output(62,better,7) output(67,better,39) output(67,better,18) output(69,better,61) output(84,better,69) output(84,better,61) output(32,better,7) output(66,worse,58) output(67,worse,50) output(32,worse,17) output(62,eq,10) output(21,eq,58)
Optimization: 5 8
Answer: 12
preference(1,(1,1),1,for(atom(hasPrepTime(2))),6) preference(1,(1,3),1,for(atom(hasPrep(7))),7) preference(1,(1,4),1,for(atom(hasCost(1))),2) preference(1,(1,6),1,for(atom(hasPrep(0))),3) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasCost(2))),7) preference(1,(1,12),1,for(atom(hasPrepTime(3))),2) preference(1,(1,13),1,for(atom(hasDifficulty(1))),2) preference(1,(1,14),1,for(atom(hasPrep(6))),6) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,17) output(62,better,7) output(66,better,58) output(67,better,18) output(69,better,61) output(84,better,61) output(32,better,7) output(67,worse,50) output(32,worse,17) output(84,eq,69) output(67,eq,39)
Optimization: 4 9
Answer: 13
preference(1,(1,1),1,for(atom(hasPrepTime(2))),6) preference(1,(1,3),1,for(atom(hasPrep(4))),1) preference(1,(1,4),1,for(atom(hasCost(1))),2) preference(1,(1,6),1,for(atom(hasPrep(0))),3) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasCost(2))),7) preference(1,(1,12),1,for(atom(hasPrep(7))),7) preference(1,(1,13),1,for(atom(hasDifficulty(1))),2) preference(1,(1,14),1,for(atom(hasPrep(6))),6) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,17) output(62,better,7) output(66,better,58) output(67,better,18) output(69,better,61) output(84,better,69) output(84,better,61) output(32,better,7) output(67,worse,50) output(32,worse,17) output(67,eq,39)
Optimization: 3 9
Answer: 14
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,2),1,for(atom(hasPrep(0))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),8) preference(1,(1,4),1,for(atom(hasCost(1))),6) preference(1,(1,5),1,for(atom(hasDifficulty(1))),6) preference(1,(1,6),1,for(atom(hasPrepTime(3))),4) preference(1,(1,7),1,for(atom(hasCost(2))),5) preference(1,(1,8),1,for(atom(hasPrepTime(1))),8) preference(1,(1,9),1,for(atom(hasPrep(6))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),2) preference(1,(1,13),1,for(atom(hasPrep(4))),3) preference(1,(1,14),1,for(atom(hasPrep(2))),2) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,17) output(62,better,7) output(66,better,58) output(67,better,50) output(67,better,39) output(67,better,18) output(69,better,61) output(84,better,69) output(84,better,61) output(32,better,7) output(32,worse,17) output(30,eq,17)
Optimization: 2 12
Answer: 15
preference(1,(1,1),1,for(atom(hasPrep(5))),3) preference(1,(1,2),1,for(atom(hasPrep(1))),7) preference(1,(1,3),1,for(atom(hasCost(2))),5) preference(1,(1,4),1,for(atom(hasDifficulty(1))),7) preference(1,(1,5),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasPrep(4))),5) preference(1,(1,8),1,for(atom(hasPrep(6))),8) preference(1,(1,9),1,for(atom(hasPrep(7))),4) preference(1,(1,10),1,for(atom(hasPrepTime(2))),8) preference(1,(1,11),1,for(atom(hasCost(1))),7) preference(1,(1,12),1,for(atom(hasPrep(2))),4) preference(1,(1,13),1,for(atom(hasPrepTime(3))),6) preference(1,(1,14),1,for(atom(hasPrepTime(1))),8) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,17) output(62,better,7) output(66,better,58) output(67,better,50) output(67,better,39) output(67,better,18) output(69,better,61) output(84,better,69) output(84,better,61) output(32,better,7) output(32,worse,17)
Optimization: 1 13
Answer: 16
preference(1,(1,1),1,for(atom(hasPrepTime(1))),8) preference(1,(1,2),1,for(atom(hasCost(2))),8) preference(1,(1,3),1,for(atom(hasPrep(2))),2) preference(1,(1,4),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasPrep(0))),7) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasDifficulty(1))),5) preference(1,(1,8),1,for(atom(hasPrep(5))),7) preference(1,(1,9),1,for(atom(hasPrepTime(3))),7) preference(1,(1,10),1,for(atom(hasDifficulty(2))),1) preference(1,(1,11),1,for(atom(hasPrep(6))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),3) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,17) output(62,better,7) output(66,better,58) output(67,better,50) output(67,better,39) output(67,better,18) output(69,better,61) output(84,better,69) output(84,better,61) output(32,better,7) output(32,worse,17)
Optimization: 1 12
Answer: 17
preference(1,(1,1),1,for(atom(hasPrepTime(2))),4) preference(1,(1,2),1,for(atom(hasPrepTime(3))),8) preference(1,(1,3),1,for(atom(hasPrep(6))),6) preference(1,(1,4),1,for(atom(hasPrep(2))),7) preference(1,(1,5),1,for(atom(hasPrepTime(1))),6) preference(1,(1,6),1,for(atom(hasPrep(4))),7) preference(1,(1,7),1,for(atom(hasCost(1))),1) preference(1,(1,9),1,for(atom(hasCost(2))),4) preference(1,(1,10),1,for(atom(hasPrep(5))),8) preference(1,(1,11),1,for(atom(hasPrep(0))),8) preference(1,(1,12),1,for(atom(hasPrep(1))),1) preference(1,(1,13),1,for(atom(hasDifficulty(1))),5) preference(1,(1,14),1,for(atom(hasPrep(7))),7) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,17) output(62,better,7) output(66,better,58) output(67,better,50) output(67,better,39) output(67,better,18) output(69,better,61) output(84,better,69) output(84,better,61) output(32,better,17) output(32,better,7)
Optimization: 0 13
Progression : 0 [ 1;13] (Error: 12)
Progression : 0 [ 2;13] (Error: 5.5)
Answer: 18
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasPrepTime(1))),5) preference(1,(1,3),1,for(atom(hasPrepTime(3))),8) preference(1,(1,4),1,for(atom(hasDifficulty(1))),3) preference(1,(1,6),1,for(atom(hasPrep(6))),6) preference(1,(1,7),1,for(atom(hasPrep(4))),7) preference(1,(1,9),1,for(atom(hasCost(1))),1) preference(1,(1,10),1,for(atom(hasPrep(5))),8) preference(1,(1,11),1,for(atom(hasPrep(2))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),5) preference(1,(1,13),1,for(atom(hasPrepTime(2))),4) preference(1,(1,14),1,for(atom(hasCost(2))),4) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,17) output(62,better,7) output(66,better,58) output(67,better,50) output(67,better,39) output(67,better,18) output(69,better,61) output(84,better,69) output(84,better,61) output(32,better,17) output(32,better,7)
Optimization: 0 12
Answer: 19
preference(1,(1,2),1,for(atom(hasCost(2))),3) preference(1,(1,3),1,for(atom(hasPrep(5))),8) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasPrep(2))),5) preference(1,(1,6),1,for(atom(hasPrepTime(1))),7) preference(1,(1,7),1,for(atom(hasPrepTime(3))),8) preference(1,(1,8),1,for(atom(hasPrep(7))),5) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasCost(1))),1) preference(1,(1,11),1,for(atom(hasPrep(0))),8) preference(1,(1,14),1,for(atom(hasPrep(6))),6) preference(1,less(weight)) output(10,better,32) output(10,better,17) output(10,better,7) output(17,better,7) output(21,better,66) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,7) output(39,better,18) output(50,better,39) output(50,better,18) output(62,better,10) output(62,better,32) output(62,better,17) output(62,better,7) output(66,better,58) output(67,better,50) output(67,better,39) output(67,better,18) output(69,better,61) output(84,better,69) output(84,better,61) output(32,better,17) output(32,better,7)
Optimization: 0 11
Progression : 0 [ 3;11] (Error: 2.66667)
Progression : 0 [ 4;11] (Error: 1.75)
Progression : 0 [ 5;11] (Error: 1.2)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.042 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 19+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 297.315s (Solving: 295.78s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 1183.459s
Threads      : 4        (Winner: 4)

Choices      : 8596264  (Domain: 685295)
Conflicts    : 7852542  (Analyzed: 7852537)
Restarts     : 5339     (Average: 1470.79 Last: 559435)
Model-Level  : 31.9    
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 8094541  (Deleted: 7889905)
  Binary     : 696      (Ratio:   0.01%)
  Ternary    : 9095     (Ratio:   0.11%)
  Conflict   : 7852537  (Average Length:  185.7 Ratio:  97.01%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 242004   (Average Length:   57.8 Ratio:   2.99%) 
  Distributed: 81070    (Ratio:   1.03% Average LBD: 3.75) 
  Integrated : 243210   (Ratio: 300.00% Unit: 2245 Average Jumps: 6.26)
Backjumps    : 7852537  (Average:  1.09 Max:  41 Sum: 8532215)
  Executed   : 7852513  (Average:  1.09 Max:  41 Sum: 8532168 Ratio: 100.00%)
  Bounded    : 24       (Average:  1.96 Max:  24 Sum:     47 Ratio:   0.00%)

Rules        : 84371   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8070    
Bodies       : 5516    
  Sum        : 50      
  Count      : 14      
Equivalences : 3293     (Atom=Atom: 263 Body=Body: 114 Other: 2916)
Tight        : Yes
Variables    : 4765     (Eliminated:    0 Frozen: 3295)
Constraints  : 84212    (Binary:  96.3% Ternary:   1.8% Other:   1.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(3)) ; 
  5 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(3)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(3)) ; 
  5 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(6)) ; 
  2 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(4)) ; 
  2 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCost(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(4)) ; 
  1 :: atom(hasCost(1)) ; 
  4 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(4)) ; 
  1 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(7)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) 
}.
