asprin_vL version 1.0
Reading from stdin
-:1228:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1238:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1253:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1334:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1595:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1608:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1785:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1914:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1986:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1990:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1990:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1996:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2095:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2121:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2241:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2275:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2297:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1145:1-16: info: no atoms over signature occur in program:
  output/3

-:1137:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1138:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(25,eq,64) output(65,eq,52) output(52,eq,69) output(69,eq,67) output(67,eq,72) output(72,eq,42) output(10,eq,14) output(14,eq,13) output(13,eq,51) output(18,eq,65) output(65,eq,25) output(25,eq,42) output(65,eq,42) output(18,eq,25) output(14,eq,51) output(10,eq,13) output(67,eq,42) output(69,eq,72) output(52,eq,67) output(65,eq,69) output(18,eq,52) output(65,eq,64) output(18,eq,64) output(18,eq,69) output(65,eq,67) output(18,eq,67) output(52,eq,72) output(65,eq,72) output(69,eq,42) output(52,eq,42) output(10,eq,51) output(18,eq,42) output(18,eq,72)
Optimization: 33 0
Answer: 2
preference(1,(1,8),1,for(atom(hasPrep(4))),8) preference(1,less(weight)) output(52,better,69) output(18,better,69) output(65,better,69) output(69,worse,67) output(69,worse,72) output(69,worse,42) output(25,eq,64) output(65,eq,52) output(67,eq,72) output(72,eq,42) output(10,eq,14) output(14,eq,13) output(13,eq,51) output(18,eq,65) output(65,eq,25) output(25,eq,42) output(65,eq,42) output(18,eq,25) output(14,eq,51) output(10,eq,13) output(67,eq,42) output(52,eq,67) output(18,eq,52) output(65,eq,64) output(18,eq,64) output(65,eq,67) output(18,eq,67) output(52,eq,72) output(65,eq,72) output(52,eq,42) output(10,eq,51) output(18,eq,42) output(18,eq,72)
Optimization: 30 1
Answer: 3
preference(1,(1,1),1,for(atom(hasPrep(3))),5) preference(1,(1,2),1,for(atom(hasPrepTime(2))),1) preference(1,(1,3),1,for(atom(hasCost(1))),3) preference(1,(1,4),1,for(atom(hasPrep(1))),1) preference(1,(1,5),1,for(atom(hasPrep(7))),6) preference(1,(1,6),1,for(atom(hasPrep(6))),3) preference(1,(1,7),1,for(atom(hasDifficulty(1))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),1) preference(1,(1,9),1,for(atom(hasPrepTime(3))),1) preference(1,(1,10),1,for(atom(hasPrep(4))),7) preference(1,(1,11),1,for(atom(hasPrep(2))),6) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasDifficulty(2))),6) preference(1,less(weight)) output(13,better,51) output(52,better,69) output(52,better,67) output(14,better,13) output(14,better,51) output(18,better,65) output(18,better,25) output(18,better,69) output(18,better,67) output(65,better,25) output(65,better,69) output(10,worse,14) output(10,worse,13) output(25,worse,64) output(25,worse,42) output(52,worse,72) output(52,worse,42) output(67,worse,72) output(67,worse,42) output(69,worse,67) output(69,worse,72) output(69,worse,42) output(18,worse,42) output(18,worse,72) output(65,worse,52) output(65,worse,42) output(65,worse,64) output(65,worse,67) output(65,worse,72) output(72,worse,42) output(18,eq,52) output(18,eq,64) output(10,eq,51)
Optimization: 22 14
Answer: 4
preference(1,(1,1),1,for(atom(hasPrep(3))),5) preference(1,(1,2),1,for(atom(hasPrepTime(2))),1) preference(1,(1,3),1,for(atom(hasCost(1))),3) preference(1,(1,4),1,for(atom(hasPrep(1))),1) preference(1,(1,5),1,for(atom(hasPrep(7))),6) preference(1,(1,6),1,for(atom(hasPrep(6))),3) preference(1,(1,7),1,for(atom(hasDifficulty(1))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),1) preference(1,(1,9),1,for(atom(hasCost(2))),3) preference(1,(1,10),1,for(atom(hasPrep(4))),7) preference(1,(1,11),1,for(atom(hasPrep(2))),6) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasDifficulty(2))),6) preference(1,less(weight)) output(13,better,51) output(52,better,69) output(52,better,67) output(52,better,72) output(14,better,51) output(18,better,65) output(18,better,25) output(18,better,69) output(18,better,67) output(18,better,72) output(65,better,25) output(65,better,69) output(10,worse,14) output(10,worse,13) output(10,worse,51) output(25,worse,64) output(25,worse,42) output(67,worse,42) output(69,worse,67) output(69,worse,72) output(69,worse,42) output(65,worse,52) output(65,worse,42) output(65,worse,64) output(65,worse,67) output(65,worse,72) output(72,worse,42) output(67,eq,72) output(14,eq,13) output(18,eq,52) output(18,eq,64) output(52,eq,42) output(18,eq,42)
Optimization: 21 14
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(2))),7) preference(1,(1,2),1,for(atom(hasDifficulty(2))),7) preference(1,(1,5),1,for(atom(hasCost(1))),7) preference(1,(1,7),1,for(atom(hasPrepTime(3))),7) preference(1,(1,8),1,for(atom(hasCost(2))),4) preference(1,(1,9),1,for(atom(hasDifficulty(1))),6) preference(1,(1,10),1,for(atom(hasPrep(6))),6) preference(1,(1,11),1,for(atom(hasPrep(1))),7) preference(1,(1,12),1,for(atom(hasPrep(5))),7) preference(1,(1,13),1,for(atom(hasPrepTime(2))),2) preference(1,(1,14),1,for(atom(hasPrep(7))),7) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,72) output(52,better,42) output(67,better,72) output(67,better,42) output(69,better,72) output(69,better,42) output(18,better,42) output(18,better,72) output(65,better,42) output(65,better,72) output(13,worse,51) output(14,worse,13) output(14,worse,51) output(18,worse,25) output(18,worse,52) output(18,worse,64) output(18,worse,69) output(18,worse,67) output(65,worse,52) output(65,worse,25) output(65,worse,69) output(65,worse,64) output(65,worse,67) output(52,eq,69) output(69,eq,67) output(72,eq,42) output(18,eq,65) output(52,eq,67) output(10,eq,51)
Optimization: 19 11
Answer: 6
preference(1,(1,1),1,for(atom(hasPrepTime(2))),7) preference(1,(1,2),1,for(atom(hasPrep(0))),2) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasPrepTime(3))),7) preference(1,(1,5),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasCost(2))),4) preference(1,(1,7),1,for(atom(hasPrepTime(1))),4) preference(1,(1,8),1,for(atom(hasPrep(4))),6) preference(1,(1,9),1,for(atom(hasPrep(5))),2) preference(1,(1,10),1,for(atom(hasPrep(2))),3) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,12),1,for(atom(hasPrep(6))),4) preference(1,(1,13),1,for(atom(hasDifficulty(1))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),6) preference(1,less(weight)) output(10,better,13) output(25,better,64) output(67,better,42) output(14,better,13) output(14,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(65,better,52) output(65,better,25) output(65,better,69) output(65,better,64) output(72,better,42) output(10,worse,14) output(10,worse,51) output(13,worse,51) output(25,worse,42) output(52,worse,67) output(52,worse,72) output(52,worse,42) output(67,worse,72) output(69,worse,67) output(69,worse,72) output(69,worse,42) output(65,worse,67) output(65,worse,72) output(52,eq,69) output(65,eq,42) output(18,eq,72)
Optimization: 16 14
Answer: 7
preference(1,(1,1),1,for(atom(hasPrepTime(2))),7) preference(1,(1,2),1,for(atom(hasPrep(0))),2) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasPrepTime(3))),7) preference(1,(1,5),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasCost(2))),4) preference(1,(1,7),1,for(atom(hasPrepTime(1))),4) preference(1,(1,8),1,for(atom(hasPrep(4))),2) preference(1,(1,9),1,for(atom(hasPrep(5))),2) preference(1,(1,10),1,for(atom(hasPrep(2))),3) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,12),1,for(atom(hasPrep(6))),4) preference(1,(1,13),1,for(atom(hasDifficulty(1))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),6) preference(1,less(weight)) output(10,better,13) output(25,better,64) output(52,better,69) output(67,better,42) output(14,better,13) output(14,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(65,better,52) output(65,better,25) output(65,better,69) output(65,better,64) output(72,better,42) output(10,worse,14) output(10,worse,51) output(13,worse,51) output(25,worse,42) output(52,worse,67) output(52,worse,72) output(52,worse,42) output(67,worse,72) output(69,worse,67) output(69,worse,72) output(69,worse,42) output(65,worse,67) output(65,worse,72) output(65,eq,42) output(18,eq,72)
Optimization: 15 14
Answer: 8
preference(1,(1,1),1,for(atom(hasDifficulty(1))),5) preference(1,(1,2),1,for(atom(hasPrep(1))),4) preference(1,(1,3),1,for(atom(hasPrep(5))),8) preference(1,(1,4),1,for(atom(hasCost(2))),8) preference(1,(1,6),1,for(atom(hasPrepTime(3))),1) preference(1,(1,7),1,for(atom(hasPrep(6))),5) preference(1,(1,8),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasPrep(4))),2) preference(1,(1,10),1,for(atom(hasPrep(0))),3) preference(1,(1,11),1,for(atom(hasDifficulty(2))),2) preference(1,(1,12),1,for(atom(hasPrep(7))),5) preference(1,(1,13),1,for(atom(hasPrepTime(2))),2) preference(1,(1,14),1,for(atom(hasCost(1))),3) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,67) output(52,better,72) output(52,better,42) output(67,better,42) output(69,better,67) output(69,better,72) output(69,better,42) output(14,better,13) output(18,better,67) output(18,better,42) output(65,better,42) output(65,better,67) output(65,better,72) output(72,better,42) output(10,worse,51) output(13,worse,51) output(67,worse,72) output(14,worse,51) output(18,worse,65) output(18,worse,25) output(18,worse,52) output(18,worse,64) output(18,worse,69) output(18,worse,72) output(65,worse,25) output(65,eq,52) output(52,eq,69) output(65,eq,69) output(65,eq,64)
Optimization: 15 13
Answer: 9
preference(1,(1,1),1,for(atom(hasDifficulty(2))),6) preference(1,(1,2),1,for(atom(hasPrepTime(3))),6) preference(1,(1,5),1,for(atom(hasCost(1))),6) preference(1,(1,6),1,for(atom(hasDifficulty(1))),8) preference(1,(1,7),1,for(atom(hasPrepTime(2))),1) preference(1,(1,8),1,for(atom(hasCost(2))),5) preference(1,(1,11),1,for(atom(hasPrep(1))),6) preference(1,(1,12),1,for(atom(hasPrep(2))),6) preference(1,(1,13),1,for(atom(hasPrep(6))),5) preference(1,(1,14),1,for(atom(hasPrep(5))),7) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,67) output(52,better,72) output(69,better,67) output(69,better,72) output(14,better,13) output(18,better,52) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,42) output(65,better,69) output(65,better,67) output(65,better,72) output(13,worse,51) output(67,worse,72) output(67,worse,42) output(14,worse,51) output(18,worse,25) output(18,worse,64) output(65,worse,25) output(65,worse,64) output(72,worse,42) output(52,eq,69) output(18,eq,65) output(69,eq,42) output(52,eq,42) output(10,eq,51)
Optimization: 14 10
Answer: 10
preference(1,(1,1),1,for(atom(hasPrepTime(3))),2) preference(1,(1,2),1,for(atom(hasPrepTime(2))),6) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,4),1,for(atom(hasDifficulty(2))),5) preference(1,(1,5),1,for(atom(hasPrep(2))),8) preference(1,(1,8),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasPrep(6))),5) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,(1,13),1,for(atom(hasPrep(1))),2) preference(1,(1,14),1,for(atom(hasDifficulty(1))),7) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,67) output(52,better,72) output(67,better,72) output(69,better,67) output(69,better,72) output(14,better,13) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(10,worse,51) output(13,worse,51) output(52,worse,42) output(67,worse,42) output(69,worse,42) output(14,worse,51) output(18,worse,65) output(72,worse,42) output(52,eq,69)
Optimization: 9 11
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(3))),5) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasPrep(4))),1) preference(1,(1,4),1,for(atom(hasDifficulty(2))),7) preference(1,(1,6),1,for(atom(hasPrep(7))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),6) preference(1,(1,8),1,for(atom(hasPrep(5))),6) preference(1,(1,9),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasPrep(0))),4) preference(1,(1,11),1,for(atom(hasPrepTime(3))),3) preference(1,(1,12),1,for(atom(hasPrepTime(2))),7) preference(1,(1,13),1,for(atom(hasPrep(2))),7) preference(1,(1,14),1,for(atom(hasCost(1))),2) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,72) output(52,better,42) output(67,better,72) output(67,better,42) output(69,better,72) output(69,better,42) output(18,better,65) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(10,worse,51) output(13,worse,51) output(69,worse,67) output(14,worse,13) output(14,worse,51) output(18,worse,25) output(65,worse,25) output(52,eq,67)
Optimization: 8 13
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(2))),7) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasPrep(4))),1) preference(1,(1,4),1,for(atom(hasPrepTime(1))),5) preference(1,(1,6),1,for(atom(hasPrep(7))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),6) preference(1,(1,8),1,for(atom(hasPrep(5))),6) preference(1,(1,9),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasPrep(0))),4) preference(1,(1,11),1,for(atom(hasPrepTime(3))),3) preference(1,(1,12),1,for(atom(hasPrepTime(2))),7) preference(1,(1,13),1,for(atom(hasPrep(2))),7) preference(1,(1,14),1,for(atom(hasCost(1))),2) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,72) output(52,better,42) output(67,better,72) output(67,better,42) output(69,better,72) output(69,better,42) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(10,worse,51) output(13,worse,51) output(69,worse,67) output(14,worse,13) output(14,worse,51) output(65,eq,25) output(52,eq,67)
Optimization: 7 13
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(7))),6) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasPrep(4))),1) preference(1,(1,4),1,for(atom(hasDifficulty(2))),7) preference(1,(1,6),1,for(atom(hasPrepTime(1))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),6) preference(1,(1,8),1,for(atom(hasPrep(5))),6) preference(1,(1,9),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasPrep(0))),4) preference(1,(1,11),1,for(atom(hasPrepTime(3))),3) preference(1,(1,12),1,for(atom(hasPrepTime(2))),7) preference(1,(1,13),1,for(atom(hasPrep(2))),7) preference(1,(1,14),1,for(atom(hasCost(1))),2) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,72) output(52,better,42) output(67,better,72) output(67,better,42) output(69,better,72) output(69,better,42) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(10,worse,51) output(13,worse,51) output(69,worse,67) output(14,worse,13) output(14,worse,51) output(52,eq,67)
Optimization: 6 13
Progression : [1;6] (Error: 5)
Answer: 14
preference(1,(1,1),1,for(atom(hasCost(2))),3) preference(1,(1,3),1,for(atom(hasCost(1))),3) preference(1,(1,4),1,for(atom(hasPrep(2))),6) preference(1,(1,5),1,for(atom(hasDifficulty(1))),3) preference(1,(1,6),1,for(atom(hasDifficulty(2))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasPrepTime(3))),4) preference(1,(1,11),1,for(atom(hasPrepTime(2))),5) preference(1,(1,12),1,for(atom(hasPrep(1))),3) preference(1,(1,14),1,for(atom(hasPrep(5))),1) preference(1,less(weight)) output(13,better,51) output(25,better,64) output(25,better,42) output(52,better,67) output(52,better,72) output(52,better,42) output(67,better,42) output(69,better,67) output(69,better,72) output(69,better,42) output(14,better,13) output(14,better,51) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(10,worse,14) output(10,worse,13) output(52,eq,69) output(67,eq,72) output(18,eq,65) output(10,eq,51)
Optimization: 6 10
Answer: 15
preference(1,(1,2),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasDifficulty(2))),1) preference(1,(1,6),1,for(atom(hasCost(1))),4) preference(1,(1,7),1,for(atom(hasPrepTime(2))),4) preference(1,(1,9),1,for(atom(hasPrep(1))),3) preference(1,(1,10),1,for(atom(hasPrep(2))),1) preference(1,(1,12),1,for(atom(hasPrep(0))),6) preference(1,(1,13),1,for(atom(hasPrepTime(1))),7) preference(1,(1,14),1,for(atom(hasPrep(4))),2) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(67,better,42) output(69,better,67) output(69,better,72) output(69,better,42) output(14,better,13) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(10,worse,51) output(13,worse,51) output(14,worse,51) output(18,worse,65) output(67,eq,72)
Optimization: 5 10
Answer: 16
preference(1,(1,2),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasPrep(2))),1) preference(1,(1,5),1,for(atom(hasDifficulty(2))),5) preference(1,(1,6),1,for(atom(hasCost(1))),4) preference(1,(1,7),1,for(atom(hasPrepTime(2))),4) preference(1,(1,9),1,for(atom(hasPrep(7))),4) preference(1,(1,10),1,for(atom(hasPrepTime(3))),2) preference(1,(1,11),1,for(atom(hasCost(2))),1) preference(1,(1,12),1,for(atom(hasPrep(0))),2) preference(1,(1,13),1,for(atom(hasPrep(1))),5) preference(1,(1,14),1,for(atom(hasPrepTime(1))),3) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,67) output(52,better,72) output(52,better,42) output(67,better,72) output(67,better,42) output(69,better,67) output(69,better,72) output(69,better,42) output(14,better,13) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(13,worse,51) output(14,worse,51) output(52,eq,69) output(10,eq,51)
Optimization: 4 12
Answer: 17
preference(1,(1,1),1,for(atom(hasPrep(7))),1) preference(1,(1,2),1,for(atom(hasCost(1))),7) preference(1,(1,4),1,for(atom(hasCost(2))),8) preference(1,(1,5),1,for(atom(hasPrepTime(3))),3) preference(1,(1,7),1,for(atom(hasDifficulty(2))),1) preference(1,(1,9),1,for(atom(hasPrep(0))),3) preference(1,(1,10),1,for(atom(hasPrep(5))),2) preference(1,(1,11),1,for(atom(hasPrep(2))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),6) preference(1,(1,13),1,for(atom(hasPrepTime(2))),5) preference(1,(1,14),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,67) output(52,better,72) output(52,better,42) output(67,better,72) output(67,better,42) output(69,better,67) output(69,better,72) output(69,better,42) output(14,better,13) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(13,worse,51) output(14,worse,51) output(52,eq,69) output(10,eq,51)
Optimization: 4 11
Progression : [2;4] (Error: 1)
Progression : [3;4] (Error: 0.333333)
Answer: 18
preference(1,(1,1),1,for(atom(hasPrep(0))),4) preference(1,(1,2),1,for(atom(hasPrep(2))),3) preference(1,(1,3),1,for(atom(hasPrepTime(2))),5) preference(1,(1,4),1,for(atom(hasCost(1))),7) preference(1,(1,5),1,for(atom(hasCost(2))),8) preference(1,(1,6),1,for(atom(hasPrep(1))),2) preference(1,(1,7),1,for(atom(hasPrepTime(1))),6) preference(1,(1,8),1,for(atom(hasPrep(4))),1) preference(1,(1,9),1,for(atom(hasPrepTime(3))),8) preference(1,(1,11),1,for(atom(hasPrep(5))),4) preference(1,(1,12),1,for(atom(hasPrep(7))),5) preference(1,(1,14),1,for(atom(hasDifficulty(2))),2) preference(1,less(weight)) output(13,better,51) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(67,better,72) output(67,better,42) output(69,better,67) output(69,better,72) output(69,better,42) output(14,better,13) output(14,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(10,worse,14) output(10,worse,13) output(10,worse,51)
Optimization: 3 12
Progression : 3 [ 1;12] (Error: 11)
Progression : 3 [ 2;12] (Error: 5)
Answer: 19
preference(1,(1,1),1,for(atom(hasPrep(2))),6) preference(1,(1,2),1,for(atom(hasCost(1))),3) preference(1,(1,3),1,for(atom(hasPrep(5))),8) preference(1,(1,4),1,for(atom(hasPrepTime(1))),8) preference(1,(1,6),1,for(atom(hasPrep(4))),1) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasPrep(1))),6) preference(1,(1,10),1,for(atom(hasPrep(0))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),1) preference(1,(1,13),1,for(atom(hasCost(2))),5) preference(1,(1,14),1,for(atom(hasPrepTime(3))),8) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(67,better,72) output(67,better,42) output(69,better,67) output(69,better,72) output(69,better,42) output(14,better,13) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(10,worse,51) output(13,worse,51) output(14,worse,51)
Optimization: 3 11
Answer: 20
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),4) preference(1,(1,8),1,for(atom(hasPrep(4))),1) preference(1,(1,9),1,for(atom(hasPrep(5))),3) preference(1,(1,10),1,for(atom(hasPrep(7))),5) preference(1,(1,12),1,for(atom(hasCost(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(2))),6) preference(1,(1,14),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(13,better,51) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(67,better,72) output(67,better,42) output(69,better,67) output(69,better,72) output(69,better,42) output(14,better,13) output(14,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(72,better,42) output(10,worse,14) output(10,worse,13) output(10,worse,51)
Optimization: 3 8
Progression : 3 [3;8] (Error: 1.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.079 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 20+
  Optimum    : unknown
Optimization : 3 8
Bounds       : 3 [3;8]
Calls        : 1
Time         : 297.843s (Solving: 296.24s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1186.150s
Threads      : 4        (Winner: 4)

Choices      : 8442994  (Domain: 644819)
Conflicts    : 7029505  (Analyzed: 7029499)
Restarts     : 6061     (Average: 1159.79 Last: 458950)
Model-Level  : 74.8    
Problems     : 12       (Average Length: 0.33 Splits: 0)
Lemmas       : 7100868  (Deleted: 6879741)
  Binary     : 1172     (Ratio:   0.02%)
  Ternary    : 5838     (Ratio:   0.08%)
  Conflict   : 7029495  (Average Length:  245.4 Ratio:  98.99%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 71373    (Average Length:   34.3 Ratio:   1.01%) 
  Distributed: 23841    (Ratio:   0.34% Average LBD: 3.64) 
  Integrated : 71523    (Ratio: 300.00% Unit: 195 Average Jumps: 5.96)
Backjumps    : 7029499  (Average:  1.17 Max: 428 Sum: 8230877)
  Executed   : 7029489  (Average:  1.17 Max: 428 Sum: 8230738 Ratio: 100.00%)
  Bounded    : 10       (Average: 13.90 Max:  32 Sum:    139 Ratio:   0.00%)

Rules        : 95227   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8838    
Bodies       : 5604    
  Sum        : 66      
  Count      : 14      
Equivalences : 3573     (Atom=Atom: 343 Body=Body: 146 Other: 3084)
Tight        : Yes
Variables    : 4781     (Eliminated:    0 Frozen: 3311)
Constraints  : 94324    (Binary:  96.7% Ternary:   1.6% Other:   1.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(6)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(5)) ; 
  6 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(6)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(0)) ; 
  3 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(5)) ; 
  6 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(6)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(6)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(0)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(2)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(4)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  5 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  5 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(4)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  5 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  3 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(2)) ; 
  3 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(4)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(7)) ; 
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrepTime(2)) 
}.
