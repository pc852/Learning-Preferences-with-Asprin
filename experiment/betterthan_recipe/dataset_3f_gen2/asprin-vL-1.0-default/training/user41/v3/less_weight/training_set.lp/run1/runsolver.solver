asprin_vL version 1.0
Reading from stdin
-:1230:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1240:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1255:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1336:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1597:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1610:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1787:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1916:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1988:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1992:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1992:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1998:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2097:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2123:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2243:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2277:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2299:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1147:1-16: info: no atoms over signature occur in program:
  output/3

-:1139:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1140:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(33,eq,90) output(90,eq,9) output(9,eq,100) output(79,eq,44) output(44,eq,51) output(67,eq,16) output(58,eq,90) output(90,eq,77) output(92,eq,10) output(10,eq,22) output(84,eq,16) output(16,eq,65) output(65,eq,79) output(16,eq,79) output(67,eq,65) output(84,eq,65) output(92,eq,22) output(33,eq,77) output(58,eq,77) output(79,eq,51) output(65,eq,44) output(90,eq,100) output(33,eq,9) output(58,eq,9) output(33,eq,100) output(58,eq,100) output(16,eq,44) output(67,eq,44) output(84,eq,44) output(65,eq,51) output(16,eq,51) output(67,eq,79) output(84,eq,79) output(67,eq,51) output(84,eq,51)
Optimization: 35 0
Answer: 2
preference(1,(1,5),1,for(atom(hasPrepTime(2))),8) preference(1,(1,9),1,for(atom(hasPrep(6))),8) preference(1,less(weight)) output(10,better,22) output(16,worse,51) output(58,worse,77) output(67,worse,51) output(79,worse,51) output(84,worse,51) output(90,worse,77) output(92,worse,10) output(33,worse,77) output(44,worse,51) output(65,worse,51) output(33,eq,90) output(90,eq,9) output(9,eq,100) output(79,eq,44) output(67,eq,16) output(58,eq,90) output(84,eq,16) output(16,eq,65) output(65,eq,79) output(16,eq,79) output(67,eq,65) output(84,eq,65) output(92,eq,22) output(65,eq,44) output(90,eq,100) output(33,eq,9) output(58,eq,9) output(33,eq,100) output(58,eq,100) output(16,eq,44) output(67,eq,44) output(84,eq,44) output(67,eq,79) output(84,eq,79)
Optimization: 34 2
Answer: 3
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,2),1,for(atom(hasCost(1))),2) preference(1,(1,3),1,for(atom(hasPrep(0))),7) preference(1,(1,4),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasDifficulty(2))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,9),1,for(atom(hasPrep(1))),7) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasPrep(6))),4) preference(1,(1,12),1,for(atom(hasPrep(4))),5) preference(1,(1,13),1,for(atom(hasPrep(3))),3) preference(1,(1,14),1,for(atom(hasCost(2))),2) preference(1,less(weight)) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,100) output(44,better,51) output(65,better,51) output(10,worse,22) output(16,worse,65) output(16,worse,79) output(16,worse,44) output(16,worse,51) output(58,worse,90) output(58,worse,77) output(92,worse,22) output(33,worse,90) output(33,worse,77) output(79,eq,44) output(65,eq,79) output(65,eq,44) output(33,eq,9) output(58,eq,9)
Optimization: 15 14
Answer: 4
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,2),1,for(atom(hasCost(1))),2) preference(1,(1,3),1,for(atom(hasPrep(0))),7) preference(1,(1,4),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasDifficulty(2))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,9),1,for(atom(hasPrep(1))),7) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasPrep(6))),4) preference(1,(1,12),1,for(atom(hasPrep(4))),3) preference(1,(1,14),1,for(atom(hasCost(2))),2) preference(1,less(weight)) output(16,better,51) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,100) output(44,better,51) output(65,better,51) output(10,worse,22) output(58,worse,90) output(58,worse,77) output(92,worse,22) output(33,worse,90) output(33,worse,77) output(79,eq,44) output(16,eq,65) output(65,eq,79) output(16,eq,79) output(65,eq,44) output(33,eq,9) output(58,eq,9) output(16,eq,44)
Optimization: 14 13
Answer: 5
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,2),1,for(atom(hasCost(1))),2) preference(1,(1,3),1,for(atom(hasPrep(0))),7) preference(1,(1,4),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasDifficulty(2))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,9),1,for(atom(hasPrep(1))),7) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasPrep(6))),4) preference(1,(1,12),1,for(atom(hasPrep(4))),3) preference(1,(1,13),1,for(atom(hasPrepTime(1))),6) preference(1,(1,14),1,for(atom(hasCost(2))),2) preference(1,less(weight)) output(58,better,77) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,77) output(33,better,100) output(44,better,51) output(65,better,51) output(10,worse,22) output(16,worse,65) output(16,worse,79) output(16,worse,44) output(16,worse,51) output(58,worse,90) output(92,worse,22) output(33,worse,90) output(79,eq,44) output(65,eq,79) output(65,eq,44) output(33,eq,9) output(58,eq,9)
Optimization: 13 14
Answer: 6
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,2),1,for(atom(hasCost(1))),2) preference(1,(1,3),1,for(atom(hasPrep(0))),7) preference(1,(1,4),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasDifficulty(2))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,9),1,for(atom(hasPrep(1))),7) preference(1,(1,10),1,for(atom(hasPrep(4))),5) preference(1,(1,11),1,for(atom(hasPrep(6))),4) preference(1,(1,12),1,for(atom(hasCost(2))),3) preference(1,(1,13),1,for(atom(hasPrep(5))),5) preference(1,(1,14),1,for(atom(hasPrepTime(1))),1) preference(1,less(weight)) output(16,better,65) output(16,better,51) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,100) output(44,better,51) output(10,worse,22) output(16,worse,79) output(58,worse,90) output(58,worse,77) output(92,worse,22) output(33,worse,90) output(33,worse,77) output(65,worse,79) output(65,worse,44) output(65,worse,51) output(33,eq,9) output(16,eq,44)
Optimization: 12 14
Answer: 7
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,2),1,for(atom(hasCost(1))),2) preference(1,(1,3),1,for(atom(hasPrep(0))),7) preference(1,(1,4),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasDifficulty(2))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,9),1,for(atom(hasPrep(1))),7) preference(1,(1,11),1,for(atom(hasPrep(6))),4) preference(1,(1,12),1,for(atom(hasPrep(4))),6) preference(1,(1,13),1,for(atom(hasPrep(5))),5) preference(1,(1,14),1,for(atom(hasCost(2))),3) preference(1,less(weight)) output(16,better,65) output(16,better,44) output(16,better,51) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,100) output(44,better,51) output(10,worse,22) output(58,worse,90) output(58,worse,77) output(92,worse,22) output(33,worse,90) output(33,worse,77) output(65,worse,79) output(65,worse,44) output(65,worse,51) output(16,eq,79) output(33,eq,9)
Optimization: 11 13
Progression : [ 1;11] (Error: 10)
Answer: 8
preference(1,(1,1),1,for(atom(hasCost(1))),5) preference(1,(1,3),1,for(atom(hasDifficulty(2))),6) preference(1,(1,4),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasCost(2))),7) preference(1,(1,9),1,for(atom(hasPrepTime(3))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),7) preference(1,(1,11),1,for(atom(hasPrep(2))),4) preference(1,(1,12),1,for(atom(hasPrep(6))),5) preference(1,(1,13),1,for(atom(hasPrepTime(1))),6) preference(1,(1,14),1,for(atom(hasPrep(4))),8) preference(1,less(weight)) output(16,better,65) output(16,better,44) output(16,better,51) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(65,better,44) output(65,better,51) output(10,worse,22) output(16,worse,79) output(58,worse,90) output(58,worse,77) output(58,worse,9) output(84,worse,79) output(44,worse,51) output(65,worse,79) output(92,eq,22) output(58,eq,100) output(67,eq,79)
Optimization: 11 10
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(6))),4) preference(1,(1,2),1,for(atom(hasPrep(0))),5) preference(1,(1,3),1,for(atom(hasPrep(1))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),4) preference(1,(1,5),1,for(atom(hasCost(2))),4) preference(1,(1,6),1,for(atom(hasDifficulty(1))),4) preference(1,(1,9),1,for(atom(hasPrep(7))),4) preference(1,(1,10),1,for(atom(hasPrep(2))),4) preference(1,(1,11),1,for(atom(hasPrepTime(2))),4) preference(1,(1,12),1,for(atom(hasDifficulty(2))),7) preference(1,(1,13),1,for(atom(hasCost(1))),4) preference(1,less(weight)) output(16,better,44) output(16,better,51) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(33,better,77) output(33,better,9) output(33,better,100) output(65,better,79) output(65,better,44) output(65,better,51) output(10,worse,22) output(16,worse,65) output(92,worse,22) output(9,worse,100) output(33,eq,90) output(44,eq,51) output(58,eq,90) output(16,eq,79) output(67,eq,65) output(84,eq,65)
Optimization: 10 11
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(6))),4) preference(1,(1,2),1,for(atom(hasPrep(0))),5) preference(1,(1,3),1,for(atom(hasPrep(1))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),4) preference(1,(1,5),1,for(atom(hasCost(2))),4) preference(1,(1,6),1,for(atom(hasDifficulty(1))),4) preference(1,(1,9),1,for(atom(hasPrep(7))),4) preference(1,(1,10),1,for(atom(hasPrep(2))),4) preference(1,(1,11),1,for(atom(hasPrepTime(2))),4) preference(1,(1,12),1,for(atom(hasDifficulty(2))),7) preference(1,(1,13),1,for(atom(hasCost(1))),4) preference(1,(1,14),1,for(atom(hasPrep(4))),8) preference(1,less(weight)) output(16,better,44) output(16,better,51) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,77) output(33,better,9) output(33,better,100) output(65,better,79) output(65,better,44) output(65,better,51) output(10,worse,22) output(16,worse,65) output(92,worse,22) output(33,eq,90) output(44,eq,51) output(58,eq,90) output(16,eq,79) output(67,eq,65) output(84,eq,65)
Optimization: 9 12
Answer: 11
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrepTime(2))),7) preference(1,(1,5),1,for(atom(hasCost(2))),7) preference(1,(1,6),1,for(atom(hasPrep(4))),6) preference(1,(1,7),1,for(atom(hasPrepTime(3))),8) preference(1,(1,8),1,for(atom(hasDifficulty(2))),3) preference(1,(1,10),1,for(atom(hasPrep(2))),4) preference(1,(1,11),1,for(atom(hasPrepTime(1))),4) preference(1,(1,12),1,for(atom(hasPrep(6))),1) preference(1,(1,13),1,for(atom(hasPrep(0))),3) preference(1,(1,14),1,for(atom(hasPrep(5))),3) preference(1,less(weight)) output(16,better,65) output(16,better,44) output(16,better,51) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,51) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,44) output(65,better,51) output(10,worse,22) output(16,worse,79) output(58,worse,90) output(58,worse,77) output(58,worse,9) output(92,worse,22) output(65,worse,79) output(90,eq,9) output(84,eq,79)
Optimization: 9 11
Progression : [2;9] (Error: 3.5)
Answer: 12
preference(1,(1,1),1,for(atom(hasCost(1))),1) preference(1,(1,2),1,for(atom(hasPrepTime(1))),5) preference(1,(1,3),1,for(atom(hasCost(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),5) preference(1,(1,5),1,for(atom(hasPrep(0))),7) preference(1,(1,6),1,for(atom(hasPrep(5))),8) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,9),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasPrepTime(2))),1) preference(1,less(weight)) output(16,better,44) output(16,better,51) output(58,better,90) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(92,better,22) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,44) output(65,better,51) output(10,worse,22) output(16,worse,65) output(16,worse,79) output(67,worse,79) output(9,worse,100) output(65,worse,79) output(84,eq,79)
Optimization: 7 10
Answer: 13
preference(1,(1,1),1,for(atom(hasCost(1))),1) preference(1,(1,2),1,for(atom(hasPrepTime(1))),5) preference(1,(1,3),1,for(atom(hasCost(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),5) preference(1,(1,5),1,for(atom(hasPrep(0))),7) preference(1,(1,6),1,for(atom(hasPrep(5))),8) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,8),1,for(atom(hasPrep(4))),8) preference(1,(1,9),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasPrepTime(2))),1) preference(1,less(weight)) output(16,better,44) output(16,better,51) output(58,better,90) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(92,better,22) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,44) output(65,better,51) output(10,worse,22) output(16,worse,65) output(16,worse,79) output(67,worse,79) output(65,worse,79) output(84,eq,79)
Optimization: 6 11
Answer: 14
preference(1,(1,1),1,for(atom(hasCost(1))),4) preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),5) preference(1,(1,4),1,for(atom(hasPrep(6))),5) preference(1,(1,5),1,for(atom(hasPrep(7))),2) preference(1,(1,6),1,for(atom(hasPrepTime(3))),5) preference(1,(1,7),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasPrepTime(1))),1) preference(1,(1,10),1,for(atom(hasPrep(4))),8) preference(1,(1,11),1,for(atom(hasPrep(0))),2) preference(1,(1,12),1,for(atom(hasPrep(1))),5) preference(1,(1,13),1,for(atom(hasDifficulty(1))),5) preference(1,(1,14),1,for(atom(hasCost(2))),3) preference(1,less(weight)) output(16,better,44) output(16,better,51) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,79) output(65,better,44) output(65,better,51) output(10,worse,22) output(16,worse,65) output(16,worse,79) output(58,worse,90) output(92,worse,22)
Optimization: 5 13
Answer: 15
preference(1,(1,2),1,for(atom(hasPrepTime(3))),8) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasPrep(4))),8) preference(1,(1,5),1,for(atom(hasPrep(1))),1) preference(1,(1,6),1,for(atom(hasCost(2))),3) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasPrep(0))),2) preference(1,(1,9),1,for(atom(hasPrep(6))),1) preference(1,(1,10),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasPrep(7))),5) preference(1,(1,12),1,for(atom(hasPrepTime(1))),5) preference(1,(1,13),1,for(atom(hasPrep(2))),7) preference(1,less(weight)) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(58,better,90) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,79) output(65,better,44) output(65,better,51) output(10,worse,22) output(92,worse,22) output(79,eq,44) output(90,eq,77)
Optimization: 4 12
Answer: 16
preference(1,(1,2),1,for(atom(hasPrepTime(3))),8) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasPrep(1))),8) preference(1,(1,6),1,for(atom(hasPrep(0))),7) preference(1,(1,7),1,for(atom(hasPrep(6))),2) preference(1,(1,8),1,for(atom(hasPrep(7))),4) preference(1,(1,9),1,for(atom(hasPrepTime(2))),1) preference(1,(1,10),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasCost(2))),3) preference(1,(1,12),1,for(atom(hasPrepTime(1))),2) preference(1,(1,13),1,for(atom(hasPrep(2))),7) preference(1,less(weight)) output(16,better,79) output(16,better,44) output(16,better,51) output(58,better,90) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,79) output(65,better,44) output(65,better,51) output(10,worse,22) output(92,worse,22) output(16,eq,65)
Optimization: 3 11
Answer: 17
preference(1,(1,2),1,for(atom(hasCost(2))),3) preference(1,(1,5),1,for(atom(hasPrep(7))),1) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,8),1,for(atom(hasPrep(4))),7) preference(1,(1,9),1,for(atom(hasPrep(2))),3) preference(1,(1,10),1,for(atom(hasPrepTime(1))),6) preference(1,(1,11),1,for(atom(hasDifficulty(2))),6) preference(1,(1,12),1,for(atom(hasPrepTime(3))),4) preference(1,(1,13),1,for(atom(hasCost(1))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(58,better,90) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,79) output(65,better,44) output(65,better,51) output(10,worse,22) output(92,worse,22)
Optimization: 2 10
Answer: 18
preference(1,(1,2),1,for(atom(hasCost(2))),3) preference(1,(1,5),1,for(atom(hasPrep(7))),1) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,8),1,for(atom(hasPrep(4))),7) preference(1,(1,9),1,for(atom(hasPrep(2))),3) preference(1,(1,11),1,for(atom(hasDifficulty(2))),6) preference(1,(1,12),1,for(atom(hasPrepTime(3))),4) preference(1,(1,13),1,for(atom(hasCost(1))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(58,better,90) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,79) output(65,better,44) output(65,better,51) output(10,worse,22) output(92,worse,22)
Optimization: 2 9
Progression : 2 [1;9] (Error: 8)
Answer: 19
preference(1,(1,1),1,for(atom(hasPrepTime(3))),3) preference(1,(1,5),1,for(atom(hasPrep(0))),8) preference(1,(1,6),1,for(atom(hasDifficulty(1))),3) preference(1,(1,7),1,for(atom(hasDifficulty(2))),8) preference(1,(1,8),1,for(atom(hasPrep(7))),5) preference(1,(1,11),1,for(atom(hasPrepTime(2))),2) preference(1,(1,12),1,for(atom(hasCost(2))),4) preference(1,(1,14),1,for(atom(hasPrep(2))),5) preference(1,less(weight)) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(58,better,90) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,79) output(65,better,44) output(65,better,51) output(10,worse,22) output(92,worse,22)
Optimization: 2 8
Progression : 2 [2;8] (Error: 3)
Progression : 2 [3;8] (Error: 1.66667)
Answer: 20
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasDifficulty(2))),8) preference(1,(1,4),1,for(atom(hasCost(2))),4) preference(1,(1,10),1,for(atom(hasPrep(2))),5) preference(1,(1,11),1,for(atom(hasPrep(4))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),5) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(58,better,90) output(58,better,77) output(58,better,9) output(58,better,100) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(79,better,44) output(79,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,better,10) output(9,better,100) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(65,better,79) output(65,better,44) output(65,better,51) output(10,worse,22) output(92,worse,22)
Optimization: 2 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.061 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 20+
  Optimum    : unknown
Optimization : 2 7
Bounds       : 2 [3;7]
Calls        : 1
Time         : 297.280s (Solving: 295.69s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1183.849s
Threads      : 4        (Winner: 4)

Choices      : 8229806  (Domain: 819308)
Conflicts    : 7433142  (Analyzed: 7433137)
Restarts     : 6247     (Average: 1189.87 Last: 578324)
Model-Level  : 44.1    
Problems     : 11       (Average Length: 0.36 Splits: 0)
Lemmas       : 7663041  (Deleted: 7269218)
  Binary     : 738      (Ratio:   0.01%)
  Ternary    : 4009     (Ratio:   0.05%)
  Conflict   : 7433137  (Average Length:  209.0 Ratio:  97.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 229904   (Average Length:  205.1 Ratio:   3.00%) 
  Distributed: 76725    (Ratio:   1.03% Average LBD: 3.86) 
  Integrated : 230175   (Ratio: 300.00% Unit: 139 Average Jumps: 4.63)
Backjumps    : 7433137  (Average:  1.10 Max:  62 Sum: 8156820)
  Executed   : 7433130  (Average:  1.10 Max:  62 Sum: 8156768 Ratio: 100.00%)
  Bounded    : 7        (Average:  7.43 Max:  18 Sum:     52 Ratio:   0.00%)

Rules        : 98585   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 9034    
Bodies       : 5626    
  Sum        : 70      
  Count      : 14      
Equivalences : 3643     (Atom=Atom: 363 Body=Body: 154 Other: 3126)
Tight        : Yes
Variables    : 4789     (Eliminated:    0 Frozen: 3319)
Constraints  : 97500    (Binary:  96.8% Ternary:   1.5% Other:   1.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(3)) ; 
  2 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(4)) ; 
  2 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrep(6)) ; 
  3 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCost(2)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCost(2)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(4)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  1 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(6)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrepTime(2)) 
}.
