asprin_vL version 1.0
Reading from stdin
-:1221:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1231:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1246:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1327:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1588:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1601:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1778:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1907:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1979:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1983:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1983:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1989:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2088:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2114:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2234:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2268:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2290:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1138:1-16: info: no atoms over signature occur in program:
  output/3

-:1130:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1131:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(91,eq,99) output(99,eq,71) output(71,eq,51) output(51,eq,55) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(71,eq,30) output(78,eq,76) output(17,eq,53) output(53,eq,60) output(60,eq,98) output(53,eq,98) output(17,eq,60) output(99,eq,30) output(76,eq,8) output(78,eq,67) output(71,eq,55) output(99,eq,51) output(91,eq,71) output(91,eq,51) output(99,eq,55) output(91,eq,55) output(78,eq,8) output(91,eq,30) output(17,eq,98)
Optimization: 26 0
Answer: 2
preference(1,(1,2),1,for(atom(hasPrep(2))),8) preference(1,(1,4),1,for(atom(hasDifficulty(1))),7) preference(1,(1,5),1,for(atom(hasPrepTime(2))),7) preference(1,(1,9),1,for(atom(hasPrep(0))),7) preference(1,(1,10),1,for(atom(hasPrep(1))),7) preference(1,(1,11),1,for(atom(hasCost(2))),7) preference(1,less(weight)) output(17,better,60) output(53,better,60) output(71,better,51) output(91,better,51) output(99,better,51) output(51,worse,55) output(60,worse,98) output(91,eq,99) output(99,eq,71) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(71,eq,30) output(78,eq,76) output(17,eq,53) output(53,eq,98) output(99,eq,30) output(76,eq,8) output(78,eq,67) output(71,eq,55) output(91,eq,71) output(99,eq,55) output(91,eq,55) output(78,eq,8) output(91,eq,30) output(17,eq,98)
Optimization: 21 6
Answer: 3
preference(1,(1,1),1,for(atom(hasCost(1))),1) preference(1,(1,2),1,for(atom(hasDifficulty(1))),1) preference(1,(1,3),1,for(atom(hasPrepTime(3))),1) preference(1,(1,4),1,for(atom(hasPrepTime(2))),1) preference(1,(1,5),1,for(atom(hasPrep(0))),1) preference(1,(1,6),1,for(atom(hasPrep(1))),1) preference(1,(1,7),1,for(atom(hasPrep(5))),1) preference(1,(1,8),1,for(atom(hasPrep(2))),8) preference(1,(1,9),1,for(atom(hasPrep(6))),1) preference(1,(1,10),1,for(atom(hasCost(2))),1) preference(1,(1,11),1,for(atom(hasDifficulty(2))),1) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasPrep(7))),1) preference(1,(1,14),1,for(atom(hasPrep(3))),1) preference(1,less(weight)) output(17,better,60) output(53,better,60) output(71,better,51) output(91,better,71) output(91,better,51) output(99,better,71) output(99,better,51) output(51,worse,55) output(60,worse,98) output(71,worse,30) output(71,worse,55) output(91,eq,99) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(78,eq,76) output(17,eq,53) output(53,eq,98) output(99,eq,30) output(76,eq,8) output(78,eq,67) output(99,eq,55) output(91,eq,55) output(78,eq,8) output(91,eq,30) output(17,eq,98)
Optimization: 19 14
Answer: 4
preference(1,(1,1),1,for(atom(hasPrep(0))),6) preference(1,(1,2),1,for(atom(hasPrepTime(2))),6) preference(1,(1,3),1,for(atom(hasPrep(1))),6) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),1) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),6) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,13),1,for(atom(hasDifficulty(2))),1) preference(1,(1,14),1,for(atom(hasPrep(5))),1) preference(1,less(weight)) output(51,better,55) output(53,better,60) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(17,worse,53) output(17,worse,98) output(53,worse,98) output(60,worse,98) output(71,worse,51) output(91,eq,99) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(71,eq,30) output(17,eq,60) output(76,eq,8)
Optimization: 12 10
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(0))),6) preference(1,(1,2),1,for(atom(hasPrepTime(2))),6) preference(1,(1,3),1,for(atom(hasPrep(1))),6) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),1) preference(1,(1,6),1,for(atom(hasPrep(2))),6) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),6) preference(1,(1,9),1,for(atom(hasPrep(3))),8) preference(1,(1,10),1,for(atom(hasPrep(4))),8) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,14),1,for(atom(hasPrep(5))),1) preference(1,less(weight)) output(51,better,55) output(53,better,60) output(71,better,51) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(17,worse,53) output(17,worse,98) output(53,worse,98) output(57,worse,52) output(60,worse,98) output(91,eq,99) output(76,eq,67) output(67,eq,8) output(71,eq,30) output(17,eq,60) output(76,eq,8)
Optimization: 11 13
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(0))),6) preference(1,(1,2),1,for(atom(hasPrepTime(2))),6) preference(1,(1,3),1,for(atom(hasPrep(1))),6) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),1) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),6) preference(1,(1,9),1,for(atom(hasPrep(3))),8) preference(1,(1,10),1,for(atom(hasPrep(2))),5) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasPrep(4))),8) preference(1,(1,13),1,for(atom(hasDifficulty(2))),6) preference(1,(1,14),1,for(atom(hasPrep(5))),1) preference(1,less(weight)) output(17,better,60) output(51,better,55) output(53,better,60) output(71,better,51) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(17,worse,53) output(17,worse,98) output(53,worse,98) output(57,worse,52) output(60,worse,98) output(91,eq,99) output(76,eq,67) output(67,eq,8) output(71,eq,30) output(76,eq,8)
Optimization: 10 14
Answer: 7
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,2),1,for(atom(hasPrep(0))),2) preference(1,(1,3),1,for(atom(hasPrep(2))),1) preference(1,(1,4),1,for(atom(hasDifficulty(2))),1) preference(1,(1,5),1,for(atom(hasCost(2))),4) preference(1,(1,6),1,for(atom(hasCost(1))),8) preference(1,(1,7),1,for(atom(hasPrep(1))),4) preference(1,(1,8),1,for(atom(hasPrep(5))),5) preference(1,(1,9),1,for(atom(hasPrep(7))),7) preference(1,(1,10),1,for(atom(hasPrep(6))),4) preference(1,(1,11),1,for(atom(hasPrep(3))),1) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasPrepTime(3))),1) preference(1,(1,14),1,for(atom(hasDifficulty(1))),5) preference(1,less(weight)) output(17,better,60) output(51,better,55) output(53,better,60) output(67,better,8) output(71,better,55) output(76,better,67) output(76,better,8) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(17,worse,98) output(53,worse,98) output(57,worse,52) output(60,worse,98) output(71,worse,51) output(71,worse,30) output(91,eq,99) output(17,eq,53)
Optimization: 8 14
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,2),1,for(atom(hasDifficulty(1))),3) preference(1,(1,3),1,for(atom(hasPrepTime(3))),4) preference(1,(1,4),1,for(atom(hasPrep(2))),8) preference(1,(1,6),1,for(atom(hasCost(2))),4) preference(1,(1,11),1,for(atom(hasCost(1))),2) preference(1,(1,12),1,for(atom(hasDifficulty(2))),4) preference(1,(1,14),1,for(atom(hasPrep(5))),1) preference(1,less(weight)) output(17,better,60) output(17,better,98) output(51,better,55) output(53,better,60) output(53,better,98) output(67,better,8) output(71,better,51) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(17,worse,53) output(60,worse,98) output(76,worse,67) output(91,eq,99) output(57,eq,52) output(71,eq,30) output(76,eq,8)
Optimization: 7 8
Answer: 9
preference(1,(1,1),1,for(atom(hasDifficulty(2))),4) preference(1,(1,2),1,for(atom(hasPrep(5))),1) preference(1,(1,3),1,for(atom(hasPrepTime(3))),7) preference(1,(1,4),1,for(atom(hasPrep(7))),1) preference(1,(1,5),1,for(atom(hasCost(2))),5) preference(1,(1,6),1,for(atom(hasPrep(6))),4) preference(1,(1,7),1,for(atom(hasPrep(2))),3) preference(1,(1,8),1,for(atom(hasPrep(1))),4) preference(1,(1,9),1,for(atom(hasPrep(3))),1) preference(1,(1,10),1,for(atom(hasPrepTime(2))),6) preference(1,(1,11),1,for(atom(hasDifficulty(1))),7) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasPrep(0))),2) preference(1,(1,14),1,for(atom(hasCost(1))),8) preference(1,less(weight)) output(17,better,53) output(17,better,98) output(53,better,98) output(60,better,98) output(71,better,51) output(71,better,30) output(71,better,55) output(76,better,67) output(76,better,8) output(78,better,67) output(78,better,8) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(17,worse,60) output(51,worse,55) output(53,worse,60) output(57,worse,52) output(67,worse,8) output(78,eq,76)
Optimization: 6 14
Progression : [1;6] (Error: 5)
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(7))),8) preference(1,(1,3),1,for(atom(hasCost(1))),5) preference(1,(1,4),1,for(atom(hasPrep(5))),5) preference(1,(1,6),1,for(atom(hasPrep(0))),4) preference(1,(1,7),1,for(atom(hasPrep(6))),3) preference(1,(1,8),1,for(atom(hasPrepTime(2))),1) preference(1,(1,10),1,for(atom(hasPrep(2))),3) preference(1,(1,11),1,for(atom(hasDifficulty(1))),5) preference(1,(1,12),1,for(atom(hasPrep(1))),7) preference(1,(1,13),1,for(atom(hasCost(2))),3) preference(1,less(weight)) output(17,better,53) output(17,better,60) output(17,better,98) output(51,better,55) output(53,better,60) output(53,better,98) output(60,better,98) output(67,better,8) output(71,better,30) output(71,better,55) output(76,better,67) output(76,better,8) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,worse,52) output(71,worse,51) output(91,worse,99) output(91,worse,51) output(91,eq,71)
Optimization: 5 10
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(2))),8) preference(1,(1,2),1,for(atom(hasDifficulty(2))),3) preference(1,(1,3),1,for(atom(hasCost(1))),5) preference(1,(1,4),1,for(atom(hasPrep(5))),5) preference(1,(1,6),1,for(atom(hasPrep(0))),4) preference(1,(1,7),1,for(atom(hasPrep(6))),3) preference(1,(1,8),1,for(atom(hasPrepTime(2))),1) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasDifficulty(1))),5) preference(1,(1,12),1,for(atom(hasPrep(1))),7) preference(1,(1,13),1,for(atom(hasCost(2))),3) preference(1,less(weight)) output(17,better,53) output(17,better,60) output(17,better,98) output(51,better,55) output(53,better,60) output(53,better,98) output(60,better,98) output(67,better,8) output(71,better,51) output(71,better,30) output(71,better,55) output(76,better,67) output(76,better,8) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,worse,52) output(91,worse,99) output(91,eq,71)
Optimization: 3 11
Answer: 12
preference(1,(1,1),1,for(atom(hasPrep(2))),3) preference(1,(1,2),1,for(atom(hasCost(1))),7) preference(1,(1,3),1,for(atom(hasDifficulty(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),2) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,6),1,for(atom(hasPrep(7))),3) preference(1,(1,7),1,for(atom(hasPrep(3))),4) preference(1,(1,8),1,for(atom(hasDifficulty(1))),7) preference(1,(1,9),1,for(atom(hasCost(2))),3) preference(1,(1,10),1,for(atom(hasPrep(4))),4) preference(1,(1,11),1,for(atom(hasPrepTime(1))),3) preference(1,(1,12),1,for(atom(hasPrep(0))),5) preference(1,(1,13),1,for(atom(hasPrepTime(2))),4) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(17,better,53) output(17,better,60) output(17,better,98) output(51,better,55) output(53,better,60) output(53,better,98) output(60,better,98) output(67,better,8) output(71,better,51) output(71,better,30) output(71,better,55) output(76,better,67) output(76,better,8) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,eq,52)
Optimization: 1 14
Progression : 1 [ 1;14] (Error: 13)
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(5))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasDifficulty(2))),6) preference(1,(1,4),1,for(atom(hasPrepTime(3))),8) preference(1,(1,6),1,for(atom(hasPrep(0))),4) preference(1,(1,7),1,for(atom(hasCost(2))),6) preference(1,(1,9),1,for(atom(hasPrep(1))),5) preference(1,(1,10),1,for(atom(hasCost(1))),7) preference(1,(1,11),1,for(atom(hasPrep(2))),3) preference(1,(1,13),1,for(atom(hasPrepTime(2))),1) preference(1,(1,14),1,for(atom(hasPrep(7))),6) preference(1,less(weight)) output(17,better,53) output(17,better,60) output(17,better,98) output(51,better,55) output(53,better,60) output(53,better,98) output(60,better,98) output(67,better,8) output(71,better,51) output(71,better,30) output(71,better,55) output(76,better,67) output(76,better,8) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,worse,52)
Optimization: 1 11
Answer: 14
preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasPrepTime(3))),8) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrep(0))),4) preference(1,(1,8),1,for(atom(hasCost(2))),6) preference(1,(1,9),1,for(atom(hasPrep(1))),5) preference(1,(1,10),1,for(atom(hasCost(1))),7) preference(1,(1,11),1,for(atom(hasPrep(2))),3) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,(1,13),1,for(atom(hasPrepTime(2))),1) preference(1,less(weight)) output(17,better,53) output(17,better,60) output(17,better,98) output(51,better,55) output(53,better,60) output(53,better,98) output(60,better,98) output(67,better,8) output(71,better,51) output(71,better,30) output(71,better,55) output(76,better,67) output(76,better,8) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,worse,52)
Optimization: 1 10
Answer: 15
preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,6),1,for(atom(hasPrep(2))),3) preference(1,(1,7),1,for(atom(hasPrepTime(3))),6) preference(1,(1,8),1,for(atom(hasCost(1))),1) preference(1,(1,9),1,for(atom(hasPrep(0))),2) preference(1,(1,10),1,for(atom(hasDifficulty(2))),7) preference(1,(1,11),1,for(atom(hasPrepTime(2))),7) preference(1,(1,12),1,for(atom(hasPrep(1))),5) preference(1,(1,14),1,for(atom(hasPrepTime(1))),2) preference(1,less(weight)) output(17,better,53) output(17,better,60) output(17,better,98) output(51,better,55) output(53,better,60) output(53,better,98) output(60,better,98) output(67,better,8) output(71,better,51) output(71,better,30) output(71,better,55) output(76,better,67) output(76,better,8) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,worse,52)
Optimization: 1 9
Progression : 1 [2;9] (Error: 3.5)
Progression : 1 [3;9] (Error: 2)
Answer: 16
preference(1,(1,1),1,for(atom(hasDifficulty(1))),7) preference(1,(1,2),1,for(atom(hasPrep(1))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),7) preference(1,(1,8),1,for(atom(hasPrep(5))),1) preference(1,(1,9),1,for(atom(hasPrep(2))),5) preference(1,(1,10),1,for(atom(hasPrep(0))),3) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,13),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(17,better,53) output(17,better,60) output(17,better,98) output(51,better,55) output(53,better,60) output(53,better,98) output(60,better,98) output(67,better,8) output(71,better,51) output(71,better,30) output(71,better,55) output(76,better,67) output(76,better,8) output(78,better,76) output(78,better,67) output(78,better,8) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,worse,52)
Optimization: 1 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.037 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 16+
  Optimum    : unknown
Optimization : 1 8
Bounds       : 1 [3;8]
Calls        : 1
Time         : 298.162s (Solving: 296.52s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1187.600s
Threads      : 4        (Winner: 4)

Choices      : 8665007  (Domain: 874593)
Conflicts    : 7929335  (Analyzed: 7929331)
Restarts     : 5624     (Average: 1409.91 Last: 195484)
Model-Level  : 37.9    
Problems     : 9        (Average Length: 0.44 Splits: 0)
Lemmas       : 8151554  (Deleted: 7833331)
  Binary     : 735      (Ratio:   0.01%)
  Ternary    : 10062    (Ratio:   0.12%)
  Conflict   : 7929331  (Average Length:  224.3 Ratio:  97.27%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 222223   (Average Length:  153.5 Ratio:   2.73%) 
  Distributed: 74212    (Ratio:   0.94% Average LBD: 3.83) 
  Integrated : 222636   (Ratio: 300.00% Unit: 225 Average Jumps: 6.56)
Backjumps    : 7929331  (Average:  1.08 Max:  32 Sum: 8600100)
  Executed   : 7929324  (Average:  1.08 Max:  32 Sum: 8600061 Ratio: 100.00%)
  Bounded    : 7        (Average:  5.57 Max:  10 Sum:     39 Ratio:   0.00%)

Rules        : 84482   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8160    
Bodies       : 5527    
  Sum        : 52      
  Count      : 14      
Equivalences : 3328     (Atom=Atom: 273 Body=Body: 118 Other: 2937)
Tight        : Yes
Variables    : 4761     (Eliminated:    0 Frozen: 3291)
Constraints  : 84224    (Binary:  96.3% Ternary:   1.8% Other:   1.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrep(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(7)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(3)) ; 
  5 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(4)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(2)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(2)) ; 
  8 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(3)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasCost(1)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(3)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(1)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrepTime(2)) 
}.
