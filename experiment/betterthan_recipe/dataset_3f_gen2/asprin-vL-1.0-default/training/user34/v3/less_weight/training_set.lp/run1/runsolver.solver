asprin_vL version 1.0
Reading from stdin
-:1223:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1233:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1248:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1329:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1590:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1603:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1780:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1909:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1981:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1985:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1985:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1991:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2090:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2116:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2236:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2270:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2292:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1140:1-16: info: no atoms over signature occur in program:
  output/3

-:1132:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1133:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(62,eq,75) output(75,eq,17) output(25,eq,86) output(86,eq,52) output(52,eq,55) output(55,eq,8) output(99,eq,51) output(76,eq,67) output(67,eq,52) output(8,eq,91) output(55,eq,91) output(76,eq,52) output(52,eq,8) output(86,eq,55) output(67,eq,55) output(25,eq,52) output(62,eq,17) output(76,eq,55) output(25,eq,55) output(86,eq,8) output(67,eq,8) output(76,eq,8) output(25,eq,8) output(52,eq,91) output(86,eq,91) output(67,eq,91) output(76,eq,91) output(25,eq,91)
Optimization: 28 0
Answer: 2
preference(1,(1,8),1,for(atom(hasPrepTime(2))),8) preference(1,(1,9),1,for(atom(hasCost(1))),8) preference(1,(1,10),1,for(atom(hasPrep(5))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),8) preference(1,less(weight)) output(99,better,51) output(62,eq,75) output(75,eq,17) output(25,eq,86) output(86,eq,52) output(52,eq,55) output(55,eq,8) output(76,eq,67) output(67,eq,52) output(8,eq,91) output(55,eq,91) output(76,eq,52) output(52,eq,8) output(86,eq,55) output(67,eq,55) output(25,eq,52) output(62,eq,17) output(76,eq,55) output(25,eq,55) output(86,eq,8) output(67,eq,8) output(76,eq,8) output(25,eq,8) output(52,eq,91) output(86,eq,91) output(67,eq,91) output(76,eq,91) output(25,eq,91)
Optimization: 27 4
Answer: 3
preference(1,(1,1),1,for(atom(hasPrep(6))),8) preference(1,(1,2),1,for(atom(hasPrep(4))),2) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,5),1,for(atom(hasPrep(0))),6) preference(1,(1,8),1,for(atom(hasPrepTime(3))),6) preference(1,(1,10),1,for(atom(hasPrepTime(2))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),6) preference(1,(1,13),1,for(atom(hasPrep(5))),6) preference(1,(1,14),1,for(atom(hasCost(1))),6) preference(1,less(weight)) output(8,better,91) output(25,better,52) output(25,better,91) output(55,better,91) output(62,better,75) output(62,better,17) output(76,better,67) output(76,better,52) output(76,better,91) output(86,better,52) output(86,better,91) output(52,worse,55) output(52,worse,8) output(67,worse,55) output(67,worse,8) output(99,worse,51) output(75,eq,17) output(25,eq,86) output(55,eq,8) output(67,eq,52) output(86,eq,55) output(76,eq,55) output(25,eq,55) output(86,eq,8) output(76,eq,8) output(25,eq,8) output(52,eq,91) output(67,eq,91)
Optimization: 17 9
Answer: 4
preference(1,(1,1),1,for(atom(hasPrep(6))),8) preference(1,(1,2),1,for(atom(hasPrep(7))),2) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,5),1,for(atom(hasPrep(0))),6) preference(1,(1,8),1,for(atom(hasPrepTime(3))),6) preference(1,(1,10),1,for(atom(hasPrepTime(2))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),6) preference(1,(1,13),1,for(atom(hasPrep(5))),6) preference(1,(1,14),1,for(atom(hasCost(1))),6) preference(1,less(weight)) output(8,better,91) output(25,better,52) output(25,better,55) output(25,better,91) output(55,better,91) output(62,better,75) output(62,better,17) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,91) output(52,worse,55) output(52,worse,8) output(55,worse,8) output(67,worse,55) output(67,worse,8) output(99,worse,51) output(75,eq,17) output(25,eq,86) output(67,eq,52) output(86,eq,8) output(76,eq,8) output(25,eq,8) output(52,eq,91) output(67,eq,91)
Optimization: 14 9
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(6))),8) preference(1,(1,2),1,for(atom(hasCost(2))),2) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,5),1,for(atom(hasPrep(0))),6) preference(1,(1,8),1,for(atom(hasPrepTime(3))),6) preference(1,(1,9),1,for(atom(hasPrep(7))),2) preference(1,(1,10),1,for(atom(hasPrepTime(2))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),6) preference(1,(1,13),1,for(atom(hasPrep(5))),6) preference(1,(1,14),1,for(atom(hasCost(1))),6) preference(1,less(weight)) output(8,better,91) output(25,better,52) output(25,better,55) output(25,better,91) output(52,better,91) output(55,better,91) output(62,better,75) output(62,better,17) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,91) output(52,worse,55) output(52,worse,8) output(55,worse,8) output(67,worse,55) output(67,worse,8) output(75,worse,17) output(99,worse,51) output(25,eq,86) output(67,eq,52) output(86,eq,8) output(76,eq,8) output(25,eq,8)
Optimization: 12 10
Answer: 6
preference(1,(1,1),1,for(atom(hasDifficulty(1))),5) preference(1,(1,2),1,for(atom(hasPrepTime(3))),5) preference(1,(1,3),1,for(atom(hasPrep(0))),5) preference(1,(1,4),1,for(atom(hasPrep(1))),5) preference(1,(1,5),1,for(atom(hasPrep(6))),5) preference(1,(1,6),1,for(atom(hasCost(2))),5) preference(1,(1,8),1,for(atom(hasPrep(7))),7) preference(1,(1,9),1,for(atom(hasPrepTime(2))),6) preference(1,(1,10),1,for(atom(hasPrep(2))),1) preference(1,(1,12),1,for(atom(hasCost(1))),8) preference(1,(1,13),1,for(atom(hasDifficulty(2))),8) preference(1,(1,14),1,for(atom(hasPrep(5))),4) preference(1,less(weight)) output(8,better,91) output(25,better,86) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,55) output(62,better,17) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,91) output(75,better,17) output(99,better,51) output(52,worse,8) output(55,worse,8) output(55,worse,91) output(62,worse,75) output(67,worse,52) output(67,worse,55) output(67,worse,8) output(67,worse,91) output(86,eq,8) output(76,eq,8) output(52,eq,91)
Optimization: 11 12
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(2))),7) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasPrep(7))),5) preference(1,(1,5),1,for(atom(hasPrep(1))),3) preference(1,(1,6),1,for(atom(hasPrep(0))),7) preference(1,(1,7),1,for(atom(hasPrep(5))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),7) preference(1,(1,11),1,for(atom(hasDifficulty(2))),7) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasPrep(6))),4) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(8,better,91) output(25,better,52) output(25,better,55) output(25,better,91) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(25,worse,86) output(52,worse,55) output(52,worse,8) output(55,worse,8) output(62,worse,75) output(62,worse,17) output(99,worse,51) output(67,eq,8) output(25,eq,8) output(52,eq,91)
Optimization: 10 12
Progression : [ 1;10] (Error: 9)
Answer: 8
preference(1,(1,2),1,for(atom(hasPrep(7))),5) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,5),1,for(atom(hasPrep(1))),3) preference(1,(1,6),1,for(atom(hasPrep(0))),7) preference(1,(1,7),1,for(atom(hasPrep(5))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),7) preference(1,(1,11),1,for(atom(hasDifficulty(2))),7) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasPrep(6))),4) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(8,better,91) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(52,worse,55) output(52,worse,8) output(55,worse,8) output(62,worse,75) output(62,worse,17) output(99,worse,51) output(25,eq,86) output(67,eq,8) output(52,eq,91)
Optimization: 9 11
Answer: 9
preference(1,(1,1),1,for(atom(hasDifficulty(2))),8) preference(1,(1,2),1,for(atom(hasPrep(7))),5) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,5),1,for(atom(hasPrep(1))),3) preference(1,(1,6),1,for(atom(hasPrep(0))),7) preference(1,(1,7),1,for(atom(hasPrep(5))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),7) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasPrep(6))),4) preference(1,(1,14),1,for(atom(hasCost(2))),1) preference(1,less(weight)) output(8,better,91) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,91) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(52,worse,55) output(52,worse,8) output(55,worse,8) output(62,worse,75) output(62,worse,17) output(99,worse,51) output(25,eq,86) output(67,eq,8)
Optimization: 8 11
Answer: 10
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrepTime(3))),7) preference(1,(1,3),1,for(atom(hasPrep(1))),5) preference(1,(1,4),1,for(atom(hasPrepTime(2))),1) preference(1,(1,5),1,for(atom(hasPrep(5))),4) preference(1,(1,6),1,for(atom(hasPrep(6))),1) preference(1,(1,7),1,for(atom(hasDifficulty(2))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),7) preference(1,(1,11),1,for(atom(hasCost(2))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),5) preference(1,(1,14),1,for(atom(hasPrep(2))),3) preference(1,less(weight)) output(25,better,86) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,8) output(52,better,91) output(55,better,8) output(55,better,91) output(67,better,52) output(67,better,8) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(99,better,51) output(8,worse,91) output(52,worse,55) output(62,worse,75) output(62,worse,17) output(75,worse,17) output(67,eq,55)
Optimization: 6 12
Answer: 11
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrepTime(3))),7) preference(1,(1,3),1,for(atom(hasPrep(1))),5) preference(1,(1,4),1,for(atom(hasPrepTime(2))),1) preference(1,(1,6),1,for(atom(hasPrep(6))),1) preference(1,(1,7),1,for(atom(hasDifficulty(2))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),7) preference(1,(1,11),1,for(atom(hasCost(2))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),5) preference(1,(1,13),1,for(atom(hasPrep(2))),2) preference(1,(1,14),1,for(atom(hasPrep(5))),3) preference(1,less(weight)) output(25,better,86) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,8) output(52,better,91) output(55,better,8) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,8) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(99,better,51) output(8,worse,91) output(52,worse,55) output(62,worse,75) output(62,worse,17) output(75,worse,17)
Optimization: 5 12
Answer: 12
preference(1,(1,1),1,for(atom(hasPrep(2))),8) preference(1,(1,2),1,for(atom(hasPrepTime(3))),1) preference(1,(1,3),1,for(atom(hasCost(1))),3) preference(1,(1,4),1,for(atom(hasPrep(1))),8) preference(1,(1,5),1,for(atom(hasPrep(4))),2) preference(1,(1,6),1,for(atom(hasCost(2))),6) preference(1,(1,7),1,for(atom(hasDifficulty(1))),1) preference(1,(1,8),1,for(atom(hasPrep(7))),4) preference(1,(1,9),1,for(atom(hasPrep(0))),7) preference(1,(1,10),1,for(atom(hasPrepTime(2))),2) preference(1,(1,11),1,for(atom(hasDifficulty(2))),2) preference(1,(1,12),1,for(atom(hasPrep(5))),6) preference(1,(1,13),1,for(atom(hasPrep(3))),4) preference(1,(1,14),1,for(atom(hasPrep(6))),1) preference(1,less(weight)) output(8,better,91) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,55) output(52,better,8) output(52,better,91) output(55,better,8) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,8) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(25,worse,86) output(62,worse,75) output(62,worse,17) output(99,worse,51)
Optimization: 4 14
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(2))),8) preference(1,(1,2),1,for(atom(hasPrep(1))),8) preference(1,(1,3),1,for(atom(hasCost(1))),3) preference(1,(1,4),1,for(atom(hasPrepTime(3))),5) preference(1,(1,6),1,for(atom(hasCost(2))),6) preference(1,(1,7),1,for(atom(hasDifficulty(1))),1) preference(1,(1,8),1,for(atom(hasPrep(7))),4) preference(1,(1,9),1,for(atom(hasPrepTime(2))),7) preference(1,(1,11),1,for(atom(hasDifficulty(2))),2) preference(1,(1,12),1,for(atom(hasPrep(5))),6) preference(1,(1,14),1,for(atom(hasPrep(0))),7) preference(1,less(weight)) output(8,better,91) output(25,better,86) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,55) output(52,better,8) output(52,better,91) output(55,better,8) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,8) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(62,worse,75) output(62,worse,17) output(99,worse,51)
Optimization: 3 11
Answer: 14
preference(1,(1,1),1,for(atom(hasPrepTime(3))),2) preference(1,(1,2),1,for(atom(hasPrep(6))),1) preference(1,(1,3),1,for(atom(hasPrep(0))),8) preference(1,(1,4),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasPrep(7))),6) preference(1,(1,6),1,for(atom(hasDifficulty(2))),7) preference(1,(1,7),1,for(atom(hasPrepTime(2))),6) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),7) preference(1,(1,12),1,for(atom(hasDifficulty(1))),4) preference(1,(1,13),1,for(atom(hasPrep(5))),7) preference(1,(1,14),1,for(atom(hasCost(2))),7) preference(1,less(weight)) output(8,better,91) output(25,better,86) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,55) output(52,better,8) output(52,better,91) output(55,better,8) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,8) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(99,better,51) output(62,worse,75) output(62,worse,17)
Optimization: 2 12
Answer: 15
preference(1,(1,1),1,for(atom(hasPrep(2))),1) preference(1,(1,2),1,for(atom(hasCost(2))),8) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,7),1,for(atom(hasDifficulty(1))),2) preference(1,(1,8),1,for(atom(hasPrep(0))),6) preference(1,(1,9),1,for(atom(hasPrepTime(2))),5) preference(1,(1,11),1,for(atom(hasPrepTime(3))),4) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,(1,13),1,for(atom(hasPrep(6))),4) preference(1,less(weight)) output(8,better,91) output(25,better,86) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,55) output(52,better,8) output(52,better,91) output(55,better,8) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,8) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(99,better,51) output(62,worse,75) output(62,worse,17)
Optimization: 2 11
Progression : [2;2] (Error: 0)
Answer: 16
preference(1,(1,1),1,for(atom(hasPrep(5))),4) preference(1,(1,2),1,for(atom(hasPrepTime(2))),3) preference(1,(1,3),1,for(atom(hasPrep(6))),1) preference(1,(1,4),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasPrep(7))),6) preference(1,(1,11),1,for(atom(hasPrep(1))),4) preference(1,(1,13),1,for(atom(hasDifficulty(2))),8) preference(1,(1,14),1,for(atom(hasPrep(0))),8) preference(1,less(weight)) output(8,better,91) output(25,better,86) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,55) output(52,better,8) output(52,better,91) output(55,better,8) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,8) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(99,better,51) output(62,worse,75) output(62,worse,17)
Optimization: 2 8
Progression : 2 [1;8] (Error: 7)
Progression : 2 [2;8] (Error: 3)
Answer: 17
preference(1,(1,1),1,for(atom(hasDifficulty(2))),5) preference(1,(1,3),1,for(atom(hasPrep(0))),5) preference(1,(1,4),1,for(atom(hasPrep(1))),4) preference(1,(1,7),1,for(atom(hasPrepTime(2))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasPrep(2))),1) preference(1,(1,14),1,for(atom(hasPrep(7))),3) preference(1,less(weight)) output(8,better,91) output(25,better,86) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,55) output(52,better,8) output(52,better,91) output(55,better,8) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,8) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(99,better,51) output(62,worse,75) output(62,worse,17)
Optimization: 2 7
Answer: 18
preference(1,(1,2),1,for(atom(hasPrepTime(3))),6) preference(1,(1,6),1,for(atom(hasPrep(2))),5) preference(1,(1,11),1,for(atom(hasPrep(7))),2) preference(1,(1,12),1,for(atom(hasPrep(0))),4) preference(1,(1,13),1,for(atom(hasPrepTime(2))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(8,better,91) output(25,better,86) output(25,better,52) output(25,better,55) output(25,better,8) output(25,better,91) output(52,better,55) output(52,better,8) output(52,better,91) output(55,better,8) output(55,better,91) output(67,better,52) output(67,better,55) output(67,better,8) output(67,better,91) output(76,better,67) output(76,better,52) output(76,better,55) output(76,better,8) output(76,better,91) output(86,better,52) output(86,better,55) output(86,better,8) output(86,better,91) output(75,better,17) output(99,better,51) output(62,worse,75) output(62,worse,17)
Optimization: 2 6
Progression : 2 [3;6] (Error: 1)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.034 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 18+
  Optimum    : unknown
Optimization : 2 6
Bounds       : 2 [3;6]
Calls        : 1
Time         : 298.291s (Solving: 296.80s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1188.425s
Threads      : 4        (Winner: 4)

Choices      : 8953328  (Domain: 906278)
Conflicts    : 8036132  (Analyzed: 8036126)
Restarts     : 7324     (Average: 1097.23 Last: 284516)
Model-Level  : 36.3    
Problems     : 13       (Average Length: 0.31 Splits: 0)
Lemmas       : 8277839  (Deleted: 7866848)
  Binary     : 1034     (Ratio:   0.01%)
  Ternary    : 4900     (Ratio:   0.06%)
  Conflict   : 8036126  (Average Length:  212.2 Ratio:  97.08%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 241713   (Average Length:  255.5 Ratio:   2.92%) 
  Distributed: 80624    (Ratio:   1.00% Average LBD: 3.87) 
  Integrated : 241872   (Ratio: 300.00% Unit: 139 Average Jumps: 4.29)
Backjumps    : 8036126  (Average:  1.10 Max:  50 Sum: 8867528)
  Executed   : 8036124  (Average:  1.10 Max:  50 Sum: 8867516 Ratio: 100.00%)
  Bounded    : 2        (Average:  6.00 Max:   6 Sum:     12 Ratio:   0.00%)

Rules        : 85824   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8332    
Bodies       : 5541    
  Sum        : 48      
  Count      : 14      
Equivalences : 3414     (Atom=Atom: 313 Body=Body: 146 Other: 2955)
Tight        : Yes
Variables    : 4733     (Eliminated:    0 Frozen: 3263)
Constraints  : 85340    (Binary:  96.4% Ternary:   1.8% Other:   1.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrep(4)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrep(7)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(6)) ; 
  2 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasPrep(6)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasPrep(6)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasPrep(6)) ; 
  1 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrep(4)) ; 
  6 :: atom(hasCost(2)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(3)) ; 
  1 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(2)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(0)) ; 
  4 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(1)) 
}.
