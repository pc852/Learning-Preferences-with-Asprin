asprin_vL version 1.0
Reading from stdin
-:1233:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1243:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1258:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1339:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1600:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1613:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1790:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1919:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1991:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1995:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1995:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2001:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2100:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2126:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2246:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2280:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2302:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1150:1-16: info: no atoms over signature occur in program:
  output/3

-:1142:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1143:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(9,eq,100) output(90,eq,33) output(33,eq,79) output(79,eq,51) output(44,eq,16) output(16,eq,67) output(58,eq,90) output(90,eq,65) output(65,eq,79) output(79,eq,16) output(16,eq,22) output(92,eq,77) output(77,eq,10) output(92,eq,10) output(44,eq,22) output(79,eq,22) output(33,eq,16) output(65,eq,16) output(90,eq,79) output(58,eq,65) output(44,eq,67) output(79,eq,67) output(33,eq,51) output(65,eq,51) output(58,eq,33) output(90,eq,51) output(58,eq,51) output(33,eq,67) output(65,eq,67) output(90,eq,67) output(58,eq,79) output(90,eq,16) output(58,eq,16) output(33,eq,22) output(65,eq,22) output(90,eq,22) output(58,eq,22) output(58,eq,67)
Optimization: 38 0
Answer: 2
preference(1,(1,4),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,22) output(58,better,67) output(79,better,22) output(79,better,67) output(90,better,67) output(90,better,22) output(33,better,67) output(33,better,22) output(44,better,22) output(44,better,67) output(65,better,67) output(65,better,22) output(9,eq,100) output(90,eq,33) output(33,eq,79) output(79,eq,51) output(44,eq,16) output(58,eq,90) output(90,eq,65) output(65,eq,79) output(79,eq,16) output(92,eq,77) output(77,eq,10) output(92,eq,10) output(33,eq,16) output(65,eq,16) output(90,eq,79) output(58,eq,65) output(33,eq,51) output(65,eq,51) output(58,eq,33) output(90,eq,51) output(58,eq,51) output(58,eq,79) output(90,eq,16) output(58,eq,16)
Optimization: 24 1
Answer: 3
preference(1,(1,1),1,for(atom(hasPrep(1))),6) preference(1,(1,2),1,for(atom(hasCost(2))),6) preference(1,(1,3),1,for(atom(hasPrepTime(3))),6) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasPrep(2))),6) preference(1,(1,6),1,for(atom(hasPrep(7))),6) preference(1,(1,7),1,for(atom(hasPrepTime(1))),6) preference(1,(1,8),1,for(atom(hasPrep(3))),6) preference(1,(1,9),1,for(atom(hasPrep(5))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),5) preference(1,(1,11),1,for(atom(hasDifficulty(1))),5) preference(1,(1,12),1,for(atom(hasPrep(6))),5) preference(1,(1,13),1,for(atom(hasCost(1))),5) preference(1,(1,14),1,for(atom(hasPrep(0))),5) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,22) output(58,better,67) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,67) output(90,better,22) output(92,better,77) output(92,better,10) output(33,better,67) output(33,better,22) output(44,better,22) output(44,better,67) output(65,better,67) output(65,better,22) output(58,worse,79) output(90,worse,79) output(33,worse,79) output(65,worse,79) output(9,eq,100) output(90,eq,33) output(44,eq,16) output(58,eq,90) output(90,eq,65) output(77,eq,10) output(33,eq,16) output(65,eq,16) output(58,eq,65) output(33,eq,51) output(65,eq,51) output(58,eq,33) output(90,eq,51) output(58,eq,51) output(90,eq,16) output(58,eq,16)
Optimization: 20 14
Answer: 4
preference(1,(1,1),1,for(atom(hasCost(1))),1) preference(1,(1,2),1,for(atom(hasDifficulty(1))),1) preference(1,(1,4),1,for(atom(hasPrep(2))),3) preference(1,(1,5),1,for(atom(hasPrep(0))),8) preference(1,(1,6),1,for(atom(hasPrepTime(2))),1) preference(1,(1,7),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasPrep(7))),1) preference(1,(1,9),1,for(atom(hasPrep(3))),1) preference(1,(1,10),1,for(atom(hasPrep(4))),7) preference(1,(1,14),1,for(atom(hasPrep(5))),1) preference(1,less(weight)) output(58,better,90) output(58,better,51) output(58,better,79) output(58,better,16) output(77,better,10) output(90,better,79) output(90,better,16) output(92,better,10) output(9,better,100) output(33,better,79) output(33,better,16) output(33,better,51) output(44,better,16) output(44,better,22) output(44,better,67) output(65,better,79) output(65,better,16) output(65,better,51) output(16,worse,67) output(16,worse,22) output(79,worse,51) output(79,worse,22) output(79,worse,67) output(90,worse,33) output(90,worse,65) output(90,worse,67) output(90,worse,22) output(79,eq,16) output(92,eq,77) output(58,eq,65) output(58,eq,33) output(90,eq,51) output(33,eq,67) output(65,eq,67) output(33,eq,22) output(65,eq,22) output(58,eq,22) output(58,eq,67)
Optimization: 20 10
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(1))),6) preference(1,(1,2),1,for(atom(hasCost(2))),6) preference(1,(1,3),1,for(atom(hasPrepTime(3))),6) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasPrep(2))),6) preference(1,(1,6),1,for(atom(hasPrep(7))),6) preference(1,(1,7),1,for(atom(hasPrepTime(1))),6) preference(1,(1,8),1,for(atom(hasPrep(4))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),5) preference(1,(1,11),1,for(atom(hasDifficulty(1))),5) preference(1,(1,12),1,for(atom(hasPrep(6))),5) preference(1,(1,13),1,for(atom(hasCost(1))),5) preference(1,(1,14),1,for(atom(hasPrep(0))),5) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,22) output(58,better,67) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,67) output(90,better,22) output(92,better,77) output(92,better,10) output(9,better,100) output(33,better,67) output(33,better,22) output(44,better,22) output(44,better,67) output(65,better,67) output(65,better,22) output(58,worse,79) output(90,worse,79) output(33,worse,79) output(65,worse,79) output(90,eq,33) output(44,eq,16) output(58,eq,90) output(90,eq,65) output(77,eq,10) output(33,eq,16) output(65,eq,16) output(58,eq,65) output(33,eq,51) output(65,eq,51) output(58,eq,33) output(90,eq,51) output(58,eq,51) output(90,eq,16) output(58,eq,16)
Optimization: 19 14
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(4))),7) preference(1,(1,2),1,for(atom(hasDifficulty(2))),7) preference(1,(1,3),1,for(atom(hasPrep(3))),2) preference(1,(1,4),1,for(atom(hasPrepTime(1))),2) preference(1,(1,5),1,for(atom(hasPrepTime(3))),5) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,7),1,for(atom(hasPrep(5))),7) preference(1,(1,8),1,for(atom(hasCost(2))),3) preference(1,(1,9),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasPrep(1))),5) preference(1,(1,11),1,for(atom(hasPrep(2))),2) preference(1,(1,12),1,for(atom(hasDifficulty(1))),5) preference(1,(1,13),1,for(atom(hasCost(1))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,90) output(58,better,65) output(58,better,33) output(58,better,51) output(58,better,79) output(58,better,16) output(58,better,22) output(58,better,67) output(77,better,10) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,33) output(90,better,65) output(90,better,79) output(90,better,51) output(90,better,67) output(90,better,16) output(90,better,22) output(92,better,77) output(92,better,10) output(9,better,100) output(33,better,79) output(33,better,16) output(33,better,51) output(33,better,67) output(33,better,22) output(44,better,16) output(44,better,22) output(44,better,67) output(65,better,79) output(65,better,16) output(65,better,51) output(65,better,67) output(65,better,22)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 7
preference(1,(1,1),1,for(atom(hasDifficulty(1))),7) preference(1,(1,2),1,for(atom(hasDifficulty(2))),8) preference(1,(1,3),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasPrep(4))),8) preference(1,(1,6),1,for(atom(hasPrep(0))),4) preference(1,(1,7),1,for(atom(hasPrep(2))),5) preference(1,(1,8),1,for(atom(hasPrepTime(3))),4) preference(1,(1,9),1,for(atom(hasCost(1))),2) preference(1,(1,10),1,for(atom(hasPrep(6))),4) preference(1,(1,11),1,for(atom(hasCost(2))),5) preference(1,(1,12),1,for(atom(hasPrepTime(2))),5) preference(1,(1,13),1,for(atom(hasPrepTime(1))),8) preference(1,(1,14),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,90) output(58,better,65) output(58,better,33) output(58,better,51) output(58,better,79) output(58,better,16) output(58,better,22) output(58,better,67) output(77,better,10) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,33) output(90,better,65) output(90,better,79) output(90,better,51) output(90,better,67) output(90,better,16) output(90,better,22) output(92,better,77) output(92,better,10) output(9,better,100) output(33,better,79) output(33,better,16) output(33,better,51) output(33,better,67) output(33,better,22) output(44,better,16) output(44,better,22) output(44,better,67) output(65,better,79) output(65,better,16) output(65,better,51) output(65,better,67) output(65,better,22)
Optimization: 0 13
Answer: 8
preference(1,(1,2),1,for(atom(hasPrepTime(1))),4) preference(1,(1,3),1,for(atom(hasPrep(0))),2) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasDifficulty(1))),8) preference(1,(1,8),1,for(atom(hasPrep(2))),8) preference(1,(1,9),1,for(atom(hasCost(2))),3) preference(1,(1,10),1,for(atom(hasPrep(6))),2) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),4) preference(1,(1,13),1,for(atom(hasPrep(1))),2) preference(1,(1,14),1,for(atom(hasPrepTime(2))),3) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,90) output(58,better,65) output(58,better,33) output(58,better,51) output(58,better,79) output(58,better,16) output(58,better,22) output(58,better,67) output(77,better,10) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,33) output(90,better,65) output(90,better,79) output(90,better,51) output(90,better,67) output(90,better,16) output(90,better,22) output(92,better,77) output(92,better,10) output(9,better,100) output(33,better,79) output(33,better,16) output(33,better,51) output(33,better,67) output(33,better,22) output(44,better,16) output(44,better,22) output(44,better,67) output(65,better,79) output(65,better,16) output(65,better,51) output(65,better,67) output(65,better,22)
Optimization: 0 12
Answer: 9
preference(1,(1,1),1,for(atom(hasPrepTime(2))),7) preference(1,(1,2),1,for(atom(hasPrepTime(3))),3) preference(1,(1,3),1,for(atom(hasDifficulty(2))),2) preference(1,(1,5),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasCost(1))),4) preference(1,(1,8),1,for(atom(hasCost(2))),5) preference(1,(1,9),1,for(atom(hasDifficulty(1))),1) preference(1,(1,10),1,for(atom(hasPrep(5))),6) preference(1,(1,12),1,for(atom(hasPrepTime(1))),8) preference(1,(1,13),1,for(atom(hasPrep(0))),2) preference(1,(1,14),1,for(atom(hasPrep(7))),4) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,90) output(58,better,65) output(58,better,33) output(58,better,51) output(58,better,79) output(58,better,16) output(58,better,22) output(58,better,67) output(77,better,10) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,33) output(90,better,65) output(90,better,79) output(90,better,51) output(90,better,67) output(90,better,16) output(90,better,22) output(92,better,77) output(92,better,10) output(9,better,100) output(33,better,79) output(33,better,16) output(33,better,51) output(33,better,67) output(33,better,22) output(44,better,16) output(44,better,22) output(44,better,67) output(65,better,79) output(65,better,16) output(65,better,51) output(65,better,67) output(65,better,22)
Optimization: 0 11
Answer: 10
preference(1,(1,1),1,for(atom(hasCost(1))),2) preference(1,(1,2),1,for(atom(hasDifficulty(1))),7) preference(1,(1,3),1,for(atom(hasDifficulty(2))),6) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasPrepTime(1))),4) preference(1,(1,6),1,for(atom(hasPrep(0))),5) preference(1,(1,7),1,for(atom(hasPrep(5))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),3) preference(1,(1,11),1,for(atom(hasPrepTime(3))),7) preference(1,(1,14),1,for(atom(hasPrep(2))),3) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,90) output(58,better,65) output(58,better,33) output(58,better,51) output(58,better,79) output(58,better,16) output(58,better,22) output(58,better,67) output(77,better,10) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,33) output(90,better,65) output(90,better,79) output(90,better,51) output(90,better,67) output(90,better,16) output(90,better,22) output(92,better,77) output(92,better,10) output(9,better,100) output(33,better,79) output(33,better,16) output(33,better,51) output(33,better,67) output(33,better,22) output(44,better,16) output(44,better,22) output(44,better,67) output(65,better,79) output(65,better,16) output(65,better,51) output(65,better,67) output(65,better,22)
Optimization: 0 10
Progression : 0 [ 2;10] (Error: 4)
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(5))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasCost(2))),3) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,8),1,for(atom(hasCost(1))),5) preference(1,(1,10),1,for(atom(hasPrep(1))),1) preference(1,(1,11),1,for(atom(hasPrep(0))),6) preference(1,(1,12),1,for(atom(hasPrepTime(1))),1) preference(1,(1,14),1,for(atom(hasPrep(2))),2) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,90) output(58,better,65) output(58,better,33) output(58,better,51) output(58,better,79) output(58,better,16) output(58,better,22) output(58,better,67) output(77,better,10) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,33) output(90,better,65) output(90,better,79) output(90,better,51) output(90,better,67) output(90,better,16) output(90,better,22) output(92,better,77) output(92,better,10) output(9,better,100) output(33,better,79) output(33,better,16) output(33,better,51) output(33,better,67) output(33,better,22) output(44,better,16) output(44,better,22) output(44,better,67) output(65,better,79) output(65,better,16) output(65,better,51) output(65,better,67) output(65,better,22)
Optimization: 0 9
Answer: 12
preference(1,(1,1),1,for(atom(hasPrep(5))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasCost(2))),3) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,8),1,for(atom(hasCost(1))),5) preference(1,(1,11),1,for(atom(hasPrep(0))),6) preference(1,(1,12),1,for(atom(hasPrepTime(1))),1) preference(1,(1,14),1,for(atom(hasPrep(2))),2) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,90) output(58,better,65) output(58,better,33) output(58,better,51) output(58,better,79) output(58,better,16) output(58,better,22) output(58,better,67) output(77,better,10) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,33) output(90,better,65) output(90,better,79) output(90,better,51) output(90,better,67) output(90,better,16) output(90,better,22) output(92,better,77) output(92,better,10) output(9,better,100) output(33,better,79) output(33,better,16) output(33,better,51) output(33,better,67) output(33,better,22) output(44,better,16) output(44,better,22) output(44,better,67) output(65,better,79) output(65,better,16) output(65,better,51) output(65,better,67) output(65,better,22)
Optimization: 0 8
Answer: 13
preference(1,(1,3),1,for(atom(hasPrepTime(1))),2) preference(1,(1,4),1,for(atom(hasPrep(0))),5) preference(1,(1,5),1,for(atom(hasPrep(4))),8) preference(1,(1,6),1,for(atom(hasPrep(2))),2) preference(1,(1,7),1,for(atom(hasCost(2))),4) preference(1,(1,11),1,for(atom(hasPrep(5))),8) preference(1,(1,12),1,for(atom(hasDifficulty(2))),4) preference(1,less(weight)) output(16,better,67) output(16,better,22) output(58,better,90) output(58,better,65) output(58,better,33) output(58,better,51) output(58,better,79) output(58,better,16) output(58,better,22) output(58,better,67) output(77,better,10) output(79,better,51) output(79,better,16) output(79,better,22) output(79,better,67) output(90,better,33) output(90,better,65) output(90,better,79) output(90,better,51) output(90,better,67) output(90,better,16) output(90,better,22) output(92,better,77) output(92,better,10) output(9,better,100) output(33,better,79) output(33,better,16) output(33,better,51) output(33,better,67) output(33,better,22) output(44,better,16) output(44,better,22) output(44,better,67) output(65,better,79) output(65,better,16) output(65,better,51) output(65,better,67) output(65,better,22)
Optimization: 0 7
Progression : 0 [3;7] (Error: 1.33333)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.102 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 13+
  Optimum    : unknown
Optimization : 0 7
Calls        : 1
Time         : 297.101s (Solving: 295.46s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1183.036s
Threads      : 4        (Winner: 4)

Choices      : 8611858  (Domain: 866447)
Conflicts    : 6984149  (Analyzed: 6984146)
Restarts     : 6101     (Average: 1144.75 Last: 585163)
Model-Level  : 54.2    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 7034566  (Deleted: 6831137)
  Binary     : 1631     (Ratio:   0.02%)
  Ternary    : 5502     (Ratio:   0.08%)
  Conflict   : 6984146  (Average Length:  244.7 Ratio:  99.28%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 50420    (Average Length:   33.1 Ratio:   0.72%) 
  Distributed: 16834    (Ratio:   0.24% Average LBD: 3.63) 
  Integrated : 50502    (Ratio: 300.00% Unit: 142 Average Jumps: 9.30)
Backjumps    : 6984146  (Average:  1.19 Max: 317 Sum: 8308966)
  Executed   : 6984145  (Average:  1.19 Max: 317 Sum: 8308955 Ratio: 100.00%)
  Bounded    : 1        (Average: 11.00 Max:  11 Sum:     11 Ratio:   0.00%)

Rules        : 103286  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 9328    
Bodies       : 5645    
  Sum        : 62      
  Count      : 14      
Equivalences : 3776     (Atom=Atom: 428 Body=Body: 201 Other: 3147)
Tight        : Yes
Variables    : 4780     (Eliminated:    0 Frozen: 3310)
Constraints  : 101893   (Binary:  96.9% Ternary:   1.5% Other:   1.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrep(3)) ; 
  7 :: atom(hasPrep(4)) ; 
  1 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrep(3)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrep(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(2)) ; 
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCost(1)) ; 
  5 :: atom(hasCost(2)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(2)) 
}.
