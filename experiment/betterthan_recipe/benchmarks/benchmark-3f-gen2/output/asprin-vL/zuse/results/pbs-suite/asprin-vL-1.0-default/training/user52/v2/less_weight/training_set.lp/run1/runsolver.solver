asprin_vL version 1.0
Reading from stdin
-:1233:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1243:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1258:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1339:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1600:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1613:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1790:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1919:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1991:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1995:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1995:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2001:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2100:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2126:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2246:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2280:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2302:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1150:1-16: info: no atoms over signature occur in program:
  output/3

-:1142:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1143:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(10,eq,39) output(21,eq,50) output(50,eq,58) output(58,eq,62) output(62,eq,67) output(67,eq,84) output(66,eq,32) output(8,eq,21) output(21,eq,67) output(18,eq,47) output(7,eq,42) output(42,eq,62) output(62,eq,89) output(58,eq,89) output(42,eq,89) output(7,eq,62) output(8,eq,67) output(62,eq,84) output(21,eq,84) output(58,eq,67) output(42,eq,67) output(50,eq,62) output(21,eq,58) output(8,eq,50) output(8,eq,58) output(21,eq,62) output(8,eq,62) output(7,eq,67) output(50,eq,67) output(8,eq,84) output(58,eq,84) output(42,eq,84) output(7,eq,84) output(50,eq,84) output(7,eq,89) output(50,eq,89) output(21,eq,89) output(8,eq,89)
Optimization: 38 0
Answer: 2
preference(1,(1,8),1,for(atom(hasPrep(6))),5) preference(1,(1,9),1,for(atom(hasDifficulty(2))),3) preference(1,less(weight)) output(8,better,21) output(8,better,58) output(8,better,89) output(10,better,39) output(50,better,58) output(50,better,89) output(62,better,89) output(42,better,89) output(21,worse,50) output(21,worse,67) output(21,worse,84) output(21,worse,62) output(58,worse,62) output(58,worse,67) output(58,worse,84) output(66,worse,32) output(7,worse,42) output(7,worse,62) output(7,worse,67) output(7,worse,84) output(7,worse,89) output(62,eq,67) output(67,eq,84) output(18,eq,47) output(42,eq,62) output(58,eq,89) output(8,eq,67) output(62,eq,84) output(42,eq,67) output(50,eq,62) output(21,eq,58) output(8,eq,50) output(8,eq,62) output(50,eq,67) output(8,eq,84) output(42,eq,84) output(50,eq,84) output(21,eq,89)
Optimization: 30 2
Answer: 3
preference(1,(1,1),1,for(atom(hasPrepTime(3))),3) preference(1,(1,2),1,for(atom(hasPrep(1))),3) preference(1,(1,3),1,for(atom(hasPrep(5))),3) preference(1,(1,4),1,for(atom(hasDifficulty(1))),3) preference(1,(1,5),1,for(atom(hasCost(1))),3) preference(1,(1,8),1,for(atom(hasPrep(0))),3) preference(1,(1,11),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(8,better,67) output(8,better,84) output(21,better,67) output(21,better,84) output(50,better,67) output(50,better,84) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,84) output(7,better,42) output(7,better,67) output(7,better,84) output(42,worse,62) output(42,worse,89) output(10,eq,39) output(21,eq,50) output(50,eq,58) output(58,eq,62) output(67,eq,84) output(66,eq,32) output(8,eq,21) output(18,eq,47) output(62,eq,89) output(58,eq,89) output(7,eq,62) output(42,eq,67) output(50,eq,62) output(21,eq,58) output(8,eq,50) output(8,eq,58) output(21,eq,62) output(8,eq,62) output(42,eq,84) output(7,eq,89) output(50,eq,89) output(21,eq,89) output(8,eq,89)
Optimization: 25 7
Answer: 4
preference(1,(1,1),1,for(atom(hasPrepTime(3))),3) preference(1,(1,2),1,for(atom(hasPrep(1))),3) preference(1,(1,3),1,for(atom(hasPrep(5))),3) preference(1,(1,4),1,for(atom(hasDifficulty(1))),3) preference(1,(1,5),1,for(atom(hasCost(1))),3) preference(1,(1,8),1,for(atom(hasPrep(0))),3) preference(1,(1,11),1,for(atom(hasPrep(7))),5) preference(1,(1,13),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(8,better,67) output(8,better,58) output(8,better,84) output(21,better,67) output(21,better,84) output(21,better,58) output(50,better,58) output(50,better,67) output(50,better,84) output(62,better,67) output(62,better,84) output(7,better,42) output(7,better,67) output(7,better,84) output(10,worse,39) output(58,worse,62) output(58,worse,89) output(42,worse,62) output(42,worse,89) output(21,eq,50) output(67,eq,84) output(66,eq,32) output(8,eq,21) output(18,eq,47) output(62,eq,89) output(7,eq,62) output(58,eq,67) output(42,eq,67) output(50,eq,62) output(8,eq,50) output(21,eq,62) output(8,eq,62) output(58,eq,84) output(42,eq,84) output(7,eq,89) output(50,eq,89) output(21,eq,89) output(8,eq,89)
Optimization: 24 8
Answer: 5
preference(1,(1,1),1,for(atom(hasPrepTime(1))),8) preference(1,(1,2),1,for(atom(hasPrep(7))),3) preference(1,(1,3),1,for(atom(hasPrep(2))),7) preference(1,(1,4),1,for(atom(hasPrep(6))),5) preference(1,(1,5),1,for(atom(hasDifficulty(1))),5) preference(1,(1,6),1,for(atom(hasCost(1))),5) preference(1,(1,7),1,for(atom(hasPrepTime(3))),5) preference(1,(1,8),1,for(atom(hasPrep(0))),5) preference(1,(1,9),1,for(atom(hasPrep(1))),5) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasCost(2))),5) preference(1,(1,12),1,for(atom(hasPrepTime(2))),5) preference(1,(1,14),1,for(atom(hasPrep(3))),8) preference(1,less(weight)) output(8,better,21) output(8,better,50) output(8,better,58) output(8,better,84) output(8,better,89) output(21,better,50) output(58,better,89) output(58,better,84) output(62,better,89) output(62,better,84) output(67,better,84) output(7,better,89) output(18,better,47) output(42,better,89) output(42,better,84) output(10,worse,39) output(21,worse,67) output(21,worse,84) output(21,worse,58) output(21,worse,62) output(50,worse,58) output(50,worse,62) output(50,worse,67) output(50,worse,84) output(50,worse,89) output(58,worse,62) output(58,worse,67) output(7,worse,42) output(7,worse,62) output(7,worse,67) output(62,eq,67) output(66,eq,32) output(42,eq,62) output(8,eq,67) output(42,eq,67) output(8,eq,62) output(7,eq,84) output(21,eq,89)
Optimization: 23 13
Answer: 6
preference(1,(1,1),1,for(atom(hasPrepTime(3))),3) preference(1,(1,2),1,for(atom(hasPrep(1))),3) preference(1,(1,3),1,for(atom(hasPrep(5))),3) preference(1,(1,4),1,for(atom(hasDifficulty(1))),3) preference(1,(1,5),1,for(atom(hasCost(1))),3) preference(1,(1,8),1,for(atom(hasPrep(0))),3) preference(1,(1,11),1,for(atom(hasPrep(3))),5) preference(1,(1,12),1,for(atom(hasPrepTime(2))),5) preference(1,(1,13),1,for(atom(hasPrepTime(1))),5) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,50) output(8,better,84) output(8,better,89) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,42) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(21,worse,58) output(21,worse,62) output(50,worse,58) output(50,worse,62) output(42,worse,62) output(10,eq,39) output(21,eq,50) output(58,eq,62) output(67,eq,84) output(66,eq,32) output(21,eq,67) output(42,eq,89) output(7,eq,62) output(21,eq,84) output(42,eq,67) output(8,eq,58) output(8,eq,62) output(50,eq,67) output(42,eq,84) output(50,eq,84) output(50,eq,89) output(21,eq,89)
Optimization: 22 9
Answer: 7
preference(1,(1,1),1,for(atom(hasPrepTime(1))),8) preference(1,(1,2),1,for(atom(hasCost(1))),2) preference(1,(1,3),1,for(atom(hasPrep(2))),5) preference(1,(1,4),1,for(atom(hasPrepTime(2))),8) preference(1,(1,5),1,for(atom(hasPrep(6))),5) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,8),1,for(atom(hasPrep(1))),5) preference(1,(1,9),1,for(atom(hasPrep(5))),3) preference(1,(1,10),1,for(atom(hasPrep(0))),6) preference(1,(1,14),1,for(atom(hasDifficulty(1))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,62) output(50,better,62) output(58,better,62) output(58,better,89) output(58,better,84) output(67,better,84) output(7,better,62) output(42,better,62) output(42,better,89) output(42,better,84) output(21,worse,67) output(21,worse,58) output(50,worse,58) output(50,worse,67) output(58,worse,67) output(62,worse,67) output(62,worse,89) output(62,worse,84) output(66,worse,32) output(7,worse,42) output(7,worse,67) output(21,eq,50) output(18,eq,47) output(21,eq,84) output(42,eq,67) output(7,eq,84) output(50,eq,84) output(7,eq,89) output(50,eq,89) output(21,eq,89)
Optimization: 20 10
Answer: 8
preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasCost(1))),5) preference(1,(1,4),1,for(atom(hasPrepTime(1))),5) preference(1,(1,7),1,for(atom(hasPrep(1))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),3) preference(1,(1,9),1,for(atom(hasPrepTime(2))),6) preference(1,(1,10),1,for(atom(hasPrep(2))),3) preference(1,(1,13),1,for(atom(hasPrep(6))),1) preference(1,less(weight)) output(8,better,67) output(8,better,62) output(8,better,84) output(8,better,89) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,62) output(21,better,89) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,84) output(67,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(8,worse,21) output(8,worse,58) output(10,worse,39) output(50,worse,58) output(66,worse,32) output(18,worse,47) output(42,worse,62) output(42,worse,89) output(42,worse,67) output(42,worse,84) output(62,eq,89) output(21,eq,58) output(8,eq,50)
Optimization: 13 8
Answer: 9
preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasCost(1))),5) preference(1,(1,4),1,for(atom(hasPrepTime(1))),5) preference(1,(1,7),1,for(atom(hasPrep(1))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),3) preference(1,(1,9),1,for(atom(hasPrepTime(2))),6) preference(1,(1,10),1,for(atom(hasPrep(2))),3) preference(1,(1,13),1,for(atom(hasPrep(6))),1) preference(1,(1,14),1,for(atom(hasPrep(7))),2) preference(1,less(weight)) output(8,better,67) output(8,better,62) output(8,better,84) output(8,better,89) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,84) output(67,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(8,worse,21) output(10,worse,39) output(66,worse,32) output(18,worse,47) output(42,worse,62) output(42,worse,89) output(42,worse,67) output(42,worse,84) output(50,eq,58) output(62,eq,89) output(8,eq,50) output(8,eq,58)
Optimization: 12 9
Answer: 10
preference(1,(1,1),1,for(atom(hasPrepTime(1))),5) preference(1,(1,3),1,for(atom(hasPrep(1))),5) preference(1,(1,4),1,for(atom(hasPrepTime(3))),2) preference(1,(1,5),1,for(atom(hasPrepTime(2))),3) preference(1,(1,6),1,for(atom(hasPrep(6))),1) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,8),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasDifficulty(2))),7) preference(1,(1,11),1,for(atom(hasPrep(5))),7) preference(1,(1,12),1,for(atom(hasCost(1))),6) preference(1,(1,13),1,for(atom(hasPrep(0))),7) preference(1,(1,14),1,for(atom(hasDifficulty(1))),8) preference(1,less(weight)) output(8,better,67) output(8,better,50) output(8,better,62) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(50,better,62) output(50,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(8,worse,21) output(8,worse,58) output(50,worse,58) output(50,worse,67) output(50,worse,84) output(62,worse,67) output(62,worse,89) output(62,worse,84) output(66,worse,32) output(18,worse,47) output(67,eq,84)
Optimization: 11 12
Answer: 11
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasPrep(0))),3) preference(1,(1,3),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrep(3))),5) preference(1,(1,11),1,for(atom(hasCost(2))),7) preference(1,(1,13),1,for(atom(hasPrep(6))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,58) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,89) output(50,better,58) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(42,better,89) output(42,better,67) output(42,better,84) output(21,worse,50) output(21,worse,62) output(58,worse,62) output(66,worse,32) output(42,worse,62) output(67,eq,84) output(50,eq,62) output(21,eq,58) output(8,eq,50) output(8,eq,62)
Optimization: 10 11
Answer: 12
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasPrep(0))),3) preference(1,(1,3),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrep(3))),2) preference(1,(1,11),1,for(atom(hasCost(2))),3) preference(1,(1,13),1,for(atom(hasPrep(6))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,58) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,89) output(50,better,58) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(21,worse,50) output(21,worse,62) output(58,worse,62) output(66,worse,32) output(67,eq,84) output(50,eq,62) output(21,eq,58) output(8,eq,50) output(8,eq,62)
Optimization: 9 11
Answer: 13
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasPrep(3))),1) preference(1,(1,3),1,for(atom(hasPrep(0))),3) preference(1,(1,5),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasPrep(7))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasCost(2))),3) preference(1,(1,11),1,for(atom(hasDifficulty(2))),7) preference(1,(1,13),1,for(atom(hasPrep(6))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,58) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,89) output(50,better,58) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(21,worse,50) output(21,worse,62) output(58,worse,62) output(66,worse,32) output(67,eq,84) output(50,eq,62) output(8,eq,50) output(8,eq,62)
Optimization: 8 11
Answer: 14
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasPrep(7))),1) preference(1,(1,3),1,for(atom(hasPrep(1))),1) preference(1,(1,5),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasCost(2))),3) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrep(0))),3) preference(1,(1,11),1,for(atom(hasPrep(3))),5) preference(1,(1,13),1,for(atom(hasPrep(6))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,89) output(50,better,58) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(21,worse,50) output(21,worse,62) output(58,worse,62) output(66,worse,32) output(67,eq,84) output(21,eq,58) output(8,eq,50)
Optimization: 7 11
Answer: 15
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasPrep(6))),5) preference(1,(1,3),1,for(atom(hasPrep(1))),5) preference(1,(1,5),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasPrep(7))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrep(0))),3) preference(1,(1,11),1,for(atom(hasCost(2))),5) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(50,better,58) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(21,worse,50) output(66,worse,32) output(18,worse,47) output(67,eq,84) output(62,eq,89) output(8,eq,50)
Optimization: 6 10
Answer: 16
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasPrep(6))),5) preference(1,(1,3),1,for(atom(hasPrep(1))),5) preference(1,(1,5),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasPrep(3))),7) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrep(0))),3) preference(1,(1,11),1,for(atom(hasCost(2))),5) preference(1,(1,13),1,for(atom(hasPrep(7))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(50,better,58) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(21,worse,50) output(66,worse,32) output(67,eq,84) output(62,eq,89) output(8,eq,50)
Optimization: 5 11
Answer: 17
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasPrep(3))),8) preference(1,(1,3),1,for(atom(hasPrepTime(1))),1) preference(1,(1,5),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasPrep(0))),3) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasCost(2))),5) preference(1,(1,11),1,for(atom(hasPrep(6))),5) preference(1,(1,13),1,for(atom(hasPrep(1))),5) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,62) output(21,better,89) output(50,better,58) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(21,worse,50) output(21,worse,58) output(66,worse,32) output(67,eq,84)
Optimization: 4 11
Answer: 18
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasPrep(6))),5) preference(1,(1,3),1,for(atom(hasPrepTime(1))),1) preference(1,(1,5),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasPrep(1))),5) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrep(3))),7) preference(1,(1,11),1,for(atom(hasPrep(0))),3) preference(1,(1,13),1,for(atom(hasPrep(7))),2) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(50,better,58) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(21,worse,50) output(66,worse,32) output(67,eq,84)
Optimization: 3 11
Answer: 19
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasPrep(6))),5) preference(1,(1,3),1,for(atom(hasPrep(2))),5) preference(1,(1,5),1,for(atom(hasPrep(1))),5) preference(1,(1,6),1,for(atom(hasPrep(0))),3) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrep(3))),7) preference(1,(1,11),1,for(atom(hasPrep(7))),2) preference(1,(1,13),1,for(atom(hasPrepTime(1))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(50,better,58) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(67,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(66,worse,32) output(21,eq,50)
Optimization: 2 11
Progression : [1;2] (Error: 1)
Progression : [2;2] (Error: 0)
Progression : 2 [ 1;11] (Error: 10)
Answer: 20
preference(1,(1,1),1,for(atom(hasPrepTime(3))),1) preference(1,(1,2),1,for(atom(hasPrepTime(1))),5) preference(1,(1,3),1,for(atom(hasPrep(3))),7) preference(1,(1,6),1,for(atom(hasPrep(5))),3) preference(1,(1,7),1,for(atom(hasPrep(6))),2) preference(1,(1,8),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasPrep(0))),3) preference(1,(1,10),1,for(atom(hasPrepTime(2))),7) preference(1,(1,13),1,for(atom(hasCost(1))),8) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(8,better,21) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(10,better,39) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(50,better,58) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(67,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(18,better,47) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(21,worse,50) output(66,worse,32)
Optimization: 2 10
Progression : 2 [ 2;10] (Error: 4)
Progression : 2 [ 3;10] (Error: 2.33333)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.035 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 20+
  Optimum    : unknown
Optimization : 2 10
Bounds       : 2 [3;10]
Calls        : 1
Time         : 297.797s (Solving: 296.13s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1186.027s
Threads      : 4        (Winner: 4)

Choices      : 9293769  (Domain: 674809)
Conflicts    : 8168651  (Analyzed: 8168646)
Restarts     : 7162     (Average: 1140.55 Last: 525403)
Model-Level  : 44.6    
Problems     : 13       (Average Length: 0.31 Splits: 0)
Lemmas       : 8369630  (Deleted: 8092323)
  Binary     : 842      (Ratio:   0.01%)
  Ternary    : 7372     (Ratio:   0.09%)
  Conflict   : 8168646  (Average Length:  163.8 Ratio:  97.60%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 200984   (Average Length:   47.4 Ratio:   2.40%) 
  Distributed: 67450    (Ratio:   0.83% Average LBD: 3.72) 
  Integrated : 202350   (Ratio: 300.00% Unit: 210 Average Jumps: 5.02)
Backjumps    : 8168646  (Average:  1.13 Max:  51 Sum: 9218779)
  Executed   : 8168642  (Average:  1.13 Max:  51 Sum: 9218739 Ratio: 100.00%)
  Bounded    : 4        (Average: 10.00 Max:  37 Sum:     40 Ratio:   0.00%)

Rules        : 105190  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 9352    
Bodies       : 5659    
  Sum        : 76      
  Count      : 14      
Equivalences : 3748     (Atom=Atom: 393 Body=Body: 166 Other: 3189)
Tight        : Yes
Variables    : 4825     (Eliminated:    0 Frozen: 3355)
Constraints  : 103856   (Binary:  97.0% Ternary:   1.5% Other:   1.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(3)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(2)) ; 
  5 :: atom(hasCost(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  8 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(3)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrep(3)) ; 
  3 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(3)) ; 
  3 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  3 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(3)) ; 
  7 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(3)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(3)) ; 
  3 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(3)) ; 
  2 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(1)) 
}.
