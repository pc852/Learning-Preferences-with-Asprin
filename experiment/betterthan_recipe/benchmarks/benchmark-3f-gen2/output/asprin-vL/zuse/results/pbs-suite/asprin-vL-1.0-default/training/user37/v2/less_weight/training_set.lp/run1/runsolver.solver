asprin_vL version 1.0
Reading from stdin
-:1223:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1233:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1248:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1329:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1590:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1603:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1780:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1909:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1981:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1985:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1985:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1991:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2090:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2116:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2236:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2270:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2292:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1140:1-16: info: no atoms over signature occur in program:
  output/3

-:1132:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1133:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(99,eq,57) output(57,eq,91) output(91,eq,51) output(51,eq,76) output(76,eq,55) output(71,eq,67) output(99,eq,30) output(30,eq,60) output(94,eq,76) output(78,eq,71) output(71,eq,98) output(98,eq,53) output(71,eq,53) output(78,eq,98) output(99,eq,60) output(78,eq,67) output(51,eq,55) output(94,eq,55) output(91,eq,76) output(57,eq,51) output(99,eq,91) output(99,eq,51) output(57,eq,76) output(99,eq,76) output(91,eq,55) output(57,eq,55) output(78,eq,53) output(99,eq,55)
Optimization: 28 0
Answer: 2
preference(1,(1,4),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(30,better,60) output(57,better,51) output(91,better,51) output(99,better,60) output(99,better,51) output(51,worse,76) output(51,worse,55) output(99,eq,57) output(57,eq,91) output(76,eq,55) output(71,eq,67) output(99,eq,30) output(94,eq,76) output(78,eq,71) output(71,eq,98) output(98,eq,53) output(71,eq,53) output(78,eq,98) output(78,eq,67) output(94,eq,55) output(91,eq,76) output(99,eq,91) output(57,eq,76) output(99,eq,76) output(91,eq,55) output(57,eq,55) output(78,eq,53) output(99,eq,55)
Optimization: 23 1
Answer: 3
preference(1,(1,2),1,for(atom(hasPrep(7))),8) preference(1,less(weight)) output(51,better,55) output(57,better,55) output(76,better,55) output(94,better,55) output(91,better,55) output(99,better,55) output(99,eq,57) output(57,eq,91) output(91,eq,51) output(51,eq,76) output(71,eq,67) output(99,eq,30) output(30,eq,60) output(94,eq,76) output(78,eq,71) output(71,eq,98) output(98,eq,53) output(71,eq,53) output(78,eq,98) output(99,eq,60) output(78,eq,67) output(91,eq,76) output(57,eq,51) output(99,eq,91) output(99,eq,51) output(57,eq,76) output(99,eq,76) output(78,eq,53)
Optimization: 22 1
Answer: 4
preference(1,(1,1),1,for(atom(hasPrep(0))),6) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),6) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrep(2))),6) preference(1,(1,7),1,for(atom(hasPrep(5))),6) preference(1,(1,8),1,for(atom(hasPrep(3))),7) preference(1,(1,9),1,for(atom(hasPrep(7))),8) preference(1,(1,10),1,for(atom(hasPrepTime(1))),7) preference(1,(1,11),1,for(atom(hasPrep(1))),5) preference(1,(1,12),1,for(atom(hasCost(1))),5) preference(1,(1,13),1,for(atom(hasDifficulty(1))),5) preference(1,(1,14),1,for(atom(hasPrepTime(3))),5) preference(1,less(weight)) output(51,better,55) output(76,better,55) output(94,better,55) output(78,better,71) output(91,better,55) output(99,better,57) output(99,better,55) output(57,worse,91) output(57,worse,51) output(57,worse,76) output(57,worse,55) output(71,worse,67) output(71,worse,98) output(71,worse,53) output(91,eq,51) output(51,eq,76) output(99,eq,30) output(30,eq,60) output(94,eq,76) output(98,eq,53) output(78,eq,98) output(99,eq,60) output(78,eq,67) output(91,eq,76) output(99,eq,91) output(99,eq,51) output(99,eq,76) output(78,eq,53)
Optimization: 21 14
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(0))),6) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),6) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrep(2))),6) preference(1,(1,7),1,for(atom(hasPrep(5))),6) preference(1,(1,8),1,for(atom(hasPrep(3))),1) preference(1,(1,9),1,for(atom(hasPrep(7))),8) preference(1,(1,10),1,for(atom(hasPrepTime(1))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),5) preference(1,(1,12),1,for(atom(hasCost(1))),5) preference(1,(1,13),1,for(atom(hasDifficulty(1))),5) preference(1,(1,14),1,for(atom(hasPrepTime(3))),5) preference(1,less(weight)) output(51,better,55) output(57,better,55) output(76,better,55) output(94,better,55) output(78,better,71) output(91,better,55) output(99,better,57) output(99,better,55) output(57,worse,91) output(57,worse,51) output(57,worse,76) output(71,worse,67) output(71,worse,98) output(71,worse,53) output(91,eq,51) output(51,eq,76) output(99,eq,30) output(30,eq,60) output(94,eq,76) output(98,eq,53) output(78,eq,98) output(99,eq,60) output(78,eq,67) output(91,eq,76) output(99,eq,91) output(99,eq,51) output(99,eq,76) output(78,eq,53)
Optimization: 20 14
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(0))),6) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),6) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrep(2))),6) preference(1,(1,7),1,for(atom(hasPrep(5))),8) preference(1,(1,8),1,for(atom(hasPrepTime(1))),8) preference(1,(1,9),1,for(atom(hasPrep(3))),8) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),5) preference(1,(1,12),1,for(atom(hasCost(1))),5) preference(1,(1,13),1,for(atom(hasDifficulty(1))),5) preference(1,(1,14),1,for(atom(hasPrepTime(3))),5) preference(1,less(weight)) output(51,better,76) output(51,better,55) output(94,better,76) output(94,better,55) output(78,better,71) output(78,better,67) output(91,better,76) output(91,better,55) output(99,better,57) output(99,better,76) output(99,better,55) output(57,worse,91) output(57,worse,51) output(57,worse,76) output(57,worse,55) output(71,worse,98) output(71,worse,53) output(91,eq,51) output(76,eq,55) output(71,eq,67) output(99,eq,30) output(30,eq,60) output(98,eq,53) output(78,eq,98) output(99,eq,60) output(99,eq,91) output(99,eq,51) output(78,eq,53)
Optimization: 17 14
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(0))),6) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),6) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrep(2))),6) preference(1,(1,7),1,for(atom(hasPrep(5))),8) preference(1,(1,8),1,for(atom(hasPrepTime(1))),8) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),5) preference(1,(1,12),1,for(atom(hasCost(1))),5) preference(1,(1,13),1,for(atom(hasDifficulty(1))),5) preference(1,(1,14),1,for(atom(hasPrepTime(3))),5) preference(1,less(weight)) output(51,better,76) output(51,better,55) output(57,better,76) output(57,better,55) output(94,better,76) output(94,better,55) output(78,better,71) output(78,better,67) output(91,better,76) output(91,better,55) output(99,better,76) output(99,better,55) output(71,worse,98) output(71,worse,53) output(99,eq,57) output(57,eq,91) output(91,eq,51) output(76,eq,55) output(71,eq,67) output(99,eq,30) output(30,eq,60) output(98,eq,53) output(78,eq,98) output(99,eq,60) output(57,eq,51) output(99,eq,91) output(99,eq,51) output(78,eq,53)
Optimization: 16 13
Answer: 8
preference(1,(1,1),1,for(atom(hasPrepTime(2))),7) preference(1,(1,2),1,for(atom(hasPrep(1))),1) preference(1,(1,3),1,for(atom(hasCost(1))),6) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasPrep(6))),6) preference(1,(1,6),1,for(atom(hasPrep(0))),4) preference(1,(1,8),1,for(atom(hasPrep(5))),1) preference(1,(1,10),1,for(atom(hasPrep(2))),2) preference(1,(1,11),1,for(atom(hasCost(2))),7) preference(1,(1,13),1,for(atom(hasPrepTime(3))),6) preference(1,(1,14),1,for(atom(hasDifficulty(2))),2) preference(1,less(weight)) output(51,better,76) output(51,better,55) output(71,better,67) output(71,better,98) output(71,better,53) output(78,better,98) output(78,better,67) output(78,better,53) output(98,better,53) output(99,better,57) output(99,better,30) output(99,better,60) output(99,better,91) output(30,worse,60) output(57,worse,91) output(57,worse,51) output(57,worse,76) output(57,worse,55) output(94,worse,76) output(94,worse,55) output(91,worse,51) output(91,worse,76) output(91,worse,55) output(99,worse,51) output(99,worse,76) output(99,worse,55) output(76,eq,55) output(78,eq,71)
Optimization: 15 11
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(4))),1) preference(1,(1,2),1,for(atom(hasPrepTime(1))),2) preference(1,(1,3),1,for(atom(hasPrep(2))),4) preference(1,(1,4),1,for(atom(hasCost(2))),4) preference(1,(1,5),1,for(atom(hasPrep(5))),6) preference(1,(1,6),1,for(atom(hasPrepTime(3))),5) preference(1,(1,7),1,for(atom(hasPrep(7))),7) preference(1,(1,8),1,for(atom(hasCost(1))),8) preference(1,(1,9),1,for(atom(hasPrepTime(2))),7) preference(1,(1,10),1,for(atom(hasDifficulty(2))),5) preference(1,(1,13),1,for(atom(hasPrep(3))),7) preference(1,less(weight)) output(30,better,60) output(51,better,76) output(51,better,55) output(57,better,91) output(57,better,51) output(57,better,76) output(57,better,55) output(71,better,67) output(71,better,98) output(71,better,53) output(76,better,55) output(94,better,76) output(94,better,55) output(78,better,71) output(78,better,98) output(78,better,67) output(78,better,53) output(91,better,51) output(91,better,76) output(91,better,55) output(98,better,53) output(99,better,57) output(99,better,30) output(99,better,60) output(99,better,91) output(99,better,51) output(99,better,76) output(99,better,55)
Optimization: 0 11
Progression : 0 [ 1;11] (Error: 10)
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,3),1,for(atom(hasPrep(5))),7) preference(1,(1,4),1,for(atom(hasPrep(1))),4) preference(1,(1,5),1,for(atom(hasDifficulty(1))),1) preference(1,(1,6),1,for(atom(hasDifficulty(2))),8) preference(1,(1,10),1,for(atom(hasPrep(2))),7) preference(1,(1,11),1,for(atom(hasPrepTime(2))),7) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasCost(1))),6) preference(1,(1,14),1,for(atom(hasPrep(0))),4) preference(1,less(weight)) output(30,better,60) output(51,better,76) output(51,better,55) output(57,better,91) output(57,better,51) output(57,better,76) output(57,better,55) output(71,better,67) output(71,better,98) output(71,better,53) output(76,better,55) output(94,better,76) output(94,better,55) output(78,better,71) output(78,better,98) output(78,better,67) output(78,better,53) output(91,better,51) output(91,better,76) output(91,better,55) output(98,better,53) output(99,better,57) output(99,better,30) output(99,better,60) output(99,better,91) output(99,better,51) output(99,better,76) output(99,better,55)
Optimization: 0 10
Progression : 0 [ 2;10] (Error: 4)
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(7))),8) preference(1,(1,2),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasDifficulty(2))),4) preference(1,(1,5),1,for(atom(hasPrepTime(1))),2) preference(1,(1,7),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasPrepTime(3))),4) preference(1,(1,13),1,for(atom(hasPrepTime(2))),6) preference(1,(1,14),1,for(atom(hasCost(1))),3) preference(1,less(weight)) output(30,better,60) output(51,better,76) output(51,better,55) output(57,better,91) output(57,better,51) output(57,better,76) output(57,better,55) output(71,better,67) output(71,better,98) output(71,better,53) output(76,better,55) output(94,better,76) output(94,better,55) output(78,better,71) output(78,better,98) output(78,better,67) output(78,better,53) output(91,better,51) output(91,better,76) output(91,better,55) output(98,better,53) output(99,better,57) output(99,better,30) output(99,better,60) output(99,better,91) output(99,better,51) output(99,better,76) output(99,better,55)
Optimization: 0 8
Progression : 0 [3;8] (Error: 1.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.044 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 11+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 298.022s (Solving: 296.43s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1187.112s
Threads      : 4        (Winner: 4)

Choices      : 6523173  (Domain: 530626)
Conflicts    : 5238027  (Analyzed: 5238024)
Restarts     : 4974     (Average: 1053.08 Last: 157935)
Model-Level  : 58.5    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 5279502  (Deleted: 5084519)
  Binary     : 1795     (Ratio:   0.03%)
  Ternary    : 4524     (Ratio:   0.09%)
  Conflict   : 5238024  (Average Length:  261.0 Ratio:  99.21%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 41478    (Average Length:   32.2 Ratio:   0.79%) 
  Distributed: 13836    (Ratio:   0.26% Average LBD: 3.63) 
  Integrated : 41508    (Ratio: 300.00% Unit: 66 Average Jumps: 11.03)
Backjumps    : 5238024  (Average:  1.20 Max: 493 Sum: 6287306)
  Executed   : 5238023  (Average:  1.20 Max: 493 Sum: 6287290 Ratio: 100.00%)
  Bounded    : 1        (Average: 16.00 Max:  16 Sum:     16 Ratio:   0.00%)

Rules        : 87728   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8356    
Bodies       : 5549    
  Sum        : 56      
  Count      : 14      
Equivalences : 3398     (Atom=Atom: 293 Body=Body: 126 Other: 2979)
Tight        : Yes
Variables    : 4769     (Eliminated:    0 Frozen: 3299)
Constraints  : 87288    (Binary:  96.4% Ternary:   1.7% Other:   1.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(1)) ; 
  6 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(1)) 
}.
