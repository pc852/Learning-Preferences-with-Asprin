asprin_vL version 1.0
Reading from stdin
-:1234:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1244:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1259:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1340:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1601:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1614:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1791:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1920:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1992:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1996:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1996:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2002:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2101:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2127:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2247:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2281:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2303:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1151:1-16: info: no atoms over signature occur in program:
  output/3

-:1143:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1144:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(26,eq,28) output(28,eq,98) output(52,eq,41) output(96,eq,8) output(8,eq,20) output(20,eq,46) output(7,eq,2) output(2,eq,3) output(3,eq,74) output(74,eq,86) output(86,eq,28) output(28,eq,76) output(79,eq,20) output(26,eq,76) output(86,eq,76) output(74,eq,28) output(3,eq,86) output(2,eq,74) output(7,eq,3) output(8,eq,46) output(79,eq,46) output(96,eq,20) output(26,eq,98) output(86,eq,98) output(74,eq,98) output(3,eq,98) output(96,eq,46) output(7,eq,74) output(2,eq,86) output(7,eq,86) output(3,eq,28) output(2,eq,28) output(74,eq,76) output(3,eq,76) output(2,eq,76) output(7,eq,76) output(7,eq,28) output(2,eq,98) output(7,eq,98)
Optimization: 39 0
Answer: 2
preference(1,(1,2),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(3,better,86) output(3,better,76) output(52,better,41) output(74,better,86) output(74,better,76) output(96,better,8) output(2,better,86) output(2,better,76) output(28,better,76) output(8,worse,20) output(8,worse,46) output(26,worse,28) output(26,worse,98) output(86,worse,28) output(86,worse,98) output(7,worse,2) output(7,worse,3) output(7,worse,74) output(7,worse,28) output(7,worse,98) output(28,eq,98) output(20,eq,46) output(2,eq,3) output(3,eq,74) output(79,eq,20) output(26,eq,76) output(86,eq,76) output(74,eq,28) output(2,eq,74) output(79,eq,46) output(96,eq,20) output(74,eq,98) output(3,eq,98) output(96,eq,46) output(7,eq,86) output(3,eq,28) output(2,eq,28) output(7,eq,76) output(2,eq,98)
Optimization: 30 1
Answer: 3
preference(1,(1,2),1,for(atom(hasPrepTime(1))),1) preference(1,(1,3),1,for(atom(hasPrepTime(3))),1) preference(1,(1,4),1,for(atom(hasPrep(5))),6) preference(1,(1,5),1,for(atom(hasPrep(4))),2) preference(1,(1,6),1,for(atom(hasPrep(7))),6) preference(1,(1,7),1,for(atom(hasDifficulty(2))),3) preference(1,(1,8),1,for(atom(hasCost(2))),4) preference(1,(1,9),1,for(atom(hasPrep(1))),2) preference(1,(1,10),1,for(atom(hasPrep(3))),4) preference(1,(1,11),1,for(atom(hasDifficulty(1))),3) preference(1,(1,12),1,for(atom(hasPrep(2))),1) preference(1,(1,13),1,for(atom(hasCost(1))),1) preference(1,(1,14),1,for(atom(hasPrep(0))),7) preference(1,less(weight)) output(3,better,98) output(26,better,98) output(52,better,41) output(74,better,86) output(74,better,28) output(74,better,98) output(74,better,76) output(79,better,20) output(86,better,98) output(96,better,8) output(96,better,20) output(2,better,98) output(28,better,98) output(3,worse,74) output(3,worse,86) output(3,worse,28) output(3,worse,76) output(8,worse,20) output(8,worse,46) output(79,worse,46) output(96,worse,46) output(2,worse,3) output(2,worse,74) output(2,worse,86) output(2,worse,28) output(2,worse,76) output(7,worse,2) output(7,worse,3) output(7,worse,74) output(7,worse,86) output(7,worse,76) output(7,worse,28) output(7,worse,98) output(20,worse,46) output(26,eq,28) output(86,eq,28) output(28,eq,76) output(26,eq,76) output(86,eq,76)
Optimization: 26 13
Answer: 4
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,2),1,for(atom(hasPrep(2))),6) preference(1,(1,3),1,for(atom(hasPrep(6))),6) preference(1,(1,4),1,for(atom(hasPrep(3))),8) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrep(4))),3) preference(1,(1,7),1,for(atom(hasPrepTime(1))),1) preference(1,(1,8),1,for(atom(hasDifficulty(1))),5) preference(1,(1,9),1,for(atom(hasCost(1))),5) preference(1,(1,10),1,for(atom(hasPrep(0))),5) preference(1,(1,11),1,for(atom(hasPrep(1))),5) preference(1,(1,12),1,for(atom(hasCost(2))),5) preference(1,(1,13),1,for(atom(hasPrepTime(3))),5) preference(1,(1,14),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,28) output(3,better,76) output(8,better,46) output(26,better,28) output(74,better,28) output(79,better,46) output(86,better,28) output(96,better,8) output(96,better,46) output(2,better,28) output(7,better,28) output(20,better,46) output(3,worse,98) output(8,worse,20) output(26,worse,98) output(74,worse,98) output(79,worse,20) output(86,worse,98) output(96,worse,20) output(2,worse,3) output(2,worse,98) output(7,worse,3) output(7,worse,98) output(28,worse,98) output(28,worse,76) output(52,eq,41) output(7,eq,2) output(74,eq,86) output(26,eq,76) output(86,eq,76) output(2,eq,74) output(7,eq,74) output(2,eq,86) output(7,eq,86) output(74,eq,76) output(2,eq,76) output(7,eq,76)
Optimization: 25 14
Progression : [ 2;25] (Error: 11.5)
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(0))),7) preference(1,(1,3),1,for(atom(hasCost(2))),8) preference(1,(1,5),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasPrep(1))),3) preference(1,(1,7),1,for(atom(hasPrepTime(3))),4) preference(1,(1,8),1,for(atom(hasPrep(5))),4) preference(1,(1,9),1,for(atom(hasCost(1))),1) preference(1,(1,10),1,for(atom(hasPrepTime(1))),8) preference(1,(1,11),1,for(atom(hasPrepTime(2))),6) preference(1,(1,12),1,for(atom(hasPrep(2))),4) preference(1,(1,13),1,for(atom(hasPrep(6))),4) preference(1,(1,14),1,for(atom(hasDifficulty(1))),6) preference(1,less(weight)) output(8,better,20) output(8,better,46) output(26,better,28) output(26,better,98) output(52,better,41) output(74,better,98) output(79,better,20) output(79,better,46) output(86,better,28) output(86,better,98) output(96,better,8) output(96,better,20) output(96,better,46) output(7,better,2) output(7,better,3) output(28,better,98) output(3,worse,74) output(3,worse,86) output(3,worse,98) output(3,worse,28) output(3,worse,76) output(74,worse,86) output(74,worse,28) output(74,worse,76) output(2,worse,74) output(2,worse,86) output(2,worse,28) output(2,worse,76) output(2,worse,98) output(7,worse,74) output(7,worse,86) output(7,worse,76) output(7,worse,28) output(20,worse,46) output(28,worse,76) output(2,eq,3) output(26,eq,76) output(86,eq,76) output(7,eq,98)
Optimization: 23 12
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,2),1,for(atom(hasPrep(2))),6) preference(1,(1,4),1,for(atom(hasPrep(3))),8) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrepTime(1))),3) preference(1,(1,7),1,for(atom(hasPrep(6))),1) preference(1,(1,8),1,for(atom(hasDifficulty(1))),5) preference(1,(1,9),1,for(atom(hasCost(1))),5) preference(1,(1,10),1,for(atom(hasPrep(0))),5) preference(1,(1,11),1,for(atom(hasPrep(1))),5) preference(1,(1,12),1,for(atom(hasCost(2))),5) preference(1,(1,13),1,for(atom(hasPrepTime(3))),5) preference(1,(1,14),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,28) output(3,better,76) output(8,better,46) output(26,better,28) output(52,better,41) output(74,better,28) output(79,better,46) output(86,better,28) output(96,better,8) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(7,better,28) output(20,better,46) output(3,worse,98) output(8,worse,20) output(26,worse,98) output(74,worse,98) output(79,worse,20) output(86,worse,98) output(2,worse,98) output(7,worse,2) output(7,worse,3) output(7,worse,74) output(7,worse,86) output(7,worse,76) output(7,worse,98) output(28,worse,98) output(28,worse,76) output(74,eq,86) output(26,eq,76) output(86,eq,76) output(96,eq,20) output(74,eq,76)
Optimization: 20 13
Answer: 7
preference(1,(1,1),1,for(atom(hasPrepTime(3))),7) preference(1,(1,2),1,for(atom(hasPrep(1))),1) preference(1,(1,3),1,for(atom(hasPrep(0))),2) preference(1,(1,4),1,for(atom(hasPrep(5))),6) preference(1,(1,5),1,for(atom(hasPrep(4))),2) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasCost(2))),7) preference(1,(1,8),1,for(atom(hasDifficulty(2))),5) preference(1,(1,9),1,for(atom(hasPrepTime(1))),3) preference(1,(1,10),1,for(atom(hasPrep(6))),2) preference(1,(1,12),1,for(atom(hasPrep(2))),1) preference(1,(1,14),1,for(atom(hasDifficulty(1))),2) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,98) output(3,better,28) output(3,better,76) output(26,better,28) output(52,better,41) output(74,better,86) output(74,better,28) output(74,better,76) output(79,better,20) output(79,better,46) output(86,better,28) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(8,worse,20) output(8,worse,46) output(26,worse,76) output(26,worse,98) output(86,worse,98) output(2,worse,3) output(7,worse,2) output(7,worse,3) output(7,worse,74) output(7,worse,86) output(7,worse,76) output(7,worse,28) output(7,worse,98) output(20,worse,46) output(28,worse,98) output(28,worse,76) output(86,eq,76) output(74,eq,98)
Optimization: 18 12
Answer: 8
preference(1,(1,1),1,for(atom(hasPrepTime(3))),7) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,3),1,for(atom(hasPrep(0))),2) preference(1,(1,4),1,for(atom(hasPrep(5))),6) preference(1,(1,5),1,for(atom(hasPrep(4))),2) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasCost(2))),7) preference(1,(1,8),1,for(atom(hasPrep(1))),1) preference(1,(1,9),1,for(atom(hasPrepTime(1))),3) preference(1,(1,10),1,for(atom(hasPrep(6))),2) preference(1,(1,12),1,for(atom(hasPrep(2))),1) preference(1,(1,14),1,for(atom(hasDifficulty(1))),2) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,28) output(3,better,76) output(52,better,41) output(74,better,86) output(74,better,76) output(79,better,20) output(79,better,46) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,86) output(7,better,76) output(20,better,46) output(28,better,76) output(8,worse,20) output(8,worse,46) output(26,worse,28) output(26,worse,76) output(26,worse,98) output(74,worse,28) output(74,worse,98) output(86,worse,28) output(86,worse,98) output(7,worse,2) output(7,worse,3) output(7,worse,74) output(7,worse,28) output(7,worse,98) output(28,worse,98) output(86,eq,76) output(3,eq,98)
Optimization: 17 12
Progression : [ 3;17] (Error: 4.66667)
Answer: 9
preference(1,(1,1),1,for(atom(hasPrepTime(1))),6) preference(1,(1,2),1,for(atom(hasPrep(1))),1) preference(1,(1,3),1,for(atom(hasPrep(2))),4) preference(1,(1,5),1,for(atom(hasPrepTime(3))),1) preference(1,(1,8),1,for(atom(hasCost(1))),5) preference(1,(1,9),1,for(atom(hasPrep(0))),2) preference(1,(1,10),1,for(atom(hasPrep(4))),5) preference(1,(1,11),1,for(atom(hasPrepTime(2))),6) preference(1,(1,12),1,for(atom(hasPrep(5))),4) preference(1,(1,13),1,for(atom(hasCost(2))),3) preference(1,(1,14),1,for(atom(hasDifficulty(1))),2) preference(1,less(weight)) output(3,better,28) output(8,better,46) output(26,better,28) output(52,better,41) output(74,better,28) output(79,better,46) output(86,better,28) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,2) output(7,better,3) output(7,better,74) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(3,worse,74) output(3,worse,86) output(3,worse,98) output(3,worse,76) output(8,worse,20) output(79,worse,20) output(96,worse,8) output(96,worse,20) output(28,worse,98) output(28,worse,76) output(74,eq,86) output(26,eq,76) output(86,eq,76) output(26,eq,98) output(86,eq,98) output(74,eq,98) output(74,eq,76)
Optimization: 17 11
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(0))),3) preference(1,(1,2),1,for(atom(hasPrep(1))),7) preference(1,(1,3),1,for(atom(hasPrepTime(2))),6) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasPrep(5))),7) preference(1,(1,10),1,for(atom(hasPrepTime(1))),8) preference(1,(1,12),1,for(atom(hasPrep(2))),3) preference(1,(1,13),1,for(atom(hasCost(2))),3) preference(1,(1,14),1,for(atom(hasDifficulty(1))),4) preference(1,less(weight)) output(8,better,46) output(26,better,28) output(26,better,98) output(52,better,41) output(74,better,28) output(74,better,98) output(79,better,46) output(86,better,28) output(86,better,98) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,28) output(2,better,98) output(7,better,2) output(7,better,3) output(7,better,74) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(28,better,98) output(3,worse,74) output(3,worse,86) output(3,worse,98) output(3,worse,28) output(3,worse,76) output(8,worse,20) output(26,worse,76) output(74,worse,86) output(74,worse,76) output(79,worse,20) output(96,worse,8) output(96,worse,20) output(2,worse,86) output(2,worse,76) output(28,worse,76) output(86,eq,76)
Optimization: 16 9
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(2))),3) preference(1,(1,2),1,for(atom(hasCost(1))),5) preference(1,(1,3),1,for(atom(hasPrepTime(2))),2) preference(1,(1,4),1,for(atom(hasPrep(1))),5) preference(1,(1,5),1,for(atom(hasPrep(4))),5) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasPrepTime(3))),5) preference(1,(1,10),1,for(atom(hasDifficulty(2))),3) preference(1,(1,11),1,for(atom(hasPrepTime(1))),2) preference(1,(1,12),1,for(atom(hasCost(2))),4) preference(1,(1,13),1,for(atom(hasDifficulty(1))),7) preference(1,(1,14),1,for(atom(hasPrep(7))),1) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,98) output(3,better,76) output(8,better,20) output(8,better,46) output(26,better,98) output(52,better,41) output(74,better,98) output(79,better,20) output(79,better,46) output(86,better,98) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,2) output(7,better,3) output(7,better,74) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(28,better,98) output(28,better,76) output(26,worse,28) output(74,worse,28) output(86,worse,28) output(74,eq,86) output(26,eq,76) output(86,eq,76) output(3,eq,28) output(74,eq,76)
Optimization: 8 12
Answer: 12
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,2),1,for(atom(hasDifficulty(2))),5) preference(1,(1,3),1,for(atom(hasPrep(7))),1) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasPrep(5))),3) preference(1,(1,6),1,for(atom(hasPrep(0))),3) preference(1,(1,7),1,for(atom(hasPrepTime(3))),5) preference(1,(1,8),1,for(atom(hasCost(1))),7) preference(1,(1,9),1,for(atom(hasPrep(2))),5) preference(1,(1,10),1,for(atom(hasPrep(3))),2) preference(1,(1,11),1,for(atom(hasCost(2))),6) preference(1,(1,12),1,for(atom(hasPrep(1))),7) preference(1,(1,13),1,for(atom(hasPrepTime(1))),4) preference(1,(1,14),1,for(atom(hasPrep(4))),3) preference(1,less(weight)) output(3,better,86) output(3,better,98) output(3,better,28) output(3,better,76) output(8,better,46) output(26,better,28) output(26,better,98) output(52,better,41) output(74,better,86) output(74,better,28) output(74,better,98) output(74,better,76) output(79,better,20) output(79,better,46) output(86,better,28) output(86,better,98) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,3) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(28,better,98) output(3,worse,74) output(8,worse,20) output(7,worse,2) output(7,worse,74) output(28,worse,76) output(26,eq,76) output(86,eq,76)
Optimization: 7 14
Progression : [4;7] (Error: 0.75)
Answer: 13
preference(1,(1,2),1,for(atom(hasPrepTime(3))),6) preference(1,(1,3),1,for(atom(hasCost(2))),3) preference(1,(1,5),1,for(atom(hasPrep(2))),6) preference(1,(1,6),1,for(atom(hasCost(1))),2) preference(1,(1,7),1,for(atom(hasPrepTime(2))),4) preference(1,(1,8),1,for(atom(hasDifficulty(1))),7) preference(1,(1,9),1,for(atom(hasPrep(5))),1) preference(1,(1,10),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasPrep(4))),7) preference(1,(1,13),1,for(atom(hasPrepTime(1))),3) preference(1,(1,14),1,for(atom(hasPrep(1))),2) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,98) output(3,better,28) output(3,better,76) output(8,better,20) output(8,better,46) output(26,better,28) output(26,better,98) output(52,better,41) output(74,better,86) output(74,better,28) output(74,better,98) output(74,better,76) output(79,better,20) output(79,better,46) output(86,better,28) output(86,better,98) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,2) output(7,better,3) output(7,better,74) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(2,worse,3) output(28,worse,98) output(28,worse,76) output(26,eq,76) output(86,eq,76) output(2,eq,74)
Optimization: 6 12
Answer: 14
preference(1,(1,1),1,for(atom(hasPrepTime(2))),1) preference(1,(1,2),1,for(atom(hasPrep(4))),2) preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasPrepTime(3))),7) preference(1,(1,5),1,for(atom(hasCost(1))),5) preference(1,(1,6),1,for(atom(hasPrep(0))),2) preference(1,(1,7),1,for(atom(hasPrep(1))),5) preference(1,(1,8),1,for(atom(hasPrep(7))),1) preference(1,(1,9),1,for(atom(hasPrep(5))),2) preference(1,(1,10),1,for(atom(hasDifficulty(2))),3) preference(1,(1,11),1,for(atom(hasCost(2))),7) preference(1,(1,12),1,for(atom(hasPrep(6))),2) preference(1,(1,13),1,for(atom(hasPrepTime(1))),4) preference(1,(1,14),1,for(atom(hasPrep(2))),7) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,98) output(3,better,28) output(3,better,76) output(8,better,46) output(26,better,98) output(52,better,41) output(74,better,86) output(74,better,28) output(74,better,98) output(74,better,76) output(79,better,20) output(79,better,46) output(86,better,98) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,2) output(7,better,3) output(7,better,74) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(28,better,98) output(28,better,76) output(8,worse,20) output(26,worse,28) output(86,worse,28) output(26,eq,76) output(86,eq,76)
Optimization: 5 14
Answer: 15
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,3),1,for(atom(hasPrep(5))),1) preference(1,(1,4),1,for(atom(hasDifficulty(2))),3) preference(1,(1,5),1,for(atom(hasPrepTime(1))),6) preference(1,(1,6),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasCost(1))),5) preference(1,(1,8),1,for(atom(hasPrep(0))),1) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,10),1,for(atom(hasPrep(3))),2) preference(1,(1,11),1,for(atom(hasCost(2))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),8) preference(1,(1,13),1,for(atom(hasPrepTime(3))),8) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,98) output(3,better,28) output(3,better,76) output(8,better,46) output(26,better,28) output(26,better,98) output(52,better,41) output(74,better,86) output(74,better,28) output(74,better,98) output(74,better,76) output(79,better,20) output(79,better,46) output(86,better,28) output(86,better,98) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,2) output(7,better,3) output(7,better,74) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(28,better,98) output(8,worse,20) output(28,worse,76) output(26,eq,76) output(86,eq,76)
Optimization: 4 13
Answer: 16
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,3),1,for(atom(hasPrep(5))),1) preference(1,(1,4),1,for(atom(hasDifficulty(2))),3) preference(1,(1,5),1,for(atom(hasPrepTime(1))),6) preference(1,(1,6),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasCost(1))),5) preference(1,(1,8),1,for(atom(hasPrep(0))),1) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasCost(2))),8) preference(1,(1,12),1,for(atom(hasPrep(3))),6) preference(1,(1,13),1,for(atom(hasPrepTime(3))),8) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,98) output(3,better,28) output(3,better,76) output(8,better,46) output(26,better,28) output(26,better,98) output(52,better,41) output(74,better,86) output(74,better,28) output(74,better,98) output(74,better,76) output(79,better,20) output(79,better,46) output(86,better,28) output(86,better,98) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,2) output(7,better,3) output(7,better,74) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(28,better,98) output(8,worse,20) output(28,worse,76) output(26,eq,76) output(86,eq,76)
Optimization: 4 12
Progression : 4 [ 1;12] (Error: 11)
Answer: 17
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,4),1,for(atom(hasPrepTime(1))),6) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,6),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasCost(1))),5) preference(1,(1,8),1,for(atom(hasPrep(0))),1) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasCost(2))),8) preference(1,(1,12),1,for(atom(hasDifficulty(2))),3) preference(1,(1,13),1,for(atom(hasPrepTime(3))),8) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,98) output(3,better,28) output(3,better,76) output(8,better,46) output(26,better,28) output(26,better,98) output(52,better,41) output(74,better,86) output(74,better,28) output(74,better,98) output(74,better,76) output(79,better,20) output(79,better,46) output(86,better,28) output(86,better,98) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,2) output(7,better,3) output(7,better,74) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(28,better,98) output(8,worse,20) output(28,worse,76) output(26,eq,76) output(86,eq,76)
Optimization: 4 11
Progression : 4 [ 2;11] (Error: 4.5)
Answer: 18
preference(1,(1,1),1,for(atom(hasCost(1))),5) preference(1,(1,2),1,for(atom(hasPrep(5))),1) preference(1,(1,3),1,for(atom(hasPrepTime(3))),8) preference(1,(1,4),1,for(atom(hasPrepTime(2))),2) preference(1,(1,5),1,for(atom(hasPrep(0))),1) preference(1,(1,7),1,for(atom(hasPrep(1))),5) preference(1,(1,8),1,for(atom(hasCost(2))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,12),1,for(atom(hasPrep(2))),8) preference(1,(1,14),1,for(atom(hasPrepTime(1))),6) preference(1,less(weight)) output(3,better,74) output(3,better,86) output(3,better,98) output(3,better,28) output(3,better,76) output(8,better,46) output(26,better,28) output(26,better,98) output(52,better,41) output(74,better,86) output(74,better,28) output(74,better,98) output(74,better,76) output(79,better,20) output(79,better,46) output(86,better,28) output(86,better,98) output(96,better,8) output(96,better,20) output(96,better,46) output(2,better,3) output(2,better,74) output(2,better,86) output(2,better,28) output(2,better,76) output(2,better,98) output(7,better,2) output(7,better,3) output(7,better,74) output(7,better,86) output(7,better,76) output(7,better,28) output(7,better,98) output(20,better,46) output(28,better,98) output(8,worse,20) output(28,worse,76) output(26,eq,76) output(86,eq,76)
Optimization: 4 10
Progression : 4 [ 3;10] (Error: 2.33333)
Progression : 4 [ 4;10] (Error: 1.5)
Progression : 4 [ 5;10] (Error: 1)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.054 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 18+
  Optimum    : unknown
Optimization : 4 10
Bounds       : 4 [5;10]
Calls        : 1
Time         : 298.277s (Solving: 296.53s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1187.595s
Threads      : 4        (Winner: 4)

Choices      : 8240222  (Domain: 618239)
Conflicts    : 6218465  (Analyzed: 6218457)
Restarts     : 5552     (Average: 1120.04 Last: 524362)
Model-Level  : 103.2   
Problems     : 14       (Average Length: 0.29 Splits: 0)
Lemmas       : 6391062  (Deleted: 6140661)
  Binary     : 310      (Ratio:   0.00%)
  Ternary    : 9477     (Ratio:   0.15%)
  Conflict   : 6218457  (Average Length:  149.1 Ratio:  97.30%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 172605   (Average Length:   38.3 Ratio:   2.70%) 
  Distributed: 59204    (Ratio:   0.95% Average LBD: 3.68) 
  Integrated : 177612   (Ratio: 300.00% Unit: 360 Average Jumps: 10.39)
Backjumps    : 6218457  (Average:  1.27 Max: 427 Sum: 7911099)
  Executed   : 6218436  (Average:  1.27 Max: 427 Sum: 7910987 Ratio: 100.00%)
  Bounded    : 21       (Average:  5.33 Max:  23 Sum:    112 Ratio:   0.00%)

Rules        : 105746  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 9442    
Bodies       : 5661    
  Sum        : 69      
  Count      : 14      
Equivalences : 6413     (Atom=Atom: 421 Body=Body: 191 Other: 5801)
Tight        : Yes
Variables    : 4807     (Eliminated:    0 Frozen: 3337)
Constraints  : 104291   (Binary:  97.0% Ternary:   1.4% Other:   1.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrep(7)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrep(3)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  1 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrep(4)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(2)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasPrep(5)) ; 
  1 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(6)) ; 
  6 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(2)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(2)) ; 
  2 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(2)) ; 
  2 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  3 :: atom(hasCost(2)) ; 
  4 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(2)) ; 
  5 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasCost(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrep(3)) ; 
  6 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(5)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(5)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrep(3)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(5)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(2)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(1)) ; 
  8 :: atom(hasCost(2)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrepTime(1)) 
}.
