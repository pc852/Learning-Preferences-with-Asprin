asprin_vL version 1.0
Reading from stdin
-:1231:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1241:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1256:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1337:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1598:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1611:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1788:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1917:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1989:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1993:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1993:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1999:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2098:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2124:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2244:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2278:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2300:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1148:1-16: info: no atoms over signature occur in program:
  output/3

-:1140:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1141:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(75,eq,32) output(60,eq,48) output(48,eq,55) output(55,eq,26) output(26,eq,5) output(20,eq,38) output(38,eq,22) output(73,eq,75) output(75,eq,62) output(11,eq,76) output(76,eq,57) output(57,eq,38) output(38,eq,10) output(25,eq,26) output(20,eq,10) output(57,eq,10) output(76,eq,38) output(11,eq,57) output(73,eq,62) output(20,eq,22) output(57,eq,22) output(55,eq,5) output(25,eq,5) output(48,eq,26) output(60,eq,55) output(73,eq,32) output(60,eq,26) output(48,eq,5) output(60,eq,5) output(76,eq,22) output(11,eq,22) output(11,eq,38) output(76,eq,10) output(11,eq,10)
Optimization: 34 0
Answer: 2
preference(1,(1,14),1,for(atom(hasPrep(3))),1) preference(1,less(weight)) output(11,better,57) output(76,better,57) output(57,worse,38) output(57,worse,10) output(57,worse,22) output(75,eq,32) output(60,eq,48) output(48,eq,55) output(55,eq,26) output(26,eq,5) output(20,eq,38) output(38,eq,22) output(73,eq,75) output(75,eq,62) output(11,eq,76) output(38,eq,10) output(25,eq,26) output(20,eq,10) output(76,eq,38) output(73,eq,62) output(20,eq,22) output(55,eq,5) output(25,eq,5) output(48,eq,26) output(60,eq,55) output(73,eq,32) output(60,eq,26) output(48,eq,5) output(60,eq,5) output(76,eq,22) output(11,eq,22) output(11,eq,38) output(76,eq,10) output(11,eq,10)
Optimization: 32 1
Answer: 3
preference(1,(1,14),1,for(atom(hasPrep(5))),1) preference(1,less(weight)) output(60,better,26) output(11,better,76) output(11,better,22) output(38,better,22) output(55,better,26) output(20,better,22) output(25,better,26) output(48,better,26) output(57,better,22) output(73,better,62) output(73,better,32) output(75,better,32) output(75,better,62) output(26,worse,5) output(76,worse,57) output(76,worse,38) output(76,worse,10) output(60,eq,48) output(48,eq,55) output(20,eq,38) output(73,eq,75) output(57,eq,38) output(38,eq,10) output(20,eq,10) output(57,eq,10) output(11,eq,57) output(55,eq,5) output(25,eq,5) output(60,eq,55) output(48,eq,5) output(60,eq,5) output(76,eq,22) output(11,eq,38) output(11,eq,10)
Optimization: 21 1
Answer: 4
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasIngredient(9))),2) preference(1,less(weight)) output(26,better,5) output(60,better,48) output(60,better,55) output(60,better,5) output(20,better,38) output(20,better,10) output(20,better,22) output(25,better,5) output(57,better,38) output(57,better,10) output(57,better,22) output(73,better,75) output(73,better,62) output(76,better,38) output(76,better,22) output(76,better,10) output(11,worse,76) output(11,worse,57) output(55,worse,26) output(48,worse,26) output(75,worse,32) output(48,eq,55) output(38,eq,22) output(75,eq,62) output(76,eq,57) output(38,eq,10) output(25,eq,26) output(55,eq,5) output(73,eq,32) output(60,eq,26) output(48,eq,5) output(11,eq,22) output(11,eq,38) output(11,eq,10)
Optimization: 18 14
Answer: 5
preference(1,(1,1),1,for(atom(hasIngredient(2))),1) preference(1,(1,2),1,for(atom(hasIngredient(11))),1) preference(1,(1,3),1,for(atom(hasCategory(5))),1) preference(1,(1,4),1,for(atom(hasDifficulty(4))),1) preference(1,(1,5),1,for(atom(hasCategory(2))),1) preference(1,(1,6),1,for(atom(hasIngredient(5))),1) preference(1,(1,7),1,for(atom(hasCost(4))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),1) preference(1,(1,9),1,for(atom(hasDifficulty(3))),1) preference(1,(1,10),1,for(atom(hasIngredient(4))),1) preference(1,(1,11),1,for(atom(hasIngredient(1))),1) preference(1,(1,12),1,for(atom(hasCategory(3))),1) preference(1,less(weight)) output(60,better,55) output(60,better,26) output(60,better,5) output(20,better,38) output(20,better,10) output(20,better,22) output(25,better,26) output(25,better,5) output(48,better,55) output(48,better,26) output(48,better,5) output(57,better,38) output(57,better,10) output(57,better,22) output(73,better,62) output(73,better,32) output(75,better,32) output(75,better,62) output(11,worse,57) output(76,worse,57) output(60,eq,48) output(55,eq,26) output(26,eq,5) output(38,eq,22) output(73,eq,75) output(11,eq,76) output(38,eq,10) output(76,eq,38) output(55,eq,5) output(76,eq,22) output(11,eq,22) output(11,eq,38) output(76,eq,10) output(11,eq,10)
Optimization: 16 12
Answer: 6
preference(1,(1,1),1,for(atom(hasDifficulty(1))),6) preference(1,(1,2),1,for(atom(hasCost(3))),2) preference(1,(1,3),1,for(atom(hasPrepTime(1))),1) preference(1,(1,4),1,for(atom(hasIngredient(12))),2) preference(1,(1,5),1,for(atom(hasIngredient(6))),6) preference(1,(1,6),1,for(atom(hasPrep(3))),6) preference(1,(1,7),1,for(atom(hasCategory(4))),2) preference(1,(1,8),1,for(atom(hasIngredient(3))),1) preference(1,(1,9),1,for(atom(hasCost(1))),2) preference(1,(1,10),1,for(atom(hasPrep(5))),7) preference(1,(1,11),1,for(atom(hasDifficulty(3))),8) preference(1,(1,12),1,for(atom(hasPrepTime(2))),6) preference(1,(1,13),1,for(atom(hasPrep(0))),2) preference(1,(1,14),1,for(atom(hasCategory(3))),6) preference(1,less(weight)) output(26,better,5) output(60,better,48) output(60,better,55) output(60,better,26) output(60,better,5) output(11,better,76) output(11,better,57) output(11,better,22) output(11,better,38) output(11,better,10) output(38,better,22) output(38,better,10) output(55,better,26) output(55,better,5) output(20,better,38) output(20,better,10) output(20,better,22) output(25,better,26) output(25,better,5) output(48,better,55) output(48,better,26) output(48,better,5) output(57,better,38) output(57,better,10) output(57,better,22) output(73,better,75) output(73,better,62) output(73,better,32) output(75,better,32) output(75,better,62) output(76,better,57) output(76,better,38) output(76,better,22) output(76,better,10)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 7
preference(1,(1,1),1,for(atom(hasCategory(1))),3) preference(1,(1,2),1,for(atom(hasPrepTime(1))),8) preference(1,(1,3),1,for(atom(hasCategory(3))),2) preference(1,(1,4),1,for(atom(hasDifficulty(1))),2) preference(1,(1,5),1,for(atom(hasDifficulty(3))),4) preference(1,(1,6),1,for(atom(hasPrep(6))),3) preference(1,(1,7),1,for(atom(hasIngredient(10))),8) preference(1,(1,9),1,for(atom(hasPrep(7))),7) preference(1,(1,10),1,for(atom(hasPrepTime(2))),6) preference(1,(1,11),1,for(atom(hasCost(1))),2) preference(1,(1,12),1,for(atom(hasPrep(0))),1) preference(1,(1,13),1,for(atom(hasPrep(5))),7) preference(1,(1,14),1,for(atom(hasIngredient(12))),7) preference(1,less(weight)) output(26,better,5) output(60,better,48) output(60,better,55) output(60,better,26) output(60,better,5) output(11,better,76) output(11,better,57) output(11,better,22) output(11,better,38) output(11,better,10) output(38,better,22) output(38,better,10) output(55,better,26) output(55,better,5) output(20,better,38) output(20,better,10) output(20,better,22) output(25,better,26) output(25,better,5) output(48,better,55) output(48,better,26) output(48,better,5) output(57,better,38) output(57,better,10) output(57,better,22) output(73,better,75) output(73,better,62) output(73,better,32) output(75,better,32) output(75,better,62) output(76,better,57) output(76,better,38) output(76,better,22) output(76,better,10)
Optimization: 0 13
Answer: 8
preference(1,(1,1),1,for(atom(hasCategory(1))),3) preference(1,(1,2),1,for(atom(hasPrepTime(1))),8) preference(1,(1,3),1,for(atom(hasCategory(3))),2) preference(1,(1,4),1,for(atom(hasDifficulty(1))),2) preference(1,(1,5),1,for(atom(hasPrepTime(2))),8) preference(1,(1,6),1,for(atom(hasDifficulty(3))),5) preference(1,(1,9),1,for(atom(hasPrep(7))),7) preference(1,(1,11),1,for(atom(hasCost(1))),2) preference(1,(1,12),1,for(atom(hasPrep(0))),1) preference(1,(1,13),1,for(atom(hasPrep(5))),7) preference(1,(1,14),1,for(atom(hasIngredient(12))),7) preference(1,less(weight)) output(26,better,5) output(60,better,48) output(60,better,55) output(60,better,26) output(60,better,5) output(11,better,76) output(11,better,57) output(11,better,22) output(11,better,38) output(11,better,10) output(38,better,22) output(38,better,10) output(55,better,26) output(55,better,5) output(20,better,38) output(20,better,10) output(20,better,22) output(25,better,26) output(25,better,5) output(48,better,55) output(48,better,26) output(48,better,5) output(57,better,38) output(57,better,10) output(57,better,22) output(73,better,75) output(73,better,62) output(73,better,32) output(75,better,32) output(75,better,62) output(76,better,57) output(76,better,38) output(76,better,22) output(76,better,10)
Optimization: 0 11
Progression : 0 [ 2;11] (Error: 4.5)
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(0))),3) preference(1,(1,2),1,for(atom(hasPrep(5))),4) preference(1,(1,3),1,for(atom(hasIngredient(9))),2) preference(1,(1,4),1,for(atom(hasCategory(3))),2) preference(1,(1,6),1,for(atom(hasPrepTime(2))),6) preference(1,(1,7),1,for(atom(hasPrepTime(1))),3) preference(1,(1,8),1,for(atom(hasIngredient(12))),4) preference(1,(1,9),1,for(atom(hasPrep(1))),2) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,14),1,for(atom(hasCost(2))),6) preference(1,less(weight)) output(26,better,5) output(60,better,48) output(60,better,55) output(60,better,26) output(60,better,5) output(11,better,76) output(11,better,57) output(11,better,22) output(11,better,38) output(11,better,10) output(38,better,22) output(38,better,10) output(55,better,26) output(55,better,5) output(20,better,38) output(20,better,10) output(20,better,22) output(25,better,26) output(25,better,5) output(48,better,55) output(48,better,26) output(48,better,5) output(57,better,38) output(57,better,10) output(57,better,22) output(73,better,75) output(73,better,62) output(73,better,32) output(75,better,32) output(75,better,62) output(76,better,57) output(76,better,38) output(76,better,22) output(76,better,10)
Optimization: 0 10
Answer: 10
preference(1,(1,4),1,for(atom(hasPrepTime(1))),2) preference(1,(1,5),1,for(atom(hasDifficulty(1))),3) preference(1,(1,6),1,for(atom(hasIngredient(12))),2) preference(1,(1,7),1,for(atom(hasIngredient(6))),4) preference(1,(1,9),1,for(atom(hasPrep(5))),4) preference(1,(1,10),1,for(atom(hasDifficulty(3))),4) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasPrepTime(2))),1) preference(1,(1,13),1,for(atom(hasCategory(3))),3) preference(1,less(weight)) output(26,better,5) output(60,better,48) output(60,better,55) output(60,better,26) output(60,better,5) output(11,better,76) output(11,better,57) output(11,better,22) output(11,better,38) output(11,better,10) output(38,better,22) output(38,better,10) output(55,better,26) output(55,better,5) output(20,better,38) output(20,better,10) output(20,better,22) output(25,better,26) output(25,better,5) output(48,better,55) output(48,better,26) output(48,better,5) output(57,better,38) output(57,better,10) output(57,better,22) output(73,better,75) output(73,better,62) output(73,better,32) output(75,better,32) output(75,better,62) output(76,better,57) output(76,better,38) output(76,better,22) output(76,better,10)
Optimization: 0 9
Answer: 11
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),6) preference(1,(1,4),1,for(atom(hasDifficulty(3))),8) preference(1,(1,6),1,for(atom(hasPrepTime(1))),3) preference(1,(1,7),1,for(atom(hasPrepTime(2))),8) preference(1,(1,8),1,for(atom(hasIngredient(12))),2) preference(1,(1,11),1,for(atom(hasDifficulty(1))),6) preference(1,(1,14),1,for(atom(hasPrep(5))),7) preference(1,less(weight)) output(26,better,5) output(60,better,48) output(60,better,55) output(60,better,26) output(60,better,5) output(11,better,76) output(11,better,57) output(11,better,22) output(11,better,38) output(11,better,10) output(38,better,22) output(38,better,10) output(55,better,26) output(55,better,5) output(20,better,38) output(20,better,10) output(20,better,22) output(25,better,26) output(25,better,5) output(48,better,55) output(48,better,26) output(48,better,5) output(57,better,38) output(57,better,10) output(57,better,22) output(73,better,75) output(73,better,62) output(73,better,32) output(75,better,32) output(75,better,62) output(76,better,57) output(76,better,38) output(76,better,22) output(76,better,10)
Optimization: 0 8
Answer: 12
preference(1,(1,5),1,for(atom(hasIngredient(9))),7) preference(1,(1,6),1,for(atom(hasPrepTime(2))),4) preference(1,(1,8),1,for(atom(hasPrep(2))),1) preference(1,(1,9),1,for(atom(hasPrep(0))),5) preference(1,(1,10),1,for(atom(hasCost(2))),3) preference(1,(1,13),1,for(atom(hasPrepTime(1))),3) preference(1,(1,14),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(26,better,5) output(60,better,48) output(60,better,55) output(60,better,26) output(60,better,5) output(11,better,76) output(11,better,57) output(11,better,22) output(11,better,38) output(11,better,10) output(38,better,22) output(38,better,10) output(55,better,26) output(55,better,5) output(20,better,38) output(20,better,10) output(20,better,22) output(25,better,26) output(25,better,5) output(48,better,55) output(48,better,26) output(48,better,5) output(57,better,38) output(57,better,10) output(57,better,22) output(73,better,75) output(73,better,62) output(73,better,32) output(75,better,32) output(75,better,62) output(76,better,57) output(76,better,38) output(76,better,22) output(76,better,10)
Optimization: 0 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.062 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 12+
  Optimum    : unknown
Optimization : 0 7
Calls        : 1
Time         : 598.112s (Solving: 595.41s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2384.084s
Threads      : 4        (Winner: 4)

Choices      : 13013078 (Domain: 405792)
Conflicts    : 8055615  (Analyzed: 8055613)
Restarts     : 8977     (Average: 897.36 Last: 739981)
Model-Level  : 37.0    
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 8064167  (Deleted: 7678606)
  Binary     : 740      (Ratio:   0.01%)
  Ternary    : 1104     (Ratio:   0.01%)
  Conflict   : 8055613  (Average Length:  539.1 Ratio:  99.89%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 8554     (Average Length:   81.2 Ratio:   0.11%) 
  Distributed: 2853     (Ratio:   0.04% Average LBD: 3.43) 
  Integrated : 8559     (Ratio: 300.00% Unit: 4 Average Jumps: 10.00)
Backjumps    : 8055613  (Average:  1.38 Max: 937 Sum: 11112168)
  Executed   : 8055612  (Average:  1.38 Max: 937 Sum: 11112149 Ratio: 100.00%)
  Bounded    : 1        (Average: 19.00 Max:  19 Sum:     19 Ratio:   0.00%)

Rules        : 421128  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13950   
Bodies       : 18903   
  Sum        : 68      
  Count      : 14      
Equivalences : 7040     (Atom=Atom: 353 Body=Body: 150 Other: 6537)
Tight        : Yes
Variables    : 17071    (Eliminated:    0 Frozen: 7747)
Constraints  : 443080   (Binary:  97.1% Ternary:   2.1% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(2)) ; 
  1 :: atom(hasIngredient(11)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasIngredient(5)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasPrep(5)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasIngredient(4)) ; 
  1 :: atom(hasIngredient(1)) ; 
  1 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCost(3)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasIngredient(6)) ; 
  6 :: atom(hasPrep(3)) ; 
  2 :: atom(hasCategory(4)) ; 
  1 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(3)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrep(6)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(3)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(5)) ; 
  2 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasPrep(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasIngredient(6)) ; 
  4 :: atom(hasPrep(5)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasCategory(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(9)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(0)) ; 
  3 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(5)) 
}.
