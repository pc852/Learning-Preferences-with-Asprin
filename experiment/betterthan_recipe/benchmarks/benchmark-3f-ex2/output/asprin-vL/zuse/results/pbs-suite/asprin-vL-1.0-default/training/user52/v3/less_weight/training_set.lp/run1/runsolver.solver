asprin_vL version 1.0
Reading from stdin
-:1231:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1241:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1256:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1337:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1598:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1611:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1788:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1917:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1989:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1993:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1993:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1999:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2098:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2124:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2244:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2278:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2300:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1148:1-16: info: no atoms over signature occur in program:
  output/3

-:1140:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1141:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(71,eq,7) output(39,eq,18) output(84,eq,30) output(30,eq,32) output(32,eq,17) output(17,eq,69) output(69,eq,61) output(10,eq,39) output(21,eq,50) output(50,eq,58) output(67,eq,84) output(84,eq,66) output(66,eq,32) output(84,eq,32) output(67,eq,66) output(21,eq,58) output(17,eq,61) output(32,eq,69) output(30,eq,17) output(66,eq,17) output(67,eq,30) output(10,eq,18) output(84,eq,17) output(67,eq,17) output(30,eq,69) output(66,eq,69) output(84,eq,69) output(32,eq,61) output(30,eq,61) output(66,eq,61) output(67,eq,32) output(84,eq,61) output(67,eq,61) output(67,eq,69)
Optimization: 34 0
Answer: 2
preference(1,(1,1),1,for(atom(hasIngredient(7))),7) preference(1,(1,7),1,for(atom(hasPrep(1))),5) preference(1,(1,10),1,for(atom(hasIngredient(4))),7) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,66) output(67,better,69) output(84,better,66) output(84,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(32,better,69) output(71,better,7) output(17,better,69) output(67,worse,30) output(67,worse,61) output(84,worse,30) output(84,worse,61) output(39,worse,18) output(66,worse,32) output(66,worse,17) output(66,worse,61) output(69,worse,61) output(30,worse,61) output(32,worse,61) output(17,worse,61) output(32,eq,17) output(67,eq,84) output(84,eq,32) output(84,eq,17) output(67,eq,17) output(66,eq,69) output(67,eq,32)
Optimization: 19 3
Answer: 3
preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,12),1,for(atom(hasCost(4))),8) preference(1,(1,13),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(67,better,66) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,66) output(84,better,32) output(84,better,69) output(84,better,61) output(30,better,32) output(30,better,69) output(30,better,61) output(71,better,7) output(17,better,69) output(17,better,61) output(66,worse,17) output(32,worse,17) output(39,eq,18) output(84,eq,30) output(69,eq,61) output(21,eq,50) output(50,eq,58) output(67,eq,84) output(66,eq,32) output(21,eq,58) output(32,eq,69) output(30,eq,17) output(67,eq,30) output(84,eq,17) output(67,eq,17) output(66,eq,69) output(32,eq,61) output(66,eq,61)
Optimization: 18 3
Answer: 4
preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,10),1,for(atom(hasCategory(5))),8) preference(1,(1,12),1,for(atom(hasCost(4))),8) preference(1,(1,14),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(67,better,66) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(71,better,7) output(39,eq,18) output(84,eq,30) output(32,eq,17) output(17,eq,69) output(69,eq,61) output(21,eq,50) output(50,eq,58) output(67,eq,84) output(66,eq,32) output(21,eq,58) output(17,eq,61) output(32,eq,69) output(66,eq,17) output(67,eq,30) output(66,eq,69) output(32,eq,61) output(66,eq,61)
Optimization: 17 4
Answer: 5
preference(1,(1,1),1,for(atom(hasIngredient(7))),7) preference(1,(1,2),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasIngredient(9))),5) preference(1,(1,6),1,for(atom(hasPrep(4))),1) preference(1,(1,7),1,for(atom(hasPrep(1))),5) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasCategory(5))),1) preference(1,(1,12),1,for(atom(hasIngredient(4))),7) preference(1,(1,13),1,for(atom(hasDifficulty(2))),7) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,17) output(67,better,32) output(67,better,69) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(39,better,18) output(66,better,32) output(66,better,17) output(66,better,69) output(30,better,32) output(30,better,17) output(30,better,69) output(71,better,7) output(67,worse,84) output(67,worse,30) output(67,worse,61) output(84,worse,30) output(84,worse,61) output(66,worse,61) output(69,worse,61) output(21,worse,50) output(30,worse,61) output(32,worse,61) output(17,worse,61) output(32,eq,17) output(17,eq,69) output(67,eq,66) output(21,eq,58) output(32,eq,69)
Optimization: 16 10
Answer: 6
preference(1,(1,1),1,for(atom(hasIngredient(7))),7) preference(1,(1,5),1,for(atom(hasIngredient(4))),7) preference(1,(1,6),1,for(atom(hasCost(3))),5) preference(1,(1,7),1,for(atom(hasPrep(1))),5) preference(1,(1,8),1,for(atom(hasCost(4))),1) preference(1,(1,9),1,for(atom(hasPrep(4))),1) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasDifficulty(2))),5) preference(1,(1,12),1,for(atom(hasCategory(5))),1) preference(1,(1,13),1,for(atom(hasCategory(4))),1) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,17) output(67,better,32) output(67,better,69) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(39,better,18) output(66,better,32) output(66,better,17) output(66,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(71,better,7) output(67,worse,84) output(67,worse,30) output(67,worse,61) output(84,worse,30) output(84,worse,61) output(66,worse,61) output(69,worse,61) output(30,worse,61) output(32,worse,61) output(17,worse,61) output(32,eq,17) output(17,eq,69) output(67,eq,66) output(32,eq,69)
Optimization: 14 10
Answer: 7
preference(1,(1,1),1,for(atom(hasIngredient(7))),7) preference(1,(1,2),1,for(atom(hasIngredient(4))),1) preference(1,(1,3),1,for(atom(hasPrepTime(3))),5) preference(1,(1,4),1,for(atom(hasCategory(1))),1) preference(1,(1,5),1,for(atom(hasCost(3))),5) preference(1,(1,7),1,for(atom(hasPrep(1))),5) preference(1,(1,8),1,for(atom(hasPrep(4))),1) preference(1,(1,9),1,for(atom(hasIngredient(9))),5) preference(1,(1,11),1,for(atom(hasCategory(4))),1) preference(1,(1,12),1,for(atom(hasCategory(5))),1) preference(1,(1,13),1,for(atom(hasCost(4))),1) preference(1,(1,14),1,for(atom(hasPrep(5))),7) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,66) output(67,better,17) output(67,better,32) output(67,better,69) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(39,better,18) output(66,better,32) output(66,better,17) output(66,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(71,better,7) output(67,worse,30) output(67,worse,61) output(84,worse,30) output(84,worse,61) output(66,worse,61) output(69,worse,61) output(30,worse,61) output(32,worse,61) output(17,worse,61) output(32,eq,17) output(17,eq,69) output(67,eq,84) output(32,eq,69)
Optimization: 13 12
Answer: 8
preference(1,(1,1),1,for(atom(hasCost(2))),6) preference(1,(1,2),1,for(atom(hasIngredient(12))),7) preference(1,(1,3),1,for(atom(hasDifficulty(2))),7) preference(1,(1,4),1,for(atom(hasPrep(6))),7) preference(1,(1,5),1,for(atom(hasCategory(1))),7) preference(1,(1,6),1,for(atom(hasPrep(1))),7) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),7) preference(1,(1,9),1,for(atom(hasCategory(3))),7) preference(1,(1,10),1,for(atom(hasIngredient(9))),7) preference(1,(1,12),1,for(atom(hasPrep(4))),1) preference(1,(1,13),1,for(atom(hasPrep(0))),8) preference(1,(1,14),1,for(atom(hasIngredient(7))),8) preference(1,less(weight)) output(67,better,84) output(67,better,66) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,66) output(84,better,17) output(84,better,69) output(84,better,61) output(66,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(32,better,69) output(32,better,61) output(71,better,7) output(17,better,69) output(10,worse,18) output(84,worse,30) output(39,worse,18) output(66,worse,32) output(69,worse,61) output(10,eq,39) output(50,eq,58) output(84,eq,32) output(17,eq,61) output(66,eq,17) output(67,eq,30) output(66,eq,61)
Optimization: 12 13
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(6))),4) preference(1,(1,2),1,for(atom(hasCategory(5))),8) preference(1,(1,3),1,for(atom(hasIngredient(12))),7) preference(1,(1,4),1,for(atom(hasPrep(0))),5) preference(1,(1,5),1,for(atom(hasPrep(1))),2) preference(1,(1,6),1,for(atom(hasCategory(3))),1) preference(1,(1,7),1,for(atom(hasPrepTime(2))),4) preference(1,(1,8),1,for(atom(hasDifficulty(2))),1) preference(1,(1,9),1,for(atom(hasPrep(5))),1) preference(1,(1,10),1,for(atom(hasDifficulty(1))),7) preference(1,(1,11),1,for(atom(hasCategory(4))),6) preference(1,(1,12),1,for(atom(hasCost(2))),6) preference(1,(1,13),1,for(atom(hasCost(3))),5) preference(1,(1,14),1,for(atom(hasIngredient(7))),3) preference(1,less(weight)) output(10,better,39) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(66,better,17) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(71,better,7) output(39,worse,18) output(66,worse,32) output(66,worse,69) output(66,worse,61) output(21,worse,50) output(32,worse,69) output(32,worse,61) output(17,worse,69) output(17,worse,61) output(69,eq,61) output(10,eq,18)
Optimization: 11 14
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(6))),4) preference(1,(1,2),1,for(atom(hasDifficulty(1))),6) preference(1,(1,3),1,for(atom(hasIngredient(12))),7) preference(1,(1,4),1,for(atom(hasPrep(0))),5) preference(1,(1,5),1,for(atom(hasPrep(1))),2) preference(1,(1,6),1,for(atom(hasCategory(3))),1) preference(1,(1,7),1,for(atom(hasPrepTime(2))),4) preference(1,(1,8),1,for(atom(hasDifficulty(2))),1) preference(1,(1,9),1,for(atom(hasPrep(5))),1) preference(1,(1,10),1,for(atom(hasIngredient(9))),8) preference(1,(1,11),1,for(atom(hasCategory(4))),6) preference(1,(1,12),1,for(atom(hasIngredient(4))),7) preference(1,(1,13),1,for(atom(hasCost(3))),5) preference(1,(1,14),1,for(atom(hasIngredient(7))),3) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(66,better,17) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(71,better,7) output(66,worse,32) output(66,worse,69) output(66,worse,61) output(21,worse,50) output(32,worse,69) output(32,worse,61) output(17,worse,69) output(17,worse,61) output(69,eq,61)
Optimization: 9 14
Answer: 11
preference(1,(1,1),1,for(atom(hasDifficulty(1))),2) preference(1,(1,2),1,for(atom(hasCategory(3))),5) preference(1,(1,3),1,for(atom(hasIngredient(12))),7) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasIngredient(7))),5) preference(1,(1,6),1,for(atom(hasPrep(1))),4) preference(1,(1,7),1,for(atom(hasPrep(6))),1) preference(1,(1,9),1,for(atom(hasPrep(0))),4) preference(1,(1,11),1,for(atom(hasIngredient(9))),1) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,(1,13),1,for(atom(hasPrep(4))),3) preference(1,(1,14),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(10,better,39) output(50,better,58) output(67,better,66) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(66,better,69) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(32,better,69) output(32,better,61) output(71,better,7) output(17,better,69) output(17,better,61) output(10,worse,18) output(67,worse,84) output(67,worse,30) output(39,worse,18) output(66,worse,32) output(66,worse,17) output(69,worse,61) output(21,eq,50) output(66,eq,61)
Optimization: 9 12
Progression : [1;9] (Error: 8)
Progression : [2;9] (Error: 3.5)
Answer: 12
preference(1,(1,1),1,for(atom(hasCategory(3))),6) preference(1,(1,2),1,for(atom(hasPrep(5))),2) preference(1,(1,3),1,for(atom(hasCategory(5))),6) preference(1,(1,4),1,for(atom(hasCost(2))),7) preference(1,(1,5),1,for(atom(hasDifficulty(1))),1) preference(1,(1,6),1,for(atom(hasIngredient(12))),5) preference(1,(1,7),1,for(atom(hasDifficulty(2))),7) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasPrep(1))),7) preference(1,(1,10),1,for(atom(hasIngredient(7))),2) preference(1,(1,11),1,for(atom(hasIngredient(9))),2) preference(1,(1,12),1,for(atom(hasPrep(4))),3) preference(1,(1,13),1,for(atom(hasPrepTime(2))),2) preference(1,(1,14),1,for(atom(hasPrep(6))),4) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(69,better,61) output(21,better,58) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(32,better,69) output(32,better,61) output(71,better,7) output(17,better,69) output(17,better,61) output(67,worse,84) output(66,worse,32) output(66,worse,17) output(66,worse,69) output(21,worse,50) output(30,eq,32) output(66,eq,61)
Optimization: 7 14
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(5))),1) preference(1,(1,3),1,for(atom(hasCost(2))),5) preference(1,(1,4),1,for(atom(hasIngredient(9))),5) preference(1,(1,5),1,for(atom(hasIngredient(12))),4) preference(1,(1,6),1,for(atom(hasPrepTime(2))),3) preference(1,(1,7),1,for(atom(hasDifficulty(2))),6) preference(1,(1,8),1,for(atom(hasCategory(1))),3) preference(1,(1,9),1,for(atom(hasCategory(3))),7) preference(1,(1,10),1,for(atom(hasPrep(0))),2) preference(1,(1,11),1,for(atom(hasCost(3))),6) preference(1,(1,12),1,for(atom(hasPrep(6))),6) preference(1,(1,13),1,for(atom(hasDifficulty(1))),1) preference(1,(1,14),1,for(atom(hasIngredient(7))),7) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,66) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(69,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,69) output(32,better,61) output(71,better,7) output(17,better,69) output(17,better,61) output(67,worse,84) output(66,worse,32) output(66,worse,17) output(66,worse,69) output(32,worse,17) output(67,eq,30) output(66,eq,61)
Optimization: 7 13
Answer: 14
preference(1,(1,1),1,for(atom(hasPrep(4))),8) preference(1,(1,2),1,for(atom(hasPrep(6))),4) preference(1,(1,3),1,for(atom(hasDifficulty(2))),3) preference(1,(1,4),1,for(atom(hasCost(2))),5) preference(1,(1,5),1,for(atom(hasPrepTime(2))),1) preference(1,(1,6),1,for(atom(hasDifficulty(1))),2) preference(1,(1,7),1,for(atom(hasIngredient(9))),1) preference(1,(1,8),1,for(atom(hasCategory(1))),3) preference(1,(1,9),1,for(atom(hasCategory(3))),3) preference(1,(1,10),1,for(atom(hasIngredient(7))),6) preference(1,(1,11),1,for(atom(hasPrep(0))),6) preference(1,(1,12),1,for(atom(hasPrep(2))),2) preference(1,(1,13),1,for(atom(hasIngredient(12))),7) preference(1,(1,14),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(66,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,69) output(32,better,61) output(71,better,7) output(17,better,69) output(17,better,61) output(66,worse,32) output(66,worse,17) output(69,worse,61) output(32,worse,17) output(84,eq,30) output(66,eq,61)
Optimization: 6 14
Answer: 15
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasPrep(6))),5) preference(1,(1,4),1,for(atom(hasIngredient(12))),4) preference(1,(1,5),1,for(atom(hasPrepTime(2))),5) preference(1,(1,6),1,for(atom(hasIngredient(9))),2) preference(1,(1,8),1,for(atom(hasIngredient(7))),1) preference(1,(1,9),1,for(atom(hasCategory(3))),5) preference(1,(1,10),1,for(atom(hasCost(4))),3) preference(1,(1,11),1,for(atom(hasCost(3))),2) preference(1,(1,13),1,for(atom(hasPrep(0))),5) preference(1,(1,14),1,for(atom(hasPrep(4))),6) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(66,better,32) output(66,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,69) output(71,better,7) output(17,better,69) output(17,better,61) output(66,worse,17) output(66,worse,61) output(69,worse,61) output(32,worse,17) output(32,worse,61)
Optimization: 5 12
Answer: 16
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasPrep(6))),5) preference(1,(1,4),1,for(atom(hasIngredient(12))),4) preference(1,(1,5),1,for(atom(hasPrepTime(2))),5) preference(1,(1,6),1,for(atom(hasIngredient(7))),2) preference(1,(1,7),1,for(atom(hasCost(4))),7) preference(1,(1,8),1,for(atom(hasIngredient(9))),3) preference(1,(1,9),1,for(atom(hasCategory(3))),5) preference(1,(1,10),1,for(atom(hasPrepTime(3))),8) preference(1,(1,11),1,for(atom(hasCost(3))),1) preference(1,(1,12),1,for(atom(hasCategory(5))),4) preference(1,(1,13),1,for(atom(hasPrep(0))),5) preference(1,(1,14),1,for(atom(hasPrep(4))),6) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(66,better,32) output(66,better,17) output(66,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(32,better,69) output(71,better,7) output(17,better,69) output(66,worse,61) output(69,worse,61) output(32,worse,61) output(17,worse,61)
Optimization: 4 14
Answer: 17
preference(1,(1,1),1,for(atom(hasIngredient(12))),4) preference(1,(1,2),1,for(atom(hasPrepTime(2))),7) preference(1,(1,3),1,for(atom(hasCost(2))),2) preference(1,(1,4),1,for(atom(hasPrep(0))),5) preference(1,(1,5),1,for(atom(hasDifficulty(1))),1) preference(1,(1,7),1,for(atom(hasIngredient(9))),3) preference(1,(1,8),1,for(atom(hasPrep(6))),3) preference(1,(1,11),1,for(atom(hasPrep(4))),6) preference(1,(1,12),1,for(atom(hasCategory(5))),8) preference(1,(1,13),1,for(atom(hasCategory(4))),4) preference(1,(1,14),1,for(atom(hasIngredient(7))),8) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(66,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(32,better,69) output(32,better,61) output(71,better,7) output(17,better,69) output(17,better,61) output(66,worse,32) output(66,worse,17) output(66,worse,61) output(69,worse,61)
Optimization: 4 11
Progression : [4;4] (Error: 0)
Answer: 18
preference(1,(1,1),1,for(atom(hasCategory(5))),5) preference(1,(1,2),1,for(atom(hasIngredient(4))),7) preference(1,(1,3),1,for(atom(hasPrep(5))),7) preference(1,(1,4),1,for(atom(hasPrep(4))),7) preference(1,(1,5),1,for(atom(hasPrep(0))),2) preference(1,(1,7),1,for(atom(hasCategory(1))),7) preference(1,(1,8),1,for(atom(hasPrep(6))),3) preference(1,(1,11),1,for(atom(hasIngredient(12))),4) preference(1,(1,13),1,for(atom(hasDifficulty(1))),1) preference(1,(1,14),1,for(atom(hasIngredient(9))),5) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(66,better,32) output(66,better,17) output(66,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(32,better,69) output(71,better,7) output(17,better,69) output(69,worse,61) output(32,worse,61) output(17,worse,61) output(66,eq,61)
Optimization: 4 10
Progression : 4 [ 1;10] (Error: 9)
Progression : 4 [ 2;10] (Error: 4)
Answer: 19
preference(1,(1,2),1,for(atom(hasIngredient(9))),1) preference(1,(1,3),1,for(atom(hasDifficulty(1))),7) preference(1,(1,4),1,for(atom(hasIngredient(4))),3) preference(1,(1,5),1,for(atom(hasIngredient(7))),7) preference(1,(1,6),1,for(atom(hasPrepTime(2))),5) preference(1,(1,8),1,for(atom(hasIngredient(12))),1) preference(1,(1,9),1,for(atom(hasCategory(3))),4) preference(1,(1,10),1,for(atom(hasPrep(0))),8) preference(1,(1,12),1,for(atom(hasDifficulty(2))),2) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(69,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(32,better,69) output(32,better,61) output(71,better,7) output(17,better,69) output(17,better,61) output(66,worse,32) output(66,worse,17) output(66,worse,69) output(66,eq,61)
Optimization: 4 9
Progression : 4 [3;9] (Error: 2)
Answer: 20
preference(1,(1,1),1,for(atom(hasIngredient(12))),8) preference(1,(1,2),1,for(atom(hasIngredient(7))),6) preference(1,(1,5),1,for(atom(hasPrep(0))),2) preference(1,(1,6),1,for(atom(hasCategory(3))),6) preference(1,(1,9),1,for(atom(hasIngredient(9))),7) preference(1,(1,10),1,for(atom(hasDifficulty(1))),5) preference(1,(1,12),1,for(atom(hasPrep(6))),1) preference(1,(1,13),1,for(atom(hasPrepTime(2))),4) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(69,better,61) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(32,better,69) output(32,better,61) output(71,better,7) output(17,better,69) output(17,better,61) output(66,worse,32) output(66,worse,17) output(66,worse,69) output(66,eq,61)
Optimization: 4 8
Answer: 21
preference(1,(1,5),1,for(atom(hasPrepTime(2))),1) preference(1,(1,6),1,for(atom(hasDifficulty(2))),3) preference(1,(1,7),1,for(atom(hasIngredient(9))),5) preference(1,(1,10),1,for(atom(hasIngredient(7))),4) preference(1,(1,11),1,for(atom(hasPrep(0))),2) preference(1,(1,13),1,for(atom(hasPrep(4))),6) preference(1,(1,14),1,for(atom(hasIngredient(12))),4) preference(1,less(weight)) output(10,better,39) output(10,better,18) output(50,better,58) output(67,better,84) output(67,better,66) output(67,better,30) output(67,better,17) output(67,better,32) output(67,better,61) output(67,better,69) output(84,better,30) output(84,better,66) output(84,better,32) output(84,better,17) output(84,better,69) output(84,better,61) output(39,better,18) output(66,better,32) output(66,better,17) output(66,better,69) output(21,better,50) output(21,better,58) output(30,better,32) output(30,better,17) output(30,better,69) output(30,better,61) output(32,better,17) output(32,better,69) output(71,better,7) output(17,better,69) output(69,worse,61) output(32,worse,61) output(17,worse,61) output(66,eq,61)
Optimization: 4 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.068 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 21+
  Optimum    : unknown
Optimization : 4 7
Bounds       : 4 [3;7]
Calls        : 1
Time         : 597.381s (Solving: 594.92s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2381.512s
Threads      : 4        (Winner: 4)

Choices      : 9160613  (Domain: 295245)
Conflicts    : 8608980  (Analyzed: 8608972)
Restarts     : 7153     (Average: 1203.55 Last: 557703)
Model-Level  : 56.8    
Problems     : 15       (Average Length: 0.27 Splits: 0)
Lemmas       : 8833217  (Deleted: 8242656)
  Binary     : 2386     (Ratio:   0.03%)
  Ternary    : 2329     (Ratio:   0.03%)
  Conflict   : 8608972  (Average Length:  559.0 Ratio:  97.46%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 224245   (Average Length:  636.7 Ratio:   2.54%) 
  Distributed: 74793    (Ratio:   0.87% Average LBD: 3.76) 
  Integrated : 224379   (Ratio: 300.00% Unit: 23 Average Jumps: 6.78)
Backjumps    : 8608972  (Average:  1.05 Max:  54 Sum: 9062030)
  Executed   : 8608965  (Average:  1.05 Max:  54 Sum: 9061983 Ratio: 100.00%)
  Bounded    : 7        (Average:  6.71 Max:  32 Sum:     47 Ratio:   0.00%)

Rules        : 421464  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13942   
Bodies       : 18903   
  Sum        : 68      
  Count      : 14      
Equivalences : 7040     (Atom=Atom: 353 Body=Body: 150 Other: 6537)
Tight        : Yes
Variables    : 17063    (Eliminated:    0 Frozen: 7739)
Constraints  : 443408   (Binary:  97.1% Ternary:   2.1% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCategory(5)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasCategory(4)) ; 
  5 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrep(1)) ; 
  1 :: atom(hasCost(4)) ; 
  5 :: atom(hasPrep(5)) ; 
  1 :: atom(hasCategory(5)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasCost(3)) ; 
  5 :: atom(hasPrep(1)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrep(5)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasCategory(1)) ; 
  5 :: atom(hasCost(3)) ; 
  5 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(4)) ; 
  5 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(6)) ; 
  8 :: atom(hasCategory(5)) ; 
  7 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(1)) ; 
  1 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCategory(4)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasCost(3)) ; 
  3 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(6)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(1)) ; 
  1 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasCost(3)) ; 
  3 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(0)) ; 
  1 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(5)) ; 
  7 :: atom(hasCost(2)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(1)) ; 
  2 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(5)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasIngredient(9)) ; 
  4 :: atom(hasIngredient(12)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasCategory(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCost(3)) ; 
  6 :: atom(hasPrep(6)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasCategory(1)) ; 
  3 :: atom(hasCategory(3)) ; 
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(2)) ; 
  7 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  4 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasCategory(3)) ; 
  3 :: atom(hasCost(4)) ; 
  2 :: atom(hasCost(3)) ; 
  5 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  4 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasCost(4)) ; 
  3 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasCost(3)) ; 
  4 :: atom(hasCategory(5)) ; 
  5 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(0)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrep(4)) ; 
  8 :: atom(hasCategory(5)) ; 
  4 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCategory(5)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(0)) ; 
  7 :: atom(hasCategory(1)) ; 
  3 :: atom(hasPrep(6)) ; 
  4 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  2 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasIngredient(9)) ; 
  4 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(4)) ; 
  4 :: atom(hasIngredient(12)) 
}.
