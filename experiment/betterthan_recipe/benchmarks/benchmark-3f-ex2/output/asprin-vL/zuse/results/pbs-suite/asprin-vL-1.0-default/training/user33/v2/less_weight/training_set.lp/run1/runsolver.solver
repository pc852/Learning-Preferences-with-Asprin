asprin_vL version 1.0
Reading from stdin
-:1223:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1233:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1248:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1329:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1590:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1603:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1780:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1909:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1981:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1985:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1985:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1991:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2090:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2116:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2236:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2270:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2292:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1140:1-16: info: no atoms over signature occur in program:
  output/3

-:1132:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1133:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(91,eq,99) output(99,eq,71) output(71,eq,51) output(51,eq,55) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(71,eq,30) output(78,eq,76) output(17,eq,53) output(53,eq,60) output(60,eq,98) output(53,eq,98) output(17,eq,60) output(99,eq,30) output(76,eq,8) output(78,eq,67) output(71,eq,55) output(99,eq,51) output(91,eq,71) output(91,eq,51) output(99,eq,55) output(91,eq,55) output(78,eq,8) output(91,eq,30) output(17,eq,98)
Optimization: 26 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(3))),2) preference(1,less(weight)) output(67,better,8) output(53,better,60) output(91,better,99) output(91,better,51) output(91,better,55) output(71,better,51) output(71,better,55) output(17,better,60) output(60,worse,98) output(99,worse,71) output(99,worse,30) output(78,worse,67) output(76,worse,67) output(51,eq,55) output(57,eq,52) output(71,eq,30) output(78,eq,76) output(17,eq,53) output(53,eq,98) output(76,eq,8) output(99,eq,51) output(91,eq,71) output(99,eq,55) output(78,eq,8) output(91,eq,30) output(17,eq,98)
Optimization: 18 14
Answer: 3
preference(1,(1,14),1,for(atom(hasDifficulty(2))),1) preference(1,less(weight)) output(51,better,55) output(91,better,55) output(99,better,55) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(91,eq,99) output(99,eq,71) output(71,eq,51) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(71,eq,30) output(53,eq,60) output(60,eq,98) output(53,eq,98) output(99,eq,30) output(76,eq,8) output(99,eq,51) output(91,eq,71) output(91,eq,51) output(91,eq,30)
Optimization: 16 1
Answer: 4
preference(1,(1,1),1,for(atom(hasIngredient(3))),3) preference(1,(1,2),1,for(atom(hasCategory(1))),4) preference(1,(1,3),1,for(atom(hasPrep(2))),4) preference(1,(1,4),1,for(atom(hasCategory(3))),2) preference(1,(1,5),1,for(atom(hasPrep(0))),2) preference(1,(1,6),1,for(atom(hasCost(3))),2) preference(1,(1,7),1,for(atom(hasPrep(6))),2) preference(1,(1,8),1,for(atom(hasDifficulty(3))),2) preference(1,(1,9),1,for(atom(hasDifficulty(2))),2) preference(1,(1,10),1,for(atom(hasCost(2))),4) preference(1,(1,11),1,for(atom(hasPrep(1))),2) preference(1,(1,12),1,for(atom(hasPrepTime(2))),2) preference(1,(1,13),1,for(atom(hasPrepTime(3))),3) preference(1,(1,14),1,for(atom(hasDifficulty(4))),1) preference(1,less(weight)) output(51,better,55) output(67,better,8) output(53,better,60) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,60) output(60,worse,98) output(53,worse,98) output(17,worse,98) output(76,worse,67) output(71,eq,30) output(17,eq,53) output(76,eq,8)
Optimization: 7 14
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(6))),3) preference(1,(1,2),1,for(atom(hasPrep(1))),3) preference(1,(1,3),1,for(atom(hasDifficulty(2))),6) preference(1,(1,4),1,for(atom(hasPrep(0))),3) preference(1,(1,5),1,for(atom(hasIngredient(9))),3) preference(1,(1,6),1,for(atom(hasPrepTime(2))),7) preference(1,(1,7),1,for(atom(hasPrep(5))),5) preference(1,(1,9),1,for(atom(hasIngredient(7))),8) preference(1,(1,10),1,for(atom(hasCategory(1))),5) preference(1,(1,11),1,for(atom(hasIngredient(3))),4) preference(1,(1,12),1,for(atom(hasCategory(4))),3) preference(1,(1,13),1,for(atom(hasCost(2))),1) preference(1,(1,14),1,for(atom(hasPrepTime(3))),7) preference(1,less(weight)) output(51,better,55) output(67,better,8) output(53,better,60) output(91,better,99) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,30) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(76,better,8) output(60,worse,98) output(53,worse,98) output(91,worse,71) output(99,worse,71) output(99,worse,30) output(17,worse,98) output(76,worse,67)
Optimization: 7 13
Answer: 6
preference(1,(1,1),1,for(atom(hasDifficulty(2))),5) preference(1,(1,2),1,for(atom(hasCategory(1))),2) preference(1,(1,3),1,for(atom(hasIngredient(7))),6) preference(1,(1,4),1,for(atom(hasCost(3))),1) preference(1,(1,5),1,for(atom(hasCost(2))),5) preference(1,(1,6),1,for(atom(hasPrep(5))),6) preference(1,(1,7),1,for(atom(hasCategory(4))),4) preference(1,(1,9),1,for(atom(hasPrep(0))),1) preference(1,(1,10),1,for(atom(hasPrep(6))),1) preference(1,(1,11),1,for(atom(hasPrepTime(3))),1) preference(1,(1,12),1,for(atom(hasIngredient(3))),3) preference(1,(1,13),1,for(atom(hasCategory(3))),5) preference(1,(1,14),1,for(atom(hasDifficulty(3))),1) preference(1,less(weight)) output(51,better,55) output(53,better,60) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(76,better,67) output(60,worse,98) output(67,worse,8) output(53,worse,98) output(17,worse,98) output(71,eq,30) output(76,eq,8)
Optimization: 6 13
Answer: 7
preference(1,(1,1),1,for(atom(hasPrepTime(2))),1) preference(1,(1,2),1,for(atom(hasPrepTime(3))),3) preference(1,(1,3),1,for(atom(hasCost(2))),6) preference(1,(1,4),1,for(atom(hasPrep(6))),5) preference(1,(1,5),1,for(atom(hasPrep(1))),2) preference(1,(1,6),1,for(atom(hasCategory(4))),3) preference(1,(1,7),1,for(atom(hasIngredient(9))),1) preference(1,(1,8),1,for(atom(hasCategory(1))),2) preference(1,(1,10),1,for(atom(hasDifficulty(2))),4) preference(1,(1,11),1,for(atom(hasCategory(3))),5) preference(1,(1,13),1,for(atom(hasPrep(0))),2) preference(1,less(weight)) output(51,better,55) output(60,better,98) output(67,better,8) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,8) output(53,worse,60) output(53,worse,98) output(71,worse,51) output(57,eq,52) output(76,eq,67) output(71,eq,30)
Optimization: 6 11
Answer: 8
preference(1,(1,1),1,for(atom(hasIngredient(9))),1) preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasIngredient(7))),7) preference(1,(1,4),1,for(atom(hasCost(2))),1) preference(1,(1,5),1,for(atom(hasPrepTime(2))),1) preference(1,(1,6),1,for(atom(hasPrep(0))),3) preference(1,(1,7),1,for(atom(hasPrep(2))),4) preference(1,(1,8),1,for(atom(hasDifficulty(1))),1) preference(1,(1,9),1,for(atom(hasCategory(4))),4) preference(1,(1,10),1,for(atom(hasIngredient(3))),1) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasDifficulty(4))),4) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,(1,14),1,for(atom(hasCategory(1))),8) preference(1,less(weight)) output(51,better,55) output(67,better,8) output(53,better,60) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(71,better,51) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,67) output(76,better,8) output(60,worse,98) output(53,worse,98) output(57,worse,52) output(91,eq,99) output(71,eq,30)
Optimization: 5 14
Answer: 9
preference(1,(1,1),1,for(atom(hasIngredient(9))),1) preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasIngredient(12))),4) preference(1,(1,4),1,for(atom(hasCost(2))),1) preference(1,(1,5),1,for(atom(hasPrepTime(2))),1) preference(1,(1,6),1,for(atom(hasCategory(2))),7) preference(1,(1,7),1,for(atom(hasPrepTime(3))),3) preference(1,(1,8),1,for(atom(hasDifficulty(1))),1) preference(1,(1,9),1,for(atom(hasCategory(4))),4) preference(1,(1,10),1,for(atom(hasIngredient(3))),1) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasDifficulty(4))),4) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,(1,14),1,for(atom(hasCategory(1))),8) preference(1,less(weight)) output(67,better,8) output(53,better,60) output(53,better,98) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(71,better,51) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,67) output(76,better,8) output(51,worse,55) output(60,worse,98) output(57,eq,52) output(71,eq,30)
Optimization: 4 14
Answer: 10
preference(1,(1,1),1,for(atom(hasDifficulty(2))),1) preference(1,(1,2),1,for(atom(hasPrep(1))),1) preference(1,(1,3),1,for(atom(hasIngredient(9))),2) preference(1,(1,4),1,for(atom(hasDifficulty(4))),8) preference(1,(1,5),1,for(atom(hasPrep(6))),1) preference(1,(1,6),1,for(atom(hasCategory(1))),8) preference(1,(1,7),1,for(atom(hasIngredient(3))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),5) preference(1,(1,9),1,for(atom(hasCost(3))),8) preference(1,(1,10),1,for(atom(hasCategory(4))),4) preference(1,(1,11),1,for(atom(hasPrepTime(2))),3) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasCost(2))),7) preference(1,(1,14),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(51,better,55) output(60,better,98) output(67,better,8) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,30) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,67) output(76,better,8) output(53,worse,60) output(53,worse,98) output(99,eq,71)
Optimization: 3 14
Answer: 11
preference(1,(1,1),1,for(atom(hasDifficulty(2))),1) preference(1,(1,2),1,for(atom(hasPrep(1))),1) preference(1,(1,3),1,for(atom(hasIngredient(9))),2) preference(1,(1,4),1,for(atom(hasDifficulty(4))),8) preference(1,(1,5),1,for(atom(hasPrep(6))),1) preference(1,(1,6),1,for(atom(hasCategory(1))),8) preference(1,(1,7),1,for(atom(hasIngredient(3))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,9),1,for(atom(hasIngredient(12))),8) preference(1,(1,10),1,for(atom(hasCategory(4))),4) preference(1,(1,11),1,for(atom(hasPrepTime(2))),3) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasCost(2))),7) preference(1,(1,14),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(51,better,55) output(60,better,98) output(67,better,8) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,30) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,67) output(76,better,8) output(53,worse,60) output(53,worse,98)
Optimization: 2 14
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(2))),1) preference(1,(1,2),1,for(atom(hasPrep(1))),1) preference(1,(1,3),1,for(atom(hasIngredient(9))),2) preference(1,(1,4),1,for(atom(hasPrep(0))),4) preference(1,(1,5),1,for(atom(hasPrep(6))),1) preference(1,(1,6),1,for(atom(hasCategory(1))),8) preference(1,(1,7),1,for(atom(hasIngredient(3))),8) preference(1,(1,8),1,for(atom(hasIngredient(12))),2) preference(1,(1,9),1,for(atom(hasCost(3))),8) preference(1,(1,10),1,for(atom(hasCategory(4))),4) preference(1,(1,11),1,for(atom(hasPrepTime(2))),3) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasCost(2))),7) preference(1,(1,14),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(51,better,55) output(60,better,98) output(67,better,8) output(53,better,98) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,30) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,67) output(76,better,8) output(53,worse,60)
Optimization: 1 14
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(2))),2) preference(1,(1,2),1,for(atom(hasPrep(1))),7) preference(1,(1,3),1,for(atom(hasCost(1))),3) preference(1,(1,4),1,for(atom(hasPrep(7))),8) preference(1,(1,5),1,for(atom(hasIngredient(3))),4) preference(1,(1,6),1,for(atom(hasDifficulty(4))),5) preference(1,(1,7),1,for(atom(hasPrepTime(2))),3) preference(1,(1,8),1,for(atom(hasCategory(1))),3) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasCost(3))),4) preference(1,(1,11),1,for(atom(hasPrep(0))),7) preference(1,(1,12),1,for(atom(hasCategory(5))),1) preference(1,(1,13),1,for(atom(hasIngredient(8))),2) preference(1,(1,14),1,for(atom(hasCategory(3))),7) preference(1,less(weight)) output(51,better,55) output(60,better,98) output(67,better,8) output(53,better,60) output(53,better,98) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,30) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,67) output(76,better,8)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 14
preference(1,(1,1),1,for(atom(hasDifficulty(2))),1) preference(1,(1,2),1,for(atom(hasCost(2))),8) preference(1,(1,3),1,for(atom(hasCost(3))),5) preference(1,(1,4),1,for(atom(hasPrep(7))),6) preference(1,(1,5),1,for(atom(hasPrepTime(2))),3) preference(1,(1,7),1,for(atom(hasPrepTime(3))),5) preference(1,(1,8),1,for(atom(hasIngredient(10))),6) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasIngredient(3))),5) preference(1,(1,11),1,for(atom(hasCategory(1))),7) preference(1,(1,12),1,for(atom(hasIngredient(12))),8) preference(1,(1,13),1,for(atom(hasIngredient(7))),2) preference(1,(1,14),1,for(atom(hasCategory(4))),8) preference(1,less(weight)) output(51,better,55) output(60,better,98) output(67,better,8) output(53,better,60) output(53,better,98) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,30) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,67) output(76,better,8)
Optimization: 0 13
Answer: 15
preference(1,(1,1),1,for(atom(hasPrepTime(2))),1) preference(1,(1,2),1,for(atom(hasIngredient(7))),1) preference(1,(1,3),1,for(atom(hasIngredient(10))),7) preference(1,(1,4),1,for(atom(hasPrep(1))),7) preference(1,(1,5),1,for(atom(hasPrep(7))),8) preference(1,(1,6),1,for(atom(hasCost(2))),3) preference(1,(1,8),1,for(atom(hasPrep(6))),2) preference(1,(1,9),1,for(atom(hasDifficulty(2))),1) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasIngredient(3))),8) preference(1,(1,13),1,for(atom(hasCategory(1))),6) preference(1,(1,14),1,for(atom(hasCategory(3))),2) preference(1,less(weight)) output(51,better,55) output(60,better,98) output(67,better,8) output(53,better,60) output(53,better,98) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,30) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,67) output(76,better,8)
Optimization: 0 12
Progression : 0 [ 2;12] (Error: 5)
Answer: 16
preference(1,(1,1),1,for(atom(hasPrepTime(2))),1) preference(1,(1,2),1,for(atom(hasCategory(1))),3) preference(1,(1,3),1,for(atom(hasIngredient(3))),3) preference(1,(1,5),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasIngredient(7))),7) preference(1,(1,7),1,for(atom(hasPrepTime(3))),3) preference(1,(1,9),1,for(atom(hasIngredient(10))),8) preference(1,(1,10),1,for(atom(hasCategory(4))),7) preference(1,(1,11),1,for(atom(hasCost(3))),3) preference(1,(1,12),1,for(atom(hasCost(2))),7) preference(1,(1,14),1,for(atom(hasIngredient(12))),7) preference(1,less(weight)) output(51,better,55) output(60,better,98) output(67,better,8) output(53,better,60) output(53,better,98) output(91,better,99) output(91,better,71) output(91,better,51) output(91,better,55) output(91,better,30) output(99,better,71) output(99,better,30) output(99,better,51) output(99,better,55) output(57,better,52) output(71,better,51) output(71,better,30) output(71,better,55) output(78,better,76) output(78,better,67) output(78,better,8) output(17,better,53) output(17,better,60) output(17,better,98) output(76,better,67) output(76,better,8)
Optimization: 0 11
Progression : 0 [ 3;11] (Error: 2.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.085 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 16+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 298.253s (Solving: 295.57s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1184.189s
Threads      : 4        (Winner: 4)

Choices      : 5164337  (Domain: 164961)
Conflicts    : 3461766  (Analyzed: 3461763)
Restarts     : 2809     (Average: 1232.38 Last: 175479)
Model-Level  : 26.0    
Problems     : 9        (Average Length: 0.44 Splits: 0)
Lemmas       : 3469235  (Deleted: 3234109)
  Binary     : 712      (Ratio:   0.02%)
  Ternary    : 1184     (Ratio:   0.03%)
  Conflict   : 3461763  (Average Length:  625.6 Ratio:  99.78%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7472     (Average Length:   37.2 Ratio:   0.22%) 
  Distributed: 2491     (Ratio:   0.07% Average LBD: 3.45) 
  Integrated : 7473     (Ratio: 300.00% Unit: 13 Average Jumps: 63.23)
Backjumps    : 3461763  (Average:  1.39 Max: 1161 Sum: 4808123)
  Executed   : 3461762  (Average:  1.39 Max: 1161 Sum: 4808108 Ratio: 100.00%)
  Bounded    : 1        (Average: 15.00 Max:  15 Sum:     15 Ratio:   0.00%)

Rules        : 344080  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13158   
Bodies       : 18815   
  Sum        : 52      
  Count      : 14      
Equivalences : 6760     (Atom=Atom: 273 Body=Body: 118 Other: 6369)
Tight        : Yes
Variables    : 17031    (Eliminated:    0 Frozen: 7707)
Constraints  : 366752   (Binary:  96.5% Ternary:   2.5% Other:   1.0%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(0)) ; 
  2 :: atom(hasCost(3)) ; 
  2 :: atom(hasPrep(6)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  3 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasCategory(1)) ; 
  4 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasCategory(1)) ; 
  6 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasCost(3)) ; 
  5 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCategory(4)) ; 
  1 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasCategory(3)) ; 
  1 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCategory(4)) ; 
  1 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasCategory(1)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(2)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCategory(4)) ; 
  1 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasPrep(1)) ; 
  8 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCategory(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCategory(4)) ; 
  1 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasPrep(1)) ; 
  8 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(1)) ; 
  2 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(3)) ; 
  4 :: atom(hasCategory(4)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(1)) ; 
  2 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasCategory(4)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(1)) ; 
  2 :: atom(hasIngredient(9)) ; 
  4 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasCost(3)) ; 
  4 :: atom(hasCategory(4)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  4 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasDifficulty(4)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCategory(1)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrep(0)) ; 
  1 :: atom(hasCategory(5)) ; 
  2 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasCost(2)) ; 
  5 :: atom(hasCost(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasIngredient(10)) ; 
  2 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCategory(1)) ; 
  2 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCategory(1)) ; 
  3 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(4)) ; 
  3 :: atom(hasCost(3)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasIngredient(12)) 
}.
