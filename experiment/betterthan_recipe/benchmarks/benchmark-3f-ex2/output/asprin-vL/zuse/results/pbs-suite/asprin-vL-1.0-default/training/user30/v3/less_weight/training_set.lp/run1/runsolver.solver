asprin_vL version 1.0
Reading from stdin
-:1225:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1235:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1250:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1331:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1592:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1605:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1782:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1911:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1983:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1987:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1987:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1993:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2092:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2118:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2238:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2272:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2294:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1142:1-16: info: no atoms over signature occur in program:
  output/3

-:1134:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1135:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(22,eq,33) output(33,eq,83) output(49,eq,71) output(71,eq,53) output(53,eq,52) output(84,eq,80) output(39,eq,82) output(82,eq,65) output(65,eq,33) output(68,eq,22) output(22,eq,10) output(74,eq,80) output(80,eq,88) output(84,eq,88) output(74,eq,88) output(68,eq,10) output(82,eq,33) output(39,eq,65) output(71,eq,52) output(49,eq,53) output(22,eq,83) output(65,eq,83) output(68,eq,33) output(82,eq,83) output(39,eq,83) output(68,eq,83) output(49,eq,52) output(39,eq,33)
Optimization: 28 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrep(1))),2) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(53,better,52) output(49,better,71) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,10) output(68,better,33) output(68,better,83) output(80,worse,88) output(39,worse,65) output(82,worse,65) output(71,worse,53) output(74,worse,88) output(33,eq,83) output(39,eq,82) output(68,eq,22) output(74,eq,80) output(84,eq,88) output(82,eq,33) output(71,eq,52) output(49,eq,53) output(82,eq,83) output(39,eq,83) output(39,eq,33)
Optimization: 16 14
Answer: 3
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,5),1,for(atom(hasCost(4))),8) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,12),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,10) output(68,better,33) output(68,better,83) output(74,better,80) output(80,worse,88) output(39,worse,65) output(82,worse,65) output(33,eq,83) output(71,eq,53) output(53,eq,52) output(39,eq,82) output(68,eq,22) output(84,eq,88) output(74,eq,88) output(82,eq,33) output(71,eq,52) output(82,eq,83) output(39,eq,83) output(39,eq,33)
Optimization: 15 4
Answer: 4
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,2),1,for(atom(hasCost(1))),7) preference(1,(1,3),1,for(atom(hasCost(4))),7) preference(1,(1,4),1,for(atom(hasIngredient(8))),7) preference(1,(1,5),1,for(atom(hasIngredient(10))),7) preference(1,(1,6),1,for(atom(hasCost(5))),7) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasIngredient(6))),7) preference(1,(1,9),1,for(atom(hasCategory(1))),7) preference(1,(1,10),1,for(atom(hasPrep(2))),7) preference(1,(1,11),1,for(atom(hasPrep(3))),7) preference(1,(1,12),1,for(atom(hasDifficulty(3))),7) preference(1,(1,13),1,for(atom(hasPrepTime(3))),8) preference(1,(1,14),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(22,better,10) output(22,better,83) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(84,worse,80) output(39,worse,33) output(53,worse,52) output(82,worse,33) output(65,worse,33) output(74,worse,80) output(74,worse,88) output(22,eq,33) output(82,eq,65) output(84,eq,88) output(71,eq,52) output(65,eq,83) output(82,eq,83)
Optimization: 13 14
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,3),1,for(atom(hasCategory(1))),7) preference(1,(1,5),1,for(atom(hasDifficulty(3))),7) preference(1,(1,6),1,for(atom(hasIngredient(8))),7) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,12),1,for(atom(hasIngredient(12))),8) preference(1,(1,13),1,for(atom(hasCategory(3))),8) preference(1,(1,14),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(49,better,53) output(49,better,52) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,88) output(84,worse,80) output(49,worse,71) output(33,eq,83) output(53,eq,52) output(82,eq,65) output(65,eq,33) output(74,eq,80) output(84,eq,88) output(82,eq,33) output(65,eq,83) output(82,eq,83)
Optimization: 11 8
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,3),1,for(atom(hasDifficulty(3))),8) preference(1,(1,5),1,for(atom(hasCost(4))),8) preference(1,(1,6),1,for(atom(hasIngredient(10))),7) preference(1,(1,12),1,for(atom(hasCategory(1))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),7) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(82,better,33) output(49,better,53) output(49,better,52) output(65,better,33) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,88) output(84,worse,80) output(33,worse,83) output(49,eq,71) output(53,eq,52) output(82,eq,65) output(74,eq,80) output(84,eq,88) output(22,eq,83) output(65,eq,83) output(82,eq,83)
Optimization: 10 6
Answer: 7
preference(1,(1,1),1,for(atom(hasDifficulty(3))),8) preference(1,(1,3),1,for(atom(hasIngredient(6))),7) preference(1,(1,5),1,for(atom(hasIngredient(10))),7) preference(1,(1,6),1,for(atom(hasCategory(1))),7) preference(1,(1,7),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasCost(4))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),7) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(82,better,65) output(82,better,33) output(49,better,53) output(49,better,52) output(65,better,33) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,88) output(84,worse,80) output(33,worse,83) output(65,worse,83) output(49,eq,71) output(53,eq,52) output(74,eq,80) output(84,eq,88) output(22,eq,83) output(82,eq,83)
Optimization: 9 7
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(0))),7) preference(1,(1,5),1,for(atom(hasIngredient(10))),7) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasDifficulty(3))),8) preference(1,(1,9),1,for(atom(hasCost(4))),8) preference(1,(1,10),1,for(atom(hasCategory(1))),7) preference(1,(1,12),1,for(atom(hasCategory(2))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),7) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(84,better,80) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(82,better,65) output(82,better,33) output(49,better,53) output(49,better,52) output(65,better,33) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(80,worse,88) output(33,worse,83) output(65,worse,83) output(49,eq,71) output(53,eq,52) output(84,eq,88) output(22,eq,83) output(82,eq,83)
Optimization: 8 8
Answer: 9
preference(1,(1,1),1,for(atom(hasCategory(3))),7) preference(1,(1,2),1,for(atom(hasCategory(1))),8) preference(1,(1,4),1,for(atom(hasIngredient(3))),7) preference(1,(1,5),1,for(atom(hasIngredient(8))),8) preference(1,(1,6),1,for(atom(hasCategory(2))),7) preference(1,(1,8),1,for(atom(hasCost(4))),8) preference(1,(1,9),1,for(atom(hasPrep(7))),7) preference(1,(1,10),1,for(atom(hasDifficulty(3))),8) preference(1,(1,11),1,for(atom(hasPrep(0))),7) preference(1,(1,13),1,for(atom(hasCost(3))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(22,better,10) output(22,better,83) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,83) output(39,better,33) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(84,worse,80) output(82,worse,65) output(82,worse,33) output(22,eq,33) output(53,eq,52) output(39,eq,65) output(82,eq,83)
Optimization: 7 11
Answer: 10
preference(1,(1,1),1,for(atom(hasCost(3))),7) preference(1,(1,2),1,for(atom(hasPrep(6))),7) preference(1,(1,4),1,for(atom(hasCategory(4))),7) preference(1,(1,5),1,for(atom(hasCategory(1))),8) preference(1,(1,6),1,for(atom(hasPrepTime(1))),7) preference(1,(1,7),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasIngredient(12))),7) preference(1,(1,9),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(49,better,53) output(49,better,52) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,88) output(84,worse,80) output(33,eq,83) output(49,eq,71) output(65,eq,33) output(74,eq,80) output(65,eq,83)
Optimization: 6 8
Answer: 11
preference(1,(1,1),1,for(atom(hasIngredient(3))),7) preference(1,(1,2),1,for(atom(hasPrep(6))),7) preference(1,(1,3),1,for(atom(hasIngredient(12))),7) preference(1,(1,5),1,for(atom(hasCategory(1))),8) preference(1,(1,6),1,for(atom(hasPrepTime(1))),7) preference(1,(1,7),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasPrepTime(2))),8) preference(1,(1,12),1,for(atom(hasCost(3))),7) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(49,better,53) output(49,better,52) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(84,worse,80) output(33,eq,83) output(49,eq,71) output(65,eq,33) output(65,eq,83)
Optimization: 5 9
Answer: 12
preference(1,(1,1),1,for(atom(hasIngredient(3))),7) preference(1,(1,2),1,for(atom(hasPrep(0))),6) preference(1,(1,3),1,for(atom(hasPrep(5))),7) preference(1,(1,4),1,for(atom(hasCategory(3))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),6) preference(1,(1,6),1,for(atom(hasDifficulty(3))),7) preference(1,(1,7),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasCategory(2))),8) preference(1,(1,9),1,for(atom(hasCost(4))),6) preference(1,(1,10),1,for(atom(hasIngredient(8))),8) preference(1,(1,12),1,for(atom(hasCategory(1))),8) preference(1,(1,13),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(22,worse,33) output(82,eq,65) output(65,eq,33) output(82,eq,33)
Optimization: 4 12
Answer: 13
preference(1,(1,1),1,for(atom(hasPrepTime(1))),6) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasCost(3))),6) preference(1,(1,4),1,for(atom(hasPrepTime(3))),7) preference(1,(1,5),1,for(atom(hasIngredient(3))),6) preference(1,(1,6),1,for(atom(hasDifficulty(3))),7) preference(1,(1,7),1,for(atom(hasIngredient(12))),6) preference(1,(1,8),1,for(atom(hasPrep(7))),7) preference(1,(1,9),1,for(atom(hasCategory(3))),7) preference(1,(1,10),1,for(atom(hasPrep(0))),7) preference(1,(1,12),1,for(atom(hasCategory(1))),8) preference(1,(1,13),1,for(atom(hasPrepTime(2))),8) preference(1,(1,14),1,for(atom(hasCost(2))),7) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(82,worse,65) output(82,worse,33) output(39,eq,65)
Optimization: 3 13
Answer: 14
preference(1,(1,2),1,for(atom(hasCost(2))),6) preference(1,(1,3),1,for(atom(hasPrep(5))),6) preference(1,(1,4),1,for(atom(hasCategory(3))),6) preference(1,(1,5),1,for(atom(hasCategory(4))),7) preference(1,(1,6),1,for(atom(hasIngredient(3))),7) preference(1,(1,7),1,for(atom(hasCategory(1))),8) preference(1,(1,8),1,for(atom(hasPrep(7))),7) preference(1,(1,9),1,for(atom(hasPrepTime(3))),7) preference(1,(1,10),1,for(atom(hasIngredient(12))),7) preference(1,(1,11),1,for(atom(hasIngredient(9))),6) preference(1,(1,12),1,for(atom(hasDifficulty(3))),7) preference(1,(1,13),1,for(atom(hasPrepTime(2))),8) preference(1,(1,14),1,for(atom(hasPrep(6))),7) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,33) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(82,worse,65) output(39,eq,65)
Optimization: 2 13
Answer: 15
preference(1,(1,2),1,for(atom(hasCost(2))),6) preference(1,(1,3),1,for(atom(hasIngredient(3))),7) preference(1,(1,4),1,for(atom(hasCategory(3))),6) preference(1,(1,5),1,for(atom(hasCategory(1))),8) preference(1,(1,6),1,for(atom(hasIngredient(12))),7) preference(1,(1,7),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasCategory(4))),7) preference(1,(1,9),1,for(atom(hasPrepTime(3))),7) preference(1,(1,10),1,for(atom(hasDifficulty(3))),7) preference(1,(1,12),1,for(atom(hasPrep(5))),6) preference(1,(1,13),1,for(atom(hasPrepTime(2))),8) preference(1,(1,14),1,for(atom(hasPrep(6))),7) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(65,eq,33)
Optimization: 1 12
Answer: 16
preference(1,(1,1),1,for(atom(hasPrepTime(3))),3) preference(1,(1,2),1,for(atom(hasPrep(1))),2) preference(1,(1,3),1,for(atom(hasPrep(0))),1) preference(1,(1,4),1,for(atom(hasCategory(1))),8) preference(1,(1,5),1,for(atom(hasPrep(6))),5) preference(1,(1,6),1,for(atom(hasPrep(5))),7) preference(1,(1,7),1,for(atom(hasIngredient(3))),6) preference(1,(1,8),1,for(atom(hasCategory(3))),6) preference(1,(1,9),1,for(atom(hasCategory(4))),4) preference(1,(1,10),1,for(atom(hasIngredient(12))),6) preference(1,(1,11),1,for(atom(hasIngredient(9))),7) preference(1,(1,12),1,for(atom(hasCategory(2))),6) preference(1,(1,13),1,for(atom(hasPrepTime(2))),8) preference(1,(1,14),1,for(atom(hasCost(4))),1) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 17
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,2),1,for(atom(hasPrepTime(2))),7) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasPrep(5))),1) preference(1,(1,5),1,for(atom(hasPrep(6))),6) preference(1,(1,6),1,for(atom(hasCategory(4))),6) preference(1,(1,7),1,for(atom(hasCategory(1))),7) preference(1,(1,8),1,for(atom(hasCategory(2))),2) preference(1,(1,9),1,for(atom(hasIngredient(3))),6) preference(1,(1,10),1,for(atom(hasPrepTime(1))),6) preference(1,(1,12),1,for(atom(hasCost(3))),6) preference(1,(1,13),1,for(atom(hasIngredient(7))),1) preference(1,(1,14),1,for(atom(hasPrep(7))),2) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88)
Optimization: 0 13
Answer: 18
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,2),1,for(atom(hasPrepTime(2))),7) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasPrep(5))),1) preference(1,(1,5),1,for(atom(hasPrep(6))),6) preference(1,(1,6),1,for(atom(hasCategory(4))),6) preference(1,(1,7),1,for(atom(hasCategory(1))),7) preference(1,(1,8),1,for(atom(hasPrep(7))),4) preference(1,(1,9),1,for(atom(hasIngredient(3))),6) preference(1,(1,12),1,for(atom(hasCost(3))),6) preference(1,(1,13),1,for(atom(hasIngredient(7))),1) preference(1,(1,14),1,for(atom(hasCategory(2))),2) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88)
Optimization: 0 12
Answer: 19
preference(1,(1,1),1,for(atom(hasDifficulty(2))),8) preference(1,(1,2),1,for(atom(hasIngredient(8))),6) preference(1,(1,3),1,for(atom(hasCategory(4))),2) preference(1,(1,4),1,for(atom(hasDifficulty(1))),3) preference(1,(1,5),1,for(atom(hasCategory(1))),4) preference(1,(1,6),1,for(atom(hasPrepTime(2))),4) preference(1,(1,7),1,for(atom(hasPrep(7))),3) preference(1,(1,11),1,for(atom(hasCost(3))),2) preference(1,(1,12),1,for(atom(hasPrep(5))),3) preference(1,(1,13),1,for(atom(hasPrep(0))),8) preference(1,(1,14),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88)
Optimization: 0 11
Answer: 20
preference(1,(1,1),1,for(atom(hasPrepTime(2))),7) preference(1,(1,2),1,for(atom(hasPrep(7))),5) preference(1,(1,3),1,for(atom(hasCategory(4))),6) preference(1,(1,4),1,for(atom(hasDifficulty(1))),1) preference(1,(1,5),1,for(atom(hasCategory(2))),2) preference(1,(1,6),1,for(atom(hasPrep(6))),6) preference(1,(1,7),1,for(atom(hasIngredient(3))),6) preference(1,(1,9),1,for(atom(hasCategory(1))),7) preference(1,(1,11),1,for(atom(hasCost(2))),1) preference(1,(1,12),1,for(atom(hasCost(3))),6) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88)
Optimization: 0 10
Progression : 0 [ 2;10] (Error: 4)
Answer: 21
preference(1,(1,2),1,for(atom(hasCategory(4))),4) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),7) preference(1,(1,9),1,for(atom(hasCost(2))),3) preference(1,(1,10),1,for(atom(hasCost(4))),2) preference(1,(1,11),1,for(atom(hasPrep(5))),5) preference(1,(1,12),1,for(atom(hasCategory(3))),3) preference(1,(1,13),1,for(atom(hasCategory(1))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),7) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88)
Optimization: 0 9
Answer: 22
preference(1,(1,1),1,for(atom(hasDifficulty(2))),1) preference(1,(1,3),1,for(atom(hasPrep(7))),7) preference(1,(1,4),1,for(atom(hasCategory(4))),2) preference(1,(1,6),1,for(atom(hasPrepTime(2))),8) preference(1,(1,7),1,for(atom(hasCategory(1))),8) preference(1,(1,10),1,for(atom(hasPrep(5))),4) preference(1,(1,13),1,for(atom(hasCost(2))),4) preference(1,(1,14),1,for(atom(hasPrep(6))),6) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(84,better,80) output(84,better,88) output(80,better,88) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(82,better,65) output(82,better,33) output(82,better,83) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88)
Optimization: 0 8
Progression : 0 [3;8] (Error: 1.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.064 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 22+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 298.162s (Solving: 295.55s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1184.552s
Threads      : 4        (Winner: 4)

Choices      : 7428996  (Domain: 182829)
Conflicts    : 4475200  (Analyzed: 4475197)
Restarts     : 5189     (Average: 862.44 Last: 275492)
Model-Level  : 39.5    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 4485072  (Deleted: 4164723)
  Binary     : 442      (Ratio:   0.01%)
  Ternary    : 1082     (Ratio:   0.02%)
  Conflict   : 4475197  (Average Length:  470.6 Ratio:  99.78%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 9875     (Average Length:   62.6 Ratio:   0.22%) 
  Distributed: 3303     (Ratio:   0.07% Average LBD: 3.58) 
  Integrated : 9909     (Ratio: 300.00% Unit: 13 Average Jumps: 14.31)
Backjumps    : 4475197  (Average:  1.49 Max: 1012 Sum: 6658811)
  Executed   : 4475196  (Average:  1.49 Max: 1012 Sum: 6658793 Ratio: 100.00%)
  Bounded    : 1        (Average: 18.00 Max:  18 Sum:     18 Ratio:   0.00%)

Rules        : 363258  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13354   
Bodies       : 18837   
  Sum        : 56      
  Count      : 14      
Equivalences : 6830     (Atom=Atom: 293 Body=Body: 126 Other: 6411)
Tight        : Yes
Variables    : 17039    (Eliminated:    0 Frozen: 7715)
Constraints  : 385748   (Binary:  96.7% Ternary:   2.4% Other:   0.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(5)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(6)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasIngredient(6)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCost(4)) ; 
  7 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCategory(2)) ; 
  7 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCategory(1)) ; 
  7 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasCategory(2)) ; 
  8 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCategory(2)) ; 
  6 :: atom(hasCost(4)) ; 
  8 :: atom(hasIngredient(8)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  7 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCategory(1)) ; 
  7 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCategory(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(5)) ; 
  6 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCategory(4)) ; 
  6 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasCategory(2)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCategory(1)) ; 
  2 :: atom(hasCategory(2)) ; 
  6 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasCost(3)) ; 
  1 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrep(7)) ; 
  6 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCost(3)) ; 
  1 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasCategory(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasIngredient(8)) ; 
  2 :: atom(hasCategory(4)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCost(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  6 :: atom(hasCategory(4)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCategory(2)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(0)) ; 
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasCost(4)) ; 
  5 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(6)) 
}.
