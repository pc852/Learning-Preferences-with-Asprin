asprin_vL version 1.0
Reading from stdin
-:1228:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1238:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1253:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1334:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1595:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1608:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1785:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1914:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1986:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1990:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1990:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1996:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2095:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2121:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2241:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2275:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2297:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1145:1-16: info: no atoms over signature occur in program:
  output/3

-:1137:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1138:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(75,eq,25) output(25,eq,55) output(55,eq,17) output(62,eq,94) output(52,eq,78) output(86,eq,8) output(99,eq,57) output(57,eq,91) output(91,eq,51) output(76,eq,55) output(55,eq,52) output(52,eq,8) output(71,eq,67) output(55,eq,8) output(25,eq,52) output(76,eq,52) output(57,eq,51) output(99,eq,91) output(55,eq,78) output(25,eq,17) output(76,eq,17) output(75,eq,55) output(75,eq,17) output(25,eq,78) output(76,eq,78) output(75,eq,78) output(99,eq,51) output(75,eq,52) output(25,eq,8) output(76,eq,8) output(75,eq,8)
Optimization: 31 0
Answer: 2
preference(1,(1,7),1,for(atom(hasCategory(2))),8) preference(1,less(weight)) output(55,better,8) output(25,better,8) output(52,better,8) output(75,better,8) output(86,better,8) output(76,better,8) output(75,eq,25) output(25,eq,55) output(55,eq,17) output(62,eq,94) output(52,eq,78) output(99,eq,57) output(57,eq,91) output(91,eq,51) output(76,eq,55) output(55,eq,52) output(71,eq,67) output(25,eq,52) output(76,eq,52) output(57,eq,51) output(99,eq,91) output(55,eq,78) output(25,eq,17) output(76,eq,17) output(75,eq,55) output(75,eq,17) output(25,eq,78) output(76,eq,78) output(75,eq,78) output(99,eq,51) output(75,eq,52)
Optimization: 25 1
Answer: 3
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(55,better,17) output(55,better,52) output(99,better,57) output(99,better,91) output(25,better,52) output(25,better,17) output(71,better,67) output(75,better,17) output(75,better,52) output(76,better,52) output(76,better,17) output(91,worse,51) output(52,worse,78) output(52,worse,8) output(57,worse,51) output(75,eq,25) output(25,eq,55) output(62,eq,94) output(86,eq,8) output(57,eq,91) output(76,eq,55) output(55,eq,8) output(55,eq,78) output(75,eq,55) output(25,eq,78) output(76,eq,78) output(75,eq,78) output(99,eq,51) output(25,eq,8) output(76,eq,8) output(75,eq,8)
Optimization: 20 14
Answer: 4
preference(1,(1,7),1,for(atom(hasCategory(2))),8) preference(1,(1,12),1,for(atom(hasIngredient(6))),8) preference(1,(1,13),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(55,better,8) output(55,better,78) output(99,better,57) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(75,better,78) output(75,better,8) output(86,better,8) output(76,better,78) output(76,better,8) output(57,worse,91) output(57,worse,51) output(75,eq,25) output(25,eq,55) output(55,eq,17) output(62,eq,94) output(91,eq,51) output(76,eq,55) output(55,eq,52) output(71,eq,67) output(25,eq,52) output(76,eq,52) output(99,eq,91) output(25,eq,17) output(76,eq,17) output(75,eq,55) output(75,eq,17) output(99,eq,51) output(75,eq,52)
Optimization: 19 3
Answer: 5
preference(1,(1,7),1,for(atom(hasCost(4))),8) preference(1,(1,12),1,for(atom(hasDifficulty(4))),8) preference(1,(1,13),1,for(atom(hasCategory(2))),8) preference(1,less(weight)) output(55,better,8) output(55,better,78) output(91,better,51) output(99,better,51) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(57,better,51) output(75,better,78) output(75,better,8) output(86,better,8) output(76,better,78) output(76,better,8) output(75,eq,25) output(25,eq,55) output(55,eq,17) output(62,eq,94) output(99,eq,57) output(57,eq,91) output(76,eq,55) output(55,eq,52) output(71,eq,67) output(25,eq,52) output(76,eq,52) output(99,eq,91) output(25,eq,17) output(76,eq,17) output(75,eq,55) output(75,eq,17) output(75,eq,52)
Optimization: 17 3
Answer: 6
preference(1,(1,6),1,for(atom(hasDifficulty(4))),8) preference(1,(1,7),1,for(atom(hasCost(4))),8) preference(1,(1,12),1,for(atom(hasCategory(2))),8) preference(1,(1,13),1,for(atom(hasCost(5))),8) preference(1,less(weight)) output(55,better,8) output(55,better,78) output(99,better,91) output(99,better,51) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(57,better,91) output(57,better,51) output(75,better,78) output(75,better,8) output(86,better,8) output(76,better,78) output(76,better,8) output(75,eq,25) output(25,eq,55) output(55,eq,17) output(62,eq,94) output(99,eq,57) output(91,eq,51) output(76,eq,55) output(55,eq,52) output(71,eq,67) output(25,eq,52) output(76,eq,52) output(25,eq,17) output(76,eq,17) output(75,eq,55) output(75,eq,17) output(75,eq,52)
Optimization: 16 4
Answer: 7
preference(1,(1,1),1,for(atom(hasCost(5))),8) preference(1,(1,2),1,for(atom(hasDifficulty(4))),8) preference(1,(1,6),1,for(atom(hasCost(4))),8) preference(1,(1,7),1,for(atom(hasCategory(1))),8) preference(1,(1,14),1,for(atom(hasCategory(2))),8) preference(1,less(weight)) output(55,better,8) output(55,better,78) output(99,better,91) output(99,better,51) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(57,better,91) output(57,better,51) output(71,better,67) output(75,better,78) output(75,better,8) output(86,better,8) output(76,better,78) output(76,better,8) output(75,eq,25) output(25,eq,55) output(55,eq,17) output(62,eq,94) output(99,eq,57) output(91,eq,51) output(76,eq,55) output(55,eq,52) output(25,eq,52) output(76,eq,52) output(25,eq,17) output(76,eq,17) output(75,eq,55) output(75,eq,17) output(75,eq,52)
Optimization: 15 5
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(0))),7) preference(1,(1,3),1,for(atom(hasCategory(1))),8) preference(1,(1,4),1,for(atom(hasPrep(2))),2) preference(1,(1,6),1,for(atom(hasPrep(7))),1) preference(1,(1,7),1,for(atom(hasDifficulty(3))),7) preference(1,(1,8),1,for(atom(hasIngredient(8))),4) preference(1,(1,9),1,for(atom(hasDifficulty(4))),6) preference(1,(1,10),1,for(atom(hasIngredient(11))),8) preference(1,(1,11),1,for(atom(hasCategory(2))),5) preference(1,(1,12),1,for(atom(hasPrep(6))),1) preference(1,(1,13),1,for(atom(hasCategory(3))),2) preference(1,(1,14),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(55,better,17) output(55,better,52) output(55,better,8) output(55,better,78) output(62,better,94) output(91,better,51) output(99,better,57) output(99,better,91) output(99,better,51) output(25,better,55) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(57,better,91) output(57,better,51) output(71,better,67) output(75,better,25) output(75,better,55) output(75,better,17) output(75,better,78) output(75,better,52) output(75,better,8) output(86,better,8) output(76,better,55) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8)
Optimization: 0 12
Progression : 0 [ 1;12] (Error: 11)
Progression : 0 [ 2;12] (Error: 5)
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(2))),2) preference(1,(1,2),1,for(atom(hasPrepTime(1))),1) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrep(6))),2) preference(1,(1,5),1,for(atom(hasCost(4))),8) preference(1,(1,8),1,for(atom(hasDifficulty(4))),8) preference(1,(1,9),1,for(atom(hasCategory(5))),2) preference(1,(1,10),1,for(atom(hasDifficulty(3))),1) preference(1,(1,11),1,for(atom(hasPrep(7))),4) preference(1,(1,12),1,for(atom(hasCategory(1))),3) preference(1,(1,13),1,for(atom(hasCategory(2))),8) preference(1,less(weight)) output(55,better,17) output(55,better,52) output(55,better,8) output(55,better,78) output(62,better,94) output(91,better,51) output(99,better,57) output(99,better,91) output(99,better,51) output(25,better,55) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(57,better,91) output(57,better,51) output(71,better,67) output(75,better,25) output(75,better,55) output(75,better,17) output(75,better,78) output(75,better,52) output(75,better,8) output(86,better,8) output(76,better,55) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8)
Optimization: 0 11
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(6))),3) preference(1,(1,2),1,for(atom(hasPrepTime(2))),8) preference(1,(1,3),1,for(atom(hasCost(2))),8) preference(1,(1,4),1,for(atom(hasDifficulty(1))),3) preference(1,(1,6),1,for(atom(hasPrep(7))),1) preference(1,(1,7),1,for(atom(hasCategory(1))),5) preference(1,(1,8),1,for(atom(hasCost(4))),8) preference(1,(1,9),1,for(atom(hasDifficulty(3))),1) preference(1,(1,10),1,for(atom(hasDifficulty(2))),8) preference(1,(1,12),1,for(atom(hasCategory(2))),6) preference(1,less(weight)) output(55,better,17) output(55,better,52) output(55,better,8) output(55,better,78) output(62,better,94) output(91,better,51) output(99,better,57) output(99,better,91) output(99,better,51) output(25,better,55) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(57,better,91) output(57,better,51) output(71,better,67) output(75,better,25) output(75,better,55) output(75,better,17) output(75,better,78) output(75,better,52) output(75,better,8) output(86,better,8) output(76,better,55) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8)
Optimization: 0 10
Progression : 0 [ 3;10] (Error: 2.33333)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.149 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 10+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 598.276s (Solving: 595.60s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2380.792s
Threads      : 4        (Winner: 4)

Choices      : 12357932 (Domain: 314410)
Conflicts    : 8477880  (Analyzed: 8477877)
Restarts     : 7505     (Average: 1129.63 Last: 604004)
Model-Level  : 184.1   
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 8492855  (Deleted: 8056718)
  Binary     : 2288     (Ratio:   0.03%)
  Ternary    : 2931     (Ratio:   0.03%)
  Conflict   : 8477877  (Average Length:  612.4 Ratio:  99.82%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 14978    (Average Length:   27.7 Ratio:   0.18%) 
  Distributed: 4999     (Ratio:   0.06% Average LBD: 3.27) 
  Integrated : 14997    (Ratio: 300.00% Unit: 12 Average Jumps: 8.42)
Backjumps    : 8477877  (Average:  1.33 Max: 923 Sum: 11239416)
  Executed   : 8477876  (Average:  1.33 Max: 923 Sum: 11239409 Ratio: 100.00%)
  Bounded    : 1        (Average:  7.00 Max:   7 Sum:      7 Ratio:   0.00%)

Rules        : 392529  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13656   
Bodies       : 18870   
  Sum        : 62      
  Count      : 14      
Equivalences : 6935     (Atom=Atom: 323 Body=Body: 138 Other: 6474)
Tight        : Yes
Variables    : 17059    (Eliminated:    0 Frozen: 7735)
Constraints  : 414754   (Binary:  96.9% Ternary:   2.3% Other:   0.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(2)) ; 
  8 :: atom(hasIngredient(6)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasCategory(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCategory(2)) ; 
  8 :: atom(hasCost(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(5)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCategory(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCategory(1)) ; 
  2 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasIngredient(8)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasIngredient(11)) ; 
  5 :: atom(hasCategory(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  2 :: atom(hasCategory(3)) ; 
  5 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  2 :: atom(hasCategory(5)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasPrep(7)) ; 
  3 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCategory(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(2)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCost(4)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasCategory(2)) 
}.
