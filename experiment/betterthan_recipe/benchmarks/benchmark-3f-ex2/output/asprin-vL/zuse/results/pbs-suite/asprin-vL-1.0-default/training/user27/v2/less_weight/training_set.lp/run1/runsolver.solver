asprin_vL version 1.0
Reading from stdin
-:1217:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1227:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1242:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1323:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1584:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1597:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1774:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1903:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1975:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1979:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1979:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1985:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2084:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2110:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2230:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2264:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2286:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1134:1-16: info: no atoms over signature occur in program:
  output/3

-:1126:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1127:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(74,eq,82) output(82,eq,65) output(65,eq,22) output(10,eq,68) output(68,eq,39) output(39,eq,88) output(74,eq,47) output(46,eq,55) output(83,eq,66) output(66,eq,60) output(52,eq,68) output(83,eq,60) output(68,eq,88) output(10,eq,39) output(52,eq,39) output(82,eq,22) output(74,eq,65) output(74,eq,22) output(10,eq,88) output(52,eq,88)
Optimization: 20 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasIngredient(7))),2) preference(1,less(weight)) output(10,better,68) output(10,better,39) output(46,better,55) output(82,better,65) output(82,better,22) output(52,better,68) output(52,better,39) output(39,worse,88) output(68,worse,88) output(74,worse,82) output(65,eq,22) output(68,eq,39) output(74,eq,47) output(83,eq,66) output(66,eq,60) output(83,eq,60) output(74,eq,65) output(74,eq,22) output(10,eq,88) output(52,eq,88)
Optimization: 13 14
Answer: 3
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,2),1,for(atom(hasIngredient(3))),7) preference(1,(1,3),1,for(atom(hasCategory(1))),7) preference(1,(1,4),1,for(atom(hasCost(3))),6) preference(1,(1,5),1,for(atom(hasIngredient(12))),7) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasPrepTime(3))),1) preference(1,(1,12),1,for(atom(hasCategory(4))),1) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,(1,14),1,for(atom(hasPrep(0))),6) preference(1,less(weight)) output(10,better,68) output(10,better,39) output(10,better,88) output(46,better,55) output(39,better,88) output(66,better,60) output(82,better,65) output(82,better,22) output(83,better,66) output(83,better,60) output(52,better,68) output(52,better,39) output(52,better,88) output(65,better,22) output(68,better,39) output(68,better,88) output(74,better,82) output(74,better,47) output(74,better,65) output(74,better,22)
Optimization: 0 10
Progression : 0 [ 1;10] (Error: 9)
Answer: 4
preference(1,(1,1),1,for(atom(hasCost(3))),1) preference(1,(1,4),1,for(atom(hasCategory(3))),5) preference(1,(1,5),1,for(atom(hasIngredient(7))),5) preference(1,(1,7),1,for(atom(hasDifficulty(2))),2) preference(1,(1,8),1,for(atom(hasIngredient(12))),2) preference(1,(1,9),1,for(atom(hasPrepTime(1))),1) preference(1,(1,12),1,for(atom(hasPrep(5))),5) preference(1,(1,13),1,for(atom(hasDifficulty(1))),1) preference(1,(1,14),1,for(atom(hasCategory(1))),3) preference(1,less(weight)) output(10,better,68) output(10,better,39) output(10,better,88) output(46,better,55) output(39,better,88) output(66,better,60) output(82,better,65) output(82,better,22) output(83,better,66) output(83,better,60) output(52,better,68) output(52,better,39) output(52,better,88) output(65,better,22) output(68,better,39) output(68,better,88) output(74,better,82) output(74,better,47) output(74,better,65) output(74,better,22)
Optimization: 0 9
Progression : 0 [2;9] (Error: 3.5)
Answer: 5
preference(1,(1,3),1,for(atom(hasDifficulty(1))),3) preference(1,(1,4),1,for(atom(hasPrep(5))),8) preference(1,(1,6),1,for(atom(hasCategory(1))),4) preference(1,(1,7),1,for(atom(hasCost(3))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),6) preference(1,(1,9),1,for(atom(hasPrepTime(3))),6) preference(1,(1,11),1,for(atom(hasPrepTime(1))),5) preference(1,(1,14),1,for(atom(hasIngredient(9))),4) preference(1,less(weight)) output(10,better,68) output(10,better,39) output(10,better,88) output(46,better,55) output(39,better,88) output(66,better,60) output(82,better,65) output(82,better,22) output(83,better,66) output(83,better,60) output(52,better,68) output(52,better,39) output(52,better,88) output(65,better,22) output(68,better,39) output(68,better,88) output(74,better,82) output(74,better,47) output(74,better,65) output(74,better,22)
Optimization: 0 8
Answer: 6
preference(1,(1,1),1,for(atom(hasDifficulty(1))),1) preference(1,(1,3),1,for(atom(hasPrepTime(1))),2) preference(1,(1,7),1,for(atom(hasCategory(1))),5) preference(1,(1,8),1,for(atom(hasIngredient(9))),5) preference(1,(1,10),1,for(atom(hasIngredient(7))),3) preference(1,(1,11),1,for(atom(hasCost(3))),3) preference(1,(1,12),1,for(atom(hasPrep(5))),3) preference(1,less(weight)) output(10,better,68) output(10,better,39) output(10,better,88) output(46,better,55) output(39,better,88) output(66,better,60) output(82,better,65) output(82,better,22) output(83,better,66) output(83,better,60) output(52,better,68) output(52,better,39) output(52,better,88) output(65,better,22) output(68,better,39) output(68,better,88) output(74,better,82) output(74,better,47) output(74,better,65) output(74,better,22)
Optimization: 0 7
Answer: 7
preference(1,(1,2),1,for(atom(hasIngredient(7))),7) preference(1,(1,4),1,for(atom(hasDifficulty(2))),3) preference(1,(1,5),1,for(atom(hasDifficulty(1))),7) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasCategory(1))),6) preference(1,(1,11),1,for(atom(hasPrep(5))),7) preference(1,less(weight)) output(10,better,68) output(10,better,39) output(10,better,88) output(46,better,55) output(39,better,88) output(66,better,60) output(82,better,65) output(82,better,22) output(83,better,66) output(83,better,60) output(52,better,68) output(52,better,39) output(52,better,88) output(65,better,22) output(68,better,39) output(68,better,88) output(74,better,82) output(74,better,47) output(74,better,65) output(74,better,22)
Optimization: 0 6
Progression : 0 [3;6] (Error: 1)
Answer: 8
preference(1,(1,3),1,for(atom(hasDifficulty(1))),4) preference(1,(1,7),1,for(atom(hasCategory(1))),8) preference(1,(1,10),1,for(atom(hasIngredient(9))),8) preference(1,(1,11),1,for(atom(hasIngredient(7))),2) preference(1,(1,13),1,for(atom(hasPrep(5))),3) preference(1,less(weight)) output(10,better,68) output(10,better,39) output(10,better,88) output(46,better,55) output(39,better,88) output(66,better,60) output(82,better,65) output(82,better,22) output(83,better,66) output(83,better,60) output(52,better,68) output(52,better,39) output(52,better,88) output(65,better,22) output(68,better,39) output(68,better,88) output(74,better,82) output(74,better,47) output(74,better,65) output(74,better,22)
Optimization: 0 5
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.050 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 8+
  Optimum    : unknown
Optimization : 0 5
Calls        : 1
Time         : 298.120s (Solving: 295.71s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1185.019s
Threads      : 4        (Winner: 4)

Choices      : 5439203  (Domain: 120206)
Conflicts    : 3574381  (Analyzed: 3574378)
Restarts     : 3462     (Average: 1032.46 Last: 219454)
Model-Level  : 33.1    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 3581143  (Deleted: 3291976)
  Binary     : 284      (Ratio:   0.01%)
  Ternary    : 704      (Ratio:   0.02%)
  Conflict   : 3574378  (Average Length:  542.3 Ratio:  99.81%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 6765     (Average Length:   68.5 Ratio:   0.19%) 
  Distributed: 2255     (Ratio:   0.06% Average LBD: 3.66) 
  Integrated : 6765     (Ratio: 300.00% Unit: 11 Average Jumps: 10.73)
Backjumps    : 3574378  (Average:  1.37 Max: 1120 Sum: 4882135)
  Executed   : 3574377  (Average:  1.37 Max: 1120 Sum: 4882124 Ratio: 100.00%)
  Bounded    : 1        (Average: 11.00 Max:  11 Sum:     11 Ratio:   0.00%)

Rules        : 287554  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 12562   
Bodies       : 18749   
  Sum        : 40      
  Count      : 14      
Equivalences : 6550     (Atom=Atom: 213 Body=Body: 94 Other: 6243)
Tight        : Yes
Variables    : 16999    (Eliminated:    0 Frozen: 7675)
Constraints  : 310764   (Binary:  95.9% Ternary:   3.0% Other:   1.1%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCost(3)) ; 
  7 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(3)) ; 
  5 :: atom(hasCategory(3)) ; 
  5 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCost(3)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasCategory(1)) ; 
  5 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasCost(3)) ; 
  3 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasPrep(5)) 
}.
