asprin_vL version 1.0
Reading from stdin
-:1236:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1246:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1261:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1342:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1603:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1616:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1793:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1922:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1994:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1998:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1998:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2004:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2103:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2129:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2249:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2283:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2305:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1153:1-16: info: no atoms over signature occur in program:
  output/3

-:1145:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1146:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(9,eq,100) output(33,eq,75) output(16,eq,44) output(44,eq,67) output(67,eq,79) output(79,eq,90) output(58,eq,77) output(77,eq,10) output(10,eq,16) output(16,eq,65) output(65,eq,79) output(84,eq,22) output(22,eq,90) output(84,eq,90) output(16,eq,79) output(10,eq,65) output(77,eq,16) output(58,eq,10) output(67,eq,90) output(65,eq,90) output(44,eq,79) output(16,eq,67) output(10,eq,44) output(77,eq,44) output(58,eq,44) output(10,eq,67) output(77,eq,67) output(10,eq,79) output(16,eq,90) output(10,eq,90) output(44,eq,90) output(58,eq,16) output(77,eq,65) output(58,eq,65) output(77,eq,79) output(58,eq,79) output(77,eq,90) output(58,eq,90) output(58,eq,67)
Optimization: 39 0
Answer: 2
preference(1,(1,1),1,for(atom(hasPrepTime(2))),4) preference(1,(1,2),1,for(atom(hasPrep(7))),6) preference(1,(1,4),1,for(atom(hasPrep(2))),4) preference(1,(1,8),1,for(atom(hasDifficulty(2))),4) preference(1,(1,14),1,for(atom(hasCategory(1))),7) preference(1,less(weight)) output(77,better,10) output(77,better,16) output(77,better,67) output(77,better,65) output(77,better,79) output(77,better,90) output(16,better,65) output(16,better,67) output(44,better,67) output(44,better,79) output(44,better,90) output(58,better,10) output(58,better,67) output(10,worse,16) output(10,worse,65) output(10,worse,44) output(10,worse,67) output(10,worse,79) output(10,worse,90) output(22,worse,90) output(67,worse,79) output(67,worse,90) output(84,worse,90) output(16,worse,44) output(33,worse,75) output(58,worse,77) output(58,worse,44) output(58,worse,16) output(58,worse,79) output(58,worse,90) output(65,worse,79) output(65,worse,90) output(9,eq,100) output(79,eq,90) output(84,eq,22) output(16,eq,79) output(77,eq,44) output(16,eq,90) output(58,eq,65)
Optimization: 26 5
Answer: 3
preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(10,better,67) output(10,better,79) output(10,better,90) output(77,better,67) output(77,better,79) output(77,better,90) output(16,better,79) output(16,better,67) output(16,better,90) output(44,better,67) output(44,better,79) output(44,better,90) output(58,better,79) output(58,better,90) output(58,better,67) output(65,better,79) output(65,better,90) output(33,worse,75) output(9,eq,100) output(16,eq,44) output(67,eq,79) output(79,eq,90) output(58,eq,77) output(77,eq,10) output(10,eq,16) output(16,eq,65) output(84,eq,22) output(22,eq,90) output(84,eq,90) output(10,eq,65) output(77,eq,16) output(58,eq,10) output(67,eq,90) output(10,eq,44) output(77,eq,44) output(58,eq,44) output(58,eq,16) output(77,eq,65) output(58,eq,65)
Optimization: 22 1
Answer: 4
preference(1,(1,13),1,for(atom(hasCost(3))),6) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(10,better,65) output(10,better,44) output(10,better,67) output(10,better,79) output(10,better,90) output(77,better,44) output(77,better,67) output(77,better,65) output(77,better,79) output(77,better,90) output(16,better,44) output(16,better,65) output(16,better,79) output(16,better,67) output(16,better,90) output(58,better,44) output(58,better,65) output(58,better,79) output(58,better,90) output(58,better,67) output(9,eq,100) output(33,eq,75) output(44,eq,67) output(67,eq,79) output(79,eq,90) output(58,eq,77) output(77,eq,10) output(10,eq,16) output(65,eq,79) output(84,eq,22) output(22,eq,90) output(84,eq,90) output(77,eq,16) output(58,eq,10) output(67,eq,90) output(65,eq,90) output(44,eq,79) output(44,eq,90) output(58,eq,16)
Optimization: 19 2
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(3))),4) preference(1,(1,2),1,for(atom(hasPrep(7))),7) preference(1,(1,3),1,for(atom(hasIngredient(4))),2) preference(1,(1,4),1,for(atom(hasPrepTime(1))),1) preference(1,(1,5),1,for(atom(hasPrep(4))),8) preference(1,(1,6),1,for(atom(hasDifficulty(3))),7) preference(1,(1,7),1,for(atom(hasIngredient(10))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),7) preference(1,(1,9),1,for(atom(hasCategory(3))),2) preference(1,(1,10),1,for(atom(hasCost(2))),7) preference(1,(1,11),1,for(atom(hasPrepTime(2))),5) preference(1,(1,12),1,for(atom(hasPrep(2))),4) preference(1,(1,13),1,for(atom(hasPrep(5))),7) preference(1,(1,14),1,for(atom(hasCost(3))),6) preference(1,less(weight)) output(10,better,16) output(10,better,65) output(10,better,44) output(10,better,67) output(10,better,79) output(10,better,90) output(22,better,90) output(67,better,79) output(67,better,90) output(84,better,22) output(84,better,90) output(9,better,100) output(77,better,10) output(77,better,16) output(77,better,44) output(77,better,67) output(77,better,65) output(77,better,79) output(77,better,90) output(79,better,90) output(16,better,44) output(16,better,65) output(16,better,79) output(16,better,67) output(16,better,90) output(33,better,75) output(44,better,67) output(44,better,79) output(44,better,90) output(58,better,77) output(58,better,10) output(58,better,44) output(58,better,16) output(58,better,65) output(58,better,79) output(58,better,90) output(58,better,67) output(65,better,79) output(65,better,90)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(5))),4) preference(1,(1,2),1,for(atom(hasPrepTime(1))),8) preference(1,(1,3),1,for(atom(hasDifficulty(2))),8) preference(1,(1,4),1,for(atom(hasCost(1))),1) preference(1,(1,6),1,for(atom(hasCategory(4))),5) preference(1,(1,7),1,for(atom(hasDifficulty(3))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),2) preference(1,(1,9),1,for(atom(hasPrepTime(2))),6) preference(1,(1,10),1,for(atom(hasPrep(2))),3) preference(1,(1,11),1,for(atom(hasCategory(1))),2) preference(1,(1,12),1,for(atom(hasCost(3))),6) preference(1,(1,13),1,for(atom(hasPrep(0))),4) preference(1,(1,14),1,for(atom(hasIngredient(7))),8) preference(1,less(weight)) output(10,better,16) output(10,better,65) output(10,better,44) output(10,better,67) output(10,better,79) output(10,better,90) output(22,better,90) output(67,better,79) output(67,better,90) output(84,better,22) output(84,better,90) output(9,better,100) output(77,better,10) output(77,better,16) output(77,better,44) output(77,better,67) output(77,better,65) output(77,better,79) output(77,better,90) output(79,better,90) output(16,better,44) output(16,better,65) output(16,better,79) output(16,better,67) output(16,better,90) output(33,better,75) output(44,better,67) output(44,better,79) output(44,better,90) output(58,better,77) output(58,better,10) output(58,better,44) output(58,better,16) output(58,better,65) output(58,better,79) output(58,better,90) output(58,better,67) output(65,better,79) output(65,better,90)
Optimization: 0 13
Progression : 0 [ 2;13] (Error: 5.5)
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(4))),7) preference(1,(1,2),1,for(atom(hasCategory(2))),5) preference(1,(1,3),1,for(atom(hasPrepTime(3))),1) preference(1,(1,4),1,for(atom(hasPrep(2))),1) preference(1,(1,5),1,for(atom(hasPrep(5))),3) preference(1,(1,7),1,for(atom(hasIngredient(4))),1) preference(1,(1,8),1,for(atom(hasPrepTime(2))),8) preference(1,(1,10),1,for(atom(hasCost(3))),8) preference(1,(1,11),1,for(atom(hasCost(2))),3) preference(1,(1,12),1,for(atom(hasPrep(0))),5) preference(1,(1,13),1,for(atom(hasIngredient(8))),5) preference(1,(1,14),1,for(atom(hasCategory(4))),2) preference(1,less(weight)) output(10,better,16) output(10,better,65) output(10,better,44) output(10,better,67) output(10,better,79) output(10,better,90) output(22,better,90) output(67,better,79) output(67,better,90) output(84,better,22) output(84,better,90) output(9,better,100) output(77,better,10) output(77,better,16) output(77,better,44) output(77,better,67) output(77,better,65) output(77,better,79) output(77,better,90) output(79,better,90) output(16,better,44) output(16,better,65) output(16,better,79) output(16,better,67) output(16,better,90) output(33,better,75) output(44,better,67) output(44,better,79) output(44,better,90) output(58,better,77) output(58,better,10) output(58,better,44) output(58,better,16) output(58,better,65) output(58,better,79) output(58,better,90) output(58,better,67) output(65,better,79) output(65,better,90)
Optimization: 0 12
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(4))),7) preference(1,(1,3),1,for(atom(hasPrepTime(3))),1) preference(1,(1,4),1,for(atom(hasPrep(2))),1) preference(1,(1,5),1,for(atom(hasPrep(5))),3) preference(1,(1,7),1,for(atom(hasIngredient(4))),1) preference(1,(1,8),1,for(atom(hasPrepTime(2))),8) preference(1,(1,10),1,for(atom(hasCost(3))),8) preference(1,(1,11),1,for(atom(hasCost(2))),3) preference(1,(1,12),1,for(atom(hasPrep(0))),5) preference(1,(1,13),1,for(atom(hasIngredient(8))),5) preference(1,(1,14),1,for(atom(hasCategory(4))),2) preference(1,less(weight)) output(10,better,16) output(10,better,65) output(10,better,44) output(10,better,67) output(10,better,79) output(10,better,90) output(22,better,90) output(67,better,79) output(67,better,90) output(84,better,22) output(84,better,90) output(9,better,100) output(77,better,10) output(77,better,16) output(77,better,44) output(77,better,67) output(77,better,65) output(77,better,79) output(77,better,90) output(79,better,90) output(16,better,44) output(16,better,65) output(16,better,79) output(16,better,67) output(16,better,90) output(33,better,75) output(44,better,67) output(44,better,79) output(44,better,90) output(58,better,77) output(58,better,10) output(58,better,44) output(58,better,16) output(58,better,65) output(58,better,79) output(58,better,90) output(58,better,67) output(65,better,79) output(65,better,90)
Optimization: 0 11
Answer: 9
preference(1,(1,3),1,for(atom(hasPrepTime(3))),1) preference(1,(1,4),1,for(atom(hasPrep(2))),1) preference(1,(1,5),1,for(atom(hasPrep(5))),3) preference(1,(1,7),1,for(atom(hasIngredient(4))),1) preference(1,(1,8),1,for(atom(hasPrepTime(2))),8) preference(1,(1,10),1,for(atom(hasCost(3))),8) preference(1,(1,11),1,for(atom(hasCost(2))),3) preference(1,(1,12),1,for(atom(hasPrep(0))),5) preference(1,(1,13),1,for(atom(hasPrep(4))),6) preference(1,(1,14),1,for(atom(hasCategory(4))),2) preference(1,less(weight)) output(10,better,16) output(10,better,65) output(10,better,44) output(10,better,67) output(10,better,79) output(10,better,90) output(22,better,90) output(67,better,79) output(67,better,90) output(84,better,22) output(84,better,90) output(9,better,100) output(77,better,10) output(77,better,16) output(77,better,44) output(77,better,67) output(77,better,65) output(77,better,79) output(77,better,90) output(79,better,90) output(16,better,44) output(16,better,65) output(16,better,79) output(16,better,67) output(16,better,90) output(33,better,75) output(44,better,67) output(44,better,79) output(44,better,90) output(58,better,77) output(58,better,10) output(58,better,44) output(58,better,16) output(58,better,65) output(58,better,79) output(58,better,90) output(58,better,67) output(65,better,79) output(65,better,90)
Optimization: 0 10
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.042 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 9+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 298.188s (Solving: 295.34s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1184.019s
Threads      : 4        (Winner: 4)

Choices      : 7675799  (Domain: 178887)
Conflicts    : 3413530  (Analyzed: 3413528)
Restarts     : 3420     (Average: 998.11 Last: 179709)
Model-Level  : 197.2   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 3420764  (Deleted: 3213170)
  Binary     : 308      (Ratio:   0.01%)
  Ternary    : 631      (Ratio:   0.02%)
  Conflict   : 3413528  (Average Length:  492.1 Ratio:  99.79%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7236     (Average Length:   77.8 Ratio:   0.21%) 
  Distributed: 2418     (Ratio:   0.07% Average LBD: 3.64) 
  Integrated : 7254     (Ratio: 300.00% Unit: 5 Average Jumps: 7.80)
Backjumps    : 3413528  (Average:  1.89 Max: 1281 Sum: 6446115)
  Executed   : 3413527  (Average:  1.89 Max: 1281 Sum: 6446085 Ratio: 100.00%)
  Bounded    : 1        (Average: 30.00 Max:  30 Sum:     30 Ratio:   0.00%)

Rules        : 466777  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14424   
Bodies       : 18958   
  Sum        : 78      
  Count      : 14      
Equivalences : 7215     (Atom=Atom: 403 Body=Body: 170 Other: 6642)
Tight        : Yes
Variables    : 17075    (Eliminated:    0 Frozen: 7751)
Constraints  : 488258   (Binary:  97.3% Ternary:   1.9% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(3)) ; 
  6 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasIngredient(4)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrep(0)) ; 
  2 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCost(1)) ; 
  5 :: atom(hasCategory(4)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCost(3)) ; 
  4 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(4)) ; 
  5 :: atom(hasCategory(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(3)) ; 
  3 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(0)) ; 
  5 :: atom(hasIngredient(8)) ; 
  2 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(4)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(3)) ; 
  3 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(0)) ; 
  5 :: atom(hasIngredient(8)) ; 
  2 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(3)) ; 
  3 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(4)) ; 
  2 :: atom(hasCategory(4)) 
}.
