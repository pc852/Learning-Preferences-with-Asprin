asprin_vL version 1.0
Reading from stdin
-:1234:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1244:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1259:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1340:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1601:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1614:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1791:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1920:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1992:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1996:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1996:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2002:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2101:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2127:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2247:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2281:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2303:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1151:1-16: info: no atoms over signature occur in program:
  output/3

-:1143:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1144:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(18,eq,7) output(42,eq,90) output(90,eq,51) output(51,eq,78) output(31,eq,79) output(72,eq,23) output(4,eq,18) output(18,eq,76) output(76,eq,42) output(42,eq,41) output(32,eq,37) output(37,eq,72) output(72,eq,92) output(37,eq,92) output(32,eq,72) output(76,eq,41) output(18,eq,42) output(4,eq,76) output(37,eq,23) output(90,eq,78) output(42,eq,51) output(76,eq,90) output(4,eq,7) output(18,eq,90) output(4,eq,90) output(76,eq,51) output(18,eq,51) output(42,eq,78) output(76,eq,78) output(32,eq,23) output(4,eq,42) output(18,eq,41) output(4,eq,41) output(32,eq,92) output(18,eq,78) output(4,eq,78) output(4,eq,51)
Optimization: 37 0
Answer: 2
preference(1,(1,13),1,for(atom(hasDifficulty(4))),8) preference(1,less(weight)) output(18,better,51) output(4,better,51) output(42,better,51) output(90,better,51) output(76,better,51) output(51,worse,78) output(18,eq,7) output(42,eq,90) output(31,eq,79) output(72,eq,23) output(4,eq,18) output(18,eq,76) output(76,eq,42) output(42,eq,41) output(32,eq,37) output(37,eq,72) output(72,eq,92) output(37,eq,92) output(32,eq,72) output(76,eq,41) output(18,eq,42) output(4,eq,76) output(37,eq,23) output(90,eq,78) output(76,eq,90) output(4,eq,7) output(18,eq,90) output(4,eq,90) output(42,eq,78) output(76,eq,78) output(32,eq,23) output(4,eq,42) output(18,eq,41) output(4,eq,41) output(32,eq,92) output(18,eq,78) output(4,eq,78)
Optimization: 32 1
Answer: 3
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(3))),2) preference(1,less(weight)) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,78) output(4,better,51) output(42,better,51) output(42,better,78) output(32,better,37) output(32,better,23) output(90,better,51) output(90,better,78) output(18,worse,42) output(18,worse,90) output(18,worse,41) output(37,worse,72) output(37,worse,92) output(76,worse,42) output(76,worse,41) output(76,worse,90) output(18,eq,7) output(42,eq,90) output(51,eq,78) output(31,eq,79) output(18,eq,76) output(42,eq,41) output(72,eq,92) output(32,eq,72) output(37,eq,23) output(4,eq,90) output(76,eq,51) output(18,eq,51) output(76,eq,78) output(4,eq,42) output(4,eq,41) output(32,eq,92) output(18,eq,78)
Optimization: 25 14
Answer: 4
preference(1,(1,6),1,for(atom(hasIngredient(10))),8) preference(1,(1,11),1,for(atom(hasIngredient(3))),8) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,less(weight)) output(18,better,7) output(18,better,51) output(18,better,78) output(72,better,23) output(4,better,7) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,23) output(42,better,51) output(42,better,78) output(32,better,23) output(90,better,51) output(90,better,78) output(76,better,51) output(76,better,78) output(42,eq,90) output(51,eq,78) output(4,eq,18) output(18,eq,76) output(76,eq,42) output(42,eq,41) output(32,eq,37) output(37,eq,72) output(72,eq,92) output(37,eq,92) output(32,eq,72) output(76,eq,41) output(18,eq,42) output(4,eq,76) output(76,eq,90) output(18,eq,90) output(4,eq,90) output(4,eq,42) output(18,eq,41) output(4,eq,41) output(32,eq,92)
Optimization: 21 3
Answer: 5
preference(1,(1,1),1,for(atom(hasIngredient(10))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),8) preference(1,(1,13),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(18,better,7) output(18,better,90) output(18,better,51) output(18,better,78) output(72,better,23) output(4,better,7) output(4,better,90) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,23) output(42,better,90) output(42,better,51) output(42,better,78) output(32,better,23) output(76,better,90) output(76,better,51) output(76,better,78) output(90,eq,51) output(51,eq,78) output(4,eq,18) output(18,eq,76) output(76,eq,42) output(42,eq,41) output(32,eq,37) output(37,eq,72) output(72,eq,92) output(37,eq,92) output(32,eq,72) output(76,eq,41) output(18,eq,42) output(4,eq,76) output(90,eq,78) output(4,eq,42) output(18,eq,41) output(4,eq,41) output(32,eq,92)
Optimization: 19 3
Answer: 6
preference(1,(1,1),1,for(atom(hasIngredient(10))),8) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),8) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(18,better,7) output(18,better,76) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,23) output(42,better,90) output(42,better,41) output(42,better,51) output(42,better,78) output(72,worse,92) output(32,worse,37) output(32,worse,92) output(76,worse,42) output(90,eq,51) output(51,eq,78) output(72,eq,23) output(4,eq,18) output(37,eq,92) output(32,eq,72) output(76,eq,41) output(18,eq,42) output(90,eq,78) output(76,eq,90) output(76,eq,51) output(76,eq,78) output(32,eq,23) output(4,eq,42)
Optimization: 18 4
Answer: 7
preference(1,(1,1),1,for(atom(hasIngredient(10))),8) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),8) preference(1,(1,13),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(18,better,7) output(18,better,42) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,23) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(32,worse,37) output(32,worse,92) output(42,eq,90) output(90,eq,51) output(51,eq,78) output(72,eq,23) output(4,eq,18) output(18,eq,76) output(42,eq,41) output(37,eq,92) output(32,eq,72) output(4,eq,76) output(90,eq,78) output(42,eq,51) output(42,eq,78) output(32,eq,23)
Optimization: 17 4
Answer: 8
preference(1,(1,1),1,for(atom(hasDifficulty(3))),8) preference(1,(1,3),1,for(atom(hasIngredient(10))),8) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,14),1,for(atom(hasCategory(4))),8) preference(1,less(weight)) output(18,better,7) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(72,better,23) output(4,better,7) output(4,better,90) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,23) output(42,better,90) output(42,better,41) output(42,better,51) output(42,better,78) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(32,worse,37) output(32,worse,72) output(32,worse,92) output(90,eq,51) output(51,eq,78) output(4,eq,18) output(18,eq,76) output(76,eq,42) output(37,eq,72) output(72,eq,92) output(37,eq,92) output(18,eq,42) output(4,eq,76) output(90,eq,78) output(32,eq,23) output(4,eq,42)
Optimization: 16 4
Answer: 9
preference(1,(1,1),1,for(atom(hasCategory(4))),7) preference(1,(1,2),1,for(atom(hasPrep(5))),7) preference(1,(1,3),1,for(atom(hasCost(3))),7) preference(1,(1,4),1,for(atom(hasCost(4))),7) preference(1,(1,5),1,for(atom(hasIngredient(10))),7) preference(1,(1,6),1,for(atom(hasCategory(5))),7) preference(1,(1,8),1,for(atom(hasIngredient(4))),8) preference(1,(1,9),1,for(atom(hasDifficulty(3))),8) preference(1,(1,10),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,less(weight)) output(18,better,7) output(18,better,76) output(18,better,90) output(18,better,51) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,23) output(42,better,90) output(42,better,51) output(42,better,78) output(32,better,37) output(32,better,23) output(72,worse,92) output(37,worse,72) output(37,worse,92) output(32,worse,92) output(90,worse,51) output(76,worse,42) output(76,worse,41) output(76,worse,51) output(42,eq,41) output(32,eq,72) output(18,eq,42) output(90,eq,78) output(76,eq,90) output(76,eq,78) output(18,eq,41)
Optimization: 15 10
Answer: 10
preference(1,(1,1),1,for(atom(hasCategory(4))),7) preference(1,(1,2),1,for(atom(hasPrep(5))),7) preference(1,(1,3),1,for(atom(hasCost(3))),7) preference(1,(1,4),1,for(atom(hasIngredient(7))),7) preference(1,(1,5),1,for(atom(hasPrep(2))),8) preference(1,(1,6),1,for(atom(hasIngredient(4))),7) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasCost(4))),7) preference(1,(1,9),1,for(atom(hasCategory(5))),7) preference(1,(1,10),1,for(atom(hasIngredient(10))),8) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),8) preference(1,less(weight)) output(18,better,7) output(18,better,90) output(18,better,51) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(42,better,90) output(42,better,51) output(42,better,78) output(32,better,37) output(32,better,23) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(37,worse,72) output(37,worse,92) output(32,worse,92) output(90,worse,51) output(18,eq,76) output(76,eq,42) output(42,eq,41) output(32,eq,72) output(76,eq,41) output(18,eq,42) output(37,eq,23) output(90,eq,78) output(18,eq,41)
Optimization: 14 12
Answer: 11
preference(1,(1,1),1,for(atom(hasCost(3))),7) preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,3),1,for(atom(hasCategory(4))),7) preference(1,(1,4),1,for(atom(hasPrep(5))),7) preference(1,(1,5),1,for(atom(hasDifficulty(3))),8) preference(1,(1,6),1,for(atom(hasIngredient(4))),7) preference(1,(1,8),1,for(atom(hasCategory(2))),7) preference(1,(1,9),1,for(atom(hasCategory(5))),7) preference(1,(1,10),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasCost(4))),7) preference(1,(1,12),1,for(atom(hasPrep(7))),8) preference(1,(1,13),1,for(atom(hasDifficulty(1))),8) preference(1,(1,14),1,for(atom(hasIngredient(10))),7) preference(1,less(weight)) output(18,better,7) output(18,better,90) output(18,better,51) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,23) output(42,better,90) output(42,better,51) output(42,better,78) output(32,better,37) output(32,better,23) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(37,worse,72) output(37,worse,92) output(32,worse,92) output(90,worse,51) output(18,eq,76) output(76,eq,42) output(42,eq,41) output(32,eq,72) output(76,eq,41) output(18,eq,42) output(90,eq,78) output(18,eq,41)
Optimization: 13 13
Answer: 12
preference(1,(1,1),1,for(atom(hasCost(3))),7) preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,3),1,for(atom(hasCategory(4))),7) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasDifficulty(3))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasCategory(2))),7) preference(1,(1,10),1,for(atom(hasIngredient(3))),8) preference(1,(1,11),1,for(atom(hasCost(4))),7) preference(1,(1,12),1,for(atom(hasPrep(7))),8) preference(1,less(weight)) output(18,better,7) output(18,better,51) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,23) output(42,better,51) output(42,better,78) output(32,better,37) output(32,better,23) output(90,better,51) output(90,better,78) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(18,worse,76) output(72,worse,92) output(37,worse,72) output(37,worse,92) output(32,worse,92) output(42,eq,90) output(42,eq,41) output(32,eq,72) output(18,eq,42) output(4,eq,76) output(18,eq,90) output(18,eq,41)
Optimization: 12 10
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasDifficulty(3))),8) preference(1,(1,4),1,for(atom(hasCost(4))),7) preference(1,(1,5),1,for(atom(hasIngredient(4))),7) preference(1,(1,7),1,for(atom(hasCategory(5))),7) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasIngredient(3))),8) preference(1,(1,10),1,for(atom(hasDifficulty(1))),8) preference(1,(1,11),1,for(atom(hasCategory(2))),7) preference(1,(1,14),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(18,better,7) output(18,better,42) output(18,better,51) output(18,better,41) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,23) output(42,better,41) output(42,better,78) output(90,better,51) output(90,better,78) output(76,better,42) output(76,better,41) output(76,better,51) output(76,better,78) output(72,worse,92) output(37,worse,92) output(42,worse,90) output(32,worse,37) output(32,worse,72) output(32,worse,92) output(18,eq,76) output(42,eq,51) output(76,eq,90) output(18,eq,90) output(32,eq,23)
Optimization: 11 11
Answer: 14
preference(1,(1,1),1,for(atom(hasIngredient(7))),7) preference(1,(1,2),1,for(atom(hasDifficulty(3))),8) preference(1,(1,3),1,for(atom(hasIngredient(10))),8) preference(1,(1,4),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasIngredient(4))),7) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,7),1,for(atom(hasCategory(5))),7) preference(1,(1,8),1,for(atom(hasCost(1))),7) preference(1,(1,9),1,for(atom(hasPrepTime(1))),7) preference(1,(1,10),1,for(atom(hasDifficulty(1))),7) preference(1,(1,11),1,for(atom(hasCost(4))),7) preference(1,(1,13),1,for(atom(hasCategory(4))),7) preference(1,(1,14),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(18,better,7) output(18,better,42) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,23) output(42,better,90) output(42,better,41) output(42,better,78) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(37,worse,92) output(32,worse,37) output(32,worse,72) output(32,worse,92) output(90,worse,51) output(18,eq,76) output(90,eq,78) output(42,eq,51) output(32,eq,23)
Optimization: 10 13
Answer: 15
preference(1,(1,1),1,for(atom(hasCategory(1))),7) preference(1,(1,2),1,for(atom(hasPrepTime(3))),7) preference(1,(1,3),1,for(atom(hasDifficulty(3))),8) preference(1,(1,4),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasDifficulty(4))),7) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,7),1,for(atom(hasCategory(5))),7) preference(1,(1,8),1,for(atom(hasCost(4))),7) preference(1,(1,9),1,for(atom(hasIngredient(4))),7) preference(1,(1,10),1,for(atom(hasCategory(4))),8) preference(1,(1,11),1,for(atom(hasIngredient(3))),7) preference(1,(1,13),1,for(atom(hasCost(3))),8) preference(1,(1,14),1,for(atom(hasIngredient(10))),8) preference(1,less(weight)) output(18,better,7) output(18,better,42) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,23) output(42,better,51) output(42,better,78) output(32,better,72) output(32,better,23) output(90,better,51) output(90,better,78) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(37,worse,92) output(32,worse,37) output(32,worse,92) output(42,eq,90) output(51,eq,78) output(72,eq,23) output(18,eq,76) output(42,eq,41)
Optimization: 9 13
Progression : [1;9] (Error: 8)
Answer: 16
preference(1,(1,1),1,for(atom(hasCategory(4))),7) preference(1,(1,2),1,for(atom(hasIngredient(3))),8) preference(1,(1,3),1,for(atom(hasPrepTime(2))),3) preference(1,(1,4),1,for(atom(hasDifficulty(2))),3) preference(1,(1,5),1,for(atom(hasPrep(5))),6) preference(1,(1,6),1,for(atom(hasCategory(1))),2) preference(1,(1,7),1,for(atom(hasCost(2))),3) preference(1,(1,8),1,for(atom(hasPrepTime(3))),3) preference(1,(1,9),1,for(atom(hasPrep(2))),5) preference(1,(1,10),1,for(atom(hasDifficulty(4))),8) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasDifficulty(3))),6) preference(1,(1,13),1,for(atom(hasCost(4))),2) preference(1,(1,14),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(18,better,7) output(18,better,76) output(18,better,42) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,92) output(37,better,23) output(42,better,90) output(42,better,41) output(42,better,51) output(42,better,78) output(32,better,23) output(90,better,51) output(90,better,78) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(32,worse,37) output(32,worse,72) output(32,worse,92)
Optimization: 4 14
Progression : [2;4] (Error: 1)
Answer: 17
preference(1,(1,1),1,for(atom(hasCost(3))),8) preference(1,(1,2),1,for(atom(hasPrep(2))),8) preference(1,(1,3),1,for(atom(hasPrep(6))),4) preference(1,(1,4),1,for(atom(hasCost(4))),6) preference(1,(1,5),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasPrep(5))),2) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasCategory(5))),8) preference(1,(1,9),1,for(atom(hasCategory(4))),1) preference(1,(1,10),1,for(atom(hasIngredient(4))),6) preference(1,(1,11),1,for(atom(hasDifficulty(3))),7) preference(1,(1,12),1,for(atom(hasDifficulty(4))),6) preference(1,(1,13),1,for(atom(hasPrepTime(3))),2) preference(1,(1,14),1,for(atom(hasCategory(1))),3) preference(1,less(weight)) output(18,better,7) output(18,better,76) output(18,better,42) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,92) output(37,better,23) output(42,better,90) output(42,better,41) output(42,better,51) output(42,better,78) output(32,better,72) output(32,better,23) output(90,better,51) output(90,better,78) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(32,worse,37) output(32,worse,92)
Optimization: 3 14
Progression : [3;3] (Error: 0)
Answer: 18
preference(1,(1,1),1,for(atom(hasPrep(7))),2) preference(1,(1,2),1,for(atom(hasCost(3))),6) preference(1,(1,3),1,for(atom(hasCategory(1))),7) preference(1,(1,4),1,for(atom(hasCategory(4))),4) preference(1,(1,5),1,for(atom(hasPrep(1))),2) preference(1,(1,7),1,for(atom(hasCost(4))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,10),1,for(atom(hasCategory(3))),2) preference(1,(1,11),1,for(atom(hasDifficulty(3))),3) preference(1,(1,12),1,for(atom(hasCost(1))),2) preference(1,(1,13),1,for(atom(hasCategory(5))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),1) preference(1,less(weight)) output(18,better,7) output(18,better,76) output(18,better,42) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,92) output(37,better,23) output(42,better,90) output(42,better,41) output(42,better,51) output(42,better,78) output(32,better,72) output(32,better,23) output(90,better,51) output(90,better,78) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(32,worse,37) output(32,worse,92)
Optimization: 3 12
Answer: 19
preference(1,(1,1),1,for(atom(hasPrep(2))),6) preference(1,(1,2),1,for(atom(hasCost(3))),6) preference(1,(1,3),1,for(atom(hasCategory(1))),7) preference(1,(1,4),1,for(atom(hasCategory(4))),4) preference(1,(1,5),1,for(atom(hasPrep(1))),2) preference(1,(1,8),1,for(atom(hasCost(4))),7) preference(1,(1,10),1,for(atom(hasCategory(3))),2) preference(1,(1,11),1,for(atom(hasDifficulty(3))),3) preference(1,(1,12),1,for(atom(hasPrep(7))),2) preference(1,(1,13),1,for(atom(hasIngredient(4))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),1) preference(1,less(weight)) output(18,better,7) output(18,better,76) output(18,better,42) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,92) output(37,better,23) output(42,better,90) output(42,better,41) output(42,better,51) output(42,better,78) output(32,better,72) output(32,better,23) output(90,better,51) output(90,better,78) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(32,worse,37) output(32,worse,92)
Optimization: 3 11
Answer: 20
preference(1,(1,1),1,for(atom(hasCost(1))),2) preference(1,(1,2),1,for(atom(hasIngredient(10))),6) preference(1,(1,3),1,for(atom(hasDifficulty(3))),8) preference(1,(1,4),1,for(atom(hasDifficulty(1))),1) preference(1,(1,5),1,for(atom(hasCategory(1))),2) preference(1,(1,6),1,for(atom(hasPrep(2))),7) preference(1,(1,7),1,for(atom(hasPrep(5))),3) preference(1,(1,10),1,for(atom(hasCost(4))),2) preference(1,(1,13),1,for(atom(hasCost(3))),5) preference(1,(1,14),1,for(atom(hasPrep(7))),7) preference(1,less(weight)) output(18,better,7) output(18,better,76) output(18,better,42) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,23) output(42,better,90) output(42,better,41) output(42,better,51) output(42,better,78) output(32,better,37) output(32,better,72) output(32,better,23) output(90,better,51) output(90,better,78) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(37,worse,92) output(32,worse,92)
Optimization: 3 10
Progression : 3 [ 1;10] (Error: 9)
Progression : 3 [ 2;10] (Error: 4)
Answer: 21
preference(1,(1,1),1,for(atom(hasCategory(5))),5) preference(1,(1,2),1,for(atom(hasCost(3))),6) preference(1,(1,3),1,for(atom(hasPrep(2))),5) preference(1,(1,4),1,for(atom(hasDifficulty(3))),8) preference(1,(1,5),1,for(atom(hasCategory(1))),4) preference(1,(1,12),1,for(atom(hasCategory(4))),2) preference(1,(1,14),1,for(atom(hasPrepTime(2))),1) preference(1,less(weight)) output(18,better,7) output(18,better,76) output(18,better,42) output(18,better,90) output(18,better,51) output(18,better,41) output(18,better,78) output(51,better,78) output(72,better,23) output(4,better,18) output(4,better,76) output(4,better,7) output(4,better,90) output(4,better,42) output(4,better,41) output(4,better,78) output(4,better,51) output(31,better,79) output(37,better,72) output(37,better,92) output(37,better,23) output(42,better,90) output(42,better,41) output(42,better,51) output(42,better,78) output(32,better,72) output(32,better,23) output(90,better,51) output(90,better,78) output(76,better,42) output(76,better,41) output(76,better,90) output(76,better,51) output(76,better,78) output(72,worse,92) output(32,worse,37) output(32,worse,92)
Optimization: 3 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.161 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 21+
  Optimum    : unknown
Optimization : 3 7
Bounds       : 3 [2;7]
Calls        : 1
Time         : 598.389s (Solving: 595.55s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2384.018s
Threads      : 4        (Winner: 4)

Choices      : 17137228 (Domain: 707052)
Conflicts    : 11196268 (Analyzed: 11196262)
Restarts     : 13393    (Average: 835.98 Last: 698078)
Model-Level  : 96.1    
Problems     : 12       (Average Length: 0.33 Splits: 0)
Lemmas       : 11307402 (Deleted: 10699987)
  Binary     : 1115     (Ratio:   0.01%)
  Ternary    : 6092     (Ratio:   0.05%)
  Conflict   : 11196262 (Average Length:  309.2 Ratio:  99.02%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 111140   (Average Length:   35.0 Ratio:   0.98%) 
  Distributed: 37115    (Ratio:   0.33% Average LBD: 3.71) 
  Integrated : 111345   (Ratio: 300.00% Unit: 118 Average Jumps: 7.18)
Backjumps    : 11196262 (Average:  1.40 Max: 1076 Sum: 15666149)
  Executed   : 11196252 (Average:  1.40 Max: 1076 Sum: 15666094 Ratio: 100.00%)
  Bounded    : 10       (Average:  5.50 Max:  26 Sum:     55 Ratio:   0.00%)

Rules        : 447935  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14236   
Bodies       : 18936   
  Sum        : 74      
  Count      : 14      
Equivalences : 7145     (Atom=Atom: 383 Body=Body: 162 Other: 6600)
Tight        : Yes
Variables    : 17075    (Eliminated:    0 Frozen: 7751)
Constraints  : 469606   (Binary:  97.2% Ternary:   2.0% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasIngredient(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(2)) ; 
  8 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCategory(2)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasIngredient(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  2 :: atom(hasCategory(1)) ; 
  3 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(2)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasPrep(6)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCost(4)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCategory(4)) ; 
  6 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  2 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(7)) ; 
  6 :: atom(hasCost(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  4 :: atom(hasCategory(4)) ; 
  2 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCost(4)) ; 
  6 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCategory(3)) ; 
  3 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCost(1)) ; 
  8 :: atom(hasCategory(5)) ; 
  1 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCost(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  4 :: atom(hasCategory(4)) ; 
  2 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCost(4)) ; 
  2 :: atom(hasCategory(3)) ; 
  3 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(7)) ; 
  8 :: atom(hasIngredient(4)) ; 
  1 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasCost(1)) ; 
  6 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  2 :: atom(hasCost(4)) ; 
  5 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCategory(5)) ; 
  6 :: atom(hasCost(3)) ; 
  5 :: atom(hasPrep(2)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasCategory(1)) ; 
  2 :: atom(hasCategory(4)) ; 
  1 :: atom(hasPrepTime(2)) 
}.
