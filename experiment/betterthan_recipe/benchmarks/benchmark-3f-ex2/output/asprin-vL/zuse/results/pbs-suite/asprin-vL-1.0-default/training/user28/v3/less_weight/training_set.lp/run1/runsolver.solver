asprin_vL version 1.0
Reading from stdin
-:1235:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1245:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1260:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1341:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1602:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1615:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1792:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1921:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1993:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1997:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1997:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2003:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2102:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2128:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2248:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2282:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2304:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1152:1-16: info: no atoms over signature occur in program:
  output/3

-:1144:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1145:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(22,eq,83) output(71,eq,46) output(49,eq,84) output(84,eq,33) output(33,eq,53) output(53,eq,80) output(22,eq,10) output(74,eq,65) output(65,eq,80) output(80,eq,82) output(82,eq,33) output(68,eq,88) output(80,eq,33) output(53,eq,82) output(65,eq,82) output(74,eq,80) output(33,eq,80) output(84,eq,53) output(82,eq,53) output(49,eq,33) output(80,eq,53) output(53,eq,53) output(65,eq,53) output(49,eq,53) output(84,eq,80) output(82,eq,80) output(80,eq,80) output(49,eq,80) output(74,eq,82) output(33,eq,82) output(84,eq,82) output(82,eq,82) output(53,eq,33) output(65,eq,33) output(74,eq,33) output(33,eq,33) output(49,eq,82) output(74,eq,53)
Optimization: 38 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrep(2))),2) preference(1,less(weight)) output(22,better,10) output(49,better,84) output(71,better,46) output(84,worse,33) output(84,worse,53) output(84,worse,80) output(84,worse,82) output(74,worse,65) output(74,worse,80) output(74,worse,82) output(74,worse,33) output(74,worse,53) output(22,eq,83) output(33,eq,53) output(53,eq,80) output(65,eq,80) output(80,eq,82) output(82,eq,33) output(68,eq,88) output(80,eq,33) output(53,eq,82) output(65,eq,82) output(33,eq,80) output(82,eq,53) output(49,eq,33) output(80,eq,53) output(53,eq,53) output(65,eq,53) output(49,eq,53) output(82,eq,80) output(80,eq,80) output(49,eq,80) output(33,eq,82) output(82,eq,82) output(53,eq,33) output(65,eq,33) output(33,eq,33) output(49,eq,82)
Optimization: 35 14
Answer: 3
preference(1,(1,1),1,for(atom(hasDifficulty(2))),3) preference(1,(1,2),1,for(atom(hasCategory(3))),1) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,5),1,for(atom(hasPrep(1))),3) preference(1,(1,8),1,for(atom(hasCost(2))),3) preference(1,(1,9),1,for(atom(hasIngredient(7))),1) preference(1,(1,12),1,for(atom(hasCategory(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,(1,14),1,for(atom(hasIngredient(9))),3) preference(1,less(weight)) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(49,worse,84) output(68,worse,88) output(22,eq,83) output(71,eq,46) output(33,eq,53) output(53,eq,80) output(74,eq,65) output(65,eq,80) output(80,eq,82) output(82,eq,33) output(80,eq,33) output(53,eq,82) output(65,eq,82) output(74,eq,80) output(33,eq,80) output(82,eq,53) output(80,eq,53) output(53,eq,53) output(65,eq,53) output(82,eq,80) output(80,eq,80) output(74,eq,82) output(33,eq,82) output(82,eq,82) output(53,eq,33) output(65,eq,33) output(74,eq,33) output(33,eq,33) output(74,eq,53)
Optimization: 29 9
Answer: 4
preference(1,(1,1),1,for(atom(hasDifficulty(2))),3) preference(1,(1,2),1,for(atom(hasCategory(3))),1) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,5),1,for(atom(hasPrep(1))),3) preference(1,(1,8),1,for(atom(hasCost(2))),3) preference(1,(1,9),1,for(atom(hasIngredient(7))),1) preference(1,(1,11),1,for(atom(hasCost(4))),8) preference(1,(1,12),1,for(atom(hasPrepTime(1))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,(1,14),1,for(atom(hasIngredient(9))),3) preference(1,less(weight)) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(80,better,33) output(53,better,33) output(82,better,33) output(49,better,33) output(65,better,33) output(74,better,33) output(33,worse,53) output(33,worse,80) output(33,worse,82) output(49,worse,84) output(22,eq,83) output(71,eq,46) output(53,eq,80) output(74,eq,65) output(65,eq,80) output(80,eq,82) output(68,eq,88) output(53,eq,82) output(65,eq,82) output(74,eq,80) output(82,eq,53) output(80,eq,53) output(53,eq,53) output(65,eq,53) output(49,eq,53) output(82,eq,80) output(80,eq,80) output(49,eq,80) output(74,eq,82) output(82,eq,82) output(33,eq,33) output(49,eq,82) output(74,eq,53)
Optimization: 27 10
Answer: 5
preference(1,(1,2),1,for(atom(hasCategory(3))),8) preference(1,(1,10),1,for(atom(hasDifficulty(3))),8) preference(1,(1,14),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(71,better,46) output(74,better,65) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(49,worse,84) output(33,eq,53) output(53,eq,80) output(65,eq,80) output(80,eq,82) output(82,eq,33) output(68,eq,88) output(80,eq,33) output(53,eq,82) output(65,eq,82) output(33,eq,80) output(82,eq,53) output(49,eq,33) output(80,eq,53) output(53,eq,53) output(65,eq,53) output(49,eq,53) output(82,eq,80) output(80,eq,80) output(49,eq,80) output(33,eq,82) output(82,eq,82) output(53,eq,33) output(65,eq,33) output(33,eq,33) output(49,eq,82)
Optimization: 26 3
Answer: 6
preference(1,(1,1),1,for(atom(hasDifficulty(2))),3) preference(1,(1,2),1,for(atom(hasCategory(3))),1) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,5),1,for(atom(hasPrep(1))),3) preference(1,(1,8),1,for(atom(hasCost(2))),3) preference(1,(1,9),1,for(atom(hasIngredient(7))),1) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasCost(4))),8) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,(1,14),1,for(atom(hasIngredient(9))),3) preference(1,less(weight)) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(80,better,33) output(53,better,33) output(82,better,33) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,33) output(74,better,33) output(33,worse,53) output(33,worse,80) output(33,worse,82) output(49,worse,84) output(68,worse,88) output(22,eq,83) output(71,eq,46) output(53,eq,80) output(74,eq,65) output(65,eq,80) output(80,eq,82) output(53,eq,82) output(65,eq,82) output(74,eq,80) output(82,eq,53) output(80,eq,53) output(53,eq,53) output(65,eq,53) output(82,eq,80) output(80,eq,80) output(74,eq,82) output(82,eq,82) output(33,eq,33) output(74,eq,53)
Optimization: 24 10
Answer: 7
preference(1,(1,1),1,for(atom(hasCategory(3))),8) preference(1,(1,2),1,for(atom(hasCost(2))),8) preference(1,(1,3),1,for(atom(hasPrep(0))),8) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,53) output(84,better,80) output(84,better,82) output(33,better,53) output(33,better,80) output(33,better,82) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(74,better,80) output(74,better,82) output(74,better,53) output(80,worse,33) output(53,worse,33) output(82,worse,33) output(71,eq,46) output(49,eq,84) output(84,eq,33) output(53,eq,80) output(74,eq,65) output(80,eq,82) output(68,eq,88) output(53,eq,82) output(82,eq,53) output(49,eq,33) output(80,eq,53) output(53,eq,53) output(82,eq,80) output(80,eq,80) output(82,eq,82) output(65,eq,33) output(74,eq,33) output(33,eq,33)
Optimization: 21 3
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,3),1,for(atom(hasCost(2))),8) preference(1,(1,6),1,for(atom(hasCategory(3))),8) preference(1,(1,12),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(65,better,33) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(71,eq,46) output(49,eq,84) output(33,eq,53) output(53,eq,80) output(74,eq,65) output(80,eq,82) output(82,eq,33) output(68,eq,88) output(80,eq,33) output(53,eq,82) output(33,eq,80) output(82,eq,53) output(80,eq,53) output(53,eq,53) output(82,eq,80) output(80,eq,80) output(33,eq,82) output(82,eq,82) output(53,eq,33) output(33,eq,33)
Optimization: 20 4
Progression : [ 5;20] (Error: 3)
Answer: 9
preference(1,(1,2),1,for(atom(hasIngredient(10))),8) preference(1,(1,3),1,for(atom(hasDifficulty(3))),7) preference(1,(1,4),1,for(atom(hasCategory(2))),8) preference(1,(1,5),1,for(atom(hasCategory(5))),7) preference(1,(1,6),1,for(atom(hasIngredient(8))),7) preference(1,(1,8),1,for(atom(hasIngredient(6))),7) preference(1,(1,9),1,for(atom(hasCost(5))),7) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),7) preference(1,(1,12),1,for(atom(hasCategory(1))),8) preference(1,(1,13),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(22,better,10) output(84,better,33) output(84,better,80) output(53,better,80) output(53,better,82) output(53,better,33) output(82,better,33) output(82,better,80) output(49,better,84) output(49,better,33) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,33) output(68,better,88) output(71,better,46) output(74,better,65) output(74,better,80) output(74,better,33) output(22,worse,83) output(84,worse,53) output(84,worse,82) output(80,worse,82) output(80,worse,53) output(82,worse,53) output(33,worse,53) output(33,worse,82) output(65,worse,82) output(65,worse,53) output(74,worse,53) output(80,eq,33) output(33,eq,80) output(53,eq,53) output(49,eq,53) output(80,eq,80) output(74,eq,82) output(82,eq,82) output(33,eq,33)
Optimization: 19 11
Answer: 10
preference(1,(1,1),1,for(atom(hasIngredient(7))),6) preference(1,(1,2),1,for(atom(hasDifficulty(2))),5) preference(1,(1,3),1,for(atom(hasIngredient(12))),6) preference(1,(1,4),1,for(atom(hasPrep(1))),7) preference(1,(1,5),1,for(atom(hasCategory(1))),4) preference(1,(1,6),1,for(atom(hasCost(2))),5) preference(1,(1,7),1,for(atom(hasCategory(2))),1) preference(1,(1,8),1,for(atom(hasPrepTime(2))),3) preference(1,(1,9),1,for(atom(hasPrep(7))),6) preference(1,(1,10),1,for(atom(hasCost(3))),6) preference(1,(1,11),1,for(atom(hasPrepTime(1))),1) preference(1,(1,12),1,for(atom(hasPrep(6))),2) preference(1,(1,13),1,for(atom(hasPrepTime(3))),6) preference(1,(1,14),1,for(atom(hasCategory(4))),6) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(80,better,33) output(53,better,80) output(53,better,82) output(53,better,33) output(82,better,33) output(49,better,33) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(65,better,33) output(68,better,88) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(80,worse,53) output(82,worse,53) output(33,worse,53) output(33,worse,80) output(33,worse,82) output(49,worse,84) output(71,worse,46) output(74,eq,65) output(80,eq,82) output(53,eq,53) output(49,eq,53) output(82,eq,80) output(80,eq,80) output(82,eq,82) output(33,eq,33)
Optimization: 15 14
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(6))),1) preference(1,(1,2),1,for(atom(hasCost(2))),5) preference(1,(1,3),1,for(atom(hasIngredient(12))),6) preference(1,(1,4),1,for(atom(hasPrepTime(1))),2) preference(1,(1,5),1,for(atom(hasIngredient(7))),6) preference(1,(1,6),1,for(atom(hasPrepTime(2))),3) preference(1,(1,7),1,for(atom(hasPrepTime(3))),6) preference(1,(1,8),1,for(atom(hasIngredient(10))),4) preference(1,(1,9),1,for(atom(hasPrep(1))),7) preference(1,(1,10),1,for(atom(hasCost(3))),6) preference(1,(1,11),1,for(atom(hasPrep(7))),6) preference(1,(1,12),1,for(atom(hasCategory(2))),2) preference(1,(1,13),1,for(atom(hasCategory(4))),6) preference(1,(1,14),1,for(atom(hasIngredient(9))),3) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(80,better,33) output(53,better,80) output(53,better,82) output(53,better,33) output(82,better,33) output(49,better,84) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(65,better,33) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(80,worse,53) output(82,worse,53) output(33,worse,53) output(33,worse,80) output(33,worse,82) output(71,worse,46) output(74,worse,65) output(80,eq,82) output(68,eq,88) output(53,eq,53) output(82,eq,80) output(80,eq,80) output(82,eq,82) output(33,eq,33)
Optimization: 14 14
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasPrepTime(1))),5) preference(1,(1,4),1,for(atom(hasCost(2))),8) preference(1,(1,5),1,for(atom(hasPrep(0))),6) preference(1,(1,6),1,for(atom(hasCost(3))),7) preference(1,(1,7),1,for(atom(hasIngredient(12))),5) preference(1,(1,8),1,for(atom(hasDifficulty(2))),4) preference(1,(1,9),1,for(atom(hasPrep(6))),7) preference(1,(1,10),1,for(atom(hasPrepTime(2))),8) preference(1,(1,11),1,for(atom(hasCategory(1))),4) preference(1,(1,12),1,for(atom(hasPrep(5))),4) preference(1,(1,13),1,for(atom(hasDifficulty(3))),5) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(53,better,80) output(53,better,82) output(53,better,33) output(82,better,33) output(82,better,80) output(33,better,80) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(65,better,33) output(74,better,65) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(80,worse,82) output(80,worse,33) output(80,worse,53) output(82,worse,53) output(33,worse,53) output(33,worse,82) output(49,worse,84) output(71,worse,46) output(68,eq,88) output(53,eq,53) output(80,eq,80) output(82,eq,82) output(33,eq,33)
Optimization: 13 13
Progression : [ 6;13] (Error: 1.16667)
Answer: 13
preference(1,(1,1),1,for(atom(hasCost(2))),3) preference(1,(1,2),1,for(atom(hasCategory(3))),2) preference(1,(1,3),1,for(atom(hasPrep(5))),4) preference(1,(1,4),1,for(atom(hasIngredient(9))),3) preference(1,(1,6),1,for(atom(hasCost(4))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),3) preference(1,(1,10),1,for(atom(hasDifficulty(3))),5) preference(1,(1,12),1,for(atom(hasPrep(2))),1) preference(1,(1,13),1,for(atom(hasCategory(1))),1) preference(1,(1,14),1,for(atom(hasCategory(2))),1) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(80,better,82) output(80,better,33) output(80,better,53) output(53,better,33) output(82,better,33) output(49,better,84) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(65,better,33) output(68,better,88) output(71,better,46) output(74,better,65) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(53,worse,80) output(82,worse,80) output(33,worse,53) output(33,worse,80) output(33,worse,82) output(53,eq,82) output(82,eq,53) output(53,eq,53) output(80,eq,80) output(82,eq,82) output(33,eq,33)
Optimization: 11 10
Progression : [ 7;11] (Error: 0.571429)
Progression : [ 8;11] (Error: 0.375)
Answer: 14
preference(1,(1,2),1,for(atom(hasIngredient(12))),7) preference(1,(1,3),1,for(atom(hasCategory(3))),4) preference(1,(1,4),1,for(atom(hasCategory(1))),8) preference(1,(1,6),1,for(atom(hasIngredient(9))),1) preference(1,(1,7),1,for(atom(hasPrep(1))),5) preference(1,(1,8),1,for(atom(hasPrepTime(2))),2) preference(1,(1,11),1,for(atom(hasPrep(0))),6) preference(1,(1,14),1,for(atom(hasCost(2))),6) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(80,better,82) output(80,better,33) output(80,better,53) output(53,better,82) output(53,better,33) output(33,better,82) output(49,better,84) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(65,better,33) output(68,better,88) output(71,better,46) output(74,better,65) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(53,worse,80) output(82,worse,33) output(82,worse,53) output(82,worse,80) output(33,worse,53) output(33,worse,80) output(53,eq,53) output(80,eq,80) output(82,eq,82) output(33,eq,33)
Optimization: 10 8
Progression : [ 9;10] (Error: 0.111111)
Progression : [10;10] (Error: 0)
Progression : 10 [1;8] (Error: 7)
Answer: 15
preference(1,(1,2),1,for(atom(hasPrep(0))),2) preference(1,(1,3),1,for(atom(hasCategory(2))),6) preference(1,(1,4),1,for(atom(hasPrep(1))),2) preference(1,(1,5),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasCategory(1))),3) preference(1,(1,13),1,for(atom(hasIngredient(7))),1) preference(1,(1,14),1,for(atom(hasDifficulty(2))),3) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(53,better,80) output(82,better,53) output(82,better,80) output(33,better,53) output(33,better,80) output(33,better,82) output(49,better,84) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(65,better,33) output(68,better,88) output(71,better,46) output(74,better,65) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(80,worse,82) output(80,worse,33) output(80,worse,53) output(53,worse,82) output(53,worse,33) output(82,worse,33) output(53,eq,53) output(80,eq,80) output(82,eq,82) output(33,eq,33)
Optimization: 10 7
Progression : 10 [2;7] (Error: 2.5)
Answer: 16
preference(1,(1,6),1,for(atom(hasCost(4))),2) preference(1,(1,7),1,for(atom(hasCategory(3))),4) preference(1,(1,10),1,for(atom(hasCategory(1))),2) preference(1,(1,11),1,for(atom(hasPrep(7))),2) preference(1,(1,12),1,for(atom(hasCategory(2))),8) preference(1,(1,14),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(53,better,80) output(53,better,82) output(82,better,80) output(33,better,53) output(33,better,80) output(33,better,82) output(49,better,84) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(65,better,33) output(68,better,88) output(71,better,46) output(74,better,65) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(80,worse,82) output(80,worse,33) output(80,worse,53) output(53,worse,33) output(82,worse,33) output(82,worse,53) output(53,eq,53) output(80,eq,80) output(82,eq,82) output(33,eq,33)
Optimization: 10 6
Answer: 17
preference(1,(1,1),1,for(atom(hasDifficulty(2))),5) preference(1,(1,3),1,for(atom(hasPrep(1))),4) preference(1,(1,6),1,for(atom(hasCategory(1))),6) preference(1,(1,8),1,for(atom(hasCategory(3))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(22,better,83) output(22,better,10) output(84,better,33) output(84,better,53) output(84,better,80) output(84,better,82) output(80,better,82) output(80,better,33) output(80,better,53) output(53,better,82) output(33,better,53) output(33,better,82) output(49,better,84) output(49,better,33) output(49,better,53) output(49,better,80) output(49,better,82) output(65,better,80) output(65,better,82) output(65,better,53) output(65,better,33) output(68,better,88) output(71,better,46) output(74,better,65) output(74,better,80) output(74,better,82) output(74,better,33) output(74,better,53) output(53,worse,80) output(53,worse,33) output(82,worse,33) output(82,worse,53) output(82,worse,80) output(33,worse,80) output(53,eq,53) output(80,eq,80) output(82,eq,82) output(33,eq,33)
Optimization: 10 5
Progression : 10 [3;5] (Error: 0.666667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.061 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 17+
  Optimum    : unknown
Optimization : 10 5
Bounds       : 10 [3;5]
Calls        : 1
Time         : 298.215s (Solving: 295.46s 1st Model: 0.03s Unsat: 0.00s)
CPU Time     : 1182.933s
Threads      : 4        (Winner: 4)

Choices      : 5819143  (Domain: 208763)
Conflicts    : 3825625  (Analyzed: 3825616)
Restarts     : 4036     (Average: 947.87 Last: 337801)
Model-Level  : 67.1    
Problems     : 16       (Average Length: 0.25 Splits: 0)
Lemmas       : 3837073  (Deleted: 3526766)
  Binary     : 371      (Ratio:   0.01%)
  Ternary    : 1421     (Ratio:   0.04%)
  Conflict   : 3825614  (Average Length:  433.4 Ratio:  99.70%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 11459    (Average Length:   31.0 Ratio:   0.30%) 
  Distributed: 3833     (Ratio:   0.10% Average LBD: 3.54) 
  Integrated : 11499    (Ratio: 300.00% Unit: 18 Average Jumps: 10.61)
Backjumps    : 3825616  (Average:  1.37 Max: 857 Sum: 5259432)
  Executed   : 3825611  (Average:  1.37 Max: 857 Sum: 5259358 Ratio: 100.00%)
  Bounded    : 5        (Average: 14.80 Max:  31 Sum:     74 Ratio:   0.00%)

Rules        : 456224  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14326   
Bodies       : 18943   
  Sum        : 72      
  Count      : 14      
Equivalences : 13220    (Atom=Atom: 385 Body=Body: 170 Other: 12665)
Tight        : Yes
Variables    : 17063    (Eliminated:    0 Frozen: 7739)
Constraints  : 477788   (Binary:  97.3% Ternary:   2.0% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCost(2)) ; 
  1 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasCategory(2)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCost(2)) ; 
  1 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasCost(4)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCost(2)) ; 
  1 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCategory(2)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasIngredient(6)) ; 
  7 :: atom(hasCost(5)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(1)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrep(1)) ; 
  4 :: atom(hasCategory(1)) ; 
  5 :: atom(hasCost(2)) ; 
  1 :: atom(hasCategory(2)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasCost(3)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrep(1)) ; 
  6 :: atom(hasCost(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCategory(2)) ; 
  6 :: atom(hasCategory(4)) ; 
  3 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(0)) ; 
  7 :: atom(hasCost(3)) ; 
  5 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrep(5)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrep(5)) ; 
  3 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCost(4)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasPrep(2)) ; 
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCategory(1)) ; 
  1 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCategory(2)) ; 
  2 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCost(2)) ; 
  3 :: atom(hasCategory(1)) ; 
  1 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasCost(4)) ; 
  4 :: atom(hasCategory(3)) ; 
  2 :: atom(hasCategory(1)) ; 
  2 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCategory(2)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(1)) ; 
  6 :: atom(hasCategory(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrepTime(2)) 
}.
