asprin_vL version 1.0
Reading from stdin
-:1224:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1234:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1249:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1330:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1591:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1604:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1781:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1910:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1982:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1986:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1986:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1992:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2091:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2117:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2237:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2271:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2293:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1141:1-16: info: no atoms over signature occur in program:
  output/3

-:1133:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1134:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(30,eq,18) output(39,eq,69) output(69,eq,7) output(17,eq,84) output(84,eq,32) output(32,eq,71) output(21,eq,58) output(62,eq,39) output(67,eq,50) output(50,eq,84) output(84,eq,66) output(66,eq,32) output(17,eq,66) output(50,eq,66) output(67,eq,84) output(84,eq,71) output(66,eq,71) output(17,eq,32) output(50,eq,32) output(39,eq,7) output(62,eq,69) output(62,eq,7) output(67,eq,32) output(17,eq,71) output(50,eq,71) output(67,eq,71) output(67,eq,66)
Optimization: 27 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasIngredient(7))),2) preference(1,less(weight)) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,66) output(21,better,58) output(30,better,18) output(50,worse,71) output(84,worse,71) output(66,worse,71) output(32,worse,71) output(17,worse,71) output(39,eq,69) output(69,eq,7) output(17,eq,84) output(84,eq,32) output(62,eq,39) output(50,eq,84) output(84,eq,66) output(66,eq,32) output(17,eq,66) output(50,eq,66) output(17,eq,32) output(50,eq,32) output(39,eq,7) output(62,eq,69) output(62,eq,7) output(67,eq,71)
Optimization: 21 14
Answer: 3
preference(1,(1,1),1,for(atom(hasPrepTime(3))),1) preference(1,(1,2),1,for(atom(hasDifficulty(2))),1) preference(1,(1,3),1,for(atom(hasIngredient(9))),1) preference(1,(1,4),1,for(atom(hasIngredient(7))),1) preference(1,(1,5),1,for(atom(hasIngredient(10))),1) preference(1,(1,6),1,for(atom(hasPrep(1))),1) preference(1,(1,7),1,for(atom(hasPrep(5))),1) preference(1,(1,8),1,for(atom(hasIngredient(3))),1) preference(1,(1,9),1,for(atom(hasCategory(3))),1) preference(1,(1,10),1,for(atom(hasPrep(6))),2) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasIngredient(12))),2) preference(1,(1,13),1,for(atom(hasPrep(3))),5) preference(1,(1,14),1,for(atom(hasCost(2))),1) preference(1,less(weight)) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(62,better,39) output(62,better,69) output(62,better,7) output(17,better,66) output(17,better,32) output(17,better,71) output(30,eq,18) output(39,eq,69) output(69,eq,7) output(17,eq,84) output(32,eq,71) output(21,eq,58) output(67,eq,50) output(50,eq,84) output(66,eq,32) output(67,eq,84) output(66,eq,71) output(39,eq,7)
Optimization: 12 14
Answer: 4
preference(1,(1,3),1,for(atom(hasCost(4))),8) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasCost(1))),8) preference(1,(1,12),1,for(atom(hasCost(3))),8) preference(1,(1,13),1,for(atom(hasIngredient(8))),8) preference(1,less(weight)) output(50,better,84) output(50,better,32) output(50,better,71) output(67,better,84) output(67,better,32) output(67,better,71) output(39,better,7) output(62,better,7) output(66,better,32) output(66,better,71) output(69,better,7) output(21,better,58) output(30,better,18) output(17,better,84) output(17,better,32) output(17,better,71) output(84,worse,66) output(39,eq,69) output(84,eq,32) output(32,eq,71) output(62,eq,39) output(67,eq,50) output(17,eq,66) output(50,eq,66) output(84,eq,71) output(62,eq,69) output(67,eq,66)
Optimization: 11 5
Answer: 5
preference(1,(1,1),1,for(atom(hasPrepTime(3))),1) preference(1,(1,2),1,for(atom(hasDifficulty(2))),1) preference(1,(1,3),1,for(atom(hasIngredient(9))),1) preference(1,(1,4),1,for(atom(hasIngredient(7))),1) preference(1,(1,5),1,for(atom(hasIngredient(10))),1) preference(1,(1,6),1,for(atom(hasPrep(1))),1) preference(1,(1,7),1,for(atom(hasPrep(5))),1) preference(1,(1,8),1,for(atom(hasIngredient(3))),1) preference(1,(1,9),1,for(atom(hasCategory(3))),1) preference(1,(1,10),1,for(atom(hasPrep(6))),2) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasIngredient(12))),2) preference(1,(1,13),1,for(atom(hasDifficulty(3))),5) preference(1,(1,14),1,for(atom(hasCost(2))),1) preference(1,less(weight)) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(69,better,7) output(17,better,66) output(17,better,32) output(17,better,71) output(30,eq,18) output(39,eq,69) output(17,eq,84) output(32,eq,71) output(21,eq,58) output(67,eq,50) output(50,eq,84) output(66,eq,32) output(67,eq,84) output(66,eq,71)
Optimization: 10 14
Answer: 6
preference(1,(1,1),1,for(atom(hasPrepTime(3))),1) preference(1,(1,2),1,for(atom(hasDifficulty(2))),1) preference(1,(1,3),1,for(atom(hasIngredient(9))),1) preference(1,(1,4),1,for(atom(hasIngredient(7))),1) preference(1,(1,5),1,for(atom(hasIngredient(10))),1) preference(1,(1,6),1,for(atom(hasPrep(1))),1) preference(1,(1,7),1,for(atom(hasPrep(5))),1) preference(1,(1,8),1,for(atom(hasIngredient(3))),1) preference(1,(1,9),1,for(atom(hasCategory(3))),1) preference(1,(1,10),1,for(atom(hasPrep(6))),2) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasIngredient(12))),2) preference(1,(1,13),1,for(atom(hasCost(3))),5) preference(1,(1,14),1,for(atom(hasCost(2))),1) preference(1,less(weight)) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(69,better,7) output(17,better,66) output(17,better,32) output(17,better,71) output(32,worse,71) output(30,eq,18) output(39,eq,69) output(17,eq,84) output(21,eq,58) output(67,eq,50) output(50,eq,84) output(67,eq,84) output(66,eq,71)
Optimization: 9 14
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(6))),7) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasIngredient(12))),7) preference(1,(1,4),1,for(atom(hasPrepTime(1))),7) preference(1,(1,5),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasCost(4))),7) preference(1,(1,8),1,for(atom(hasPrep(7))),7) preference(1,(1,9),1,for(atom(hasCost(5))),7) preference(1,(1,10),1,for(atom(hasCost(1))),8) preference(1,(1,11),1,for(atom(hasIngredient(8))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),7) preference(1,(1,13),1,for(atom(hasCost(3))),8) preference(1,(1,14),1,for(atom(hasPrep(4))),8) preference(1,less(weight)) output(50,better,84) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71) output(84,worse,66) output(30,eq,18) output(69,eq,7) output(84,eq,32) output(32,eq,71) output(21,eq,58) output(50,eq,66) output(84,eq,71)
Optimization: 8 13
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(6))),7) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasIngredient(12))),7) preference(1,(1,4),1,for(atom(hasPrepTime(1))),7) preference(1,(1,5),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasCost(4))),7) preference(1,(1,8),1,for(atom(hasPrep(7))),8) preference(1,(1,9),1,for(atom(hasCost(5))),7) preference(1,(1,10),1,for(atom(hasCost(1))),8) preference(1,(1,11),1,for(atom(hasIngredient(8))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),7) preference(1,(1,13),1,for(atom(hasCost(3))),8) preference(1,(1,14),1,for(atom(hasPrep(4))),8) preference(1,less(weight)) output(50,better,84) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(21,better,58) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71) output(84,worse,66) output(30,eq,18) output(69,eq,7) output(84,eq,32) output(32,eq,71) output(50,eq,66) output(84,eq,71)
Optimization: 7 13
Answer: 9
preference(1,(1,1),1,for(atom(hasCategory(4))),8) preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,3),1,for(atom(hasPrep(4))),8) preference(1,(1,4),1,for(atom(hasCost(3))),8) preference(1,(1,5),1,for(atom(hasIngredient(8))),7) preference(1,(1,6),1,for(atom(hasIngredient(1))),7) preference(1,(1,8),1,for(atom(hasPrep(7))),7) preference(1,(1,9),1,for(atom(hasCost(5))),7) preference(1,(1,10),1,for(atom(hasPrep(2))),7) preference(1,(1,11),1,for(atom(hasCost(4))),8) preference(1,(1,12),1,for(atom(hasIngredient(2))),7) preference(1,(1,13),1,for(atom(hasIngredient(12))),7) preference(1,(1,14),1,for(atom(hasDifficulty(3))),7) preference(1,less(weight)) output(50,better,84) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(21,better,58) output(30,better,18) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71) output(84,worse,66) output(69,eq,7) output(84,eq,32) output(32,eq,71) output(50,eq,66) output(84,eq,71)
Optimization: 6 13
Answer: 10
preference(1,(1,1),1,for(atom(hasCost(4))),8) preference(1,(1,2),1,for(atom(hasPrep(4))),8) preference(1,(1,3),1,for(atom(hasCost(3))),8) preference(1,(1,4),1,for(atom(hasCost(1))),7) preference(1,(1,5),1,for(atom(hasIngredient(12))),7) preference(1,(1,6),1,for(atom(hasIngredient(1))),7) preference(1,(1,8),1,for(atom(hasIngredient(11))),7) preference(1,(1,9),1,for(atom(hasCost(5))),7) preference(1,(1,10),1,for(atom(hasDifficulty(3))),7) preference(1,(1,11),1,for(atom(hasPrep(7))),7) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,13),1,for(atom(hasCategory(4))),8) preference(1,(1,14),1,for(atom(hasIngredient(8))),7) preference(1,less(weight)) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(21,better,58) output(30,better,18) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71) output(69,eq,7) output(32,eq,71) output(50,eq,84) output(84,eq,66) output(50,eq,66)
Optimization: 5 13
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(6))),7) preference(1,(1,2),1,for(atom(hasPrep(4))),8) preference(1,(1,3),1,for(atom(hasCost(3))),8) preference(1,(1,4),1,for(atom(hasIngredient(8))),8) preference(1,(1,5),1,for(atom(hasIngredient(12))),7) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasIngredient(11))),7) preference(1,(1,9),1,for(atom(hasCategory(2))),7) preference(1,(1,10),1,for(atom(hasDifficulty(3))),7) preference(1,(1,11),1,for(atom(hasPrep(3))),7) preference(1,(1,12),1,for(atom(hasCost(1))),7) preference(1,(1,13),1,for(atom(hasCost(4))),8) preference(1,(1,14),1,for(atom(hasCategory(4))),7) preference(1,less(weight)) output(50,better,84) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(21,better,58) output(30,better,18) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71) output(69,eq,7) output(32,eq,71) output(67,eq,50) output(84,eq,66)
Optimization: 4 13
Answer: 12
preference(1,(1,1),1,for(atom(hasIngredient(12))),8) preference(1,(1,2),1,for(atom(hasPrep(6))),8) preference(1,(1,3),1,for(atom(hasPrep(7))),7) preference(1,(1,4),1,for(atom(hasCategory(4))),8) preference(1,(1,5),1,for(atom(hasPrep(4))),7) preference(1,(1,6),1,for(atom(hasIngredient(10))),7) preference(1,(1,8),1,for(atom(hasCategory(2))),7) preference(1,(1,9),1,for(atom(hasCost(3))),7) preference(1,(1,10),1,for(atom(hasPrep(2))),7) preference(1,(1,11),1,for(atom(hasDifficulty(3))),7) preference(1,(1,12),1,for(atom(hasCost(1))),7) preference(1,(1,13),1,for(atom(hasCost(4))),7) preference(1,(1,14),1,for(atom(hasIngredient(8))),7) preference(1,less(weight)) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(21,better,58) output(30,better,18) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71) output(69,eq,7) output(32,eq,71) output(50,eq,84)
Optimization: 3 13
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(6))),6) preference(1,(1,2),1,for(atom(hasDifficulty(1))),6) preference(1,(1,3),1,for(atom(hasCost(1))),7) preference(1,(1,4),1,for(atom(hasPrep(2))),6) preference(1,(1,5),1,for(atom(hasCost(3))),8) preference(1,(1,6),1,for(atom(hasCost(4))),7) preference(1,(1,7),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasPrepTime(1))),6) preference(1,(1,9),1,for(atom(hasPrep(0))),8) preference(1,(1,10),1,for(atom(hasDifficulty(3))),6) preference(1,(1,11),1,for(atom(hasPrep(4))),7) preference(1,(1,12),1,for(atom(hasIngredient(8))),8) preference(1,(1,13),1,for(atom(hasIngredient(12))),6) preference(1,(1,14),1,for(atom(hasCategory(4))),7) preference(1,less(weight)) output(50,better,84) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(69,better,7) output(21,better,58) output(30,better,18) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71) output(62,worse,39) output(32,eq,71)
Optimization: 2 14
Answer: 14
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrep(6))),8) preference(1,(1,3),1,for(atom(hasCost(3))),7) preference(1,(1,4),1,for(atom(hasIngredient(10))),7) preference(1,(1,5),1,for(atom(hasIngredient(12))),8) preference(1,(1,6),1,for(atom(hasDifficulty(1))),6) preference(1,(1,7),1,for(atom(hasPrep(7))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,9),1,for(atom(hasCost(4))),7) preference(1,(1,10),1,for(atom(hasCategory(4))),6) preference(1,(1,11),1,for(atom(hasDifficulty(3))),6) preference(1,(1,12),1,for(atom(hasPrep(4))),6) preference(1,(1,13),1,for(atom(hasPrepTime(1))),6) preference(1,(1,14),1,for(atom(hasIngredient(8))),7) preference(1,less(weight)) output(50,better,84) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(69,better,7) output(21,better,58) output(30,better,18) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71) output(32,eq,71)
Optimization: 1 14
Answer: 15
preference(1,(1,1),1,for(atom(hasPrepTime(2))),5) preference(1,(1,2),1,for(atom(hasCategory(4))),6) preference(1,(1,3),1,for(atom(hasPrepTime(1))),2) preference(1,(1,4),1,for(atom(hasDifficulty(1))),5) preference(1,(1,5),1,for(atom(hasCategory(3))),4) preference(1,(1,6),1,for(atom(hasPrepTime(3))),4) preference(1,(1,7),1,for(atom(hasCost(1))),4) preference(1,(1,8),1,for(atom(hasPrep(4))),3) preference(1,(1,9),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasIngredient(7))),5) preference(1,(1,11),1,for(atom(hasIngredient(12))),1) preference(1,(1,12),1,for(atom(hasPrep(1))),5) preference(1,(1,13),1,for(atom(hasCost(4))),2) preference(1,(1,14),1,for(atom(hasPrep(6))),5) preference(1,less(weight)) output(50,better,84) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(69,better,7) output(21,better,58) output(30,better,18) output(32,better,71) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Progression : 0 [ 2;14] (Error: 6)
Answer: 16
preference(1,(1,1),1,for(atom(hasIngredient(12))),5) preference(1,(1,2),1,for(atom(hasCost(4))),7) preference(1,(1,3),1,for(atom(hasPrep(6))),5) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasDifficulty(1))),3) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasCost(3))),2) preference(1,(1,9),1,for(atom(hasDifficulty(3))),3) preference(1,(1,10),1,for(atom(hasPrep(7))),6) preference(1,(1,11),1,for(atom(hasPrep(4))),4) preference(1,(1,12),1,for(atom(hasCategory(4))),2) preference(1,(1,13),1,for(atom(hasPrep(2))),4) preference(1,(1,14),1,for(atom(hasCost(1))),4) preference(1,less(weight)) output(50,better,84) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(69,better,7) output(21,better,58) output(30,better,18) output(32,better,71) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71)
Optimization: 0 13
Answer: 17
preference(1,(1,1),1,for(atom(hasIngredient(12))),5) preference(1,(1,2),1,for(atom(hasPrep(7))),7) preference(1,(1,3),1,for(atom(hasPrep(6))),5) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasDifficulty(1))),3) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,8),1,for(atom(hasCost(4))),8) preference(1,(1,9),1,for(atom(hasCost(3))),3) preference(1,(1,11),1,for(atom(hasPrep(4))),4) preference(1,(1,12),1,for(atom(hasCategory(4))),2) preference(1,(1,13),1,for(atom(hasPrep(2))),4) preference(1,(1,14),1,for(atom(hasCost(1))),4) preference(1,less(weight)) output(50,better,84) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(69,better,7) output(21,better,58) output(30,better,18) output(32,better,71) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71)
Optimization: 0 12
Answer: 18
preference(1,(1,1),1,for(atom(hasPrepTime(1))),2) preference(1,(1,2),1,for(atom(hasPrep(6))),7) preference(1,(1,3),1,for(atom(hasIngredient(12))),7) preference(1,(1,4),1,for(atom(hasDifficulty(1))),3) preference(1,(1,6),1,for(atom(hasPrep(7))),4) preference(1,(1,8),1,for(atom(hasCost(4))),4) preference(1,(1,9),1,for(atom(hasCost(1))),1) preference(1,(1,13),1,for(atom(hasCost(3))),4) preference(1,less(weight)) output(50,better,84) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(69,better,7) output(21,better,58) output(30,better,18) output(32,better,71) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71)
Optimization: 0 8
Answer: 19
preference(1,(1,2),1,for(atom(hasCost(4))),8) preference(1,(1,3),1,for(atom(hasCategory(4))),8) preference(1,(1,4),1,for(atom(hasPrep(6))),4) preference(1,(1,5),1,for(atom(hasIngredient(9))),1) preference(1,(1,7),1,for(atom(hasIngredient(12))),6) preference(1,(1,9),1,for(atom(hasPrep(2))),6) preference(1,(1,13),1,for(atom(hasDifficulty(1))),2) preference(1,less(weight)) output(50,better,84) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(69,better,7) output(21,better,58) output(30,better,18) output(32,better,71) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71)
Optimization: 0 7
Answer: 20
preference(1,(1,2),1,for(atom(hasCost(4))),8) preference(1,(1,3),1,for(atom(hasCategory(4))),8) preference(1,(1,5),1,for(atom(hasPrep(6))),5) preference(1,(1,7),1,for(atom(hasIngredient(12))),6) preference(1,(1,9),1,for(atom(hasPrep(2))),6) preference(1,(1,13),1,for(atom(hasDifficulty(1))),2) preference(1,less(weight)) output(50,better,84) output(50,better,66) output(50,better,32) output(50,better,71) output(67,better,50) output(67,better,84) output(67,better,32) output(67,better,71) output(67,better,66) output(84,better,32) output(84,better,66) output(84,better,71) output(39,better,69) output(39,better,7) output(62,better,39) output(62,better,69) output(62,better,7) output(66,better,32) output(66,better,71) output(69,better,7) output(21,better,58) output(30,better,18) output(32,better,71) output(17,better,84) output(17,better,66) output(17,better,32) output(17,better,71)
Optimization: 0 6
Progression : 0 [3;6] (Error: 1)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.065 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 20+
  Optimum    : unknown
Optimization : 0 6
Calls        : 1
Time         : 598.073s (Solving: 595.44s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2383.973s
Threads      : 4        (Winner: 4)

Choices      : 7913355  (Domain: 241124)
Conflicts    : 7581591  (Analyzed: 7581588)
Restarts     : 6153     (Average: 1232.18 Last: 620413)
Model-Level  : 60.0    
Problems     : 9        (Average Length: 0.44 Splits: 0)
Lemmas       : 7781041  (Deleted: 7232108)
  Binary     : 171      (Ratio:   0.00%)
  Ternary    : 370      (Ratio:   0.00%)
  Conflict   : 7581588  (Average Length:  549.4 Ratio:  97.44%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 199453   (Average Length:  694.0 Ratio:   2.56%) 
  Distributed: 66504    (Ratio:   0.88% Average LBD: 3.81) 
  Integrated : 199512   (Ratio: 300.00% Unit: 9 Average Jumps: 0.00)
Backjumps    : 7581588  (Average:  1.03 Max: 222 Sum: 7845380)
  Executed   : 7581587  (Average:  1.03 Max: 222 Sum: 7845363 Ratio: 100.00%)
  Bounded    : 1        (Average: 17.00 Max:  17 Sum:     17 Ratio:   0.00%)

Rules        : 354845  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13248   
Bodies       : 18826   
  Sum        : 54      
  Count      : 14      
Equivalences : 6795     (Atom=Atom: 283 Body=Body: 122 Other: 6390)
Tight        : Yes
Variables    : 17027    (Eliminated:    0 Frozen: 7703)
Constraints  : 377418   (Binary:  96.6% Ternary:   2.5% Other:   0.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(0)) ; 
  2 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasPrep(3)) ; 
  1 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasIngredient(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(0)) ; 
  2 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(0)) ; 
  2 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCost(5)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCost(5)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasCost(3)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasIngredient(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCost(5)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(2)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasCost(3)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasIngredient(1)) ; 
  7 :: atom(hasIngredient(11)) ; 
  7 :: atom(hasCost(5)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(11)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(3)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(4)) ; 
  7 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(3)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(4)) ; 
  8 :: atom(hasIngredient(8)) ; 
  6 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(4)) ; 
  6 :: atom(hasCategory(4)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasIngredient(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCategory(4)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrep(0)) ; 
  5 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasPrep(1)) ; 
  2 :: atom(hasCost(4)) ; 
  5 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasCost(4)) ; 
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCost(3)) ; 
  3 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(4)) ; 
  2 :: atom(hasCategory(4)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(4)) ; 
  3 :: atom(hasCost(3)) ; 
  4 :: atom(hasPrep(4)) ; 
  2 :: atom(hasCategory(4)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasIngredient(12)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(7)) ; 
  4 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(1)) ; 
  4 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  4 :: atom(hasPrep(6)) ; 
  1 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasPrep(2)) ; 
  2 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  5 :: atom(hasPrep(6)) ; 
  6 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasPrep(2)) ; 
  2 :: atom(hasDifficulty(1)) 
}.
