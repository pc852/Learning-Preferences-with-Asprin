asprin_vL version 1.0
Reading from stdin
-:1229:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1239:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1254:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1335:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1596:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1609:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1786:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1915:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1987:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1991:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1991:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1997:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2096:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2122:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2242:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2276:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2298:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1146:1-16: info: no atoms over signature occur in program:
  output/3

-:1138:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1139:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(71,eq,76) output(76,eq,67) output(67,eq,51) output(51,eq,52) output(57,eq,8) output(91,eq,55) output(60,eq,30) output(30,eq,76) output(78,eq,71) output(71,eq,98) output(98,eq,53) output(17,eq,99) output(71,eq,53) output(78,eq,98) output(60,eq,76) output(67,eq,52) output(76,eq,51) output(71,eq,67) output(30,eq,67) output(78,eq,76) output(60,eq,67) output(78,eq,67) output(71,eq,51) output(30,eq,51) output(60,eq,51) output(78,eq,51) output(76,eq,52) output(71,eq,52) output(30,eq,52) output(78,eq,53) output(60,eq,52) output(78,eq,52)
Optimization: 32 0
Answer: 2
preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(71,better,98) output(78,better,98) output(17,better,99) output(98,worse,53) output(71,eq,76) output(76,eq,67) output(67,eq,51) output(51,eq,52) output(57,eq,8) output(91,eq,55) output(60,eq,30) output(30,eq,76) output(78,eq,71) output(71,eq,53) output(60,eq,76) output(67,eq,52) output(76,eq,51) output(71,eq,67) output(30,eq,67) output(78,eq,76) output(60,eq,67) output(78,eq,67) output(71,eq,51) output(30,eq,51) output(60,eq,51) output(78,eq,51) output(76,eq,52) output(71,eq,52) output(30,eq,52) output(78,eq,53) output(60,eq,52) output(78,eq,52)
Optimization: 29 1
Answer: 3
preference(1,(1,14),1,for(atom(hasDifficulty(4))),8) preference(1,less(weight)) output(60,better,51) output(67,better,51) output(30,better,51) output(71,better,51) output(78,better,51) output(76,better,51) output(51,worse,52) output(71,eq,76) output(76,eq,67) output(57,eq,8) output(91,eq,55) output(60,eq,30) output(30,eq,76) output(78,eq,71) output(71,eq,98) output(98,eq,53) output(17,eq,99) output(71,eq,53) output(78,eq,98) output(60,eq,76) output(67,eq,52) output(71,eq,67) output(30,eq,67) output(78,eq,76) output(60,eq,67) output(78,eq,67) output(76,eq,52) output(71,eq,52) output(30,eq,52) output(78,eq,53) output(60,eq,52) output(78,eq,52)
Optimization: 26 1
Answer: 4
preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,(1,14),1,for(atom(hasDifficulty(4))),8) preference(1,less(weight)) output(60,better,51) output(67,better,51) output(30,better,51) output(71,better,98) output(71,better,51) output(78,better,98) output(78,better,51) output(17,better,99) output(76,better,51) output(51,worse,52) output(98,worse,53) output(71,eq,76) output(76,eq,67) output(57,eq,8) output(91,eq,55) output(60,eq,30) output(30,eq,76) output(78,eq,71) output(71,eq,53) output(60,eq,76) output(67,eq,52) output(71,eq,67) output(30,eq,67) output(78,eq,76) output(60,eq,67) output(78,eq,67) output(76,eq,52) output(71,eq,52) output(30,eq,52) output(78,eq,53) output(60,eq,52) output(78,eq,52)
Optimization: 23 2
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(4))),2) preference(1,(1,2),1,for(atom(hasPrep(5))),2) preference(1,(1,3),1,for(atom(hasIngredient(2))),8) preference(1,(1,4),1,for(atom(hasIngredient(7))),2) preference(1,(1,5),1,for(atom(hasPrep(7))),8) preference(1,(1,6),1,for(atom(hasDifficulty(3))),2) preference(1,(1,7),1,for(atom(hasIngredient(10))),8) preference(1,(1,8),1,for(atom(hasIngredient(1))),8) preference(1,(1,9),1,for(atom(hasCategory(5))),6) preference(1,(1,10),1,for(atom(hasCategory(3))),6) preference(1,(1,11),1,for(atom(hasDifficulty(4))),6) preference(1,(1,12),1,for(atom(hasIngredient(3))),8) preference(1,(1,13),1,for(atom(hasPrepTime(2))),7) preference(1,(1,14),1,for(atom(hasIngredient(8))),6) preference(1,less(weight)) output(51,better,52) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(91,better,55) output(98,better,53) output(30,better,76) output(30,better,67) output(30,better,51) output(30,better,52) output(57,better,8) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(17,better,99) output(76,better,67) output(76,better,51) output(76,better,52)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 6
preference(1,(1,1),1,for(atom(hasIngredient(7))),2) preference(1,(1,2),1,for(atom(hasDifficulty(2))),2) preference(1,(1,3),1,for(atom(hasPrepTime(3))),4) preference(1,(1,4),1,for(atom(hasIngredient(9))),2) preference(1,(1,5),1,for(atom(hasCost(3))),6) preference(1,(1,6),1,for(atom(hasPrep(0))),2) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,8),1,for(atom(hasPrepTime(2))),5) preference(1,(1,9),1,for(atom(hasIngredient(3))),7) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasCategory(1))),1) preference(1,(1,13),1,for(atom(hasCategory(3))),2) preference(1,(1,14),1,for(atom(hasPrep(5))),3) preference(1,less(weight)) output(51,better,52) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(91,better,55) output(98,better,53) output(30,better,76) output(30,better,67) output(30,better,51) output(30,better,52) output(57,better,8) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(17,better,99) output(76,better,67) output(76,better,51) output(76,better,52)
Optimization: 0 13
Answer: 7
preference(1,(1,1),1,for(atom(hasIngredient(7))),2) preference(1,(1,2),1,for(atom(hasDifficulty(2))),2) preference(1,(1,3),1,for(atom(hasPrepTime(3))),4) preference(1,(1,4),1,for(atom(hasIngredient(9))),2) preference(1,(1,6),1,for(atom(hasPrep(0))),2) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,8),1,for(atom(hasPrepTime(2))),5) preference(1,(1,9),1,for(atom(hasCost(3))),6) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasPrep(5))),3) preference(1,(1,12),1,for(atom(hasIngredient(3))),7) preference(1,(1,13),1,for(atom(hasCategory(3))),2) preference(1,less(weight)) output(51,better,52) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(91,better,55) output(98,better,53) output(30,better,76) output(30,better,67) output(30,better,51) output(30,better,52) output(57,better,8) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(17,better,99) output(76,better,67) output(76,better,51) output(76,better,52)
Optimization: 0 12
Progression : 0 [ 2;12] (Error: 5)
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(6))),5) preference(1,(1,2),1,for(atom(hasCost(2))),5) preference(1,(1,3),1,for(atom(hasCategory(1))),2) preference(1,(1,4),1,for(atom(hasPrep(1))),5) preference(1,(1,5),1,for(atom(hasIngredient(3))),6) preference(1,(1,7),1,for(atom(hasCategory(4))),5) preference(1,(1,8),1,for(atom(hasPrepTime(2))),5) preference(1,(1,9),1,for(atom(hasIngredient(10))),3) preference(1,(1,10),1,for(atom(hasDifficulty(2))),4) preference(1,(1,13),1,for(atom(hasIngredient(9))),2) preference(1,less(weight)) output(51,better,52) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(91,better,55) output(98,better,53) output(30,better,76) output(30,better,67) output(30,better,51) output(30,better,52) output(57,better,8) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(17,better,99) output(76,better,67) output(76,better,51) output(76,better,52)
Optimization: 0 10
Answer: 9
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(3))),8) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasIngredient(9))),5) preference(1,(1,6),1,for(atom(hasDifficulty(2))),2) preference(1,(1,7),1,for(atom(hasPrepTime(2))),5) preference(1,(1,9),1,for(atom(hasCategory(2))),8) preference(1,(1,12),1,for(atom(hasIngredient(3))),8) preference(1,(1,14),1,for(atom(hasPrepTime(3))),5) preference(1,less(weight)) output(51,better,52) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(91,better,55) output(98,better,53) output(30,better,76) output(30,better,67) output(30,better,51) output(30,better,52) output(57,better,8) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(17,better,99) output(76,better,67) output(76,better,51) output(76,better,52)
Optimization: 0 9
Answer: 10
preference(1,(1,1),1,for(atom(hasDifficulty(2))),4) preference(1,(1,2),1,for(atom(hasCost(2))),5) preference(1,(1,3),1,for(atom(hasPrep(5))),5) preference(1,(1,5),1,for(atom(hasCategory(2))),6) preference(1,(1,10),1,for(atom(hasIngredient(3))),7) preference(1,(1,11),1,for(atom(hasCategory(3))),8) preference(1,(1,13),1,for(atom(hasPrepTime(2))),1) preference(1,(1,14),1,for(atom(hasCategory(1))),4) preference(1,less(weight)) output(51,better,52) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(91,better,55) output(98,better,53) output(30,better,76) output(30,better,67) output(30,better,51) output(30,better,52) output(57,better,8) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(17,better,99) output(76,better,67) output(76,better,51) output(76,better,52)
Optimization: 0 8
Answer: 11
preference(1,(1,2),1,for(atom(hasPrepTime(2))),2) preference(1,(1,3),1,for(atom(hasCategory(2))),5) preference(1,(1,5),1,for(atom(hasCategory(1))),6) preference(1,(1,6),1,for(atom(hasDifficulty(2))),6) preference(1,(1,9),1,for(atom(hasPrep(6))),1) preference(1,(1,11),1,for(atom(hasCost(2))),4) preference(1,(1,13),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(51,better,52) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(91,better,55) output(98,better,53) output(30,better,76) output(30,better,67) output(30,better,51) output(30,better,52) output(57,better,8) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(17,better,99) output(76,better,67) output(76,better,51) output(76,better,52)
Optimization: 0 7
Answer: 12
preference(1,(1,1),1,for(atom(hasPrepTime(2))),5) preference(1,(1,5),1,for(atom(hasIngredient(3))),8) preference(1,(1,7),1,for(atom(hasCost(2))),6) preference(1,(1,8),1,for(atom(hasDifficulty(2))),2) preference(1,(1,11),1,for(atom(hasPrepTime(3))),4) preference(1,(1,12),1,for(atom(hasCategory(2))),8) preference(1,less(weight)) output(51,better,52) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(91,better,55) output(98,better,53) output(30,better,76) output(30,better,67) output(30,better,51) output(30,better,52) output(57,better,8) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(17,better,99) output(76,better,67) output(76,better,51) output(76,better,52)
Optimization: 0 6
Answer: 13
preference(1,(1,1),1,for(atom(hasIngredient(3))),8) preference(1,(1,2),1,for(atom(hasCost(2))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),2) preference(1,(1,12),1,for(atom(hasCategory(2))),7) preference(1,(1,13),1,for(atom(hasDifficulty(2))),5) preference(1,less(weight)) output(51,better,52) output(60,better,30) output(60,better,76) output(60,better,67) output(60,better,51) output(60,better,52) output(67,better,51) output(67,better,52) output(91,better,55) output(98,better,53) output(30,better,76) output(30,better,67) output(30,better,51) output(30,better,52) output(57,better,8) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,51) output(71,better,52) output(78,better,71) output(78,better,98) output(78,better,76) output(78,better,67) output(78,better,51) output(78,better,53) output(78,better,52) output(17,better,99) output(76,better,67) output(76,better,51) output(76,better,52)
Optimization: 0 5
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.054 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 13+
  Optimum    : unknown
Optimization : 0 5
Calls        : 1
Time         : 597.591s (Solving: 595.22s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2373.681s
Threads      : 4        (Winner: 4)

Choices      : 12406977 (Domain: 360284)
Conflicts    : 8325665  (Analyzed: 8325663)
Restarts     : 7961     (Average: 1045.81 Last: 86696)
Model-Level  : 55.5    
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 8344701  (Deleted: 7929882)
  Binary     : 587      (Ratio:   0.01%)
  Ternary    : 821      (Ratio:   0.01%)
  Conflict   : 8325663  (Average Length:  429.9 Ratio:  99.77%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 19038    (Average Length:  107.9 Ratio:   0.23%) 
  Distributed: 6390     (Ratio:   0.08% Average LBD: 3.83) 
  Integrated : 19170    (Ratio: 300.00% Unit: 3 Average Jumps: 1.00)
Backjumps    : 8325663  (Average:  1.38 Max: 547 Sum: 11499035)
  Executed   : 8325662  (Average:  1.38 Max: 547 Sum: 11499022 Ratio: 100.00%)
  Bounded    : 1        (Average: 13.00 Max:  13 Sum:     13 Ratio:   0.00%)

Rules        : 400606  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13746   
Bodies       : 18881   
  Sum        : 64      
  Count      : 14      
Equivalences : 6970     (Atom=Atom: 333 Body=Body: 142 Other: 6495)
Tight        : Yes
Variables    : 17055    (Eliminated:    0 Frozen: 7731)
Constraints  : 422732   (Binary:  96.9% Ternary:   2.2% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(2)) ; 
  2 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasIngredient(1)) ; 
  6 :: atom(hasCategory(5)) ; 
  6 :: atom(hasCategory(3)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasIngredient(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasCost(3)) ; 
  2 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  1 :: atom(hasCategory(1)) ; 
  2 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCost(2)) ; 
  2 :: atom(hasCategory(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  6 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasCategory(4)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCategory(3)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCategory(2)) ; 
  8 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(2)) ; 
  7 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCategory(2)) ; 
  6 :: atom(hasCategory(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasCost(2)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCost(2)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCategory(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCategory(2)) ; 
  5 :: atom(hasDifficulty(2)) 
}.
