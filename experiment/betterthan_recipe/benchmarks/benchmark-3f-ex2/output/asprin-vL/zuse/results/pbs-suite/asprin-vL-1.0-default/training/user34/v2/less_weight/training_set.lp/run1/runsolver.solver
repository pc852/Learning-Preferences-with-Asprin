asprin_vL version 1.0
Reading from stdin
-:1260:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1270:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1285:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1366:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1627:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1640:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1817:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1946:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:2018:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:2022:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:2022:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2028:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2127:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2153:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2273:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2307:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2329:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1177:1-16: info: no atoms over signature occur in program:
  output/3

-:1169:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1170:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(57,eq,99) output(99,eq,51) output(51,eq,71) output(71,eq,76) output(76,eq,67) output(67,eq,52) output(78,eq,99) output(17,eq,76) output(94,eq,30) output(30,eq,71) output(71,eq,98) output(98,eq,53) output(53,eq,60) output(98,eq,60) output(71,eq,53) output(51,eq,98) output(30,eq,98) output(94,eq,71) output(76,eq,52) output(71,eq,67) output(17,eq,67) output(51,eq,76) output(30,eq,76) output(99,eq,71) output(57,eq,51) output(78,eq,51) output(57,eq,71) output(78,eq,71) output(94,eq,76) output(99,eq,76) output(57,eq,76) output(78,eq,76) output(51,eq,67) output(30,eq,67) output(94,eq,67) output(99,eq,67) output(71,eq,52) output(17,eq,52) output(51,eq,52) output(30,eq,52) output(94,eq,98) output(99,eq,98) output(57,eq,98) output(78,eq,98) output(51,eq,53) output(30,eq,53) output(94,eq,53) output(99,eq,53) output(71,eq,60) output(51,eq,60) output(30,eq,60) output(94,eq,60) output(99,eq,60) output(57,eq,60) output(78,eq,60) output(57,eq,53) output(78,eq,53) output(94,eq,52) output(99,eq,52) output(57,eq,52) output(78,eq,52) output(57,eq,67) output(78,eq,67)
Optimization: 63 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasDifficulty(4))),8) preference(1,less(weight)) output(99,better,51) output(57,better,51) output(78,better,51) output(51,worse,71) output(51,worse,98) output(51,worse,76) output(51,worse,67) output(51,worse,52) output(51,worse,53) output(51,worse,60) output(57,eq,99) output(71,eq,76) output(76,eq,67) output(67,eq,52) output(78,eq,99) output(17,eq,76) output(94,eq,30) output(30,eq,71) output(71,eq,98) output(98,eq,53) output(53,eq,60) output(98,eq,60) output(71,eq,53) output(30,eq,98) output(94,eq,71) output(76,eq,52) output(71,eq,67) output(17,eq,67) output(30,eq,76) output(99,eq,71) output(57,eq,71) output(78,eq,71) output(94,eq,76) output(99,eq,76) output(57,eq,76) output(78,eq,76) output(30,eq,67) output(94,eq,67) output(99,eq,67) output(71,eq,52) output(17,eq,52) output(30,eq,52) output(94,eq,98) output(99,eq,98) output(57,eq,98) output(78,eq,98) output(30,eq,53) output(94,eq,53) output(99,eq,53) output(71,eq,60) output(30,eq,60) output(94,eq,60) output(99,eq,60) output(57,eq,60) output(78,eq,60) output(57,eq,53) output(78,eq,53) output(94,eq,52) output(99,eq,52) output(57,eq,52) output(78,eq,52) output(57,eq,67) output(78,eq,67)
Optimization: 60 14
Answer: 3
preference(1,(1,14),1,for(atom(hasCost(2))),6) preference(1,less(weight)) output(98,better,53) output(99,better,51) output(99,better,71) output(99,better,76) output(99,better,67) output(99,better,53) output(99,better,52) output(78,better,51) output(78,better,71) output(78,better,76) output(78,better,53) output(78,better,52) output(78,better,67) output(51,worse,98) output(51,worse,60) output(53,worse,60) output(94,worse,98) output(94,worse,60) output(30,worse,98) output(30,worse,60) output(57,worse,99) output(57,worse,98) output(57,worse,60) output(71,worse,98) output(71,worse,60) output(51,eq,71) output(71,eq,76) output(76,eq,67) output(67,eq,52) output(78,eq,99) output(17,eq,76) output(94,eq,30) output(30,eq,71) output(98,eq,60) output(71,eq,53) output(94,eq,71) output(76,eq,52) output(71,eq,67) output(17,eq,67) output(51,eq,76) output(30,eq,76) output(57,eq,51) output(57,eq,71) output(94,eq,76) output(57,eq,76) output(51,eq,67) output(30,eq,67) output(94,eq,67) output(71,eq,52) output(17,eq,52) output(51,eq,52) output(30,eq,52) output(99,eq,98) output(78,eq,98) output(51,eq,53) output(30,eq,53) output(94,eq,53) output(99,eq,60) output(78,eq,60) output(57,eq,53) output(94,eq,52) output(57,eq,52) output(57,eq,67)
Optimization: 50 1
Answer: 4
preference(1,(1,14),1,for(atom(hasDifficulty(2))),6) preference(1,less(weight)) output(51,better,98) output(51,better,76) output(51,better,67) output(51,better,52) output(51,better,53) output(51,better,60) output(99,better,76) output(99,better,67) output(99,better,98) output(99,better,53) output(99,better,60) output(99,better,52) output(30,better,98) output(30,better,76) output(30,better,67) output(30,better,52) output(30,better,53) output(30,better,60) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,52) output(71,better,60) output(78,better,76) output(78,better,98) output(78,better,60) output(78,better,53) output(78,better,52) output(78,better,67) output(17,better,76) output(17,better,67) output(17,better,52) output(94,worse,30) output(94,worse,71) output(57,worse,99) output(57,worse,51) output(57,worse,71) output(99,eq,51) output(51,eq,71) output(76,eq,67) output(67,eq,52) output(78,eq,99) output(30,eq,71) output(98,eq,53) output(53,eq,60) output(98,eq,60) output(76,eq,52) output(99,eq,71) output(78,eq,51) output(78,eq,71) output(94,eq,76) output(57,eq,76) output(94,eq,67) output(94,eq,98) output(57,eq,98) output(94,eq,53) output(94,eq,60) output(57,eq,60) output(57,eq,53) output(94,eq,52) output(57,eq,52) output(57,eq,67)
Optimization: 30 1
Answer: 5
preference(1,(1,1),1,for(atom(hasDifficulty(2))),2) preference(1,(1,2),1,for(atom(hasPrep(0))),2) preference(1,(1,3),1,for(atom(hasPrep(6))),2) preference(1,(1,4),1,for(atom(hasPrep(2))),6) preference(1,(1,5),1,for(atom(hasIngredient(3))),6) preference(1,(1,6),1,for(atom(hasIngredient(9))),2) preference(1,(1,7),1,for(atom(hasIngredient(7))),2) preference(1,(1,8),1,for(atom(hasPrep(1))),2) preference(1,(1,9),1,for(atom(hasCategory(4))),2) preference(1,(1,10),1,for(atom(hasCategory(3))),2) preference(1,(1,11),1,for(atom(hasPrepTime(2))),4) preference(1,(1,12),1,for(atom(hasCost(2))),5) preference(1,(1,13),1,for(atom(hasCategory(1))),3) preference(1,(1,14),1,for(atom(hasPrepTime(3))),6) preference(1,less(weight)) output(51,better,52) output(67,better,52) output(94,better,67) output(94,better,52) output(98,better,53) output(98,better,60) output(99,better,51) output(99,better,76) output(99,better,67) output(99,better,53) output(99,better,60) output(99,better,52) output(30,better,76) output(30,better,67) output(30,better,52) output(57,better,51) output(57,better,76) output(57,better,52) output(57,better,67) output(71,better,76) output(71,better,53) output(71,better,67) output(71,better,52) output(71,better,60) output(78,better,51) output(78,better,76) output(78,better,60) output(78,better,53) output(78,better,52) output(78,better,67) output(17,better,76) output(17,better,67) output(17,better,52) output(76,better,67) output(76,better,52) output(51,worse,71) output(51,worse,98) output(51,worse,76) output(51,worse,53) output(51,worse,60) output(94,worse,30) output(94,worse,71) output(94,worse,98) output(94,worse,53) output(94,worse,60) output(99,worse,71) output(99,worse,98) output(30,worse,71) output(30,worse,98) output(57,worse,99) output(57,worse,71) output(57,worse,98) output(71,worse,98) output(78,worse,71) output(78,worse,98) output(78,eq,99) output(53,eq,60) output(94,eq,76) output(51,eq,67) output(30,eq,53) output(30,eq,60) output(57,eq,60) output(57,eq,53)
Optimization: 28 14
Answer: 6
preference(1,(1,1),1,for(atom(hasDifficulty(2))),6) preference(1,(1,2),1,for(atom(hasIngredient(9))),8) preference(1,(1,3),1,for(atom(hasPrep(0))),6) preference(1,(1,4),1,for(atom(hasPrep(2))),2) preference(1,(1,5),1,for(atom(hasIngredient(3))),3) preference(1,(1,6),1,for(atom(hasPrep(1))),8) preference(1,(1,7),1,for(atom(hasPrepTime(2))),4) preference(1,(1,8),1,for(atom(hasCategory(4))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),8) preference(1,(1,10),1,for(atom(hasPrep(6))),8) preference(1,(1,11),1,for(atom(hasCategory(1))),3) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,(1,13),1,for(atom(hasCost(2))),2) preference(1,(1,14),1,for(atom(hasPrepTime(3))),6) preference(1,less(weight)) output(51,better,98) output(51,better,76) output(51,better,67) output(51,better,52) output(51,better,53) output(94,better,67) output(94,better,98) output(94,better,53) output(94,better,52) output(98,better,53) output(99,better,67) output(99,better,98) output(99,better,53) output(99,better,52) output(30,better,98) output(30,better,76) output(30,better,67) output(30,better,52) output(30,better,53) output(57,better,52) output(57,better,67) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,52) output(71,better,60) output(78,better,99) output(78,better,76) output(78,better,98) output(78,better,53) output(78,better,52) output(78,better,67) output(17,better,76) output(17,better,67) output(17,better,52) output(76,better,67) output(76,better,52) output(51,worse,71) output(53,worse,60) output(94,worse,30) output(94,worse,71) output(94,worse,60) output(98,worse,60) output(99,worse,51) output(99,worse,71) output(99,worse,76) output(99,worse,60) output(30,worse,71) output(30,worse,60) output(57,worse,99) output(57,worse,51) output(57,worse,71) output(57,worse,76) output(57,worse,98) output(57,worse,60) output(78,worse,51) output(78,worse,71) output(78,worse,60) output(67,eq,52) output(94,eq,76) output(51,eq,60) output(57,eq,53)
Optimization: 25 14
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(1))),1) preference(1,(1,2),1,for(atom(hasCategory(1))),7) preference(1,(1,3),1,for(atom(hasPrepTime(2))),8) preference(1,(1,4),1,for(atom(hasIngredient(7))),8) preference(1,(1,5),1,for(atom(hasCategory(3))),2) preference(1,(1,6),1,for(atom(hasIngredient(9))),1) preference(1,(1,7),1,for(atom(hasIngredient(4))),6) preference(1,(1,8),1,for(atom(hasPrepTime(3))),1) preference(1,(1,9),1,for(atom(hasPrep(0))),2) preference(1,(1,10),1,for(atom(hasPrep(6))),5) preference(1,(1,11),1,for(atom(hasPrep(5))),6) preference(1,(1,12),1,for(atom(hasCost(2))),6) preference(1,(1,13),1,for(atom(hasCategory(5))),4) preference(1,(1,14),1,for(atom(hasDifficulty(2))),6) preference(1,less(weight)) output(51,better,98) output(51,better,76) output(51,better,67) output(51,better,52) output(51,better,53) output(51,better,60) output(53,better,60) output(94,better,30) output(94,better,76) output(94,better,67) output(94,better,98) output(94,better,53) output(94,better,60) output(94,better,52) output(98,better,60) output(99,better,51) output(99,better,71) output(99,better,76) output(99,better,67) output(99,better,98) output(99,better,53) output(99,better,60) output(99,better,52) output(30,better,67) output(30,better,60) output(57,better,60) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,52) output(71,better,60) output(78,better,76) output(78,better,98) output(78,better,60) output(78,better,53) output(78,better,52) output(78,better,67) output(17,better,67) output(17,better,52) output(76,better,67) output(76,better,52) output(51,worse,71) output(67,worse,52) output(94,worse,71) output(30,worse,71) output(30,worse,98) output(30,worse,76) output(30,worse,53) output(57,worse,99) output(57,worse,51) output(57,worse,71) output(57,worse,76) output(57,worse,98) output(57,worse,53) output(57,worse,52) output(57,worse,67) output(78,worse,99) output(78,worse,71) output(17,eq,76) output(98,eq,53) output(78,eq,51) output(30,eq,52)
Optimization: 21 14
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(5))),4) preference(1,(1,2),1,for(atom(hasCategory(1))),1) preference(1,(1,3),1,for(atom(hasCategory(5))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),6) preference(1,(1,5),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasIngredient(7))),5) preference(1,(1,7),1,for(atom(hasIngredient(3))),7) preference(1,(1,8),1,for(atom(hasIngredient(4))),5) preference(1,(1,9),1,for(atom(hasCost(1))),6) preference(1,(1,10),1,for(atom(hasIngredient(12))),5) preference(1,(1,11),1,for(atom(hasIngredient(9))),1) preference(1,(1,12),1,for(atom(hasDifficulty(1))),1) preference(1,(1,13),1,for(atom(hasPrep(1))),2) preference(1,(1,14),1,for(atom(hasPrepTime(2))),4) preference(1,less(weight)) output(51,better,71) output(51,better,98) output(51,better,76) output(51,better,67) output(51,better,52) output(51,better,53) output(51,better,60) output(67,better,52) output(53,better,60) output(94,better,30) output(94,better,71) output(94,better,76) output(94,better,67) output(94,better,98) output(94,better,53) output(94,better,60) output(94,better,52) output(98,better,53) output(98,better,60) output(99,better,51) output(99,better,71) output(99,better,76) output(99,better,67) output(99,better,98) output(99,better,53) output(99,better,60) output(99,better,52) output(30,better,71) output(30,better,98) output(30,better,76) output(30,better,67) output(30,better,52) output(30,better,53) output(30,better,60) output(57,better,99) output(57,better,51) output(57,better,71) output(57,better,76) output(57,better,98) output(57,better,60) output(57,better,53) output(57,better,52) output(57,better,67) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,52) output(71,better,60) output(78,better,99) output(78,better,51) output(78,better,71) output(78,better,76) output(78,better,98) output(78,better,60) output(78,better,53) output(78,better,52) output(78,better,67) output(17,better,76) output(17,better,67) output(17,better,52) output(76,better,67) output(76,better,52)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Progression : 0 [ 2;14] (Error: 6)
Answer: 9
preference(1,(1,1),1,for(atom(hasIngredient(3))),7) preference(1,(1,2),1,for(atom(hasPrepTime(2))),4) preference(1,(1,3),1,for(atom(hasPrep(1))),3) preference(1,(1,4),1,for(atom(hasIngredient(8))),7) preference(1,(1,6),1,for(atom(hasCategory(3))),2) preference(1,(1,7),1,for(atom(hasIngredient(12))),6) preference(1,(1,8),1,for(atom(hasDifficulty(2))),3) preference(1,(1,9),1,for(atom(hasCategory(1))),1) preference(1,(1,10),1,for(atom(hasPrepTime(3))),2) preference(1,(1,11),1,for(atom(hasPrep(5))),6) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,13),1,for(atom(hasCost(2))),1) preference(1,(1,14),1,for(atom(hasIngredient(7))),6) preference(1,less(weight)) output(51,better,71) output(51,better,98) output(51,better,76) output(51,better,67) output(51,better,52) output(51,better,53) output(51,better,60) output(67,better,52) output(53,better,60) output(94,better,30) output(94,better,71) output(94,better,76) output(94,better,67) output(94,better,98) output(94,better,53) output(94,better,60) output(94,better,52) output(98,better,53) output(98,better,60) output(99,better,51) output(99,better,71) output(99,better,76) output(99,better,67) output(99,better,98) output(99,better,53) output(99,better,60) output(99,better,52) output(30,better,71) output(30,better,98) output(30,better,76) output(30,better,67) output(30,better,52) output(30,better,53) output(30,better,60) output(57,better,99) output(57,better,51) output(57,better,71) output(57,better,76) output(57,better,98) output(57,better,60) output(57,better,53) output(57,better,52) output(57,better,67) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,52) output(71,better,60) output(78,better,99) output(78,better,51) output(78,better,71) output(78,better,76) output(78,better,98) output(78,better,60) output(78,better,53) output(78,better,52) output(78,better,67) output(17,better,76) output(17,better,67) output(17,better,52) output(76,better,67) output(76,better,52)
Optimization: 0 13
Answer: 10
preference(1,(1,1),1,for(atom(hasIngredient(3))),8) preference(1,(1,3),1,for(atom(hasIngredient(9))),2) preference(1,(1,4),1,for(atom(hasIngredient(4))),6) preference(1,(1,5),1,for(atom(hasIngredient(8))),3) preference(1,(1,6),1,for(atom(hasIngredient(7))),6) preference(1,(1,7),1,for(atom(hasIngredient(12))),6) preference(1,(1,8),1,for(atom(hasDifficulty(4))),1) preference(1,(1,9),1,for(atom(hasDifficulty(1))),2) preference(1,(1,10),1,for(atom(hasPrepTime(2))),1) preference(1,(1,11),1,for(atom(hasCost(1))),8) preference(1,(1,13),1,for(atom(hasPrep(1))),5) preference(1,(1,14),1,for(atom(hasDifficulty(2))),5) preference(1,less(weight)) output(51,better,71) output(51,better,98) output(51,better,76) output(51,better,67) output(51,better,52) output(51,better,53) output(51,better,60) output(67,better,52) output(53,better,60) output(94,better,30) output(94,better,71) output(94,better,76) output(94,better,67) output(94,better,98) output(94,better,53) output(94,better,60) output(94,better,52) output(98,better,53) output(98,better,60) output(99,better,51) output(99,better,71) output(99,better,76) output(99,better,67) output(99,better,98) output(99,better,53) output(99,better,60) output(99,better,52) output(30,better,71) output(30,better,98) output(30,better,76) output(30,better,67) output(30,better,52) output(30,better,53) output(30,better,60) output(57,better,99) output(57,better,51) output(57,better,71) output(57,better,76) output(57,better,98) output(57,better,60) output(57,better,53) output(57,better,52) output(57,better,67) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,52) output(71,better,60) output(78,better,99) output(78,better,51) output(78,better,71) output(78,better,76) output(78,better,98) output(78,better,60) output(78,better,53) output(78,better,52) output(78,better,67) output(17,better,76) output(17,better,67) output(17,better,52) output(76,better,67) output(76,better,52)
Optimization: 0 12
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(1))),8) preference(1,(1,2),1,for(atom(hasCategory(1))),5) preference(1,(1,4),1,for(atom(hasDifficulty(1))),1) preference(1,(1,5),1,for(atom(hasPrepTime(2))),1) preference(1,(1,6),1,for(atom(hasCost(3))),4) preference(1,(1,8),1,for(atom(hasIngredient(7))),5) preference(1,(1,9),1,for(atom(hasPrepTime(1))),3) preference(1,(1,10),1,for(atom(hasCost(1))),2) preference(1,(1,11),1,for(atom(hasDifficulty(2))),8) preference(1,(1,13),1,for(atom(hasIngredient(3))),6) preference(1,(1,14),1,for(atom(hasCategory(4))),1) preference(1,less(weight)) output(51,better,71) output(51,better,98) output(51,better,76) output(51,better,67) output(51,better,52) output(51,better,53) output(51,better,60) output(67,better,52) output(53,better,60) output(94,better,30) output(94,better,71) output(94,better,76) output(94,better,67) output(94,better,98) output(94,better,53) output(94,better,60) output(94,better,52) output(98,better,53) output(98,better,60) output(99,better,51) output(99,better,71) output(99,better,76) output(99,better,67) output(99,better,98) output(99,better,53) output(99,better,60) output(99,better,52) output(30,better,71) output(30,better,98) output(30,better,76) output(30,better,67) output(30,better,52) output(30,better,53) output(30,better,60) output(57,better,99) output(57,better,51) output(57,better,71) output(57,better,76) output(57,better,98) output(57,better,60) output(57,better,53) output(57,better,52) output(57,better,67) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,52) output(71,better,60) output(78,better,99) output(78,better,51) output(78,better,71) output(78,better,76) output(78,better,98) output(78,better,60) output(78,better,53) output(78,better,52) output(78,better,67) output(17,better,76) output(17,better,67) output(17,better,52) output(76,better,67) output(76,better,52)
Optimization: 0 11
Progression : 0 [ 3;11] (Error: 2.66667)
Answer: 12
preference(1,(1,1),1,for(atom(hasIngredient(7))),6) preference(1,(1,2),1,for(atom(hasCategory(4))),1) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,5),1,for(atom(hasDifficulty(4))),1) preference(1,(1,6),1,for(atom(hasCategory(1))),8) preference(1,(1,7),1,for(atom(hasIngredient(3))),8) preference(1,(1,9),1,for(atom(hasDifficulty(2))),5) preference(1,(1,11),1,for(atom(hasIngredient(12))),6) preference(1,(1,13),1,for(atom(hasPrepTime(1))),3) preference(1,(1,14),1,for(atom(hasIngredient(9))),1) preference(1,less(weight)) output(51,better,71) output(51,better,98) output(51,better,76) output(51,better,67) output(51,better,52) output(51,better,53) output(51,better,60) output(67,better,52) output(53,better,60) output(94,better,30) output(94,better,71) output(94,better,76) output(94,better,67) output(94,better,98) output(94,better,53) output(94,better,60) output(94,better,52) output(98,better,53) output(98,better,60) output(99,better,51) output(99,better,71) output(99,better,76) output(99,better,67) output(99,better,98) output(99,better,53) output(99,better,60) output(99,better,52) output(30,better,71) output(30,better,98) output(30,better,76) output(30,better,67) output(30,better,52) output(30,better,53) output(30,better,60) output(57,better,99) output(57,better,51) output(57,better,71) output(57,better,76) output(57,better,98) output(57,better,60) output(57,better,53) output(57,better,52) output(57,better,67) output(71,better,76) output(71,better,98) output(71,better,53) output(71,better,67) output(71,better,52) output(71,better,60) output(78,better,99) output(78,better,51) output(78,better,71) output(78,better,76) output(78,better,98) output(78,better,60) output(78,better,53) output(78,better,52) output(78,better,67) output(17,better,76) output(17,better,67) output(17,better,52) output(76,better,67) output(76,better,52)
Optimization: 0 10
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.080 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 12+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 598.127s (Solving: 594.88s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2381.135s
Threads      : 4        (Winner: 4)

Choices      : 12411911 (Domain: 717649)
Conflicts    : 8482077  (Analyzed: 8482074)
Restarts     : 8102     (Average: 1046.91 Last: 499010)
Model-Level  : 38.6    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 8521178  (Deleted: 8168208)
  Binary     : 736      (Ratio:   0.01%)
  Ternary    : 3236     (Ratio:   0.04%)
  Conflict   : 8482074  (Average Length:  405.3 Ratio:  99.54%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 39104    (Average Length:   44.0 Ratio:   0.46%) 
  Distributed: 13127    (Ratio:   0.15% Average LBD: 3.65) 
  Integrated : 39381    (Ratio: 300.00% Unit: 116 Average Jumps: 16.88)
Backjumps    : 8482074  (Average:  1.35 Max: 925 Sum: 11443732)
  Executed   : 8482072  (Average:  1.35 Max: 925 Sum: 11443685 Ratio: 100.00%)
  Bounded    : 2        (Average: 23.50 Max:  46 Sum:     47 Ratio:   0.00%)

Rules        : 690865  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 16768   
Bodies       : 19222   
  Sum        : 126     
  Count      : 14      
Equivalences : 8055     (Atom=Atom: 643 Body=Body: 266 Other: 7146)
Tight        : Yes
Variables    : 17163    (Eliminated:    0 Frozen: 7839)
Constraints  : 710154   (Binary:  98.2% Ternary:   1.3% Other:   0.5%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasPrep(1)) ; 
  2 :: atom(hasCategory(4)) ; 
  2 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCost(2)) ; 
  3 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(2)) ; 
  3 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  3 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  2 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasCategory(3)) ; 
  1 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasIngredient(4)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(2)) ; 
  4 :: atom(hasCategory(5)) ; 
  6 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(5)) ; 
  1 :: atom(hasCategory(1)) ; 
  4 :: atom(hasCategory(5)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasIngredient(4)) ; 
  6 :: atom(hasCost(1)) ; 
  5 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(8)) ; 
  2 :: atom(hasCategory(3)) ; 
  6 :: atom(hasIngredient(12)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCategory(1)) ; 
  2 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(2)) ; 
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasIngredient(4)) ; 
  3 :: atom(hasIngredient(8)) ; 
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCategory(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCost(3)) ; 
  5 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasCategory(4)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasIngredient(12)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasIngredient(9)) 
}.
