asprin_vL version 1.0
Reading from stdin
-:1232:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1242:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1257:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1338:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1599:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1612:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1789:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1918:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1990:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1994:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1994:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2000:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2099:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2125:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2245:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2279:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2301:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1149:1-16: info: no atoms over signature occur in program:
  output/3

-:1141:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1142:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(92,eq,58) output(58,eq,77) output(77,eq,10) output(10,eq,16) output(65,eq,79) output(84,eq,22) output(22,eq,90) output(92,eq,64) output(100,eq,58) output(51,eq,38) output(38,eq,52) output(52,eq,84) output(84,eq,24) output(52,eq,24) output(38,eq,84) output(51,eq,52) output(84,eq,90) output(52,eq,22) output(77,eq,16) output(58,eq,10) output(92,eq,77) output(100,eq,77) output(92,eq,10) output(100,eq,10) output(58,eq,16) output(92,eq,16) output(100,eq,16) output(38,eq,22) output(51,eq,22) output(52,eq,90) output(38,eq,90) output(51,eq,84) output(38,eq,24) output(51,eq,24) output(51,eq,90)
Optimization: 35 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(51,better,52) output(51,better,22) output(51,better,84) output(51,better,90) output(38,better,52) output(38,better,84) output(38,better,22) output(38,better,90) output(65,better,79) output(84,worse,24) output(92,worse,58) output(92,worse,77) output(92,worse,10) output(92,worse,16) output(100,worse,58) output(100,worse,77) output(100,worse,10) output(100,worse,16) output(52,worse,24) output(58,eq,77) output(77,eq,10) output(10,eq,16) output(84,eq,22) output(22,eq,90) output(92,eq,64) output(51,eq,38) output(52,eq,84) output(84,eq,90) output(52,eq,22) output(77,eq,16) output(58,eq,10) output(58,eq,16) output(52,eq,90) output(38,eq,24) output(51,eq,24)
Optimization: 26 14
Answer: 3
preference(1,(1,3),1,for(atom(hasIngredient(8))),8) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(10,better,16) output(51,better,22) output(51,better,24) output(84,better,22) output(84,better,24) output(38,better,22) output(38,better,24) output(77,better,16) output(92,better,16) output(100,better,16) output(52,better,24) output(52,better,22) output(58,better,16) output(22,worse,90) output(92,eq,58) output(58,eq,77) output(77,eq,10) output(65,eq,79) output(92,eq,64) output(100,eq,58) output(51,eq,38) output(38,eq,52) output(52,eq,84) output(38,eq,84) output(51,eq,52) output(84,eq,90) output(58,eq,10) output(92,eq,77) output(100,eq,77) output(92,eq,10) output(100,eq,10) output(52,eq,90) output(38,eq,90) output(51,eq,84) output(51,eq,90)
Optimization: 22 2
Answer: 4
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,2),1,for(atom(hasCategory(3))),1) preference(1,(1,3),1,for(atom(hasDifficulty(1))),1) preference(1,(1,4),1,for(atom(hasPrepTime(1))),1) preference(1,(1,6),1,for(atom(hasIngredient(9))),1) preference(1,(1,9),1,for(atom(hasPrep(1))),1) preference(1,(1,10),1,for(atom(hasDifficulty(3))),4) preference(1,(1,13),1,for(atom(hasCost(1))),4) preference(1,(1,14),1,for(atom(hasPrep(0))),1) preference(1,less(weight)) output(51,better,22) output(51,better,84) output(51,better,24) output(38,better,84) output(38,better,22) output(38,better,24) output(77,better,10) output(92,better,10) output(100,better,10) output(52,better,84) output(52,better,24) output(52,better,22) output(58,better,10) output(65,better,79) output(10,worse,16) output(22,worse,90) output(84,worse,24) output(84,worse,90) output(92,eq,58) output(58,eq,77) output(84,eq,22) output(92,eq,64) output(100,eq,58) output(51,eq,38) output(38,eq,52) output(51,eq,52) output(77,eq,16) output(92,eq,77) output(100,eq,77) output(58,eq,16) output(92,eq,16) output(100,eq,16) output(52,eq,90) output(38,eq,90) output(51,eq,90)
Optimization: 21 9
Answer: 5
preference(1,(1,3),1,for(atom(hasPrep(5))),8) preference(1,(1,6),1,for(atom(hasDifficulty(3))),8) preference(1,(1,12),1,for(atom(hasIngredient(8))),8) preference(1,less(weight)) output(51,better,22) output(51,better,24) output(84,better,22) output(84,better,24) output(38,better,22) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,10) output(92,better,16) output(100,better,10) output(100,better,16) output(52,better,24) output(52,better,22) output(58,better,10) output(58,better,16) output(22,worse,90) output(92,eq,58) output(58,eq,77) output(10,eq,16) output(65,eq,79) output(92,eq,64) output(100,eq,58) output(51,eq,38) output(38,eq,52) output(52,eq,84) output(38,eq,84) output(51,eq,52) output(84,eq,90) output(92,eq,77) output(100,eq,77) output(52,eq,90) output(38,eq,90) output(51,eq,84) output(51,eq,90)
Optimization: 19 3
Answer: 6
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,2),1,for(atom(hasCategory(3))),1) preference(1,(1,3),1,for(atom(hasDifficulty(1))),1) preference(1,(1,4),1,for(atom(hasPrepTime(1))),1) preference(1,(1,6),1,for(atom(hasIngredient(9))),1) preference(1,(1,9),1,for(atom(hasPrep(1))),1) preference(1,(1,10),1,for(atom(hasDifficulty(3))),4) preference(1,(1,12),1,for(atom(hasCost(1))),4) preference(1,(1,13),1,for(atom(hasIngredient(8))),4) preference(1,(1,14),1,for(atom(hasPrep(0))),1) preference(1,less(weight)) output(51,better,22) output(51,better,84) output(51,better,24) output(38,better,84) output(38,better,22) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,10) output(92,better,16) output(100,better,10) output(100,better,16) output(52,better,84) output(52,better,24) output(52,better,22) output(58,better,10) output(58,better,16) output(65,better,79) output(22,worse,90) output(84,worse,24) output(84,worse,90) output(92,eq,58) output(58,eq,77) output(10,eq,16) output(84,eq,22) output(92,eq,64) output(100,eq,58) output(51,eq,38) output(38,eq,52) output(51,eq,52) output(92,eq,77) output(100,eq,77) output(52,eq,90) output(38,eq,90) output(51,eq,90)
Optimization: 17 10
Answer: 7
preference(1,(1,1),1,for(atom(hasIngredient(12))),8) preference(1,(1,3),1,for(atom(hasPrep(5))),8) preference(1,(1,7),1,for(atom(hasCategory(4))),8) preference(1,(1,14),1,for(atom(hasPrep(7))),8) preference(1,less(weight)) output(51,better,52) output(51,better,22) output(51,better,24) output(51,better,90) output(84,better,22) output(84,better,24) output(84,better,90) output(38,better,52) output(38,better,22) output(38,better,90) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,58) output(92,better,64) output(92,better,10) output(92,better,16) output(100,better,58) output(100,better,10) output(100,better,16) output(52,worse,84) output(58,worse,77) output(65,worse,79) output(10,eq,16) output(22,eq,90) output(51,eq,38) output(52,eq,24) output(38,eq,84) output(52,eq,22) output(58,eq,10) output(92,eq,77) output(100,eq,77) output(58,eq,16) output(52,eq,90) output(51,eq,84)
Optimization: 15 4
Answer: 8
preference(1,(1,1),1,for(atom(hasCost(1))),8) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasPrep(7))),7) preference(1,(1,4),1,for(atom(hasIngredient(12))),7) preference(1,(1,5),1,for(atom(hasCost(3))),7) preference(1,(1,6),1,for(atom(hasPrep(5))),7) preference(1,(1,7),1,for(atom(hasPrep(3))),7) preference(1,(1,8),1,for(atom(hasIngredient(8))),8) preference(1,(1,9),1,for(atom(hasDifficulty(3))),8) preference(1,(1,10),1,for(atom(hasCategory(5))),7) preference(1,(1,11),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasIngredient(10))),8) preference(1,less(weight)) output(51,better,38) output(51,better,52) output(51,better,22) output(51,better,84) output(51,better,24) output(51,better,90) output(84,better,22) output(84,better,24) output(38,better,84) output(38,better,22) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,58) output(92,better,64) output(92,better,77) output(92,better,10) output(92,better,16) output(100,better,58) output(100,better,77) output(100,better,10) output(100,better,16) output(52,better,84) output(52,better,24) output(52,better,22) output(58,better,10) output(58,better,16) output(65,better,79) output(22,worse,90) output(84,worse,90) output(58,eq,77) output(10,eq,16) output(38,eq,52) output(52,eq,90) output(38,eq,90)
Optimization: 7 12
Answer: 9
preference(1,(1,1),1,for(atom(hasPrepTime(1))),4) preference(1,(1,2),1,for(atom(hasPrep(0))),1) preference(1,(1,3),1,for(atom(hasPrep(3))),2) preference(1,(1,4),1,for(atom(hasDifficulty(3))),6) preference(1,(1,5),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasPrepTime(2))),4) preference(1,(1,7),1,for(atom(hasPrep(5))),6) preference(1,(1,8),1,for(atom(hasCategory(3))),3) preference(1,(1,9),1,for(atom(hasCategory(5))),7) preference(1,(1,10),1,for(atom(hasIngredient(7))),2) preference(1,(1,11),1,for(atom(hasPrep(2))),5) preference(1,(1,12),1,for(atom(hasCost(1))),1) preference(1,(1,13),1,for(atom(hasPrep(6))),1) preference(1,(1,14),1,for(atom(hasCategory(4))),6) preference(1,less(weight)) output(10,better,16) output(22,better,90) output(51,better,38) output(51,better,52) output(51,better,22) output(51,better,84) output(51,better,24) output(51,better,90) output(84,better,22) output(84,better,24) output(84,better,90) output(38,better,52) output(38,better,84) output(38,better,22) output(38,better,90) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,58) output(92,better,64) output(92,better,77) output(92,better,10) output(92,better,16) output(100,better,58) output(100,better,77) output(100,better,10) output(100,better,16) output(52,better,84) output(52,better,24) output(52,better,22) output(52,better,90) output(58,better,77) output(58,better,10) output(58,better,16) output(65,better,79)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 10
preference(1,(1,1),1,for(atom(hasPrepTime(3))),1) preference(1,(1,2),1,for(atom(hasPrep(7))),7) preference(1,(1,3),1,for(atom(hasPrep(5))),8) preference(1,(1,4),1,for(atom(hasCost(1))),3) preference(1,(1,5),1,for(atom(hasPrep(2))),5) preference(1,(1,7),1,for(atom(hasCategory(4))),7) preference(1,(1,8),1,for(atom(hasIngredient(12))),7) preference(1,(1,9),1,for(atom(hasIngredient(10))),2) preference(1,(1,10),1,for(atom(hasIngredient(3))),2) preference(1,(1,11),1,for(atom(hasPrepTime(1))),6) preference(1,(1,12),1,for(atom(hasCategory(3))),5) preference(1,(1,13),1,for(atom(hasPrep(0))),5) preference(1,(1,14),1,for(atom(hasPrepTime(2))),4) preference(1,less(weight)) output(10,better,16) output(22,better,90) output(51,better,38) output(51,better,52) output(51,better,22) output(51,better,84) output(51,better,24) output(51,better,90) output(84,better,22) output(84,better,24) output(84,better,90) output(38,better,52) output(38,better,84) output(38,better,22) output(38,better,90) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,58) output(92,better,64) output(92,better,77) output(92,better,10) output(92,better,16) output(100,better,58) output(100,better,77) output(100,better,10) output(100,better,16) output(52,better,84) output(52,better,24) output(52,better,22) output(52,better,90) output(58,better,77) output(58,better,10) output(58,better,16) output(65,better,79)
Optimization: 0 13
Answer: 11
preference(1,(1,2),1,for(atom(hasPrep(7))),7) preference(1,(1,3),1,for(atom(hasPrep(5))),8) preference(1,(1,4),1,for(atom(hasPrepTime(1))),6) preference(1,(1,5),1,for(atom(hasPrep(2))),5) preference(1,(1,6),1,for(atom(hasCost(1))),3) preference(1,(1,7),1,for(atom(hasCategory(4))),7) preference(1,(1,8),1,for(atom(hasIngredient(12))),7) preference(1,(1,9),1,for(atom(hasIngredient(10))),2) preference(1,(1,10),1,for(atom(hasIngredient(3))),2) preference(1,(1,12),1,for(atom(hasPrepTime(3))),1) preference(1,(1,13),1,for(atom(hasPrep(0))),5) preference(1,(1,14),1,for(atom(hasPrepTime(2))),4) preference(1,less(weight)) output(10,better,16) output(22,better,90) output(51,better,38) output(51,better,52) output(51,better,22) output(51,better,84) output(51,better,24) output(51,better,90) output(84,better,22) output(84,better,24) output(84,better,90) output(38,better,52) output(38,better,84) output(38,better,22) output(38,better,90) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,58) output(92,better,64) output(92,better,77) output(92,better,10) output(92,better,16) output(100,better,58) output(100,better,77) output(100,better,10) output(100,better,16) output(52,better,84) output(52,better,24) output(52,better,22) output(52,better,90) output(58,better,77) output(58,better,10) output(58,better,16) output(65,better,79)
Optimization: 0 12
Progression : 0 [ 2;12] (Error: 5)
Answer: 12
preference(1,(1,1),1,for(atom(hasPrepTime(1))),4) preference(1,(1,2),1,for(atom(hasCost(2))),1) preference(1,(1,5),1,for(atom(hasIngredient(3))),1) preference(1,(1,6),1,for(atom(hasPrep(5))),7) preference(1,(1,7),1,for(atom(hasIngredient(10))),1) preference(1,(1,8),1,for(atom(hasPrep(7))),6) preference(1,(1,9),1,for(atom(hasCategory(4))),6) preference(1,(1,10),1,for(atom(hasIngredient(8))),8) preference(1,(1,11),1,for(atom(hasPrep(2))),4) preference(1,(1,12),1,for(atom(hasDifficulty(1))),3) preference(1,(1,14),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(10,better,16) output(22,better,90) output(51,better,38) output(51,better,52) output(51,better,22) output(51,better,84) output(51,better,24) output(51,better,90) output(84,better,22) output(84,better,24) output(84,better,90) output(38,better,52) output(38,better,84) output(38,better,22) output(38,better,90) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,58) output(92,better,64) output(92,better,77) output(92,better,10) output(92,better,16) output(100,better,58) output(100,better,77) output(100,better,10) output(100,better,16) output(52,better,84) output(52,better,24) output(52,better,22) output(52,better,90) output(58,better,77) output(58,better,10) output(58,better,16) output(65,better,79)
Optimization: 0 11
Answer: 13
preference(1,(1,1),1,for(atom(hasIngredient(12))),6) preference(1,(1,2),1,for(atom(hasCategory(1))),2) preference(1,(1,6),1,for(atom(hasPrepTime(1))),7) preference(1,(1,7),1,for(atom(hasCost(1))),3) preference(1,(1,8),1,for(atom(hasPrep(5))),5) preference(1,(1,9),1,for(atom(hasCategory(4))),6) preference(1,(1,11),1,for(atom(hasIngredient(10))),4) preference(1,(1,12),1,for(atom(hasPrep(2))),4) preference(1,(1,13),1,for(atom(hasPrep(7))),6) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(10,better,16) output(22,better,90) output(51,better,38) output(51,better,52) output(51,better,22) output(51,better,84) output(51,better,24) output(51,better,90) output(84,better,22) output(84,better,24) output(84,better,90) output(38,better,52) output(38,better,84) output(38,better,22) output(38,better,90) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,58) output(92,better,64) output(92,better,77) output(92,better,10) output(92,better,16) output(100,better,58) output(100,better,77) output(100,better,10) output(100,better,16) output(52,better,84) output(52,better,24) output(52,better,22) output(52,better,90) output(58,better,77) output(58,better,10) output(58,better,16) output(65,better,79)
Optimization: 0 10
Answer: 14
preference(1,(1,3),1,for(atom(hasPrep(2))),6) preference(1,(1,4),1,for(atom(hasPrepTime(2))),4) preference(1,(1,5),1,for(atom(hasIngredient(12))),5) preference(1,(1,8),1,for(atom(hasPrep(5))),8) preference(1,(1,9),1,for(atom(hasCategory(4))),5) preference(1,(1,11),1,for(atom(hasDifficulty(3))),5) preference(1,(1,12),1,for(atom(hasIngredient(10))),6) preference(1,(1,13),1,for(atom(hasPrepTime(1))),7) preference(1,less(weight)) output(10,better,16) output(22,better,90) output(51,better,38) output(51,better,52) output(51,better,22) output(51,better,84) output(51,better,24) output(51,better,90) output(84,better,22) output(84,better,24) output(84,better,90) output(38,better,52) output(38,better,84) output(38,better,22) output(38,better,90) output(38,better,24) output(77,better,10) output(77,better,16) output(92,better,58) output(92,better,64) output(92,better,77) output(92,better,10) output(92,better,16) output(100,better,58) output(100,better,77) output(100,better,10) output(100,better,16) output(52,better,84) output(52,better,24) output(52,better,22) output(52,better,90) output(58,better,77) output(58,better,10) output(58,better,16) output(65,better,79)
Optimization: 0 8
Progression : 0 [3;8] (Error: 1.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.107 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 14+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 598.179s (Solving: 595.38s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2383.871s
Threads      : 4        (Winner: 4)

Choices      : 10854949 (Domain: 573207)
Conflicts    : 8039971  (Analyzed: 8039968)
Restarts     : 6841     (Average: 1175.26 Last: 563807)
Model-Level  : 103.4   
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 8059274  (Deleted: 7722620)
  Binary     : 1228     (Ratio:   0.02%)
  Ternary    : 2989     (Ratio:   0.04%)
  Conflict   : 8039968  (Average Length:  408.7 Ratio:  99.76%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 19306    (Average Length:   36.3 Ratio:   0.24%) 
  Distributed: 6439     (Ratio:   0.08% Average LBD: 3.57) 
  Integrated : 19317    (Ratio: 300.00% Unit: 49 Average Jumps: 8.82)
Backjumps    : 8039968  (Average:  1.27 Max: 914 Sum: 10243821)
  Executed   : 8039967  (Average:  1.27 Max: 914 Sum: 10243799 Ratio: 100.00%)
  Bounded    : 1        (Average: 22.00 Max:  22 Sum:     22 Ratio:   0.00%)

Rules        : 429653  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14040   
Bodies       : 18914   
  Sum        : 70      
  Count      : 14      
Equivalences : 7075     (Atom=Atom: 363 Body=Body: 154 Other: 6558)
Tight        : Yes
Variables    : 17067    (Eliminated:    0 Frozen: 7743)
Constraints  : 451506   (Binary:  97.1% Ternary:   2.1% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(8)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrep(1)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrep(1)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasCost(1)) ; 
  4 :: atom(hasIngredient(8)) ; 
  1 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(3)) ; 
  8 :: atom(hasIngredient(8)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasIngredient(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(3)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCategory(5)) ; 
  2 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasPrep(2)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasIngredient(10)) ; 
  2 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasCategory(3)) ; 
  5 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(2)) ; 
  3 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasIngredient(10)) ; 
  2 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(8)) ; 
  4 :: atom(hasPrep(2)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(4)) ; 
  4 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasCategory(4)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrepTime(1)) 
}.
