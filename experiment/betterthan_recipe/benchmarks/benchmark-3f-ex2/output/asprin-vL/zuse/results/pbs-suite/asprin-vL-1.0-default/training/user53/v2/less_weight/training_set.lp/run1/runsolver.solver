asprin_vL version 1.0
Reading from stdin
-:1221:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1231:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1246:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1327:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1588:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1601:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1778:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1907:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1979:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1983:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1983:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1989:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2088:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2114:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2234:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2268:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2290:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1138:1-16: info: no atoms over signature occur in program:
  output/3

-:1130:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1131:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(65,eq,10) output(10,eq,16) output(22,eq,84) output(84,eq,79) output(58,eq,92) output(92,eq,77) output(100,eq,24) output(24,eq,92) output(92,eq,38) output(51,eq,64) output(75,eq,52) output(52,eq,84) output(75,eq,84) output(58,eq,38) output(24,eq,38) output(100,eq,92) output(58,eq,77) output(24,eq,77) output(22,eq,79) output(52,eq,79) output(65,eq,16) output(75,eq,79) output(100,eq,77) output(100,eq,38)
Optimization: 24 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrep(0))),2) preference(1,less(weight)) output(22,better,79) output(51,better,64) output(84,better,79) output(52,better,79) output(58,better,92) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,79) output(24,better,92) output(24,better,38) output(24,better,77) output(100,worse,24) output(10,eq,16) output(22,eq,84) output(92,eq,77) output(92,eq,38) output(75,eq,52) output(52,eq,84) output(75,eq,84) output(100,eq,92) output(100,eq,77) output(100,eq,38)
Optimization: 11 14
Answer: 3
preference(1,(1,1),1,for(atom(hasIngredient(10))),7) preference(1,(1,3),1,for(atom(hasCategory(2))),7) preference(1,(1,5),1,for(atom(hasCategory(5))),7) preference(1,(1,6),1,for(atom(hasCost(5))),7) preference(1,(1,7),1,for(atom(hasIngredient(4))),7) preference(1,(1,8),1,for(atom(hasPrepTime(1))),7) preference(1,(1,9),1,for(atom(hasDifficulty(3))),7) preference(1,(1,10),1,for(atom(hasPrep(3))),7) preference(1,(1,11),1,for(atom(hasIngredient(8))),7) preference(1,(1,12),1,for(atom(hasIngredient(1))),7) preference(1,(1,13),1,for(atom(hasIngredient(2))),7) preference(1,less(weight)) output(22,better,84) output(22,better,79) output(92,better,77) output(92,better,38) output(100,better,24) output(100,better,77) output(100,better,38) output(52,better,84) output(52,better,79) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,84) output(75,better,79) output(24,worse,92) output(10,eq,16) output(84,eq,79) output(58,eq,92) output(51,eq,64) output(75,eq,52) output(24,eq,38) output(100,eq,92) output(24,eq,77)
Optimization: 9 11
Answer: 4
preference(1,(1,1),1,for(atom(hasPrepTime(1))),7) preference(1,(1,3),1,for(atom(hasIngredient(8))),7) preference(1,(1,5),1,for(atom(hasDifficulty(4))),7) preference(1,(1,6),1,for(atom(hasIngredient(2))),7) preference(1,(1,7),1,for(atom(hasIngredient(4))),7) preference(1,(1,8),1,for(atom(hasCategory(2))),7) preference(1,(1,9),1,for(atom(hasCost(5))),7) preference(1,(1,10),1,for(atom(hasPrep(3))),7) preference(1,(1,11),1,for(atom(hasIngredient(10))),7) preference(1,(1,12),1,for(atom(hasIngredient(6))),7) preference(1,(1,13),1,for(atom(hasPrep(2))),7) preference(1,less(weight)) output(22,better,84) output(22,better,79) output(92,better,77) output(92,better,38) output(100,better,77) output(100,better,38) output(52,better,84) output(52,better,79) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,84) output(75,better,79) output(24,better,38) output(24,better,77) output(51,worse,64) output(10,eq,16) output(84,eq,79) output(58,eq,92) output(100,eq,24) output(24,eq,92) output(75,eq,52) output(100,eq,92)
Optimization: 8 11
Answer: 5
preference(1,(1,1),1,for(atom(hasCost(2))),8) preference(1,(1,2),1,for(atom(hasCategory(3))),7) preference(1,(1,3),1,for(atom(hasCost(4))),7) preference(1,(1,5),1,for(atom(hasPrep(4))),7) preference(1,(1,7),1,for(atom(hasCategory(5))),8) preference(1,(1,8),1,for(atom(hasIngredient(8))),7) preference(1,(1,10),1,for(atom(hasPrep(3))),7) preference(1,(1,11),1,for(atom(hasPrepTime(1))),7) preference(1,(1,12),1,for(atom(hasCategory(2))),7) preference(1,(1,13),1,for(atom(hasIngredient(10))),8) preference(1,less(weight)) output(10,better,16) output(22,better,84) output(22,better,79) output(51,better,64) output(84,better,79) output(100,better,24) output(100,better,92) output(100,better,77) output(100,better,38) output(52,better,79) output(58,better,92) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,52) output(75,better,84) output(75,better,79) output(24,better,92) output(24,better,38) output(24,better,77) output(92,eq,77) output(92,eq,38) output(52,eq,84)
Optimization: 3 10
Answer: 6
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,3),1,for(atom(hasIngredient(10))),8) preference(1,(1,5),1,for(atom(hasIngredient(1))),7) preference(1,(1,7),1,for(atom(hasIngredient(8))),7) preference(1,(1,8),1,for(atom(hasPrep(3))),7) preference(1,(1,10),1,for(atom(hasCategory(5))),7) preference(1,(1,11),1,for(atom(hasCost(2))),8) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasPrep(5))),7) preference(1,(1,14),1,for(atom(hasDifficulty(1))),7) preference(1,less(weight)) output(10,better,16) output(22,better,84) output(22,better,79) output(51,better,64) output(92,better,77) output(92,better,38) output(100,better,24) output(100,better,92) output(100,better,77) output(100,better,38) output(52,better,84) output(52,better,79) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,52) output(75,better,84) output(75,better,79) output(24,better,92) output(24,better,38) output(24,better,77) output(84,eq,79) output(58,eq,92)
Optimization: 2 10
Answer: 7
preference(1,(1,1),1,for(atom(hasCategory(3))),8) preference(1,(1,2),1,for(atom(hasIngredient(7))),6) preference(1,(1,3),1,for(atom(hasCategory(4))),6) preference(1,(1,4),1,for(atom(hasPrep(0))),8) preference(1,(1,5),1,for(atom(hasIngredient(10))),7) preference(1,(1,6),1,for(atom(hasCategory(5))),7) preference(1,(1,7),1,for(atom(hasDifficulty(1))),6) preference(1,(1,8),1,for(atom(hasCost(1))),6) preference(1,(1,11),1,for(atom(hasPrepTime(1))),7) preference(1,(1,14),1,for(atom(hasIngredient(9))),6) preference(1,less(weight)) output(10,better,16) output(22,better,84) output(22,better,79) output(51,better,64) output(84,better,79) output(92,better,77) output(92,better,38) output(100,better,24) output(100,better,92) output(100,better,77) output(100,better,38) output(52,better,84) output(52,better,79) output(58,better,92) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,84) output(75,better,79) output(24,better,92) output(24,better,38) output(24,better,77) output(75,eq,52)
Optimization: 1 10
Answer: 8
preference(1,(1,1),1,for(atom(hasIngredient(7))),3) preference(1,(1,2),1,for(atom(hasPrep(0))),4) preference(1,(1,3),1,for(atom(hasCategory(5))),7) preference(1,(1,4),1,for(atom(hasCategory(3))),4) preference(1,(1,5),1,for(atom(hasIngredient(3))),3) preference(1,(1,6),1,for(atom(hasCost(2))),4) preference(1,(1,7),1,for(atom(hasIngredient(9))),2) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasPrepTime(2))),5) preference(1,(1,10),1,for(atom(hasIngredient(10))),6) preference(1,(1,11),1,for(atom(hasCost(1))),7) preference(1,(1,12),1,for(atom(hasDifficulty(1))),8) preference(1,(1,13),1,for(atom(hasPrepTime(1))),4) preference(1,(1,14),1,for(atom(hasCategory(4))),2) preference(1,less(weight)) output(10,better,16) output(22,better,84) output(22,better,79) output(51,better,64) output(84,better,79) output(92,better,77) output(92,better,38) output(100,better,24) output(100,better,92) output(100,better,77) output(100,better,38) output(52,better,84) output(52,better,79) output(58,better,92) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,52) output(75,better,84) output(75,better,79) output(24,better,92) output(24,better,38) output(24,better,77)
Optimization: 0 14
Answer: 9
preference(1,(1,1),1,for(atom(hasIngredient(7))),3) preference(1,(1,2),1,for(atom(hasPrep(0))),4) preference(1,(1,4),1,for(atom(hasCategory(3))),4) preference(1,(1,5),1,for(atom(hasIngredient(3))),3) preference(1,(1,6),1,for(atom(hasCost(2))),4) preference(1,(1,7),1,for(atom(hasIngredient(9))),2) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasPrepTime(2))),5) preference(1,(1,10),1,for(atom(hasCategory(5))),7) preference(1,(1,11),1,for(atom(hasIngredient(10))),7) preference(1,(1,12),1,for(atom(hasDifficulty(1))),8) preference(1,(1,13),1,for(atom(hasPrepTime(1))),4) preference(1,(1,14),1,for(atom(hasCategory(4))),2) preference(1,less(weight)) output(10,better,16) output(22,better,84) output(22,better,79) output(51,better,64) output(84,better,79) output(92,better,77) output(92,better,38) output(100,better,24) output(100,better,92) output(100,better,77) output(100,better,38) output(52,better,84) output(52,better,79) output(58,better,92) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,52) output(75,better,84) output(75,better,79) output(24,better,92) output(24,better,38) output(24,better,77)
Optimization: 0 13
Progression : 0 [ 1;13] (Error: 12)
Answer: 10
preference(1,(1,1),1,for(atom(hasIngredient(7))),3) preference(1,(1,2),1,for(atom(hasPrep(0))),4) preference(1,(1,4),1,for(atom(hasCategory(3))),4) preference(1,(1,5),1,for(atom(hasIngredient(3))),3) preference(1,(1,6),1,for(atom(hasCost(2))),4) preference(1,(1,7),1,for(atom(hasIngredient(9))),2) preference(1,(1,8),1,for(atom(hasCategory(5))),7) preference(1,(1,9),1,for(atom(hasPrepTime(2))),5) preference(1,(1,10),1,for(atom(hasIngredient(10))),7) preference(1,(1,12),1,for(atom(hasDifficulty(1))),8) preference(1,(1,13),1,for(atom(hasPrepTime(1))),4) preference(1,(1,14),1,for(atom(hasCategory(4))),2) preference(1,less(weight)) output(10,better,16) output(22,better,84) output(22,better,79) output(51,better,64) output(84,better,79) output(92,better,77) output(92,better,38) output(100,better,24) output(100,better,92) output(100,better,77) output(100,better,38) output(52,better,84) output(52,better,79) output(58,better,92) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,52) output(75,better,84) output(75,better,79) output(24,better,92) output(24,better,38) output(24,better,77)
Optimization: 0 12
Answer: 11
preference(1,(1,1),1,for(atom(hasIngredient(10))),6) preference(1,(1,2),1,for(atom(hasPrep(0))),4) preference(1,(1,4),1,for(atom(hasCategory(3))),4) preference(1,(1,5),1,for(atom(hasIngredient(3))),3) preference(1,(1,6),1,for(atom(hasCost(2))),4) preference(1,(1,7),1,for(atom(hasIngredient(9))),2) preference(1,(1,8),1,for(atom(hasCategory(5))),7) preference(1,(1,9),1,for(atom(hasPrepTime(2))),5) preference(1,(1,12),1,for(atom(hasDifficulty(1))),8) preference(1,(1,13),1,for(atom(hasPrepTime(1))),4) preference(1,(1,14),1,for(atom(hasCategory(4))),2) preference(1,less(weight)) output(10,better,16) output(22,better,84) output(22,better,79) output(51,better,64) output(84,better,79) output(92,better,77) output(92,better,38) output(100,better,24) output(100,better,92) output(100,better,77) output(100,better,38) output(52,better,84) output(52,better,79) output(58,better,92) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,52) output(75,better,84) output(75,better,79) output(24,better,92) output(24,better,38) output(24,better,77)
Optimization: 0 11
Answer: 12
preference(1,(1,2),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasPrepTime(1))),2) preference(1,(1,5),1,for(atom(hasPrep(5))),7) preference(1,(1,6),1,for(atom(hasIngredient(10))),8) preference(1,(1,11),1,for(atom(hasDifficulty(1))),2) preference(1,(1,12),1,for(atom(hasCost(2))),8) preference(1,(1,14),1,for(atom(hasPrep(0))),1) preference(1,less(weight)) output(10,better,16) output(22,better,84) output(22,better,79) output(51,better,64) output(84,better,79) output(92,better,77) output(92,better,38) output(100,better,24) output(100,better,92) output(100,better,77) output(100,better,38) output(52,better,84) output(52,better,79) output(58,better,92) output(58,better,38) output(58,better,77) output(65,better,10) output(65,better,16) output(75,better,52) output(75,better,84) output(75,better,79) output(24,better,92) output(24,better,38) output(24,better,77)
Optimization: 0 7
Progression : 0 [2;7] (Error: 2.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.042 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 12+
  Optimum    : unknown
Optimization : 0 7
Calls        : 1
Time         : 298.231s (Solving: 295.61s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1180.486s
Threads      : 4        (Winner: 4)

Choices      : 5718196  (Domain: 87658)
Conflicts    : 3018045  (Analyzed: 3018043)
Restarts     : 3198     (Average: 943.73 Last: 37525)
Model-Level  : 39.7    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 3021024  (Deleted: 2774061)
  Binary     : 196      (Ratio:   0.01%)
  Ternary    : 208      (Ratio:   0.01%)
  Conflict   : 3018043  (Average Length:  577.2 Ratio:  99.90%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 2981     (Average Length:  119.5 Ratio:   0.10%) 
  Distributed: 994      (Ratio:   0.03% Average LBD: 3.57) 
  Integrated : 2982     (Ratio: 300.00% Unit: 1 Average Jumps: 2.00)
Backjumps    : 3018043  (Average:  1.70 Max: 807 Sum: 5115741)
  Executed   : 3018042  (Average:  1.70 Max: 807 Sum: 5115727 Ratio: 100.00%)
  Bounded    : 1        (Average: 14.00 Max:  14 Sum:     14 Ratio:   0.00%)

Rules        : 326470  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 12962   
Bodies       : 18793   
  Sum        : 48      
  Count      : 14      
Equivalences : 6690     (Atom=Atom: 253 Body=Body: 110 Other: 6327)
Tight        : Yes
Variables    : 17023    (Eliminated:    0 Frozen: 7699)
Constraints  : 349324   (Binary:  96.3% Ternary:   2.7% Other:   1.0%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasCost(5)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(3)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasIngredient(1)) ; 
  7 :: atom(hasIngredient(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasIngredient(2)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasCost(5)) ; 
  7 :: atom(hasPrep(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasIngredient(6)) ; 
  7 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(2)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(4)) ; 
  8 :: atom(hasCategory(5)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasPrep(3)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCategory(2)) ; 
  8 :: atom(hasIngredient(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasIngredient(1)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasPrep(3)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(5)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasPrep(0)) ; 
  7 :: atom(hasCategory(5)) ; 
  4 :: atom(hasCategory(3)) ; 
  3 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasCategory(3)) ; 
  3 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasCategory(3)) ; 
  3 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasCategory(5)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasCategory(3)) ; 
  3 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasCategory(5)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(10)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(0)) 
}.
