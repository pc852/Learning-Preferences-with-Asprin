asprin_vL version 1.0
Reading from stdin
-:1237:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1247:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1262:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1343:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1604:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1617:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1794:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1923:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1995:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1999:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1999:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2005:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2104:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2130:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2250:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2284:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2306:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1154:1-16: info: no atoms over signature occur in program:
  output/3

-:1146:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1147:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(9,eq,75) output(33,eq,90) output(90,eq,100) output(16,eq,79) output(79,eq,67) output(67,eq,44) output(90,eq,65) output(65,eq,10) output(10,eq,16) output(16,eq,22) output(84,eq,79) output(92,eq,77) output(10,eq,22) output(65,eq,16) output(90,eq,10) output(33,eq,65) output(79,eq,44) output(16,eq,67) output(84,eq,67) output(10,eq,79) output(33,eq,100) output(65,eq,79) output(90,eq,79) output(10,eq,67) output(65,eq,67) output(16,eq,44) output(84,eq,44) output(10,eq,44) output(33,eq,10) output(90,eq,16) output(33,eq,16) output(65,eq,22) output(90,eq,22) output(33,eq,22) output(65,eq,44) output(90,eq,44) output(33,eq,44) output(90,eq,67) output(33,eq,67) output(33,eq,79)
Optimization: 40 0
Answer: 2
preference(1,(1,1),1,for(atom(hasPrep(7))),2) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,10),1,for(atom(hasDifficulty(2))),7) preference(1,less(weight)) output(79,better,67) output(33,better,65) output(33,better,10) output(90,better,65) output(90,better,10) output(10,worse,16) output(10,worse,22) output(10,worse,79) output(10,worse,67) output(10,worse,44) output(67,worse,44) output(84,worse,79) output(84,worse,44) output(92,worse,77) output(16,worse,79) output(16,worse,22) output(16,worse,44) output(33,worse,22) output(33,worse,44) output(33,worse,79) output(65,worse,16) output(65,worse,79) output(65,worse,67) output(65,worse,22) output(65,worse,44) output(90,worse,79) output(90,worse,22) output(90,worse,44) output(9,eq,75) output(33,eq,90) output(90,eq,100) output(65,eq,10) output(79,eq,44) output(16,eq,67) output(84,eq,67) output(33,eq,100) output(90,eq,16) output(33,eq,16) output(90,eq,67) output(33,eq,67)
Optimization: 35 3
Answer: 3
preference(1,(1,13),1,for(atom(hasIngredient(4))),8) preference(1,less(weight)) output(10,better,67) output(84,better,67) output(79,better,67) output(16,better,67) output(33,better,67) output(65,better,67) output(90,better,67) output(67,worse,44) output(9,eq,75) output(33,eq,90) output(90,eq,100) output(16,eq,79) output(90,eq,65) output(65,eq,10) output(10,eq,16) output(16,eq,22) output(84,eq,79) output(92,eq,77) output(10,eq,22) output(65,eq,16) output(90,eq,10) output(33,eq,65) output(79,eq,44) output(10,eq,79) output(33,eq,100) output(65,eq,79) output(90,eq,79) output(16,eq,44) output(84,eq,44) output(10,eq,44) output(33,eq,10) output(90,eq,16) output(33,eq,16) output(65,eq,22) output(90,eq,22) output(33,eq,22) output(65,eq,44) output(90,eq,44) output(33,eq,44) output(33,eq,79)
Optimization: 33 1
Answer: 4
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrep(6))),2) preference(1,less(weight)) output(10,better,16) output(10,better,79) output(10,better,44) output(67,better,44) output(84,better,79) output(84,better,44) output(90,better,100) output(90,better,65) output(90,better,79) output(90,better,16) output(90,better,44) output(79,worse,67) output(92,worse,77) output(16,worse,22) output(16,worse,67) output(33,worse,90) output(33,worse,10) output(33,worse,22) output(33,worse,67) output(65,worse,10) output(65,worse,67) output(65,worse,22) output(9,eq,75) output(16,eq,79) output(10,eq,22) output(65,eq,16) output(90,eq,10) output(33,eq,65) output(79,eq,44) output(84,eq,67) output(33,eq,100) output(65,eq,79) output(10,eq,67) output(16,eq,44) output(33,eq,16) output(90,eq,22) output(65,eq,44) output(33,eq,44) output(90,eq,67) output(33,eq,79)
Optimization: 29 14
Answer: 5
preference(1,(1,3),1,for(atom(hasIngredient(4))),8) preference(1,(1,6),1,for(atom(hasPrep(4))),8) preference(1,(1,12),1,for(atom(hasPrep(3))),8) preference(1,less(weight)) output(10,better,16) output(10,better,67) output(84,better,67) output(79,better,67) output(33,better,100) output(33,better,16) output(33,better,67) output(65,better,16) output(65,better,67) output(90,better,100) output(90,better,16) output(90,better,67) output(67,worse,44) output(16,worse,79) output(16,worse,22) output(16,worse,44) output(9,eq,75) output(33,eq,90) output(90,eq,65) output(65,eq,10) output(84,eq,79) output(92,eq,77) output(10,eq,22) output(90,eq,10) output(33,eq,65) output(79,eq,44) output(16,eq,67) output(10,eq,79) output(65,eq,79) output(90,eq,79) output(84,eq,44) output(10,eq,44) output(33,eq,10) output(65,eq,22) output(90,eq,22) output(33,eq,22) output(65,eq,44) output(90,eq,44) output(33,eq,44) output(33,eq,79)
Optimization: 28 3
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(7))),2) preference(1,(1,2),1,for(atom(hasPrep(4))),2) preference(1,(1,3),1,for(atom(hasCost(1))),7) preference(1,(1,4),1,for(atom(hasPrepTime(1))),2) preference(1,(1,5),1,for(atom(hasPrep(5))),2) preference(1,(1,6),1,for(atom(hasPrep(3))),2) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,8),1,for(atom(hasIngredient(4))),2) preference(1,(1,9),1,for(atom(hasDifficulty(1))),7) preference(1,(1,10),1,for(atom(hasCategory(3))),2) preference(1,(1,11),1,for(atom(hasIngredient(8))),7) preference(1,(1,12),1,for(atom(hasCost(4))),7) preference(1,(1,13),1,for(atom(hasPrepTime(2))),7) preference(1,less(weight)) output(84,better,79) output(84,better,67) output(33,better,100) output(33,better,10) output(33,better,16) output(33,better,22) output(33,better,67) output(33,better,79) output(65,better,10) output(65,better,16) output(65,better,79) output(65,better,67) output(65,better,22) output(90,better,100) output(90,better,10) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,67) output(10,worse,44) output(67,worse,44) output(84,worse,44) output(9,worse,75) output(79,worse,44) output(16,worse,44) output(33,worse,65) output(33,worse,44) output(65,worse,44) output(90,worse,65) output(90,worse,44) output(33,eq,90) output(16,eq,79) output(79,eq,67) output(10,eq,16) output(16,eq,22) output(92,eq,77) output(10,eq,22) output(16,eq,67) output(10,eq,79) output(10,eq,67)
Optimization: 21 13
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(7))),2) preference(1,(1,2),1,for(atom(hasPrepTime(1))),7) preference(1,(1,3),1,for(atom(hasPrep(4))),2) preference(1,(1,4),1,for(atom(hasPrep(3))),7) preference(1,(1,5),1,for(atom(hasIngredient(4))),7) preference(1,(1,6),1,for(atom(hasCost(4))),7) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),7) preference(1,(1,9),1,for(atom(hasIngredient(8))),2) preference(1,(1,10),1,for(atom(hasCategory(3))),2) preference(1,(1,11),1,for(atom(hasIngredient(10))),7) preference(1,(1,12),1,for(atom(hasCost(1))),7) preference(1,(1,13),1,for(atom(hasPrep(5))),2) preference(1,less(weight)) output(84,better,79) output(84,better,67) output(92,better,77) output(33,better,100) output(33,better,10) output(33,better,16) output(33,better,22) output(33,better,67) output(33,better,79) output(65,better,10) output(65,better,16) output(65,better,79) output(65,better,67) output(65,better,22) output(90,better,100) output(90,better,10) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,67) output(10,worse,44) output(67,worse,44) output(84,worse,44) output(9,worse,75) output(79,worse,44) output(16,worse,44) output(33,worse,65) output(33,worse,44) output(65,worse,44) output(90,worse,65) output(90,worse,44) output(33,eq,90) output(16,eq,79) output(79,eq,67) output(10,eq,16) output(16,eq,22) output(10,eq,22) output(16,eq,67) output(10,eq,79) output(10,eq,67)
Optimization: 20 13
Answer: 8
preference(1,(1,6),1,for(atom(hasPrep(4))),8) preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(10,better,22) output(10,better,67) output(10,better,44) output(84,better,67) output(84,better,44) output(9,better,75) output(79,better,67) output(79,better,44) output(16,better,22) output(16,better,67) output(16,better,44) output(33,better,65) output(33,better,100) output(33,better,22) output(33,better,44) output(33,better,67) output(90,better,100) output(90,better,65) output(90,better,22) output(90,better,44) output(90,better,67) output(65,worse,10) output(65,worse,16) output(65,worse,79) output(33,eq,90) output(16,eq,79) output(67,eq,44) output(10,eq,16) output(84,eq,79) output(92,eq,77) output(90,eq,10) output(10,eq,79) output(90,eq,79) output(65,eq,67) output(33,eq,10) output(90,eq,16) output(33,eq,16) output(65,eq,22) output(65,eq,44) output(33,eq,79)
Optimization: 19 3
Answer: 9
preference(1,(1,1),1,for(atom(hasPrepTime(1))),8) preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,(1,11),1,for(atom(hasPrep(4))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(10,better,16) output(10,better,22) output(10,better,67) output(10,better,44) output(84,better,67) output(84,better,44) output(9,better,75) output(79,better,67) output(79,better,44) output(92,better,77) output(33,better,65) output(33,better,100) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,67) output(90,better,100) output(90,better,65) output(90,better,16) output(90,better,22) output(90,better,44) output(90,better,67) output(16,worse,79) output(65,worse,10) output(65,worse,79) output(33,eq,90) output(67,eq,44) output(16,eq,22) output(84,eq,79) output(65,eq,16) output(90,eq,10) output(16,eq,67) output(10,eq,79) output(90,eq,79) output(65,eq,67) output(16,eq,44) output(33,eq,10) output(65,eq,22) output(65,eq,44) output(33,eq,79)
Optimization: 18 4
Answer: 10
preference(1,(1,6),1,for(atom(hasIngredient(3))),8) preference(1,(1,9),1,for(atom(hasPrep(4))),8) preference(1,(1,11),1,for(atom(hasPrepTime(1))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(10,better,16) output(10,better,22) output(10,better,67) output(10,better,44) output(84,better,67) output(84,better,44) output(9,better,75) output(79,better,67) output(79,better,44) output(92,better,77) output(33,better,100) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,67) output(65,better,16) output(65,better,67) output(65,better,22) output(65,better,44) output(90,better,100) output(90,better,16) output(90,better,22) output(90,better,44) output(90,better,67) output(16,worse,79) output(33,eq,90) output(67,eq,44) output(90,eq,65) output(65,eq,10) output(16,eq,22) output(84,eq,79) output(90,eq,10) output(33,eq,65) output(16,eq,67) output(10,eq,79) output(65,eq,79) output(90,eq,79) output(16,eq,44) output(33,eq,10) output(33,eq,79)
Optimization: 16 4
Answer: 11
preference(1,(1,5),1,for(atom(hasPrep(5))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,12),1,for(atom(hasPrepTime(1))),8) preference(1,(1,14),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(10,better,16) output(10,better,22) output(10,better,79) output(10,better,67) output(10,better,44) output(84,better,79) output(84,better,67) output(84,better,44) output(33,better,100) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,67) output(33,better,79) output(65,better,16) output(65,better,79) output(65,better,67) output(65,better,22) output(65,better,44) output(90,better,100) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,44) output(90,better,67) output(9,eq,75) output(33,eq,90) output(16,eq,79) output(79,eq,67) output(67,eq,44) output(90,eq,65) output(65,eq,10) output(16,eq,22) output(92,eq,77) output(90,eq,10) output(33,eq,65) output(79,eq,44) output(16,eq,67) output(16,eq,44) output(33,eq,10)
Optimization: 15 4
Answer: 12
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasCategory(3))),1) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,4),1,for(atom(hasPrepTime(1))),1) preference(1,(1,5),1,for(atom(hasDifficulty(2))),1) preference(1,(1,6),1,for(atom(hasCategory(1))),1) preference(1,(1,7),1,for(atom(hasPrep(5))),1) preference(1,(1,8),1,for(atom(hasIngredient(7))),6) preference(1,(1,9),1,for(atom(hasIngredient(4))),1) preference(1,(1,10),1,for(atom(hasCost(1))),6) preference(1,(1,11),1,for(atom(hasPrep(6))),2) preference(1,(1,12),1,for(atom(hasIngredient(3))),8) preference(1,(1,13),1,for(atom(hasCost(2))),1) preference(1,(1,14),1,for(atom(hasDifficulty(1))),6) preference(1,less(weight)) output(10,better,16) output(10,better,79) output(10,better,44) output(67,better,44) output(84,better,79) output(84,better,44) output(9,better,75) output(92,better,77) output(16,better,79) output(33,better,65) output(33,better,100) output(33,better,10) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,79) output(65,better,16) output(65,better,79) output(65,better,44) output(90,better,100) output(90,better,65) output(90,better,10) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,44) output(10,worse,22) output(10,worse,67) output(84,worse,67) output(79,worse,67) output(79,worse,44) output(16,worse,22) output(16,worse,67) output(16,worse,44) output(33,worse,90) output(33,worse,67) output(65,worse,67) output(65,worse,22) output(65,eq,10) output(90,eq,67)
Optimization: 14 14
Answer: 13
preference(1,(1,1),1,for(atom(hasDifficulty(1))),7) preference(1,(1,2),1,for(atom(hasCost(1))),7) preference(1,(1,3),1,for(atom(hasCategory(3))),7) preference(1,(1,4),1,for(atom(hasPrep(0))),7) preference(1,(1,5),1,for(atom(hasDifficulty(3))),7) preference(1,(1,6),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasPrep(3))),7) preference(1,(1,10),1,for(atom(hasIngredient(4))),8) preference(1,(1,11),1,for(atom(hasIngredient(8))),7) preference(1,(1,14),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(10,better,16) output(10,better,67) output(10,better,44) output(67,better,44) output(84,better,67) output(84,better,44) output(9,better,75) output(79,better,67) output(79,better,44) output(92,better,77) output(33,better,100) output(33,better,10) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,67) output(33,better,79) output(65,better,10) output(65,better,16) output(65,better,79) output(65,better,67) output(65,better,22) output(65,better,44) output(90,better,100) output(90,better,10) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,44) output(90,better,67) output(16,worse,79) output(16,worse,22) output(16,worse,67) output(33,eq,90) output(90,eq,65) output(84,eq,79) output(10,eq,22) output(33,eq,65) output(10,eq,79) output(16,eq,44)
Optimization: 10 11
Answer: 14
preference(1,(1,1),1,for(atom(hasDifficulty(1))),7) preference(1,(1,2),1,for(atom(hasCost(1))),7) preference(1,(1,3),1,for(atom(hasIngredient(4))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),7) preference(1,(1,5),1,for(atom(hasIngredient(10))),7) preference(1,(1,6),1,for(atom(hasPrep(4))),7) preference(1,(1,8),1,for(atom(hasCategory(3))),7) preference(1,(1,9),1,for(atom(hasPrep(5))),8) preference(1,(1,10),1,for(atom(hasIngredient(8))),7) preference(1,(1,11),1,for(atom(hasDifficulty(3))),7) preference(1,(1,12),1,for(atom(hasPrepTime(1))),8) preference(1,(1,14),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(10,better,16) output(10,better,22) output(10,better,67) output(10,better,44) output(67,better,44) output(84,better,67) output(84,better,44) output(9,better,75) output(79,better,67) output(79,better,44) output(92,better,77) output(33,better,100) output(33,better,10) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,67) output(33,better,79) output(65,better,10) output(65,better,16) output(65,better,79) output(65,better,67) output(65,better,22) output(65,better,44) output(90,better,100) output(90,better,10) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,44) output(90,better,67) output(16,worse,79) output(16,worse,67) output(33,eq,90) output(90,eq,65) output(16,eq,22) output(84,eq,79) output(33,eq,65) output(10,eq,79) output(16,eq,44)
Optimization: 9 12
Answer: 15
preference(1,(1,1),1,for(atom(hasCost(2))),7) preference(1,(1,2),1,for(atom(hasIngredient(3))),6) preference(1,(1,3),1,for(atom(hasIngredient(9))),7) preference(1,(1,4),1,for(atom(hasDifficulty(3))),1) preference(1,(1,5),1,for(atom(hasIngredient(4))),2) preference(1,(1,6),1,for(atom(hasPrepTime(1))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),1) preference(1,(1,9),1,for(atom(hasCost(1))),8) preference(1,(1,10),1,for(atom(hasCategory(1))),4) preference(1,(1,11),1,for(atom(hasCategory(3))),7) preference(1,(1,12),1,for(atom(hasPrep(5))),3) preference(1,(1,13),1,for(atom(hasCost(3))),4) preference(1,(1,14),1,for(atom(hasPrep(4))),4) preference(1,less(weight)) output(10,better,16) output(10,better,22) output(10,better,79) output(10,better,67) output(10,better,44) output(67,better,44) output(84,better,79) output(84,better,67) output(84,better,44) output(9,better,75) output(79,better,67) output(79,better,44) output(92,better,77) output(16,better,79) output(16,better,22) output(16,better,67) output(16,better,44) output(33,better,90) output(33,better,65) output(33,better,100) output(33,better,10) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,67) output(33,better,79) output(65,better,10) output(65,better,16) output(65,better,79) output(65,better,67) output(65,better,22) output(65,better,44) output(90,better,100) output(90,better,65) output(90,better,10) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,44) output(90,better,67)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Progression : 0 [ 2;14] (Error: 6)
Answer: 16
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,2),1,for(atom(hasCategory(1))),4) preference(1,(1,3),1,for(atom(hasPrep(5))),6) preference(1,(1,4),1,for(atom(hasDifficulty(3))),3) preference(1,(1,5),1,for(atom(hasIngredient(12))),3) preference(1,(1,6),1,for(atom(hasPrep(6))),3) preference(1,(1,7),1,for(atom(hasPrepTime(1))),5) preference(1,(1,9),1,for(atom(hasCost(3))),4) preference(1,(1,10),1,for(atom(hasCategory(4))),3) preference(1,(1,11),1,for(atom(hasIngredient(3))),5) preference(1,(1,12),1,for(atom(hasPrep(1))),3) preference(1,(1,13),1,for(atom(hasCategory(3))),7) preference(1,(1,14),1,for(atom(hasPrepTime(3))),3) preference(1,less(weight)) output(10,better,16) output(10,better,22) output(10,better,79) output(10,better,67) output(10,better,44) output(67,better,44) output(84,better,79) output(84,better,67) output(84,better,44) output(9,better,75) output(79,better,67) output(79,better,44) output(92,better,77) output(16,better,79) output(16,better,22) output(16,better,67) output(16,better,44) output(33,better,90) output(33,better,65) output(33,better,100) output(33,better,10) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,67) output(33,better,79) output(65,better,10) output(65,better,16) output(65,better,79) output(65,better,67) output(65,better,22) output(65,better,44) output(90,better,100) output(90,better,65) output(90,better,10) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,44) output(90,better,67)
Optimization: 0 13
Answer: 17
preference(1,(1,2),1,for(atom(hasCategory(2))),5) preference(1,(1,3),1,for(atom(hasCategory(3))),7) preference(1,(1,4),1,for(atom(hasPrep(2))),1) preference(1,(1,5),1,for(atom(hasCost(3))),5) preference(1,(1,6),1,for(atom(hasDifficulty(3))),3) preference(1,(1,7),1,for(atom(hasCategory(1))),2) preference(1,(1,8),1,for(atom(hasIngredient(10))),1) preference(1,(1,9),1,for(atom(hasPrep(5))),4) preference(1,(1,10),1,for(atom(hasIngredient(4))),7) preference(1,(1,11),1,for(atom(hasCost(1))),3) preference(1,(1,12),1,for(atom(hasPrepTime(1))),1) preference(1,(1,13),1,for(atom(hasIngredient(3))),6) preference(1,less(weight)) output(10,better,16) output(10,better,22) output(10,better,79) output(10,better,67) output(10,better,44) output(67,better,44) output(84,better,79) output(84,better,67) output(84,better,44) output(9,better,75) output(79,better,67) output(79,better,44) output(92,better,77) output(16,better,79) output(16,better,22) output(16,better,67) output(16,better,44) output(33,better,90) output(33,better,65) output(33,better,100) output(33,better,10) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,67) output(33,better,79) output(65,better,10) output(65,better,16) output(65,better,79) output(65,better,67) output(65,better,22) output(65,better,44) output(90,better,100) output(90,better,65) output(90,better,10) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,44) output(90,better,67)
Optimization: 0 12
Answer: 18
preference(1,(1,2),1,for(atom(hasCategory(3))),7) preference(1,(1,3),1,for(atom(hasIngredient(3))),6) preference(1,(1,4),1,for(atom(hasPrep(2))),1) preference(1,(1,5),1,for(atom(hasCost(3))),5) preference(1,(1,6),1,for(atom(hasDifficulty(3))),3) preference(1,(1,7),1,for(atom(hasCategory(1))),2) preference(1,(1,8),1,for(atom(hasIngredient(10))),1) preference(1,(1,9),1,for(atom(hasPrep(5))),4) preference(1,(1,11),1,for(atom(hasCost(1))),3) preference(1,(1,12),1,for(atom(hasPrepTime(1))),1) preference(1,(1,13),1,for(atom(hasIngredient(4))),7) preference(1,less(weight)) output(10,better,16) output(10,better,22) output(10,better,79) output(10,better,67) output(10,better,44) output(67,better,44) output(84,better,79) output(84,better,67) output(84,better,44) output(9,better,75) output(79,better,67) output(79,better,44) output(92,better,77) output(16,better,79) output(16,better,22) output(16,better,67) output(16,better,44) output(33,better,90) output(33,better,65) output(33,better,100) output(33,better,10) output(33,better,16) output(33,better,22) output(33,better,44) output(33,better,67) output(33,better,79) output(65,better,10) output(65,better,16) output(65,better,79) output(65,better,67) output(65,better,22) output(65,better,44) output(90,better,100) output(90,better,65) output(90,better,10) output(90,better,79) output(90,better,16) output(90,better,22) output(90,better,44) output(90,better,67)
Optimization: 0 11
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.061 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 18+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 597.413s (Solving: 594.79s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2378.159s
Threads      : 4        (Winner: 4)

Choices      : 22834703 (Domain: 428862)
Conflicts    : 8850487  (Analyzed: 8850485)
Restarts     : 8692     (Average: 1018.23 Last: 520711)
Model-Level  : 213.4   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 8860465  (Deleted: 8412930)
  Binary     : 738      (Ratio:   0.01%)
  Ternary    : 946      (Ratio:   0.01%)
  Conflict   : 8850485  (Average Length:  598.4 Ratio:  99.89%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 9980     (Average Length:   95.3 Ratio:   0.11%) 
  Distributed: 3329     (Ratio:   0.04% Average LBD: 3.59) 
  Integrated : 9987     (Ratio: 300.00% Unit: 1 Average Jumps: 15.00)
Backjumps    : 8850485  (Average:  2.10 Max: 1076 Sum: 18542735)
  Executed   : 8850484  (Average:  2.10 Max: 1076 Sum: 18542703 Ratio: 100.00%)
  Bounded    : 1        (Average: 32.00 Max:  32 Sum:     32 Ratio:   0.00%)

Rules        : 475750  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14522   
Bodies       : 18969   
  Sum        : 80      
  Count      : 14      
Equivalences : 7250     (Atom=Atom: 413 Body=Body: 174 Other: 6663)
Tight        : Yes
Variables    : 17079    (Eliminated:    0 Frozen: 7755)
Constraints  : 497140   (Binary:  97.4% Ternary:   1.9% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(4)) ; 
  7 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(4)) ; 
  7 :: atom(hasPrep(3)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasIngredient(8)) ; 
  2 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasPrep(5)) ; 
  6 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasIngredient(4)) ; 
  6 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(6)) ; 
  8 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrep(3)) ; 
  8 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasIngredient(8)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(4)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(1)) ; 
  4 :: atom(hasCategory(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCost(3)) ; 
  4 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  4 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  3 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasIngredient(12)) ; 
  3 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasCost(3)) ; 
  3 :: atom(hasCategory(4)) ; 
  5 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCategory(2)) ; 
  7 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrep(2)) ; 
  5 :: atom(hasCost(3)) ; 
  3 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCategory(1)) ; 
  1 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(4)) ; 
  3 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(3)) ; 
  6 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasPrep(2)) ; 
  5 :: atom(hasCost(3)) ; 
  3 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCategory(1)) ; 
  1 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasIngredient(4)) 
}.
