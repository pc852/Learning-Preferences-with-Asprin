asprin_vL version 1.0
Reading from stdin
-:1226:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1236:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1251:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1332:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1593:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1606:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1783:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1912:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1984:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1988:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1988:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1994:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2093:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2119:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2239:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2273:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2295:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1143:1-16: info: no atoms over signature occur in program:
  output/3

-:1135:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1136:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(88,eq,28) output(28,eq,33) output(33,eq,79) output(79,eq,65) output(49,eq,95) output(95,eq,86) output(86,eq,98) output(88,eq,22) output(22,eq,28) output(100,eq,19) output(73,eq,86) output(86,eq,68) output(50,eq,46) output(95,eq,68) output(73,eq,68) output(95,eq,98) output(73,eq,98) output(49,eq,86) output(33,eq,65) output(28,eq,79) output(88,eq,33) output(22,eq,33) output(88,eq,79) output(22,eq,79) output(28,eq,65) output(88,eq,65) output(22,eq,65) output(49,eq,98) output(49,eq,68)
Optimization: 29 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasIngredient(7))),2) preference(1,less(weight)) output(88,better,22) output(88,better,79) output(88,better,65) output(28,better,79) output(28,better,65) output(100,better,19) output(33,better,79) output(33,better,65) output(49,better,95) output(49,better,86) output(49,better,68) output(73,better,86) output(73,better,68) output(22,worse,28) output(22,worse,33) output(50,worse,46) output(86,worse,98) output(95,worse,98) output(88,eq,28) output(28,eq,33) output(79,eq,65) output(95,eq,86) output(86,eq,68) output(95,eq,68) output(73,eq,98) output(88,eq,33) output(22,eq,79) output(22,eq,65) output(49,eq,98)
Optimization: 16 14
Answer: 3
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,2),1,for(atom(hasPrep(0))),8) preference(1,(1,7),1,for(atom(hasIngredient(7))),8) preference(1,less(weight)) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,33) output(28,better,79) output(28,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(22,worse,28) output(50,worse,46) output(88,eq,28) output(33,eq,79) output(79,eq,65) output(95,eq,86) output(86,eq,98) output(100,eq,19) output(86,eq,68) output(95,eq,68) output(95,eq,98) output(33,eq,65) output(22,eq,33) output(22,eq,79) output(22,eq,65)
Optimization: 15 3
Answer: 4
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasCategory(3))),8) preference(1,(1,3),1,for(atom(hasIngredient(10))),7) preference(1,(1,4),1,for(atom(hasDifficulty(3))),7) preference(1,(1,6),1,for(atom(hasPrep(1))),8) preference(1,(1,7),1,for(atom(hasPrep(6))),8) preference(1,(1,8),1,for(atom(hasPrep(7))),7) preference(1,(1,9),1,for(atom(hasIngredient(6))),7) preference(1,(1,10),1,for(atom(hasPrepTime(2))),8) preference(1,(1,11),1,for(atom(hasIngredient(12))),7) preference(1,(1,12),1,for(atom(hasCost(3))),7) preference(1,(1,13),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(22,better,28) output(22,better,33) output(22,better,79) output(22,better,65) output(50,better,46) output(88,better,28) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(100,better,19) output(86,better,98) output(95,better,86) output(95,better,68) output(95,better,98) output(49,worse,95) output(49,worse,86) output(49,worse,68) output(73,worse,86) output(73,worse,68) output(86,worse,68) output(28,eq,33) output(33,eq,79) output(79,eq,65) output(73,eq,98) output(33,eq,65) output(28,eq,79) output(28,eq,65) output(49,eq,98)
Optimization: 14 12
Answer: 5
preference(1,(1,1),1,for(atom(hasPrepTime(1))),6) preference(1,(1,2),1,for(atom(hasCategory(3))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),5) preference(1,(1,4),1,for(atom(hasCost(3))),6) preference(1,(1,5),1,for(atom(hasDifficulty(2))),5) preference(1,(1,6),1,for(atom(hasPrep(6))),5) preference(1,(1,7),1,for(atom(hasCategory(4))),5) preference(1,(1,8),1,for(atom(hasDifficulty(3))),6) preference(1,(1,9),1,for(atom(hasPrep(4))),6) preference(1,(1,10),1,for(atom(hasIngredient(7))),2) preference(1,(1,11),1,for(atom(hasIngredient(12))),6) preference(1,(1,12),1,for(atom(hasCost(4))),5) preference(1,(1,13),1,for(atom(hasDifficulty(1))),2) preference(1,(1,14),1,for(atom(hasPrep(1))),5) preference(1,less(weight)) output(22,better,28) output(22,better,33) output(22,better,79) output(22,better,65) output(88,better,28) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,79) output(28,better,65) output(100,better,19) output(33,better,79) output(33,better,65) output(49,better,68) output(73,better,68) output(86,better,98) output(86,better,68) output(95,better,68) output(95,better,98) output(50,worse,46) output(88,worse,22) output(49,worse,95) output(49,worse,86) output(73,worse,86) output(28,eq,33) output(79,eq,65) output(95,eq,86) output(73,eq,98) output(49,eq,98)
Optimization: 10 14
Answer: 6
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,2),1,for(atom(hasPrep(0))),8) preference(1,(1,3),1,for(atom(hasIngredient(12))),7) preference(1,(1,4),1,for(atom(hasPrep(1))),7) preference(1,(1,5),1,for(atom(hasPrepTime(1))),7) preference(1,(1,6),1,for(atom(hasCategory(3))),7) preference(1,(1,7),1,for(atom(hasIngredient(7))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),8) preference(1,(1,9),1,for(atom(hasCost(1))),8) preference(1,(1,10),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasIngredient(9))),8) preference(1,(1,13),1,for(atom(hasCost(3))),7) preference(1,(1,14),1,for(atom(hasDifficulty(2))),7) preference(1,less(weight)) output(22,better,33) output(22,better,79) output(22,better,65) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,33) output(28,better,79) output(28,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(95,better,86) output(95,better,68) output(95,better,98) output(22,worse,28) output(88,eq,28) output(33,eq,79) output(79,eq,65) output(86,eq,98) output(100,eq,19) output(86,eq,68) output(50,eq,46) output(33,eq,65)
Optimization: 9 13
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasIngredient(12))),7) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasIngredient(9))),8) preference(1,(1,5),1,for(atom(hasPrepTime(1))),7) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,7),1,for(atom(hasIngredient(7))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasIngredient(6))),7) preference(1,(1,10),1,for(atom(hasPrep(7))),7) preference(1,(1,11),1,for(atom(hasDifficulty(3))),7) preference(1,(1,13),1,for(atom(hasCost(3))),7) preference(1,less(weight)) output(22,better,79) output(22,better,65) output(88,better,22) output(88,better,79) output(88,better,65) output(28,better,79) output(28,better,65) output(100,better,19) output(33,better,79) output(33,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(86,better,98) output(86,better,68) output(95,better,68) output(95,better,98) output(22,worse,28) output(22,worse,33) output(88,eq,28) output(28,eq,33) output(79,eq,65) output(95,eq,86) output(50,eq,46) output(88,eq,33)
Optimization: 8 12
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,3),1,for(atom(hasIngredient(9))),8) preference(1,(1,4),1,for(atom(hasPrep(2))),8) preference(1,(1,5),1,for(atom(hasIngredient(12))),7) preference(1,(1,6),1,for(atom(hasPrep(7))),7) preference(1,(1,7),1,for(atom(hasIngredient(7))),8) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasIngredient(6))),7) preference(1,(1,11),1,for(atom(hasIngredient(10))),7) preference(1,(1,13),1,for(atom(hasCost(3))),7) preference(1,less(weight)) output(22,better,79) output(22,better,65) output(50,better,46) output(88,better,22) output(88,better,79) output(88,better,65) output(28,better,79) output(28,better,65) output(100,better,19) output(33,better,79) output(33,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(86,better,98) output(86,better,68) output(95,better,68) output(95,better,98) output(22,worse,28) output(22,worse,33) output(88,eq,28) output(28,eq,33) output(79,eq,65) output(95,eq,86) output(88,eq,33)
Optimization: 7 11
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,3),1,for(atom(hasPrepTime(2))),8) preference(1,(1,4),1,for(atom(hasIngredient(9))),8) preference(1,(1,5),1,for(atom(hasIngredient(12))),7) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,7),1,for(atom(hasIngredient(7))),8) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasPrep(7))),7) preference(1,(1,11),1,for(atom(hasIngredient(10))),7) preference(1,(1,14),1,for(atom(hasCost(3))),7) preference(1,less(weight)) output(22,better,33) output(22,better,79) output(22,better,65) output(50,better,46) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,33) output(28,better,79) output(28,better,65) output(100,better,19) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(86,better,98) output(86,better,68) output(95,better,68) output(95,better,98) output(22,worse,28) output(88,eq,28) output(33,eq,79) output(79,eq,65) output(95,eq,86) output(33,eq,65)
Optimization: 6 11
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasIngredient(9))),8) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasPrep(2))),8) preference(1,(1,6),1,for(atom(hasDifficulty(3))),7) preference(1,(1,7),1,for(atom(hasIngredient(7))),8) preference(1,(1,8),1,for(atom(hasPrep(7))),7) preference(1,(1,9),1,for(atom(hasIngredient(6))),7) preference(1,(1,10),1,for(atom(hasPrepTime(2))),8) preference(1,(1,11),1,for(atom(hasIngredient(10))),7) preference(1,(1,14),1,for(atom(hasCost(3))),7) preference(1,less(weight)) output(22,better,79) output(22,better,65) output(50,better,46) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,33) output(28,better,79) output(28,better,65) output(100,better,19) output(33,better,79) output(33,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(86,better,98) output(86,better,68) output(95,better,68) output(95,better,98) output(22,worse,28) output(88,eq,28) output(79,eq,65) output(95,eq,86) output(22,eq,33)
Optimization: 5 11
Answer: 11
preference(1,(1,1),1,for(atom(hasPrepTime(1))),1) preference(1,(1,2),1,for(atom(hasCost(4))),6) preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasIngredient(7))),6) preference(1,(1,5),1,for(atom(hasCategory(4))),4) preference(1,(1,6),1,for(atom(hasPrepTime(2))),3) preference(1,(1,7),1,for(atom(hasIngredient(12))),5) preference(1,(1,8),1,for(atom(hasDifficulty(2))),5) preference(1,(1,10),1,for(atom(hasPrep(5))),8) preference(1,(1,11),1,for(atom(hasCost(2))),8) preference(1,(1,12),1,for(atom(hasCost(3))),7) preference(1,(1,13),1,for(atom(hasCategory(3))),1) preference(1,(1,14),1,for(atom(hasPrep(1))),4) preference(1,less(weight)) output(22,better,33) output(22,better,79) output(22,better,65) output(88,better,28) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,33) output(28,better,79) output(28,better,65) output(79,better,65) output(100,better,19) output(33,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(86,better,68) output(95,better,86) output(95,better,68) output(95,better,98) output(50,worse,46) output(86,worse,98) output(33,eq,79) output(22,eq,28)
Optimization: 4 13
Answer: 12
preference(1,(1,1),1,for(atom(hasIngredient(7))),4) preference(1,(1,2),1,for(atom(hasDifficulty(2))),1) preference(1,(1,3),1,for(atom(hasCategory(4))),3) preference(1,(1,4),1,for(atom(hasPrep(5))),3) preference(1,(1,5),1,for(atom(hasCost(2))),4) preference(1,(1,6),1,for(atom(hasCost(4))),7) preference(1,(1,7),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasCategory(3))),7) preference(1,(1,9),1,for(atom(hasDifficulty(1))),3) preference(1,(1,10),1,for(atom(hasIngredient(3))),3) preference(1,(1,11),1,for(atom(hasPrepTime(1))),2) preference(1,(1,12),1,for(atom(hasPrepTime(3))),4) preference(1,(1,13),1,for(atom(hasIngredient(10))),7) preference(1,(1,14),1,for(atom(hasCost(3))),2) preference(1,less(weight)) output(22,better,28) output(22,better,33) output(22,better,79) output(22,better,65) output(50,better,46) output(88,better,28) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,33) output(28,better,79) output(28,better,65) output(79,better,65) output(100,better,19) output(33,better,79) output(33,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(86,better,98) output(86,better,68) output(95,better,86) output(95,better,68) output(95,better,98)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(6))),1) preference(1,(1,2),1,for(atom(hasCost(4))),7) preference(1,(1,3),1,for(atom(hasPrepTime(2))),3) preference(1,(1,4),1,for(atom(hasCost(3))),1) preference(1,(1,5),1,for(atom(hasIngredient(12))),6) preference(1,(1,6),1,for(atom(hasCategory(3))),7) preference(1,(1,7),1,for(atom(hasDifficulty(2))),6) preference(1,(1,8),1,for(atom(hasCost(2))),8) preference(1,(1,9),1,for(atom(hasIngredient(7))),8) preference(1,(1,10),1,for(atom(hasPrep(7))),7) preference(1,(1,11),1,for(atom(hasPrepTime(1))),6) preference(1,(1,12),1,for(atom(hasIngredient(10))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(22,better,28) output(22,better,33) output(22,better,79) output(22,better,65) output(50,better,46) output(88,better,28) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,33) output(28,better,79) output(28,better,65) output(79,better,65) output(100,better,19) output(33,better,79) output(33,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(86,better,98) output(86,better,68) output(95,better,86) output(95,better,68) output(95,better,98)
Optimization: 0 13
Answer: 14
preference(1,(1,1),1,for(atom(hasPrepTime(1))),7) preference(1,(1,2),1,for(atom(hasIngredient(10))),6) preference(1,(1,3),1,for(atom(hasCost(3))),4) preference(1,(1,4),1,for(atom(hasCategory(4))),5) preference(1,(1,5),1,for(atom(hasPrepTime(2))),5) preference(1,(1,6),1,for(atom(hasDifficulty(1))),4) preference(1,(1,8),1,for(atom(hasIngredient(7))),3) preference(1,(1,9),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasCategory(3))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),6) preference(1,(1,13),1,for(atom(hasCost(4))),8) preference(1,(1,14),1,for(atom(hasDifficulty(2))),7) preference(1,less(weight)) output(22,better,28) output(22,better,33) output(22,better,79) output(22,better,65) output(50,better,46) output(88,better,28) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,33) output(28,better,79) output(28,better,65) output(79,better,65) output(100,better,19) output(33,better,79) output(33,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(86,better,98) output(86,better,68) output(95,better,86) output(95,better,68) output(95,better,98)
Optimization: 0 12
Progression : 0 [ 2;12] (Error: 5)
Progression : 0 [ 3;12] (Error: 3)
Answer: 15
preference(1,(1,1),1,for(atom(hasPrep(0))),5) preference(1,(1,3),1,for(atom(hasCost(3))),8) preference(1,(1,4),1,for(atom(hasIngredient(7))),6) preference(1,(1,5),1,for(atom(hasCategory(3))),3) preference(1,(1,6),1,for(atom(hasPrepTime(2))),3) preference(1,(1,7),1,for(atom(hasPrepTime(3))),4) preference(1,(1,8),1,for(atom(hasCategory(4))),5) preference(1,(1,9),1,for(atom(hasIngredient(10))),7) preference(1,(1,10),1,for(atom(hasPrep(1))),8) preference(1,(1,11),1,for(atom(hasIngredient(12))),8) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,less(weight)) output(22,better,28) output(22,better,33) output(22,better,79) output(22,better,65) output(50,better,46) output(88,better,28) output(88,better,22) output(88,better,33) output(88,better,79) output(88,better,65) output(28,better,33) output(28,better,79) output(28,better,65) output(79,better,65) output(100,better,19) output(33,better,79) output(33,better,65) output(49,better,95) output(49,better,86) output(49,better,98) output(49,better,68) output(73,better,86) output(73,better,68) output(73,better,98) output(86,better,98) output(86,better,68) output(95,better,86) output(95,better,68) output(95,better,98)
Optimization: 0 11
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.044 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 15+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 298.121s (Solving: 295.58s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1184.700s
Threads      : 4        (Winner: 4)

Choices      : 4415653  (Domain: 251835)
Conflicts    : 4203720  (Analyzed: 4203717)
Restarts     : 3398     (Average: 1237.12 Last: 341591)
Model-Level  : 42.6    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 4270023  (Deleted: 4018001)
  Binary     : 960      (Ratio:   0.02%)
  Ternary    : 1477     (Ratio:   0.03%)
  Conflict   : 4203717  (Average Length:  576.3 Ratio:  98.45%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 66306    (Average Length:  408.2 Ratio:   1.55%) 
  Distributed: 22112    (Ratio:   0.53% Average LBD: 3.80) 
  Integrated : 66336    (Ratio: 300.00% Unit: 17 Average Jumps: 5.59)
Backjumps    : 4203717  (Average:  1.04 Max:  65 Sum: 4362032)
  Executed   : 4203716  (Average:  1.04 Max:  65 Sum: 4362012 Ratio: 100.00%)
  Bounded    : 1        (Average: 20.00 Max:  20 Sum:     20 Ratio:   0.00%)

Rules        : 372007  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13452   
Bodies       : 18848   
  Sum        : 58      
  Count      : 14      
Equivalences : 6865     (Atom=Atom: 303 Body=Body: 130 Other: 6432)
Tight        : Yes
Variables    : 17043    (Eliminated:    0 Frozen: 7719)
Constraints  : 394406   (Binary:  96.7% Ternary:   2.4% Other:   0.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(6)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasCategory(3)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(3)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCategory(4)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasPrep(4)) ; 
  2 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasCost(4)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  8 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasIngredient(6)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasIngredient(6)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(6)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasCost(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasCategory(4)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(2)) ; 
  7 :: atom(hasCost(3)) ; 
  1 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasCategory(4)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCost(2)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCategory(3)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  2 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCost(4)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCost(3)) ; 
  6 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasCategory(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasCost(3)) ; 
  5 :: atom(hasCategory(4)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(4)) ; 
  7 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(3)) ; 
  6 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasDifficulty(2)) 
}.
