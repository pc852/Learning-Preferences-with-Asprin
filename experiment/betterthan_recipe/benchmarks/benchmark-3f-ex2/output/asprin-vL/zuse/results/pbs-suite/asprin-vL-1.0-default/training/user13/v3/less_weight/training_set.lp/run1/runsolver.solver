asprin_vL version 1.0
Reading from stdin
-:1242:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1252:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1267:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1348:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1609:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1622:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1799:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1928:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:2000:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:2004:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:2004:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2010:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2109:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2135:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2255:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2289:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2311:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1159:1-16: info: no atoms over signature occur in program:
  output/3

-:1151:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1152:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(32,eq,23) output(23,eq,98) output(98,eq,41) output(41,eq,60) output(60,eq,79) output(46,eq,31) output(31,eq,48) output(28,eq,98) output(98,eq,52) output(52,eq,41) output(41,eq,96) output(96,eq,8) output(20,eq,46) output(41,eq,8) output(98,eq,96) output(52,eq,96) output(23,eq,52) output(28,eq,52) output(46,eq,48) output(20,eq,31) output(41,eq,79) output(98,eq,60) output(52,eq,60) output(23,eq,41) output(28,eq,41) output(32,eq,98) output(32,eq,41) output(23,eq,60) output(28,eq,60) output(32,eq,60) output(98,eq,79) output(52,eq,79) output(23,eq,79) output(28,eq,79) output(20,eq,48) output(32,eq,52) output(23,eq,96) output(28,eq,96) output(32,eq,96) output(98,eq,8) output(52,eq,8) output(23,eq,8) output(28,eq,8) output(32,eq,8) output(32,eq,79)
Optimization: 45 0
Answer: 2
preference(1,(1,1),1,for(atom(hasPrepTime(2))),5) preference(1,(1,2),1,for(atom(hasCost(3))),5) preference(1,(1,7),1,for(atom(hasPrep(5))),3) preference(1,(1,8),1,for(atom(hasIngredient(12))),2) preference(1,(1,10),1,for(atom(hasIngredient(1))),6) preference(1,(1,11),1,for(atom(hasIngredient(7))),4) preference(1,(1,12),1,for(atom(hasCategory(4))),8) preference(1,(1,14),1,for(atom(hasDifficulty(2))),5) preference(1,less(weight)) output(46,better,48) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,8) output(31,better,48) output(96,better,8) output(98,better,41) output(98,better,52) output(98,better,60) output(98,better,79) output(98,better,8) output(23,better,41) output(52,better,41) output(46,worse,31) output(28,worse,96) output(98,worse,96) output(20,worse,46) output(20,worse,31) output(20,worse,48) output(23,worse,98) output(23,worse,52) output(23,worse,60) output(23,worse,79) output(23,worse,96) output(23,worse,8) output(32,worse,23) output(32,worse,98) output(32,worse,41) output(32,worse,60) output(32,worse,52) output(32,worse,96) output(32,worse,8) output(32,worse,79) output(41,worse,60) output(41,worse,96) output(41,worse,8) output(41,worse,79) output(52,worse,96) output(52,worse,60) output(52,worse,79) output(52,worse,8) output(60,eq,79) output(28,eq,98)
Optimization: 30 8
Answer: 3
preference(1,(1,1),1,for(atom(hasCategory(2))),6) preference(1,(1,2),1,for(atom(hasIngredient(10))),6) preference(1,(1,3),1,for(atom(hasCategory(5))),6) preference(1,(1,4),1,for(atom(hasCost(1))),6) preference(1,(1,5),1,for(atom(hasDifficulty(1))),6) preference(1,(1,6),1,for(atom(hasCost(4))),6) preference(1,(1,7),1,for(atom(hasPrep(3))),6) preference(1,(1,8),1,for(atom(hasIngredient(3))),6) preference(1,(1,9),1,for(atom(hasCategory(1))),6) preference(1,(1,10),1,for(atom(hasIngredient(7))),6) preference(1,(1,11),1,for(atom(hasPrep(2))),6) preference(1,(1,12),1,for(atom(hasCost(5))),6) preference(1,(1,13),1,for(atom(hasDifficulty(4))),6) preference(1,less(weight)) output(28,better,52) output(28,better,60) output(28,better,79) output(28,better,8) output(96,better,8) output(98,better,52) output(98,better,60) output(98,better,79) output(98,better,8) output(23,better,52) output(23,better,60) output(23,better,79) output(23,better,8) output(41,better,60) output(41,better,8) output(41,better,79) output(32,worse,23) output(32,worse,98) output(32,worse,41) output(32,worse,96) output(52,worse,41) output(52,worse,96) output(23,eq,98) output(98,eq,41) output(60,eq,79) output(46,eq,31) output(31,eq,48) output(28,eq,98) output(41,eq,96) output(20,eq,46) output(98,eq,96) output(46,eq,48) output(20,eq,31) output(52,eq,60) output(23,eq,41) output(28,eq,41) output(32,eq,60) output(52,eq,79) output(20,eq,48) output(32,eq,52) output(23,eq,96) output(28,eq,96) output(52,eq,8) output(32,eq,8) output(32,eq,79)
Optimization: 29 13
Answer: 4
preference(1,(1,1),1,for(atom(hasCost(4))),6) preference(1,(1,2),1,for(atom(hasCost(1))),6) preference(1,(1,3),1,for(atom(hasCategory(5))),6) preference(1,(1,4),1,for(atom(hasIngredient(11))),6) preference(1,(1,5),1,for(atom(hasIngredient(1))),6) preference(1,(1,6),1,for(atom(hasCost(5))),6) preference(1,(1,7),1,for(atom(hasIngredient(6))),6) preference(1,(1,8),1,for(atom(hasPrep(3))),6) preference(1,(1,9),1,for(atom(hasIngredient(5))),6) preference(1,(1,10),1,for(atom(hasIngredient(7))),6) preference(1,(1,11),1,for(atom(hasCategory(2))),6) preference(1,(1,12),1,for(atom(hasDifficulty(4))),6) preference(1,(1,13),1,for(atom(hasDifficulty(1))),6) preference(1,less(weight)) output(46,better,31) output(28,better,60) output(28,better,79) output(28,better,8) output(96,better,8) output(98,better,60) output(98,better,79) output(98,better,8) output(23,better,60) output(23,better,79) output(23,better,8) output(41,better,60) output(41,better,8) output(41,better,79) output(52,better,60) output(52,better,79) output(52,better,8) output(31,worse,48) output(20,worse,46) output(20,worse,48) output(32,worse,23) output(32,worse,98) output(32,worse,41) output(32,worse,52) output(32,worse,96) output(23,eq,98) output(98,eq,41) output(60,eq,79) output(28,eq,98) output(98,eq,52) output(52,eq,41) output(41,eq,96) output(98,eq,96) output(52,eq,96) output(23,eq,52) output(28,eq,52) output(46,eq,48) output(20,eq,31) output(23,eq,41) output(28,eq,41) output(32,eq,60) output(23,eq,96) output(28,eq,96) output(32,eq,8) output(32,eq,79)
Optimization: 28 13
Answer: 5
preference(1,(1,1),1,for(atom(hasIngredient(10))),6) preference(1,(1,2),1,for(atom(hasCost(1))),6) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,4),1,for(atom(hasPrep(2))),6) preference(1,(1,5),1,for(atom(hasCategory(1))),6) preference(1,(1,6),1,for(atom(hasCost(2))),6) preference(1,(1,7),1,for(atom(hasIngredient(1))),6) preference(1,(1,8),1,for(atom(hasIngredient(6))),6) preference(1,(1,9),1,for(atom(hasDifficulty(4))),6) preference(1,(1,10),1,for(atom(hasIngredient(7))),6) preference(1,(1,11),1,for(atom(hasCategory(2))),6) preference(1,(1,12),1,for(atom(hasIngredient(5))),6) preference(1,(1,13),1,for(atom(hasIngredient(3))),6) preference(1,less(weight)) output(28,better,52) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(23,better,52) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(32,worse,23) output(32,worse,98) output(32,worse,41) output(52,worse,41) output(23,eq,98) output(98,eq,41) output(60,eq,79) output(46,eq,31) output(31,eq,48) output(28,eq,98) output(96,eq,8) output(20,eq,46) output(52,eq,96) output(46,eq,48) output(20,eq,31) output(52,eq,60) output(23,eq,41) output(28,eq,41) output(32,eq,60) output(52,eq,79) output(20,eq,48) output(32,eq,52) output(32,eq,96) output(52,eq,8) output(32,eq,8) output(32,eq,79)
Optimization: 26 13
Progression : [ 1;26] (Error: 25)
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,2),1,for(atom(hasCost(4))),6) preference(1,(1,3),1,for(atom(hasIngredient(1))),6) preference(1,(1,4),1,for(atom(hasCategory(1))),6) preference(1,(1,5),1,for(atom(hasCategory(2))),6) preference(1,(1,6),1,for(atom(hasPrep(3))),6) preference(1,(1,7),1,for(atom(hasDifficulty(4))),6) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,9),1,for(atom(hasCategory(5))),6) preference(1,(1,10),1,for(atom(hasIngredient(3))),6) preference(1,(1,11),1,for(atom(hasIngredient(6))),6) preference(1,(1,12),1,for(atom(hasCost(2))),6) preference(1,(1,13),1,for(atom(hasIngredient(10))),6) preference(1,less(weight)) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(98,better,41) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,48) output(23,better,52) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(46,worse,31) output(32,worse,23) output(32,worse,98) output(23,eq,98) output(41,eq,60) output(60,eq,79) output(28,eq,98) output(52,eq,41) output(41,eq,96) output(96,eq,8) output(41,eq,8) output(52,eq,96) output(46,eq,48) output(20,eq,31) output(41,eq,79) output(52,eq,60) output(32,eq,41) output(32,eq,60) output(52,eq,79) output(32,eq,52) output(32,eq,96) output(52,eq,8) output(32,eq,8) output(32,eq,79)
Optimization: 24 13
Answer: 7
preference(1,(1,1),1,for(atom(hasIngredient(10))),6) preference(1,(1,2),1,for(atom(hasIngredient(4))),6) preference(1,(1,3),1,for(atom(hasIngredient(1))),6) preference(1,(1,4),1,for(atom(hasCategory(2))),6) preference(1,(1,5),1,for(atom(hasCost(4))),6) preference(1,(1,6),1,for(atom(hasPrep(3))),6) preference(1,(1,7),1,for(atom(hasCategory(1))),6) preference(1,(1,8),1,for(atom(hasDifficulty(4))),6) preference(1,(1,9),1,for(atom(hasPrep(2))),6) preference(1,(1,10),1,for(atom(hasIngredient(9))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,less(weight)) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,48) output(32,better,23) output(32,better,60) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(46,worse,31) output(23,worse,98) output(23,worse,52) output(23,worse,41) output(98,eq,41) output(60,eq,79) output(28,eq,98) output(98,eq,52) output(52,eq,41) output(96,eq,8) output(28,eq,52) output(46,eq,48) output(20,eq,31) output(28,eq,41) output(32,eq,98) output(32,eq,41) output(23,eq,60) output(23,eq,79) output(32,eq,52) output(23,eq,96) output(23,eq,8)
Optimization: 21 11
Answer: 8
preference(1,(1,1),1,for(atom(hasCost(1))),6) preference(1,(1,2),1,for(atom(hasCost(4))),6) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,4),1,for(atom(hasPrep(3))),6) preference(1,(1,5),1,for(atom(hasCategory(2))),6) preference(1,(1,6),1,for(atom(hasCategory(5))),6) preference(1,(1,7),1,for(atom(hasIngredient(8))),6) preference(1,(1,8),1,for(atom(hasDifficulty(4))),6) preference(1,(1,9),1,for(atom(hasIngredient(1))),6) preference(1,(1,10),1,for(atom(hasIngredient(9))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,31) output(20,better,48) output(32,better,23) output(32,better,60) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(23,worse,98) output(23,worse,52) output(23,worse,41) output(98,eq,41) output(60,eq,79) output(31,eq,48) output(28,eq,98) output(98,eq,52) output(52,eq,41) output(96,eq,8) output(20,eq,46) output(28,eq,52) output(28,eq,41) output(32,eq,98) output(32,eq,41) output(23,eq,60) output(23,eq,79) output(32,eq,52) output(23,eq,96) output(23,eq,8)
Optimization: 20 11
Progression : [ 2;20] (Error: 9)
Answer: 9
preference(1,(1,1),1,for(atom(hasCost(2))),6) preference(1,(1,2),1,for(atom(hasIngredient(10))),6) preference(1,(1,3),1,for(atom(hasCategory(1))),6) preference(1,(1,4),1,for(atom(hasPrep(2))),6) preference(1,(1,5),1,for(atom(hasCategory(2))),6) preference(1,(1,6),1,for(atom(hasDifficulty(4))),6) preference(1,(1,7),1,for(atom(hasPrep(3))),6) preference(1,(1,8),1,for(atom(hasCost(5))),6) preference(1,(1,9),1,for(atom(hasIngredient(3))),6) preference(1,less(weight)) output(28,better,52) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,48) output(23,better,52) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,60) output(32,better,52) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(46,worse,31) output(52,worse,41) output(32,eq,23) output(23,eq,98) output(98,eq,41) output(60,eq,79) output(28,eq,98) output(96,eq,8) output(52,eq,96) output(46,eq,48) output(20,eq,31) output(52,eq,60) output(23,eq,41) output(28,eq,41) output(32,eq,98) output(32,eq,41) output(52,eq,79) output(52,eq,8)
Optimization: 18 9
Answer: 10
preference(1,(1,1),1,for(atom(hasCategory(2))),8) preference(1,(1,2),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasPrep(4))),6) preference(1,(1,4),1,for(atom(hasIngredient(7))),6) preference(1,(1,5),1,for(atom(hasCost(1))),6) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,7),1,for(atom(hasPrepTime(2))),8) preference(1,(1,8),1,for(atom(hasCost(5))),6) preference(1,(1,9),1,for(atom(hasIngredient(1))),6) preference(1,(1,12),1,for(atom(hasDifficulty(1))),8) preference(1,(1,13),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(46,better,31) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(98,better,41) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(52,better,41) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(31,worse,48) output(32,worse,23) output(32,worse,98) output(32,worse,52) output(41,eq,60) output(60,eq,79) output(98,eq,52) output(41,eq,96) output(96,eq,8) output(41,eq,8) output(46,eq,48) output(41,eq,79) output(32,eq,41) output(32,eq,60) output(32,eq,96) output(32,eq,8) output(32,eq,79)
Optimization: 17 11
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,2),1,for(atom(hasCategory(2))),8) preference(1,(1,3),1,for(atom(hasPrep(7))),6) preference(1,(1,4),1,for(atom(hasDifficulty(3))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),6) preference(1,(1,6),1,for(atom(hasPrepTime(2))),8) preference(1,(1,7),1,for(atom(hasIngredient(7))),6) preference(1,(1,8),1,for(atom(hasPrep(2))),8) preference(1,(1,9),1,for(atom(hasPrep(4))),6) preference(1,(1,10),1,for(atom(hasIngredient(9))),6) preference(1,(1,11),1,for(atom(hasIngredient(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),8) preference(1,(1,13),1,for(atom(hasCost(1))),6) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(98,better,41) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(52,better,41) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(32,worse,23) output(32,worse,98) output(32,worse,52) output(41,eq,60) output(60,eq,79) output(31,eq,48) output(98,eq,52) output(41,eq,96) output(96,eq,8) output(41,eq,8) output(41,eq,79) output(32,eq,41) output(32,eq,60) output(32,eq,96) output(32,eq,8) output(32,eq,79)
Optimization: 16 13
Answer: 12
preference(1,(1,1),1,for(atom(hasCategory(4))),7) preference(1,(1,2),1,for(atom(hasCost(3))),7) preference(1,(1,3),1,for(atom(hasDifficulty(2))),1) preference(1,(1,4),1,for(atom(hasCategory(3))),4) preference(1,(1,5),1,for(atom(hasPrep(0))),8) preference(1,(1,6),1,for(atom(hasCost(2))),1) preference(1,(1,9),1,for(atom(hasIngredient(7))),7) preference(1,(1,10),1,for(atom(hasPrepTime(3))),6) preference(1,(1,11),1,for(atom(hasIngredient(10))),1) preference(1,(1,12),1,for(atom(hasPrep(5))),3) preference(1,(1,14),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(60,better,79) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(96,better,8) output(23,better,98) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,98) output(32,better,60) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,41) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(31,worse,48) output(98,worse,41) output(98,worse,52) output(98,worse,96) output(98,worse,60) output(20,worse,46) output(20,worse,31) output(20,worse,48) output(32,worse,23) output(32,worse,52) output(23,eq,52) output(32,eq,41) output(98,eq,79) output(98,eq,8)
Optimization: 14 11
Answer: 13
preference(1,(1,1),1,for(atom(hasIngredient(3))),6) preference(1,(1,2),1,for(atom(hasPrep(5))),8) preference(1,(1,3),1,for(atom(hasCategory(2))),6) preference(1,(1,4),1,for(atom(hasCategory(1))),8) preference(1,(1,5),1,for(atom(hasPrep(2))),6) preference(1,(1,10),1,for(atom(hasCost(2))),6) preference(1,(1,12),1,for(atom(hasDifficulty(1))),6) preference(1,(1,13),1,for(atom(hasCost(1))),6) preference(1,(1,14),1,for(atom(hasIngredient(10))),8) preference(1,less(weight)) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(96,better,8) output(98,better,41) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,52) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,60) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,8) output(41,better,79) output(52,better,41) output(52,better,60) output(52,better,79) output(52,better,8) output(46,worse,31) output(46,worse,48) output(32,worse,23) output(32,worse,98) output(32,worse,52) output(32,worse,96) output(41,worse,96) output(23,eq,98) output(60,eq,79) output(31,eq,48) output(28,eq,98) output(52,eq,96) output(32,eq,41)
Optimization: 13 9
Answer: 14
preference(1,(1,1),1,for(atom(hasIngredient(3))),6) preference(1,(1,2),1,for(atom(hasPrep(5))),8) preference(1,(1,3),1,for(atom(hasCategory(1))),6) preference(1,(1,4),1,for(atom(hasCategory(2))),6) preference(1,(1,5),1,for(atom(hasPrep(2))),6) preference(1,(1,10),1,for(atom(hasCost(2))),6) preference(1,(1,12),1,for(atom(hasDifficulty(1))),6) preference(1,(1,13),1,for(atom(hasIngredient(10))),6) preference(1,(1,14),1,for(atom(hasCost(1))),8) preference(1,less(weight)) output(46,better,31) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(96,better,8) output(98,better,41) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,52) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,60) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,8) output(41,better,79) output(52,better,41) output(52,better,60) output(52,better,79) output(52,better,8) output(31,worse,48) output(32,worse,23) output(32,worse,98) output(32,worse,52) output(32,worse,96) output(41,worse,96) output(23,eq,98) output(60,eq,79) output(28,eq,98) output(52,eq,96) output(46,eq,48) output(32,eq,41)
Optimization: 12 9
Answer: 15
preference(1,(1,1),1,for(atom(hasDifficulty(1))),6) preference(1,(1,2),1,for(atom(hasPrep(2))),6) preference(1,(1,3),1,for(atom(hasPrep(4))),6) preference(1,(1,4),1,for(atom(hasPrep(5))),6) preference(1,(1,5),1,for(atom(hasIngredient(9))),8) preference(1,(1,10),1,for(atom(hasCategory(2))),8) preference(1,(1,12),1,for(atom(hasCost(1))),8) preference(1,(1,13),1,for(atom(hasIngredient(10))),6) preference(1,(1,14),1,for(atom(hasPrep(6))),8) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(28,better,52) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(98,better,41) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,23) output(32,better,60) output(32,better,52) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(28,worse,98) output(31,worse,48) output(23,worse,98) output(23,worse,41) output(32,worse,98) output(52,worse,41) output(60,eq,79) output(96,eq,8) output(23,eq,52) output(28,eq,41) output(32,eq,41)
Optimization: 11 9
Answer: 16
preference(1,(1,1),1,for(atom(hasIngredient(3))),6) preference(1,(1,2),1,for(atom(hasIngredient(10))),6) preference(1,(1,3),1,for(atom(hasPrep(7))),8) preference(1,(1,4),1,for(atom(hasPrep(5))),6) preference(1,(1,5),1,for(atom(hasCost(1))),8) preference(1,(1,7),1,for(atom(hasCategory(2))),8) preference(1,(1,10),1,for(atom(hasPrep(2))),6) preference(1,(1,11),1,for(atom(hasIngredient(9))),8) preference(1,(1,13),1,for(atom(hasDifficulty(1))),8) preference(1,(1,14),1,for(atom(hasCategory(1))),6) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(96,better,8) output(98,better,41) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,60) output(23,better,79) output(23,better,8) output(32,better,23) output(32,better,60) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(23,worse,98) output(23,worse,52) output(23,worse,41) output(32,worse,98) output(60,eq,79) output(28,eq,98) output(52,eq,41) output(32,eq,41) output(32,eq,52) output(23,eq,96)
Optimization: 10 10
Answer: 17
preference(1,(1,1),1,for(atom(hasCost(2))),8) preference(1,(1,2),1,for(atom(hasCost(1))),6) preference(1,(1,3),1,for(atom(hasPrep(5))),8) preference(1,(1,4),1,for(atom(hasCategory(2))),8) preference(1,(1,5),1,for(atom(hasIngredient(3))),8) preference(1,(1,6),1,for(atom(hasCategory(1))),8) preference(1,(1,7),1,for(atom(hasIngredient(10))),8) preference(1,(1,12),1,for(atom(hasPrep(2))),8) preference(1,(1,13),1,for(atom(hasDifficulty(1))),8) preference(1,(1,14),1,for(atom(hasPrep(0))),6) preference(1,less(weight)) output(46,better,31) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(98,better,41) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,60) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(31,worse,48) output(32,worse,23) output(32,worse,98) output(60,eq,79) output(52,eq,41) output(96,eq,8) output(46,eq,48) output(32,eq,41) output(32,eq,52)
Optimization: 9 10
Answer: 18
preference(1,(1,1),1,for(atom(hasCost(2))),6) preference(1,(1,2),1,for(atom(hasPrep(0))),8) preference(1,(1,3),1,for(atom(hasPrep(5))),4) preference(1,(1,4),1,for(atom(hasIngredient(10))),6) preference(1,(1,5),1,for(atom(hasDifficulty(2))),8) preference(1,(1,6),1,for(atom(hasCategory(3))),5) preference(1,(1,7),1,for(atom(hasPrep(6))),2) preference(1,(1,8),1,for(atom(hasCost(1))),5) preference(1,(1,9),1,for(atom(hasPrepTime(2))),1) preference(1,(1,10),1,for(atom(hasIngredient(9))),1) preference(1,(1,11),1,for(atom(hasIngredient(7))),2) preference(1,(1,12),1,for(atom(hasPrepTime(3))),3) preference(1,(1,13),1,for(atom(hasDifficulty(1))),5) preference(1,(1,14),1,for(atom(hasPrep(1))),6) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(60,better,79) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(96,better,8) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,98) output(32,better,60) output(32,better,52) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(31,worse,48) output(98,worse,41) output(98,worse,52) output(98,worse,60) output(32,worse,23) output(32,worse,41) output(52,worse,41) output(98,eq,96)
Optimization: 8 14
Progression : [3;8] (Error: 1.66667)
Progression : [4;8] (Error: 1)
Answer: 19
preference(1,(1,1),1,for(atom(hasCost(1))),2) preference(1,(1,2),1,for(atom(hasIngredient(10))),5) preference(1,(1,3),1,for(atom(hasIngredient(9))),8) preference(1,(1,4),1,for(atom(hasIngredient(3))),1) preference(1,(1,5),1,for(atom(hasCategory(1))),3) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasCategory(2))),4) preference(1,(1,8),1,for(atom(hasCost(2))),1) preference(1,(1,9),1,for(atom(hasPrep(4))),4) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasPrep(6))),8) preference(1,(1,12),1,for(atom(hasPrep(2))),3) preference(1,(1,13),1,for(atom(hasPrep(1))),2) preference(1,(1,14),1,for(atom(hasPrep(0))),8) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(60,better,79) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(96,better,8) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,23) output(32,better,98) output(32,better,60) output(32,better,52) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(98,worse,41) output(23,worse,41) output(52,worse,41) output(32,eq,41)
Optimization: 4 14
Progression : 4 [ 1;14] (Error: 13)
Answer: 20
preference(1,(1,1),1,for(atom(hasIngredient(10))),5) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,4),1,for(atom(hasPrep(2))),5) preference(1,(1,5),1,for(atom(hasCategory(4))),1) preference(1,(1,6),1,for(atom(hasPrepTime(3))),3) preference(1,(1,7),1,for(atom(hasCategory(3))),4) preference(1,(1,8),1,for(atom(hasIngredient(3))),5) preference(1,(1,9),1,for(atom(hasPrep(5))),6) preference(1,(1,10),1,for(atom(hasPrep(0))),1) preference(1,(1,11),1,for(atom(hasIngredient(9))),3) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(1))),2) preference(1,(1,14),1,for(atom(hasCost(1))),2) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(60,better,79) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(96,better,8) output(98,better,41) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,60) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,41) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(32,worse,23) output(32,worse,98) output(32,worse,52) output(32,eq,41)
Optimization: 4 13
Answer: 21
preference(1,(1,2),1,for(atom(hasIngredient(10))),5) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,4),1,for(atom(hasIngredient(9))),3) preference(1,(1,5),1,for(atom(hasCategory(4))),1) preference(1,(1,6),1,for(atom(hasPrepTime(3))),3) preference(1,(1,7),1,for(atom(hasCategory(3))),4) preference(1,(1,9),1,for(atom(hasPrep(5))),6) preference(1,(1,10),1,for(atom(hasPrep(0))),1) preference(1,(1,11),1,for(atom(hasIngredient(3))),5) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasPrep(2))),5) preference(1,(1,14),1,for(atom(hasCost(1))),2) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(60,better,79) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(96,better,8) output(98,better,41) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,41) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,60) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,41) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(32,worse,23) output(32,worse,98) output(32,worse,52) output(32,eq,41)
Optimization: 4 12
Progression : 4 [ 2;12] (Error: 5)
Answer: 22
preference(1,(1,1),1,for(atom(hasCategory(4))),3) preference(1,(1,2),1,for(atom(hasPrep(5))),5) preference(1,(1,3),1,for(atom(hasPrepTime(3))),3) preference(1,(1,4),1,for(atom(hasPrep(0))),8) preference(1,(1,5),1,for(atom(hasPrepTime(2))),5) preference(1,(1,6),1,for(atom(hasIngredient(9))),3) preference(1,(1,7),1,for(atom(hasIngredient(7))),3) preference(1,(1,8),1,for(atom(hasIngredient(3))),6) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasCost(1))),5) preference(1,(1,13),1,for(atom(hasIngredient(10))),7) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(60,better,79) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(96,better,8) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,23) output(32,better,98) output(32,better,60) output(32,better,52) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(98,worse,41) output(23,worse,41) output(52,worse,41) output(32,eq,41)
Optimization: 4 11
Answer: 23
preference(1,(1,2),1,for(atom(hasPrep(5))),1) preference(1,(1,3),1,for(atom(hasIngredient(9))),3) preference(1,(1,4),1,for(atom(hasIngredient(3))),4) preference(1,(1,9),1,for(atom(hasCategory(1))),4) preference(1,(1,10),1,for(atom(hasIngredient(10))),4) preference(1,(1,11),1,for(atom(hasPrep(7))),1) preference(1,(1,12),1,for(atom(hasCost(2))),2) preference(1,(1,13),1,for(atom(hasDifficulty(1))),2) preference(1,(1,14),1,for(atom(hasPrep(0))),5) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(60,better,79) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(96,better,8) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,23) output(32,better,98) output(32,better,60) output(32,better,52) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(98,worse,41) output(23,worse,41) output(52,worse,41) output(32,eq,41)
Optimization: 4 9
Answer: 24
preference(1,(1,2),1,for(atom(hasPrep(5))),1) preference(1,(1,3),1,for(atom(hasIngredient(9))),3) preference(1,(1,4),1,for(atom(hasIngredient(3))),4) preference(1,(1,5),1,for(atom(hasIngredient(10))),4) preference(1,(1,10),1,for(atom(hasCost(1))),2) preference(1,(1,11),1,for(atom(hasPrep(7))),1) preference(1,(1,12),1,for(atom(hasCost(2))),2) preference(1,(1,14),1,for(atom(hasPrep(0))),5) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(60,better,79) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(96,better,8) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,23) output(32,better,98) output(32,better,60) output(32,better,52) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(98,worse,41) output(23,worse,41) output(52,worse,41) output(32,eq,41)
Optimization: 4 8
Answer: 25
preference(1,(1,2),1,for(atom(hasPrep(0))),5) preference(1,(1,4),1,for(atom(hasCost(1))),2) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,7),1,for(atom(hasPrep(7))),2) preference(1,(1,8),1,for(atom(hasIngredient(3))),6) preference(1,(1,9),1,for(atom(hasCost(2))),6) preference(1,(1,13),1,for(atom(hasIngredient(10))),6) preference(1,less(weight)) output(46,better,31) output(46,better,48) output(60,better,79) output(28,better,98) output(28,better,52) output(28,better,41) output(28,better,60) output(28,better,79) output(28,better,96) output(28,better,8) output(31,better,48) output(96,better,8) output(98,better,52) output(98,better,96) output(98,better,60) output(98,better,79) output(98,better,8) output(20,better,46) output(20,better,31) output(20,better,48) output(23,better,98) output(23,better,52) output(23,better,60) output(23,better,79) output(23,better,96) output(23,better,8) output(32,better,23) output(32,better,98) output(32,better,60) output(32,better,52) output(32,better,96) output(32,better,8) output(32,better,79) output(41,better,60) output(41,better,96) output(41,better,8) output(41,better,79) output(52,better,96) output(52,better,60) output(52,better,79) output(52,better,8) output(98,worse,41) output(23,worse,41) output(52,worse,41) output(32,eq,41)
Optimization: 4 7
Progression : 4 [3;7] (Error: 1.33333)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.054 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 25+
  Optimum    : unknown
Optimization : 4 7
Bounds       : 4 [3;7]
Calls        : 1
Time         : 298.222s (Solving: 295.27s 1st Model: 0.03s Unsat: 0.00s)
CPU Time     : 1183.572s
Threads      : 4        (Winner: 4)

Choices      : 3332945  (Domain: 110719)
Conflicts    : 3123147  (Analyzed: 3123140)
Restarts     : 2693     (Average: 1159.73 Last: 190671)
Model-Level  : 41.0    
Problems     : 13       (Average Length: 0.31 Splits: 0)
Lemmas       : 3224611  (Deleted: 2945330)
  Binary     : 390      (Ratio:   0.01%)
  Ternary    : 529      (Ratio:   0.02%)
  Conflict   : 3123140  (Average Length:  553.1 Ratio:  96.85%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 101471   (Average Length:  653.7 Ratio:   3.15%) 
  Distributed: 33831    (Ratio:   1.08% Average LBD: 3.65) 
  Integrated : 101493   (Ratio: 300.00% Unit: 10 Average Jumps: 17.50)
Backjumps    : 3123140  (Average:  1.05 Max:  60 Sum: 3294524)
  Executed   : 3123131  (Average:  1.05 Max:  60 Sum: 3294456 Ratio: 100.00%)
  Bounded    : 9        (Average:  7.56 Max:  26 Sum:     68 Ratio:   0.00%)

Rules        : 521399  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 15004   
Bodies       : 19024   
  Sum        : 90      
  Count      : 14      
Equivalences : 7425     (Atom=Atom: 463 Body=Body: 194 Other: 6768)
Tight        : Yes
Variables    : 17091    (Eliminated:    0 Frozen: 7767)
Constraints  : 542326   (Binary:  97.6% Ternary:   1.7% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCost(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  2 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasIngredient(1)) ; 
  4 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasCategory(4)) ; 
  5 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCategory(2)) ; 
  6 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasCategory(5)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(4)) ; 
  6 :: atom(hasPrep(3)) ; 
  6 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCategory(1)) ; 
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCost(5)) ; 
  6 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(4)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasCategory(5)) ; 
  6 :: atom(hasIngredient(11)) ; 
  6 :: atom(hasIngredient(1)) ; 
  6 :: atom(hasCost(5)) ; 
  6 :: atom(hasIngredient(6)) ; 
  6 :: atom(hasPrep(3)) ; 
  6 :: atom(hasIngredient(5)) ; 
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasCategory(2)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  6 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(1)) ; 
  6 :: atom(hasIngredient(6)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasCategory(2)) ; 
  6 :: atom(hasIngredient(5)) ; 
  6 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(4)) ; 
  6 :: atom(hasIngredient(1)) ; 
  6 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCategory(2)) ; 
  6 :: atom(hasPrep(3)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCategory(5)) ; 
  6 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasIngredient(6)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasIngredient(4)) ; 
  6 :: atom(hasIngredient(1)) ; 
  6 :: atom(hasCategory(2)) ; 
  6 :: atom(hasCost(4)) ; 
  6 :: atom(hasPrep(3)) ; 
  6 :: atom(hasCategory(1)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasCost(4)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(3)) ; 
  6 :: atom(hasCategory(2)) ; 
  6 :: atom(hasCategory(5)) ; 
  6 :: atom(hasIngredient(8)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  6 :: atom(hasIngredient(1)) ; 
  6 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCategory(2)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  6 :: atom(hasPrep(3)) ; 
  6 :: atom(hasCost(5)) ; 
  6 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(4)) ; 
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(5)) ; 
  6 :: atom(hasIngredient(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCategory(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(4)) ; 
  6 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCost(3)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  1 :: atom(hasCost(2)) ; 
  7 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(2)) ; 
  8 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCategory(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCategory(2)) ; 
  8 :: atom(hasCost(1)) ; 
  6 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasCategory(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(2)) ; 
  6 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCategory(2)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(5)) ; 
  6 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasCost(1)) ; 
  5 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasCategory(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  1 :: atom(hasCategory(4)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCategory(3)) ; 
  5 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(0)) ; 
  3 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasCategory(4)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(0)) ; 
  5 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(4)) ; 
  5 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(5)) ; 
  3 :: atom(hasIngredient(9)) ; 
  4 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasCategory(1)) ; 
  4 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCost(2)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(5)) ; 
  3 :: atom(hasIngredient(9)) ; 
  4 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasIngredient(10)) ; 
  2 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(0)) ; 
  2 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(7)) ; 
  6 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(10)) 
}.
