asprin_vL version 1.0
Reading from stdin
-:1257:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1267:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1282:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1363:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1624:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1637:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1814:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1943:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:2015:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:2019:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:2019:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2025:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2124:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2150:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2270:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2304:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2326:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1174:1-16: info: no atoms over signature occur in program:
  output/3

-:1166:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1167:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(72,eq,31) output(31,eq,18) output(18,eq,51) output(51,eq,90) output(90,eq,79) output(42,eq,23) output(23,eq,7) output(4,eq,72) output(60,eq,76) output(76,eq,37) output(37,eq,42) output(42,eq,18) output(18,eq,92) output(31,eq,92) output(42,eq,92) output(37,eq,18) output(76,eq,42) output(60,eq,37) output(42,eq,7) output(37,eq,23) output(51,eq,79) output(18,eq,90) output(31,eq,51) output(42,eq,51) output(72,eq,18) output(4,eq,31) output(4,eq,18) output(37,eq,51) output(76,eq,51) output(72,eq,51) output(4,eq,51) output(31,eq,90) output(42,eq,90) output(37,eq,90) output(72,eq,90) output(18,eq,79) output(31,eq,79) output(42,eq,79) output(76,eq,23) output(60,eq,23) output(37,eq,7) output(76,eq,7) output(60,eq,42) output(76,eq,18) output(60,eq,18) output(37,eq,92) output(76,eq,92) output(72,eq,92) output(4,eq,92) output(60,eq,92) output(60,eq,7) output(37,eq,79) output(76,eq,79) output(60,eq,79) output(72,eq,79) output(4,eq,79) output(4,eq,90) output(76,eq,90) output(60,eq,90) output(60,eq,51)
Optimization: 60 0
Answer: 2
preference(1,(1,14),1,for(atom(hasPrep(0))),1) preference(1,less(weight)) output(51,better,79) output(72,better,31) output(72,better,18) output(72,better,92) output(72,better,79) output(23,better,7) output(90,better,79) output(76,better,37) output(76,better,42) output(76,better,7) output(76,better,18) output(76,better,92) output(76,better,79) output(18,worse,51) output(18,worse,90) output(60,worse,76) output(60,worse,23) output(60,worse,90) output(60,worse,51) output(4,worse,72) output(4,worse,51) output(4,worse,90) output(31,worse,51) output(31,worse,90) output(37,worse,23) output(37,worse,51) output(37,worse,90) output(42,worse,23) output(42,worse,51) output(42,worse,90) output(31,eq,18) output(51,eq,90) output(37,eq,42) output(42,eq,18) output(18,eq,92) output(31,eq,92) output(42,eq,92) output(37,eq,18) output(60,eq,37) output(42,eq,7) output(4,eq,31) output(4,eq,18) output(76,eq,51) output(72,eq,51) output(72,eq,90) output(18,eq,79) output(31,eq,79) output(42,eq,79) output(76,eq,23) output(37,eq,7) output(60,eq,42) output(60,eq,18) output(37,eq,92) output(4,eq,92) output(60,eq,92) output(60,eq,7) output(37,eq,79) output(60,eq,79) output(4,eq,79) output(76,eq,90)
Optimization: 47 1
Answer: 3
preference(1,(1,14),1,for(atom(hasIngredient(9))),1) preference(1,less(weight)) output(60,better,37) output(60,better,23) output(60,better,42) output(60,better,18) output(60,better,92) output(60,better,7) output(72,better,18) output(72,better,92) output(31,better,18) output(31,better,92) output(76,better,37) output(76,better,42) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,92) output(18,worse,51) output(18,worse,90) output(18,worse,79) output(4,worse,72) output(4,worse,31) output(4,worse,51) output(4,worse,79) output(4,worse,90) output(37,worse,51) output(37,worse,90) output(37,worse,79) output(42,worse,51) output(42,worse,90) output(42,worse,79) output(72,eq,31) output(51,eq,90) output(90,eq,79) output(42,eq,23) output(23,eq,7) output(60,eq,76) output(37,eq,42) output(42,eq,18) output(18,eq,92) output(42,eq,92) output(37,eq,18) output(42,eq,7) output(37,eq,23) output(51,eq,79) output(31,eq,51) output(4,eq,18) output(76,eq,51) output(72,eq,51) output(31,eq,90) output(72,eq,90) output(31,eq,79) output(37,eq,7) output(37,eq,92) output(4,eq,92) output(76,eq,79) output(60,eq,79) output(72,eq,79) output(76,eq,90) output(60,eq,90) output(60,eq,51)
Optimization: 44 1
Answer: 4
preference(1,(1,14),1,for(atom(hasPrep(6))),1) preference(1,less(weight)) output(51,better,79) output(60,better,23) output(60,better,18) output(60,better,92) output(60,better,7) output(60,better,79) output(72,better,31) output(72,better,18) output(72,better,92) output(72,better,79) output(37,better,18) output(37,better,23) output(37,better,7) output(37,better,92) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,92) output(42,better,7) output(42,better,79) output(90,better,79) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,92) output(76,better,79) output(18,worse,51) output(18,worse,90) output(4,worse,72) output(4,worse,51) output(4,worse,90) output(31,worse,51) output(31,worse,90) output(31,eq,18) output(51,eq,90) output(23,eq,7) output(60,eq,76) output(76,eq,37) output(37,eq,42) output(18,eq,92) output(31,eq,92) output(76,eq,42) output(60,eq,37) output(42,eq,51) output(4,eq,31) output(4,eq,18) output(37,eq,51) output(76,eq,51) output(72,eq,51) output(42,eq,90) output(37,eq,90) output(72,eq,90) output(18,eq,79) output(31,eq,79) output(60,eq,42) output(4,eq,92) output(4,eq,79) output(76,eq,90) output(60,eq,90) output(60,eq,51)
Optimization: 34 1
Progression : [ 1;34] (Error: 33)
Answer: 5
preference(1,(1,1),1,for(atom(hasIngredient(9))),1) preference(1,(1,2),1,for(atom(hasCategory(4))),1) preference(1,(1,3),1,for(atom(hasPrep(7))),1) preference(1,(1,4),1,for(atom(hasPrep(4))),1) preference(1,(1,5),1,for(atom(hasIngredient(10))),1) preference(1,(1,6),1,for(atom(hasCategory(2))),1) preference(1,(1,7),1,for(atom(hasPrep(3))),1) preference(1,(1,8),1,for(atom(hasIngredient(12))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasDifficulty(3))),1) preference(1,(1,11),1,for(atom(hasDifficulty(4))),1) preference(1,(1,12),1,for(atom(hasIngredient(3))),1) preference(1,(1,13),1,for(atom(hasCost(5))),1) preference(1,less(weight)) output(60,better,37) output(60,better,23) output(60,better,42) output(60,better,18) output(60,better,92) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,92) output(72,better,79) output(31,better,18) output(31,better,92) output(31,better,51) output(31,better,90) output(31,better,79) output(76,better,37) output(76,better,42) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,92) output(76,better,79) output(76,better,90) output(4,worse,72) output(4,worse,31) output(72,eq,31) output(18,eq,51) output(51,eq,90) output(90,eq,79) output(42,eq,23) output(23,eq,7) output(60,eq,76) output(37,eq,42) output(42,eq,18) output(18,eq,92) output(42,eq,92) output(37,eq,18) output(42,eq,7) output(37,eq,23) output(51,eq,79) output(18,eq,90) output(42,eq,51) output(4,eq,18) output(37,eq,51) output(4,eq,51) output(42,eq,90) output(37,eq,90) output(18,eq,79) output(42,eq,79) output(37,eq,7) output(37,eq,92) output(4,eq,92) output(37,eq,79) output(4,eq,79) output(4,eq,90)
Optimization: 32 13
Answer: 6
preference(1,(1,2),1,for(atom(hasDifficulty(3))),1) preference(1,(1,3),1,for(atom(hasIngredient(11))),1) preference(1,(1,4),1,for(atom(hasPrep(3))),1) preference(1,(1,5),1,for(atom(hasCategory(4))),1) preference(1,(1,6),1,for(atom(hasCategory(2))),1) preference(1,(1,7),1,for(atom(hasIngredient(5))),1) preference(1,(1,8),1,for(atom(hasCost(4))),1) preference(1,(1,9),1,for(atom(hasIngredient(10))),1) preference(1,(1,10),1,for(atom(hasPrep(4))),1) preference(1,(1,11),1,for(atom(hasCost(5))),1) preference(1,(1,12),1,for(atom(hasIngredient(1))),1) preference(1,(1,13),1,for(atom(hasIngredient(2))),1) preference(1,less(weight)) output(51,better,90) output(51,better,79) output(60,better,23) output(60,better,18) output(60,better,7) output(60,better,79) output(60,better,90) output(72,better,18) output(72,better,90) output(72,better,79) output(4,better,18) output(4,better,79) output(4,better,90) output(31,better,18) output(31,better,90) output(31,better,79) output(37,better,18) output(37,better,23) output(37,better,90) output(37,better,7) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,7) output(42,better,90) output(42,better,79) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,79) output(76,better,90) output(18,worse,51) output(18,worse,92) output(72,eq,31) output(90,eq,79) output(23,eq,7) output(4,eq,72) output(60,eq,76) output(76,eq,37) output(37,eq,42) output(31,eq,92) output(42,eq,92) output(76,eq,42) output(60,eq,37) output(18,eq,90) output(31,eq,51) output(42,eq,51) output(4,eq,31) output(37,eq,51) output(76,eq,51) output(72,eq,51) output(4,eq,51) output(18,eq,79) output(60,eq,42) output(37,eq,92) output(76,eq,92) output(72,eq,92) output(4,eq,92) output(60,eq,92) output(60,eq,51)
Optimization: 29 12
Answer: 7
preference(1,(1,1),1,for(atom(hasDifficulty(1))),1) preference(1,(1,2),1,for(atom(hasPrepTime(1))),1) preference(1,(1,3),1,for(atom(hasDifficulty(4))),1) preference(1,(1,4),1,for(atom(hasDifficulty(3))),1) preference(1,(1,5),1,for(atom(hasCost(4))),1) preference(1,(1,6),1,for(atom(hasCategory(2))),1) preference(1,(1,7),1,for(atom(hasIngredient(8))),1) preference(1,(1,8),1,for(atom(hasCategory(4))),1) preference(1,(1,9),1,for(atom(hasIngredient(10))),1) preference(1,(1,10),1,for(atom(hasIngredient(1))),1) preference(1,(1,11),1,for(atom(hasIngredient(3))),1) preference(1,(1,12),1,for(atom(hasCost(5))),1) preference(1,(1,13),1,for(atom(hasIngredient(2))),1) preference(1,less(weight)) output(60,better,23) output(60,better,18) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,31) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,79) output(4,better,31) output(4,better,18) output(4,better,51) output(4,better,79) output(4,better,90) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,79) output(76,better,90) output(18,worse,92) output(31,worse,92) output(31,eq,18) output(18,eq,51) output(51,eq,90) output(90,eq,79) output(23,eq,7) output(4,eq,72) output(60,eq,76) output(76,eq,37) output(37,eq,42) output(42,eq,92) output(76,eq,42) output(60,eq,37) output(51,eq,79) output(18,eq,90) output(31,eq,51) output(31,eq,90) output(18,eq,79) output(31,eq,79) output(60,eq,42) output(37,eq,92) output(76,eq,92) output(72,eq,92) output(4,eq,92) output(60,eq,92)
Optimization: 26 13
Answer: 8
preference(1,(1,2),1,for(atom(hasIngredient(6))),1) preference(1,(1,3),1,for(atom(hasIngredient(8))),1) preference(1,(1,4),1,for(atom(hasCategory(2))),1) preference(1,(1,5),1,for(atom(hasCost(4))),1) preference(1,(1,6),1,for(atom(hasPrep(3))),1) preference(1,(1,7),1,for(atom(hasIngredient(5))),1) preference(1,(1,8),1,for(atom(hasCategory(4))),1) preference(1,(1,9),1,for(atom(hasIngredient(10))),1) preference(1,(1,10),1,for(atom(hasDifficulty(4))),1) preference(1,(1,11),1,for(atom(hasDifficulty(3))),1) preference(1,(1,12),1,for(atom(hasCost(5))),1) preference(1,(1,13),1,for(atom(hasIngredient(3))),1) preference(1,less(weight)) output(60,better,23) output(60,better,18) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,79) output(4,better,18) output(4,better,51) output(4,better,79) output(4,better,90) output(31,better,18) output(31,better,51) output(31,better,90) output(31,better,79) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,79) output(76,better,90) output(18,worse,92) output(72,eq,31) output(18,eq,51) output(51,eq,90) output(90,eq,79) output(23,eq,7) output(4,eq,72) output(60,eq,76) output(76,eq,37) output(37,eq,42) output(31,eq,92) output(42,eq,92) output(76,eq,42) output(60,eq,37) output(51,eq,79) output(18,eq,90) output(4,eq,31) output(18,eq,79) output(60,eq,42) output(37,eq,92) output(76,eq,92) output(72,eq,92) output(4,eq,92) output(60,eq,92)
Optimization: 24 12
Answer: 9
preference(1,(1,1),1,for(atom(hasCategory(4))),8) preference(1,(1,2),1,for(atom(hasPrepTime(1))),8) preference(1,(1,3),1,for(atom(hasCost(4))),8) preference(1,(1,4),1,for(atom(hasDifficulty(4))),8) preference(1,(1,5),1,for(atom(hasIngredient(3))),8) preference(1,(1,6),1,for(atom(hasCost(5))),1) preference(1,(1,7),1,for(atom(hasIngredient(6))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),1) preference(1,(1,9),1,for(atom(hasPrep(4))),1) preference(1,(1,10),1,for(atom(hasPrep(3))),1) preference(1,(1,11),1,for(atom(hasDifficulty(3))),8) preference(1,(1,12),1,for(atom(hasCost(3))),1) preference(1,(1,13),1,for(atom(hasDifficulty(1))),8) preference(1,(1,14),1,for(atom(hasPrep(2))),1) preference(1,less(weight)) output(18,better,51) output(18,better,90) output(18,better,79) output(60,better,23) output(60,better,18) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,31) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,79) output(4,better,72) output(4,better,31) output(4,better,18) output(4,better,51) output(4,better,79) output(4,better,90) output(31,better,51) output(31,better,90) output(31,better,79) output(37,better,42) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(76,better,42) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,79) output(76,better,90) output(18,worse,92) output(60,worse,76) output(60,worse,37) output(60,worse,92) output(72,worse,92) output(31,worse,92) output(42,worse,92) output(31,eq,18) output(51,eq,90) output(90,eq,79) output(23,eq,7) output(76,eq,37) output(51,eq,79) output(60,eq,42) output(37,eq,92) output(76,eq,92) output(4,eq,92)
Optimization: 17 14
Answer: 10
preference(1,(1,1),1,for(atom(hasCategory(4))),8) preference(1,(1,5),1,for(atom(hasCost(3))),1) preference(1,(1,6),1,for(atom(hasDifficulty(1))),1) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,8),1,for(atom(hasDifficulty(4))),1) preference(1,(1,9),1,for(atom(hasPrep(5))),1) preference(1,(1,10),1,for(atom(hasCategory(5))),1) preference(1,(1,11),1,for(atom(hasIngredient(3))),8) preference(1,(1,12),1,for(atom(hasIngredient(10))),8) preference(1,(1,13),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(60,better,76) output(60,better,23) output(60,better,42) output(60,better,18) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,79) output(4,better,72) output(4,better,31) output(4,better,18) output(4,better,51) output(4,better,79) output(4,better,90) output(31,better,18) output(31,better,51) output(31,better,90) output(31,better,79) output(37,better,42) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(90,better,79) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,79) output(76,better,90) output(18,worse,92) output(51,worse,90) output(72,worse,92) output(31,worse,92) output(42,worse,92) output(76,worse,37) output(76,worse,92) output(72,eq,31) output(23,eq,7) output(76,eq,42) output(60,eq,37) output(51,eq,79) output(18,eq,90) output(37,eq,92) output(4,eq,92) output(60,eq,92)
Optimization: 16 10
Answer: 11
preference(1,(1,1),1,for(atom(hasPrepTime(2))),4) preference(1,(1,2),1,for(atom(hasIngredient(3))),7) preference(1,(1,3),1,for(atom(hasDifficulty(2))),6) preference(1,(1,4),1,for(atom(hasPrep(2))),1) preference(1,(1,5),1,for(atom(hasCategory(4))),2) preference(1,(1,6),1,for(atom(hasCost(2))),4) preference(1,(1,7),1,for(atom(hasPrep(0))),2) preference(1,(1,8),1,for(atom(hasDifficulty(1))),2) preference(1,(1,9),1,for(atom(hasPrepTime(3))),2) preference(1,(1,10),1,for(atom(hasDifficulty(4))),1) preference(1,(1,11),1,for(atom(hasCost(3))),6) preference(1,(1,12),1,for(atom(hasCategory(3))),6) preference(1,(1,13),1,for(atom(hasCategory(1))),1) preference(1,(1,14),1,for(atom(hasPrep(6))),7) preference(1,less(weight)) output(18,better,92) output(18,better,79) output(51,better,79) output(60,better,76) output(60,better,23) output(60,better,42) output(60,better,18) output(60,better,92) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,31) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,92) output(72,better,79) output(31,better,18) output(31,better,92) output(31,better,79) output(37,better,42) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,92) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,92) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(23,better,7) output(90,better,79) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,92) output(76,better,79) output(76,better,90) output(18,worse,51) output(18,worse,90) output(51,worse,90) output(60,worse,37) output(4,worse,72) output(4,worse,31) output(4,worse,18) output(4,worse,51) output(4,worse,90) output(31,worse,51) output(31,worse,90) output(76,worse,37) output(76,eq,42) output(4,eq,92) output(4,eq,79)
Optimization: 15 14
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(2))),3) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasPrep(0))),2) preference(1,(1,4),1,for(atom(hasCategory(1))),7) preference(1,(1,5),1,for(atom(hasPrepTime(2))),4) preference(1,(1,6),1,for(atom(hasCost(2))),1) preference(1,(1,7),1,for(atom(hasIngredient(3))),6) preference(1,(1,8),1,for(atom(hasDifficulty(1))),8) preference(1,(1,9),1,for(atom(hasIngredient(7))),3) preference(1,(1,10),1,for(atom(hasPrep(2))),7) preference(1,(1,12),1,for(atom(hasCategory(4))),5) preference(1,(1,13),1,for(atom(hasPrepTime(3))),3) preference(1,(1,14),1,for(atom(hasPrep(1))),2) preference(1,less(weight)) output(18,better,90) output(18,better,79) output(51,better,90) output(51,better,79) output(60,better,23) output(60,better,18) output(60,better,92) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,31) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,92) output(72,better,79) output(4,better,31) output(4,better,18) output(4,better,51) output(4,better,79) output(4,better,90) output(31,better,90) output(31,better,79) output(37,better,42) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,92) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,92) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(23,better,7) output(90,better,79) output(76,better,37) output(76,better,42) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,92) output(76,better,79) output(76,better,90) output(18,worse,51) output(18,worse,92) output(60,worse,76) output(60,worse,37) output(60,worse,42) output(4,worse,72) output(31,worse,18) output(31,worse,92) output(31,worse,51) output(4,eq,92)
Optimization: 10 13
Answer: 13
preference(1,(1,1),1,for(atom(hasIngredient(3))),4) preference(1,(1,2),1,for(atom(hasPrepTime(3))),1) preference(1,(1,3),1,for(atom(hasPrep(5))),5) preference(1,(1,4),1,for(atom(hasPrep(7))),6) preference(1,(1,5),1,for(atom(hasCategory(3))),2) preference(1,(1,6),1,for(atom(hasIngredient(10))),7) preference(1,(1,7),1,for(atom(hasDifficulty(4))),3) preference(1,(1,8),1,for(atom(hasPrep(6))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),6) preference(1,(1,10),1,for(atom(hasIngredient(4))),2) preference(1,(1,11),1,for(atom(hasCategory(4))),5) preference(1,(1,12),1,for(atom(hasCost(3))),5) preference(1,(1,13),1,for(atom(hasCost(4))),2) preference(1,(1,14),1,for(atom(hasPrepTime(2))),3) preference(1,less(weight)) output(18,better,51) output(18,better,92) output(18,better,90) output(18,better,79) output(51,better,79) output(60,better,76) output(60,better,37) output(60,better,23) output(60,better,42) output(60,better,18) output(60,better,92) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,31) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,92) output(72,better,79) output(4,better,51) output(4,better,79) output(4,better,90) output(31,better,18) output(31,better,92) output(31,better,51) output(31,better,90) output(31,better,79) output(37,better,42) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,92) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,92) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(23,better,7) output(90,better,79) output(76,better,37) output(76,better,42) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,92) output(76,better,79) output(76,better,90) output(4,worse,72) output(4,worse,31) output(4,worse,18) output(51,eq,90) output(4,eq,92)
Optimization: 5 14
Progression : [2;5] (Error: 1.5)
Progression : [3;5] (Error: 0.666667)
Progression : [4;5] (Error: 0.25)
Answer: 14
preference(1,(1,1),1,for(atom(hasIngredient(3))),4) preference(1,(1,2),1,for(atom(hasPrepTime(3))),1) preference(1,(1,3),1,for(atom(hasPrep(5))),5) preference(1,(1,4),1,for(atom(hasPrep(7))),6) preference(1,(1,5),1,for(atom(hasCategory(3))),2) preference(1,(1,6),1,for(atom(hasIngredient(10))),4) preference(1,(1,7),1,for(atom(hasDifficulty(4))),3) preference(1,(1,8),1,for(atom(hasPrep(6))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),6) preference(1,(1,10),1,for(atom(hasIngredient(4))),2) preference(1,(1,11),1,for(atom(hasCategory(4))),7) preference(1,(1,12),1,for(atom(hasCost(3))),5) preference(1,(1,13),1,for(atom(hasCost(4))),2) preference(1,(1,14),1,for(atom(hasPrepTime(2))),3) preference(1,less(weight)) output(18,better,51) output(18,better,92) output(18,better,90) output(18,better,79) output(51,better,90) output(51,better,79) output(60,better,76) output(60,better,37) output(60,better,23) output(60,better,42) output(60,better,18) output(60,better,92) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,31) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,92) output(72,better,79) output(4,better,51) output(4,better,79) output(4,better,90) output(31,better,18) output(31,better,92) output(31,better,51) output(31,better,90) output(31,better,79) output(37,better,42) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,92) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,92) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(23,better,7) output(90,better,79) output(76,better,37) output(76,better,42) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,92) output(76,better,79) output(76,better,90) output(4,worse,72) output(4,worse,31) output(4,worse,18) output(4,eq,92)
Optimization: 4 14
Progression : 4 [ 1;14] (Error: 13)
Progression : 4 [ 2;14] (Error: 6)
Answer: 15
preference(1,(1,1),1,for(atom(hasCost(3))),5) preference(1,(1,2),1,for(atom(hasIngredient(12))),7) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),4) preference(1,(1,5),1,for(atom(hasIngredient(10))),8) preference(1,(1,6),1,for(atom(hasCost(2))),7) preference(1,(1,7),1,for(atom(hasDifficulty(1))),6) preference(1,(1,8),1,for(atom(hasIngredient(9))),3) preference(1,(1,9),1,for(atom(hasPrep(2))),2) preference(1,(1,10),1,for(atom(hasPrep(7))),4) preference(1,(1,11),1,for(atom(hasDifficulty(3))),2) preference(1,(1,12),1,for(atom(hasPrep(1))),1) preference(1,(1,13),1,for(atom(hasDifficulty(4))),4) preference(1,less(weight)) output(18,better,51) output(18,better,92) output(18,better,90) output(18,better,79) output(51,better,90) output(51,better,79) output(60,better,76) output(60,better,37) output(60,better,23) output(60,better,42) output(60,better,18) output(60,better,92) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,31) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,92) output(72,better,79) output(4,better,51) output(4,better,79) output(4,better,90) output(31,better,18) output(31,better,92) output(31,better,51) output(31,better,90) output(31,better,79) output(37,better,42) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,92) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,92) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(23,better,7) output(90,better,79) output(76,better,37) output(76,better,42) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,92) output(76,better,79) output(76,better,90) output(4,worse,72) output(4,worse,31) output(4,worse,18) output(4,eq,92)
Optimization: 4 13
Answer: 16
preference(1,(1,1),1,for(atom(hasIngredient(10))),8) preference(1,(1,2),1,for(atom(hasCost(3))),5) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),4) preference(1,(1,5),1,for(atom(hasIngredient(3))),4) preference(1,(1,6),1,for(atom(hasCost(2))),7) preference(1,(1,7),1,for(atom(hasDifficulty(1))),6) preference(1,(1,8),1,for(atom(hasIngredient(9))),3) preference(1,(1,9),1,for(atom(hasPrep(2))),2) preference(1,(1,10),1,for(atom(hasPrep(7))),4) preference(1,(1,11),1,for(atom(hasCost(4))),7) preference(1,(1,12),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(18,better,51) output(18,better,92) output(18,better,90) output(18,better,79) output(51,better,90) output(51,better,79) output(60,better,76) output(60,better,37) output(60,better,23) output(60,better,42) output(60,better,18) output(60,better,92) output(60,better,7) output(60,better,79) output(60,better,90) output(60,better,51) output(72,better,31) output(72,better,18) output(72,better,51) output(72,better,90) output(72,better,92) output(72,better,79) output(4,better,51) output(4,better,79) output(4,better,90) output(31,better,18) output(31,better,92) output(31,better,51) output(31,better,90) output(31,better,79) output(37,better,42) output(37,better,18) output(37,better,23) output(37,better,51) output(37,better,90) output(37,better,7) output(37,better,92) output(37,better,79) output(42,better,23) output(42,better,18) output(42,better,92) output(42,better,7) output(42,better,51) output(42,better,90) output(42,better,79) output(23,better,7) output(90,better,79) output(76,better,37) output(76,better,42) output(76,better,51) output(76,better,23) output(76,better,7) output(76,better,18) output(76,better,92) output(76,better,79) output(76,better,90) output(4,worse,72) output(4,worse,31) output(4,worse,18) output(4,eq,92)
Optimization: 4 12
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.115 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 16+
  Optimum    : unknown
Optimization : 4 12
Bounds       : 4 [2;12]
Calls        : 1
Time         : 298.362s (Solving: 295.21s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1183.435s
Threads      : 4        (Winner: 4)

Choices      : 7705972  (Domain: 148372)
Conflicts    : 3384009  (Analyzed: 3384003)
Restarts     : 3333     (Average: 1015.30 Last: 264272)
Model-Level  : 120.2   
Problems     : 11       (Average Length: 0.36 Splits: 0)
Lemmas       : 3390877  (Deleted: 3152314)
  Binary     : 563      (Ratio:   0.02%)
  Ternary    : 659      (Ratio:   0.02%)
  Conflict   : 3384003  (Average Length:  506.5 Ratio:  99.80%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 6874     (Average Length:   40.6 Ratio:   0.20%) 
  Distributed: 2295     (Ratio:   0.07% Average LBD: 3.54) 
  Integrated : 6885     (Ratio: 300.00% Unit: 26 Average Jumps: 40.85)
Backjumps    : 3384003  (Average:  1.89 Max: 1083 Sum: 6388729)
  Executed   : 3383996  (Average:  1.89 Max: 1083 Sum: 6388618 Ratio: 100.00%)
  Bounded    : 7        (Average: 15.86 Max:  54 Sum:    111 Ratio:   0.00%)

Rules        : 663274  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 16474   
Bodies       : 19189   
  Sum        : 120     
  Count      : 14      
Equivalences : 7950     (Atom=Atom: 613 Body=Body: 254 Other: 7083)
Tight        : Yes
Variables    : 17151    (Eliminated:    0 Frozen: 7827)
Constraints  : 682836   (Binary:  98.1% Ternary:   1.4% Other:   0.5%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrep(4)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasPrep(3)) ; 
  1 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCost(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasIngredient(11)) ; 
  1 :: atom(hasPrep(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasIngredient(5)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasIngredient(1)) ; 
  1 :: atom(hasIngredient(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasIngredient(8)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasIngredient(1)) ; 
  1 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasIngredient(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(6)) ; 
  1 :: atom(hasIngredient(8)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasPrep(3)) ; 
  1 :: atom(hasIngredient(5)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCost(5)) ; 
  8 :: atom(hasIngredient(6)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(4)) ; 
  1 :: atom(hasPrep(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasPrep(5)) ; 
  1 :: atom(hasCategory(5)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCategory(4)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  6 :: atom(hasCost(3)) ; 
  6 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrep(0)) ; 
  7 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasPrep(2)) ; 
  5 :: atom(hasCategory(4)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrep(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasCategory(4)) ; 
  5 :: atom(hasCost(3)) ; 
  2 :: atom(hasCost(4)) ; 
  3 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCategory(3)) ; 
  4 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrep(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCategory(4)) ; 
  5 :: atom(hasCost(3)) ; 
  2 :: atom(hasCost(4)) ; 
  3 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(3)) ; 
  7 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasPrep(1)) ; 
  4 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  5 :: atom(hasCost(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCategory(4)) ; 
  4 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCost(4)) ; 
  1 :: atom(hasPrep(1)) 
}.
