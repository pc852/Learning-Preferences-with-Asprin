asprin_vL version 1.0
Reading from stdin
-:1234:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1244:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1259:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1340:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1601:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1614:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1791:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1920:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1992:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1996:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1996:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2002:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2101:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2127:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2247:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2281:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2303:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1151:1-16: info: no atoms over signature occur in program:
  output/3

-:1143:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1144:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(100,eq,21) output(21,eq,60) output(60,eq,32) output(32,eq,73) output(73,eq,57) output(56,eq,89) output(51,eq,100) output(82,eq,73) output(73,eq,78) output(20,eq,88) output(88,eq,50) output(50,eq,72) output(88,eq,72) output(20,eq,50) output(32,eq,78) output(82,eq,78) output(32,eq,57) output(82,eq,57) output(60,eq,73) output(21,eq,32) output(100,eq,60) output(51,eq,21) output(51,eq,60) output(100,eq,32) output(51,eq,32) output(21,eq,73) output(100,eq,73) output(60,eq,57) output(21,eq,57) output(60,eq,78) output(21,eq,78) output(20,eq,72) output(100,eq,78) output(51,eq,78) output(100,eq,57) output(51,eq,57) output(51,eq,73)
Optimization: 37 0
Answer: 2
preference(1,(1,7),1,for(atom(hasIngredient(12))),7) preference(1,(1,10),1,for(atom(hasCost(1))),1) preference(1,less(weight)) output(51,better,60) output(51,better,32) output(51,better,78) output(60,better,32) output(60,better,78) output(82,better,78) output(100,better,60) output(100,better,32) output(100,better,78) output(21,better,60) output(21,better,32) output(21,better,78) output(73,better,78) output(60,worse,73) output(60,worse,57) output(32,worse,73) output(32,worse,57) output(100,eq,21) output(73,eq,57) output(56,eq,89) output(51,eq,100) output(82,eq,73) output(20,eq,88) output(88,eq,50) output(50,eq,72) output(88,eq,72) output(20,eq,50) output(32,eq,78) output(82,eq,57) output(51,eq,21) output(21,eq,73) output(100,eq,73) output(21,eq,57) output(20,eq,72) output(100,eq,57) output(51,eq,57) output(51,eq,73)
Optimization: 24 2
Answer: 3
preference(1,(1,7),1,for(atom(hasIngredient(12))),7) preference(1,(1,10),1,for(atom(hasIngredient(7))),1) preference(1,less(weight)) output(51,better,60) output(51,better,32) output(51,better,78) output(60,better,32) output(60,better,78) output(88,better,50) output(82,better,78) output(100,better,60) output(100,better,32) output(100,better,78) output(21,better,60) output(21,better,32) output(21,better,78) output(73,better,78) output(50,worse,72) output(60,worse,73) output(60,worse,57) output(20,worse,88) output(20,worse,72) output(32,worse,73) output(32,worse,57) output(100,eq,21) output(73,eq,57) output(56,eq,89) output(51,eq,100) output(82,eq,73) output(88,eq,72) output(20,eq,50) output(32,eq,78) output(82,eq,57) output(51,eq,21) output(21,eq,73) output(100,eq,73) output(21,eq,57) output(100,eq,57) output(51,eq,57) output(51,eq,73)
Optimization: 23 2
Answer: 4
preference(1,(1,1),1,for(atom(hasIngredient(12))),1) preference(1,(1,2),1,for(atom(hasPrep(3))),1) preference(1,(1,3),1,for(atom(hasDifficulty(4))),1) preference(1,(1,4),1,for(atom(hasIngredient(1))),1) preference(1,(1,5),1,for(atom(hasDifficulty(3))),1) preference(1,(1,6),1,for(atom(hasCategory(2))),1) preference(1,(1,7),1,for(atom(hasPrep(7))),1) preference(1,(1,8),1,for(atom(hasIngredient(3))),1) preference(1,(1,9),1,for(atom(hasPrep(5))),1) preference(1,(1,10),1,for(atom(hasIngredient(6))),1) preference(1,(1,11),1,for(atom(hasIngredient(10))),1) preference(1,(1,12),1,for(atom(hasCategory(5))),1) preference(1,(1,13),1,for(atom(hasCost(5))),1) preference(1,less(weight)) output(60,better,32) output(60,better,73) output(60,better,57) output(60,better,78) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(51,worse,100) output(51,worse,60) output(21,worse,60) output(32,eq,73) output(73,eq,57) output(73,eq,78) output(88,eq,50) output(50,eq,72) output(88,eq,72) output(32,eq,78) output(32,eq,57) output(21,eq,32) output(100,eq,60) output(51,eq,21) output(51,eq,32) output(21,eq,73) output(21,eq,57) output(21,eq,78) output(51,eq,78) output(51,eq,57) output(51,eq,73)
Optimization: 21 13
Answer: 5
preference(1,(1,7),1,for(atom(hasIngredient(12))),7) preference(1,(1,10),1,for(atom(hasCategory(4))),1) preference(1,(1,14),1,for(atom(hasPrep(0))),7) preference(1,less(weight)) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,57) output(60,better,78) output(82,better,78) output(82,better,57) output(100,better,32) output(100,better,78) output(100,better,57) output(21,better,60) output(21,better,32) output(21,better,57) output(21,better,78) output(73,better,57) output(73,better,78) output(60,worse,73) output(82,worse,73) output(100,worse,21) output(100,worse,73) output(20,worse,88) output(20,worse,50) output(20,worse,72) output(32,worse,73) output(56,eq,89) output(88,eq,50) output(50,eq,72) output(88,eq,72) output(32,eq,78) output(32,eq,57) output(100,eq,60) output(21,eq,73)
Optimization: 16 3
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(3))),1) preference(1,(1,2),1,for(atom(hasDifficulty(3))),1) preference(1,(1,3),1,for(atom(hasIngredient(10))),8) preference(1,(1,4),1,for(atom(hasIngredient(4))),1) preference(1,(1,6),1,for(atom(hasIngredient(6))),8) preference(1,(1,7),1,for(atom(hasCost(1))),1) preference(1,(1,8),1,for(atom(hasDifficulty(1))),1) preference(1,(1,9),1,for(atom(hasPrepTime(1))),1) preference(1,(1,10),1,for(atom(hasIngredient(9))),1) preference(1,(1,11),1,for(atom(hasCost(3))),8) preference(1,(1,12),1,for(atom(hasPrep(4))),8) preference(1,(1,13),1,for(atom(hasIngredient(7))),8) preference(1,less(weight)) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,60) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(50,worse,72) output(60,worse,32) output(88,worse,72) output(100,worse,21) output(73,eq,57) output(73,eq,78) output(88,eq,50) output(60,eq,73) output(100,eq,32) output(60,eq,57) output(60,eq,78) output(20,eq,72)
Optimization: 12 12
Answer: 7
preference(1,(1,1),1,for(atom(hasIngredient(11))),1) preference(1,(1,2),1,for(atom(hasIngredient(6))),1) preference(1,(1,3),1,for(atom(hasIngredient(10))),8) preference(1,(1,4),1,for(atom(hasIngredient(5))),1) preference(1,(1,6),1,for(atom(hasIngredient(7))),8) preference(1,(1,7),1,for(atom(hasIngredient(1))),1) preference(1,(1,8),1,for(atom(hasDifficulty(3))),1) preference(1,(1,9),1,for(atom(hasDifficulty(1))),1) preference(1,(1,10),1,for(atom(hasIngredient(8))),1) preference(1,(1,11),1,for(atom(hasCost(3))),8) preference(1,(1,12),1,for(atom(hasPrep(3))),8) preference(1,(1,13),1,for(atom(hasIngredient(9))),1) preference(1,(1,14),1,for(atom(hasPrepTime(1))),1) preference(1,less(weight)) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,73) output(60,better,57) output(60,better,78) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(50,worse,72) output(88,worse,72) output(60,eq,32) output(73,eq,57) output(51,eq,100) output(73,eq,78) output(88,eq,50) output(20,eq,72)
Optimization: 8 13
Answer: 8
preference(1,(1,1),1,for(atom(hasCost(1))),6) preference(1,(1,2),1,for(atom(hasDifficulty(2))),5) preference(1,(1,3),1,for(atom(hasPrepTime(3))),8) preference(1,(1,4),1,for(atom(hasIngredient(6))),2) preference(1,(1,5),1,for(atom(hasCategory(1))),8) preference(1,(1,6),1,for(atom(hasPrep(6))),6) preference(1,(1,7),1,for(atom(hasIngredient(12))),3) preference(1,(1,8),1,for(atom(hasCategory(4))),1) preference(1,(1,9),1,for(atom(hasCost(2))),7) preference(1,(1,10),1,for(atom(hasPrep(5))),8) preference(1,(1,11),1,for(atom(hasIngredient(7))),5) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasPrepTime(2))),4) preference(1,(1,14),1,for(atom(hasCost(3))),3) preference(1,less(weight)) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,73) output(60,better,57) output(60,better,78) output(88,better,50) output(88,better,72) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78) output(21,eq,60) output(56,eq,89) output(51,eq,100) output(50,eq,72)
Optimization: 4 14
Answer: 9
preference(1,(1,1),1,for(atom(hasCost(3))),4) preference(1,(1,2),1,for(atom(hasPrepTime(1))),5) preference(1,(1,3),1,for(atom(hasPrep(3))),8) preference(1,(1,4),1,for(atom(hasIngredient(7))),1) preference(1,(1,5),1,for(atom(hasDifficulty(2))),6) preference(1,(1,6),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasPrep(2))),2) preference(1,(1,9),1,for(atom(hasDifficulty(3))),8) preference(1,(1,10),1,for(atom(hasPrep(6))),6) preference(1,(1,11),1,for(atom(hasCategory(1))),3) preference(1,(1,12),1,for(atom(hasIngredient(12))),7) preference(1,(1,13),1,for(atom(hasCategory(4))),5) preference(1,(1,14),1,for(atom(hasPrep(5))),6) preference(1,less(weight)) output(50,better,72) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,73) output(60,better,57) output(60,better,78) output(88,better,72) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78) output(88,worse,50) output(100,worse,21) output(100,worse,60) output(32,worse,73)
Optimization: 4 13
Answer: 10
preference(1,(1,1),1,for(atom(hasPrepTime(1))),1) preference(1,(1,2),1,for(atom(hasIngredient(10))),6) preference(1,(1,3),1,for(atom(hasCost(1))),7) preference(1,(1,4),1,for(atom(hasPrep(6))),3) preference(1,(1,5),1,for(atom(hasIngredient(12))),6) preference(1,(1,6),1,for(atom(hasIngredient(6))),8) preference(1,(1,7),1,for(atom(hasIngredient(3))),2) preference(1,(1,8),1,for(atom(hasCost(2))),2) preference(1,(1,9),1,for(atom(hasCost(3))),5) preference(1,(1,10),1,for(atom(hasDifficulty(3))),8) preference(1,(1,11),1,for(atom(hasPrepTime(2))),3) preference(1,(1,12),1,for(atom(hasDifficulty(2))),5) preference(1,(1,13),1,for(atom(hasPrep(1))),4) preference(1,(1,14),1,for(atom(hasCategory(1))),1) preference(1,less(weight)) output(50,better,72) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,73) output(60,better,57) output(60,better,78) output(88,better,50) output(88,better,72) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78) output(21,worse,60) output(21,worse,32) output(21,eq,73)
Optimization: 3 14
Answer: 11
preference(1,(1,1),1,for(atom(hasDifficulty(2))),6) preference(1,(1,2),1,for(atom(hasCategory(1))),5) preference(1,(1,4),1,for(atom(hasPrep(0))),6) preference(1,(1,5),1,for(atom(hasIngredient(7))),6) preference(1,(1,6),1,for(atom(hasPrepTime(2))),6) preference(1,(1,7),1,for(atom(hasDifficulty(1))),3) preference(1,(1,8),1,for(atom(hasIngredient(6))),8) preference(1,(1,9),1,for(atom(hasIngredient(10))),7) preference(1,(1,10),1,for(atom(hasPrepTime(1))),1) preference(1,(1,11),1,for(atom(hasDifficulty(3))),8) preference(1,(1,12),1,for(atom(hasCost(3))),2) preference(1,(1,13),1,for(atom(hasCategory(4))),6) preference(1,(1,14),1,for(atom(hasPrep(5))),5) preference(1,less(weight)) output(50,better,72) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,57) output(60,better,78) output(88,better,50) output(88,better,72) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78) output(60,worse,73) output(32,worse,73)
Optimization: 2 13
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(2))),4) preference(1,(1,2),1,for(atom(hasPrep(6))),4) preference(1,(1,3),1,for(atom(hasCategory(4))),4) preference(1,(1,4),1,for(atom(hasCost(1))),8) preference(1,(1,5),1,for(atom(hasDifficulty(3))),5) preference(1,(1,6),1,for(atom(hasIngredient(6))),8) preference(1,(1,7),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasIngredient(12))),7) preference(1,(1,9),1,for(atom(hasCategory(1))),2) preference(1,(1,10),1,for(atom(hasCost(3))),3) preference(1,(1,11),1,for(atom(hasPrepTime(3))),4) preference(1,(1,12),1,for(atom(hasIngredient(7))),4) preference(1,(1,13),1,for(atom(hasPrepTime(2))),7) preference(1,(1,14),1,for(atom(hasCost(2))),4) preference(1,less(weight)) output(50,better,72) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,73) output(60,better,57) output(60,better,78) output(88,better,50) output(88,better,72) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78) output(60,eq,32)
Optimization: 1 14
Answer: 13
preference(1,(1,1),1,for(atom(hasIngredient(3))),4) preference(1,(1,2),1,for(atom(hasPrep(2))),2) preference(1,(1,3),1,for(atom(hasIngredient(10))),6) preference(1,(1,4),1,for(atom(hasDifficulty(3))),5) preference(1,(1,5),1,for(atom(hasPrepTime(2))),8) preference(1,(1,6),1,for(atom(hasIngredient(6))),5) preference(1,(1,7),1,for(atom(hasPrepTime(1))),5) preference(1,(1,8),1,for(atom(hasCategory(1))),2) preference(1,(1,9),1,for(atom(hasIngredient(12))),8) preference(1,(1,10),1,for(atom(hasCost(1))),8) preference(1,(1,11),1,for(atom(hasDifficulty(1))),5) preference(1,(1,12),1,for(atom(hasCost(3))),3) preference(1,(1,13),1,for(atom(hasPrep(5))),3) preference(1,(1,14),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(50,better,72) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,73) output(60,better,57) output(60,better,78) output(88,better,50) output(88,better,72) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Progression : 0 [ 2;14] (Error: 6)
Answer: 14
preference(1,(1,1),1,for(atom(hasCost(2))),2) preference(1,(1,2),1,for(atom(hasCost(3))),7) preference(1,(1,3),1,for(atom(hasIngredient(6))),8) preference(1,(1,4),1,for(atom(hasPrep(1))),3) preference(1,(1,6),1,for(atom(hasPrep(6))),3) preference(1,(1,7),1,for(atom(hasIngredient(3))),2) preference(1,(1,9),1,for(atom(hasIngredient(10))),7) preference(1,(1,10),1,for(atom(hasIngredient(7))),7) preference(1,(1,11),1,for(atom(hasDifficulty(3))),4) preference(1,(1,13),1,for(atom(hasPrep(5))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),3) preference(1,less(weight)) output(50,better,72) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,73) output(60,better,57) output(60,better,78) output(88,better,50) output(88,better,72) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78)
Optimization: 0 11
Answer: 15
preference(1,(1,1),1,for(atom(hasCategory(1))),7) preference(1,(1,2),1,for(atom(hasIngredient(7))),4) preference(1,(1,3),1,for(atom(hasPrep(6))),8) preference(1,(1,4),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasCategory(4))),1) preference(1,(1,7),1,for(atom(hasIngredient(12))),7) preference(1,(1,10),1,for(atom(hasPrep(5))),1) preference(1,(1,11),1,for(atom(hasPrep(2))),7) preference(1,(1,12),1,for(atom(hasCost(3))),4) preference(1,(1,14),1,for(atom(hasPrep(3))),6) preference(1,less(weight)) output(50,better,72) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,73) output(60,better,57) output(60,better,78) output(88,better,50) output(88,better,72) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78)
Optimization: 0 10
Answer: 16
preference(1,(1,1),1,for(atom(hasPrepTime(1))),2) preference(1,(1,2),1,for(atom(hasIngredient(10))),1) preference(1,(1,3),1,for(atom(hasIngredient(3))),5) preference(1,(1,4),1,for(atom(hasIngredient(6))),7) preference(1,(1,5),1,for(atom(hasPrepTime(2))),6) preference(1,(1,6),1,for(atom(hasCost(3))),3) preference(1,(1,7),1,for(atom(hasDifficulty(3))),5) preference(1,(1,9),1,for(atom(hasCost(4))),6) preference(1,(1,10),1,for(atom(hasCost(1))),8) preference(1,less(weight)) output(50,better,72) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,73) output(60,better,57) output(60,better,78) output(88,better,50) output(88,better,72) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78)
Optimization: 0 9
Progression : 0 [3;9] (Error: 2)
Answer: 17
preference(1,(1,2),1,for(atom(hasCost(3))),3) preference(1,(1,4),1,for(atom(hasPrep(2))),4) preference(1,(1,6),1,for(atom(hasCost(1))),3) preference(1,(1,7),1,for(atom(hasPrepTime(1))),1) preference(1,(1,10),1,for(atom(hasPrep(6))),5) preference(1,(1,11),1,for(atom(hasPrep(3))),7) preference(1,(1,13),1,for(atom(hasPrepTime(2))),5) preference(1,(1,14),1,for(atom(hasDifficulty(3))),7) preference(1,less(weight)) output(50,better,72) output(51,better,100) output(51,better,21) output(51,better,60) output(51,better,32) output(51,better,78) output(51,better,57) output(51,better,73) output(60,better,32) output(60,better,73) output(60,better,57) output(60,better,78) output(88,better,50) output(88,better,72) output(56,better,89) output(82,better,73) output(82,better,78) output(82,better,57) output(100,better,21) output(100,better,60) output(100,better,32) output(100,better,73) output(100,better,78) output(100,better,57) output(20,better,88) output(20,better,50) output(20,better,72) output(21,better,60) output(21,better,32) output(21,better,73) output(21,better,57) output(21,better,78) output(32,better,73) output(32,better,78) output(32,better,57) output(73,better,57) output(73,better,78)
Optimization: 0 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.082 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 17+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 598.195s (Solving: 595.55s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2384.113s
Threads      : 4        (Winner: 4)

Choices      : 8169577  (Domain: 486918)
Conflicts    : 7819874  (Analyzed: 7819871)
Restarts     : 6096     (Average: 1282.79 Last: 694325)
Model-Level  : 53.6    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 7974287  (Deleted: 7543331)
  Binary     : 543      (Ratio:   0.01%)
  Ternary    : 1389     (Ratio:   0.02%)
  Conflict   : 7819871  (Average Length:  482.3 Ratio:  98.06%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 154416   (Average Length:  481.3 Ratio:   1.94%) 
  Distributed: 51496    (Ratio:   0.66% Average LBD: 3.82) 
  Integrated : 154488   (Ratio: 300.00% Unit: 8 Average Jumps: 4.12)
Backjumps    : 7819871  (Average:  1.03 Max:  64 Sum: 8093011)
  Executed   : 7819870  (Average:  1.03 Max:  64 Sum: 8092982 Ratio: 100.00%)
  Bounded    : 1        (Average: 29.00 Max:  29 Sum:     29 Ratio:   0.00%)

Rules        : 446031  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14228   
Bodies       : 18936   
  Sum        : 74      
  Count      : 14      
Equivalences : 7145     (Atom=Atom: 383 Body=Body: 162 Other: 6600)
Tight        : Yes
Variables    : 17067    (Eliminated:    0 Frozen: 7743)
Constraints  : 467694   (Binary:  97.2% Ternary:   2.0% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasPrep(3)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasIngredient(1)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  1 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(6)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(3)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasIngredient(6)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(11)) ; 
  1 :: atom(hasIngredient(6)) ; 
  8 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasIngredient(5)) ; 
  8 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasIngredient(1)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasIngredient(8)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(3)) ; 
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasIngredient(6)) ; 
  8 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  3 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(3)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(3)) ; 
  1 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(2)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasPrep(6)) ; 
  3 :: atom(hasCategory(1)) ; 
  7 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasCategory(4)) ; 
  6 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(6)) ; 
  6 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasIngredient(6)) ; 
  2 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasCost(2)) ; 
  5 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(1)) ; 
  1 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(6)) ; 
  7 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCost(3)) ; 
  6 :: atom(hasCategory(4)) ; 
  5 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(6)) ; 
  4 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(6)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasCategory(1)) ; 
  3 :: atom(hasCost(3)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasPrep(2)) ; 
  6 :: atom(hasIngredient(10)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasIngredient(6)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasCost(2)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasIngredient(6)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(6)) ; 
  2 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(1)) ; 
  4 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrep(6)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCost(3)) ; 
  6 :: atom(hasPrep(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasIngredient(10)) ; 
  5 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasIngredient(6)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(3)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(3)) ; 
  4 :: atom(hasPrep(2)) ; 
  3 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(3)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(3)) 
}.
