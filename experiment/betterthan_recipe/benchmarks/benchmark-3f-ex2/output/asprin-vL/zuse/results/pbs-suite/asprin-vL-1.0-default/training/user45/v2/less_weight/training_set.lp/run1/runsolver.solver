asprin_vL version 1.0
Reading from stdin
-:1234:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1244:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1259:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1340:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1601:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1614:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1791:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1920:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1992:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1996:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1996:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2002:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2101:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2127:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2247:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2281:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2303:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1151:1-16: info: no atoms over signature occur in program:
  output/3

-:1143:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1144:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(58,eq,90) output(65,eq,79) output(22,eq,84) output(84,eq,92) output(92,eq,77) output(77,eq,10) output(100,eq,52) output(51,eq,58) output(75,eq,64) output(64,eq,38) output(38,eq,24) output(24,eq,84) output(38,eq,84) output(64,eq,24) output(75,eq,38) output(92,eq,10) output(84,eq,77) output(22,eq,92) output(24,eq,92) output(51,eq,90) output(38,eq,92) output(64,eq,92) output(22,eq,77) output(24,eq,77) output(38,eq,77) output(84,eq,10) output(22,eq,10) output(24,eq,10) output(75,eq,24) output(64,eq,84) output(75,eq,84) output(38,eq,10) output(64,eq,10) output(75,eq,10) output(64,eq,77) output(75,eq,77) output(75,eq,92)
Optimization: 37 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(51,better,90) output(38,better,84) output(38,better,92) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,84) output(75,better,92) output(24,better,84) output(24,better,92) output(22,worse,77) output(22,worse,10) output(84,worse,77) output(84,worse,10) output(64,worse,38) output(64,worse,24) output(64,worse,10) output(64,worse,77) output(92,worse,77) output(92,worse,10) output(22,eq,84) output(84,eq,92) output(77,eq,10) output(100,eq,52) output(51,eq,58) output(38,eq,24) output(75,eq,38) output(22,eq,92) output(64,eq,92) output(24,eq,77) output(38,eq,77) output(24,eq,10) output(75,eq,24) output(64,eq,84) output(38,eq,10) output(75,eq,10) output(75,eq,77)
Optimization: 27 14
Answer: 3
preference(1,(1,1),1,for(atom(hasDifficulty(1))),4) preference(1,(1,2),1,for(atom(hasPrep(0))),4) preference(1,(1,3),1,for(atom(hasIngredient(9))),7) preference(1,(1,4),1,for(atom(hasPrepTime(1))),4) preference(1,(1,5),1,for(atom(hasPrepTime(2))),7) preference(1,(1,7),1,for(atom(hasPrep(6))),7) preference(1,(1,8),1,for(atom(hasCategory(3))),4) preference(1,(1,9),1,for(atom(hasCost(3))),4) preference(1,(1,10),1,for(atom(hasCost(2))),4) preference(1,(1,12),1,for(atom(hasDifficulty(2))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,10) output(77,better,10) output(92,better,10) output(75,better,64) output(75,better,38) output(75,better,10) output(24,better,84) output(24,better,92) output(24,better,10) output(22,worse,77) output(84,worse,77) output(38,worse,24) output(38,worse,84) output(38,worse,92) output(38,worse,77) output(64,worse,24) output(64,worse,92) output(64,worse,84) output(64,worse,77) output(92,worse,77) output(58,worse,90) output(75,worse,24) output(75,worse,77) output(65,eq,79) output(22,eq,84) output(84,eq,92) output(100,eq,52) output(64,eq,38) output(22,eq,92) output(24,eq,77) output(75,eq,84) output(38,eq,10) output(64,eq,10) output(75,eq,92)
Optimization: 25 11
Answer: 4
preference(1,(1,6),1,for(atom(hasIngredient(10))),8) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,less(weight)) output(22,better,84) output(22,better,10) output(38,better,24) output(38,better,84) output(38,better,10) output(64,better,24) output(64,better,84) output(64,better,10) output(77,better,10) output(92,better,10) output(65,better,79) output(75,better,24) output(75,better,84) output(75,better,10) output(84,worse,92) output(84,worse,77) output(24,worse,92) output(24,worse,77) output(58,eq,90) output(92,eq,77) output(100,eq,52) output(51,eq,58) output(75,eq,64) output(64,eq,38) output(24,eq,84) output(75,eq,38) output(22,eq,92) output(51,eq,90) output(38,eq,92) output(64,eq,92) output(22,eq,77) output(38,eq,77) output(84,eq,10) output(24,eq,10) output(64,eq,77) output(75,eq,77) output(75,eq,92)
Optimization: 23 2
Answer: 5
preference(1,(1,6),1,for(atom(hasIngredient(10))),8) preference(1,(1,12),1,for(atom(hasPrepTime(1))),8) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,less(weight)) output(22,better,84) output(22,better,77) output(22,better,10) output(64,better,38) output(64,better,24) output(64,better,84) output(64,better,10) output(64,better,77) output(92,better,77) output(92,better,10) output(65,better,79) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(84,worse,92) output(38,worse,92) output(24,worse,92) output(58,eq,90) output(77,eq,10) output(100,eq,52) output(51,eq,58) output(75,eq,64) output(38,eq,24) output(24,eq,84) output(38,eq,84) output(84,eq,77) output(22,eq,92) output(51,eq,90) output(64,eq,92) output(24,eq,77) output(38,eq,77) output(84,eq,10) output(24,eq,10) output(38,eq,10) output(75,eq,92)
Optimization: 21 3
Answer: 6
preference(1,(1,1),1,for(atom(hasDifficulty(1))),4) preference(1,(1,2),1,for(atom(hasPrep(0))),4) preference(1,(1,3),1,for(atom(hasIngredient(9))),7) preference(1,(1,4),1,for(atom(hasPrepTime(1))),4) preference(1,(1,5),1,for(atom(hasPrepTime(2))),7) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,7),1,for(atom(hasPrep(6))),7) preference(1,(1,8),1,for(atom(hasCategory(3))),4) preference(1,(1,9),1,for(atom(hasIngredient(12))),4) preference(1,(1,10),1,for(atom(hasCost(2))),4) preference(1,(1,11),1,for(atom(hasDifficulty(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(2))),7) preference(1,(1,13),1,for(atom(hasIngredient(7))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(22,better,84) output(22,better,10) output(51,better,90) output(84,better,10) output(38,better,24) output(38,better,84) output(38,better,10) output(64,better,24) output(64,better,84) output(64,better,10) output(77,better,10) output(92,better,10) output(58,better,90) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(24,better,84) output(24,better,10) output(22,worse,77) output(84,worse,92) output(84,worse,77) output(38,worse,92) output(38,worse,77) output(64,worse,92) output(64,worse,77) output(92,worse,77) output(75,worse,77) output(24,worse,92) output(24,worse,77) output(65,eq,79) output(100,eq,52) output(51,eq,58) output(64,eq,38) output(22,eq,92) output(75,eq,92)
Optimization: 17 14
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(6))),7) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasDifficulty(2))),7) preference(1,(1,4),1,for(atom(hasPrep(1))),8) preference(1,(1,5),1,for(atom(hasPrepTime(1))),8) preference(1,(1,6),1,for(atom(hasCost(3))),7) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasCategory(5))),7) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),7) preference(1,(1,13),1,for(atom(hasPrep(0))),8) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,77) output(84,better,10) output(38,better,24) output(38,better,92) output(38,better,10) output(64,better,24) output(64,better,92) output(64,better,10) output(77,better,10) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,10) output(75,better,77) output(75,better,92) output(38,worse,84) output(64,worse,84) output(92,worse,77) output(24,worse,84) output(24,worse,77) output(58,eq,90) output(65,eq,79) output(100,eq,52) output(64,eq,38) output(92,eq,10) output(24,eq,92) output(38,eq,77) output(24,eq,10) output(75,eq,84) output(64,eq,77)
Optimization: 15 13
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(6))),7) preference(1,(1,2),1,for(atom(hasDifficulty(3))),8) preference(1,(1,3),1,for(atom(hasDifficulty(2))),7) preference(1,(1,4),1,for(atom(hasPrep(1))),8) preference(1,(1,5),1,for(atom(hasPrepTime(1))),8) preference(1,(1,6),1,for(atom(hasCost(3))),7) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasCategory(5))),7) preference(1,(1,11),1,for(atom(hasPrep(7))),7) preference(1,(1,12),1,for(atom(hasCategory(4))),7) preference(1,(1,13),1,for(atom(hasPrep(0))),8) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,77) output(84,better,10) output(38,better,24) output(38,better,92) output(38,better,10) output(64,better,24) output(64,better,92) output(64,better,10) output(77,better,10) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,10) output(75,better,77) output(75,better,92) output(38,worse,84) output(64,worse,84) output(92,worse,77) output(24,worse,84) output(24,worse,77) output(58,eq,90) output(100,eq,52) output(64,eq,38) output(92,eq,10) output(24,eq,92) output(38,eq,77) output(24,eq,10) output(75,eq,84) output(64,eq,77)
Optimization: 14 13
Answer: 9
preference(1,(1,1),1,for(atom(hasDifficulty(2))),7) preference(1,(1,2),1,for(atom(hasDifficulty(3))),8) preference(1,(1,3),1,for(atom(hasPrepTime(1))),8) preference(1,(1,4),1,for(atom(hasPrep(1))),8) preference(1,(1,5),1,for(atom(hasIngredient(10))),7) preference(1,(1,6),1,for(atom(hasCategory(5))),7) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,8),1,for(atom(hasCost(4))),7) preference(1,(1,11),1,for(atom(hasPrep(7))),7) preference(1,(1,13),1,for(atom(hasPrep(0))),8) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,77) output(84,better,10) output(38,better,24) output(38,better,92) output(38,better,10) output(64,better,24) output(64,better,92) output(64,better,10) output(77,better,10) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(38,worse,84) output(64,worse,84) output(92,worse,77) output(24,worse,84) output(24,worse,77) output(58,eq,90) output(100,eq,52) output(64,eq,38) output(92,eq,10) output(24,eq,92) output(38,eq,77) output(24,eq,10) output(64,eq,77)
Optimization: 13 11
Progression : [ 1;13] (Error: 12)
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(2))),8) preference(1,(1,2),1,for(atom(hasIngredient(10))),8) preference(1,(1,3),1,for(atom(hasCost(3))),7) preference(1,(1,4),1,for(atom(hasCategory(4))),7) preference(1,(1,5),1,for(atom(hasCategory(5))),7) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasPrep(1))),8) preference(1,(1,11),1,for(atom(hasPrep(7))),7) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasPrep(0))),8) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,77) output(84,better,10) output(64,better,38) output(64,better,10) output(64,better,77) output(92,better,77) output(92,better,10) output(100,better,52) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,77) output(24,better,10) output(38,worse,24) output(38,worse,84) output(38,worse,92) output(64,worse,24) output(58,eq,90) output(84,eq,92) output(77,eq,10) output(64,eq,92) output(38,eq,77) output(75,eq,24) output(64,eq,84) output(38,eq,10)
Optimization: 12 12
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(2))),8) preference(1,(1,2),1,for(atom(hasIngredient(10))),8) preference(1,(1,3),1,for(atom(hasCategory(5))),7) preference(1,(1,4),1,for(atom(hasPrepTime(1))),7) preference(1,(1,5),1,for(atom(hasPrep(4))),7) preference(1,(1,7),1,for(atom(hasDifficulty(2))),7) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,11),1,for(atom(hasPrep(7))),7) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,77) output(84,better,10) output(64,better,38) output(64,better,92) output(64,better,10) output(64,better,77) output(100,better,52) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,77) output(24,better,10) output(38,worse,24) output(38,worse,84) output(64,worse,24) output(58,eq,90) output(92,eq,77) output(77,eq,10) output(92,eq,10) output(38,eq,92) output(38,eq,77) output(64,eq,84) output(38,eq,10)
Optimization: 11 9
Answer: 12
preference(1,(1,1),1,for(atom(hasPrep(6))),2) preference(1,(1,2),1,for(atom(hasPrepTime(2))),2) preference(1,(1,3),1,for(atom(hasPrep(0))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),4) preference(1,(1,5),1,for(atom(hasCost(2))),7) preference(1,(1,6),1,for(atom(hasCategory(1))),7) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasCategory(3))),3) preference(1,(1,10),1,for(atom(hasIngredient(7))),7) preference(1,(1,11),1,for(atom(hasDifficulty(1))),4) preference(1,(1,12),1,for(atom(hasPrep(1))),3) preference(1,(1,13),1,for(atom(hasDifficulty(2))),6) preference(1,(1,14),1,for(atom(hasPrep(2))),5) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,10) output(38,better,84) output(38,better,92) output(38,better,10) output(64,better,92) output(64,better,84) output(64,better,10) output(77,better,10) output(100,better,52) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,77) output(24,better,10) output(84,worse,77) output(38,worse,24) output(64,worse,38) output(64,worse,24) output(64,worse,77) output(92,worse,77) output(92,worse,10) output(75,worse,24) output(38,eq,77)
Optimization: 9 14
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(6))),2) preference(1,(1,2),1,for(atom(hasPrepTime(2))),2) preference(1,(1,3),1,for(atom(hasPrep(0))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),4) preference(1,(1,5),1,for(atom(hasCost(2))),7) preference(1,(1,6),1,for(atom(hasCategory(1))),7) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasCategory(3))),3) preference(1,(1,10),1,for(atom(hasIngredient(7))),7) preference(1,(1,11),1,for(atom(hasDifficulty(1))),4) preference(1,(1,12),1,for(atom(hasDifficulty(3))),8) preference(1,(1,13),1,for(atom(hasDifficulty(2))),6) preference(1,(1,14),1,for(atom(hasPrep(2))),5) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,10) output(38,better,24) output(38,better,84) output(38,better,92) output(38,better,10) output(64,better,92) output(64,better,84) output(64,better,10) output(77,better,10) output(92,better,10) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,10) output(84,worse,77) output(64,worse,38) output(64,worse,24) output(64,worse,77) output(92,worse,77) output(24,worse,77) output(100,eq,52) output(38,eq,77)
Optimization: 8 14
Answer: 14
preference(1,(1,1),1,for(atom(hasPrep(6))),2) preference(1,(1,2),1,for(atom(hasCategory(4))),2) preference(1,(1,3),1,for(atom(hasPrep(0))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),4) preference(1,(1,5),1,for(atom(hasCost(2))),7) preference(1,(1,6),1,for(atom(hasCategory(1))),7) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasCategory(3))),3) preference(1,(1,10),1,for(atom(hasIngredient(7))),7) preference(1,(1,11),1,for(atom(hasDifficulty(1))),4) preference(1,(1,12),1,for(atom(hasDifficulty(3))),8) preference(1,(1,13),1,for(atom(hasDifficulty(2))),6) preference(1,(1,14),1,for(atom(hasPrep(2))),5) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,10) output(38,better,24) output(38,better,84) output(38,better,92) output(38,better,10) output(64,better,24) output(64,better,92) output(64,better,84) output(64,better,10) output(77,better,10) output(92,better,10) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,10) output(84,worse,77) output(92,worse,77) output(24,worse,77) output(100,eq,52) output(64,eq,38) output(38,eq,77) output(64,eq,77)
Optimization: 7 14
Answer: 15
preference(1,(1,1),1,for(atom(hasPrep(6))),2) preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasPrep(0))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),4) preference(1,(1,5),1,for(atom(hasCost(2))),7) preference(1,(1,6),1,for(atom(hasCategory(1))),7) preference(1,(1,7),1,for(atom(hasPrep(1))),3) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasCategory(3))),3) preference(1,(1,10),1,for(atom(hasIngredient(7))),7) preference(1,(1,11),1,for(atom(hasDifficulty(1))),4) preference(1,(1,12),1,for(atom(hasCategory(4))),2) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,(1,14),1,for(atom(hasPrep(2))),5) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,10) output(38,better,24) output(38,better,84) output(38,better,92) output(38,better,10) output(64,better,24) output(64,better,92) output(64,better,84) output(64,better,10) output(77,better,10) output(92,better,10) output(100,better,52) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,10) output(84,worse,77) output(92,worse,77) output(24,worse,77) output(64,eq,38) output(38,eq,77) output(64,eq,77)
Optimization: 6 14
Answer: 16
preference(1,(1,1),1,for(atom(hasDifficulty(1))),8) preference(1,(1,2),1,for(atom(hasPrep(2))),5) preference(1,(1,4),1,for(atom(hasDifficulty(2))),3) preference(1,(1,5),1,for(atom(hasIngredient(12))),2) preference(1,(1,6),1,for(atom(hasPrepTime(1))),6) preference(1,(1,7),1,for(atom(hasCategory(5))),5) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasPrep(1))),1) preference(1,(1,10),1,for(atom(hasDifficulty(3))),7) preference(1,(1,11),1,for(atom(hasCategory(4))),2) preference(1,(1,12),1,for(atom(hasIngredient(9))),2) preference(1,(1,13),1,for(atom(hasCategory(3))),8) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,77) output(84,better,10) output(38,better,10) output(64,better,38) output(64,better,24) output(64,better,92) output(64,better,84) output(64,better,10) output(64,better,77) output(77,better,10) output(92,better,77) output(92,better,10) output(100,better,52) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,77) output(24,better,10) output(38,worse,24) output(38,worse,84) output(38,worse,92) output(38,worse,77) output(84,eq,92)
Optimization: 5 13
Answer: 17
preference(1,(1,1),1,for(atom(hasDifficulty(1))),8) preference(1,(1,2),1,for(atom(hasPrep(2))),3) preference(1,(1,3),1,for(atom(hasIngredient(3))),1) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasCategory(4))),1) preference(1,(1,6),1,for(atom(hasPrepTime(1))),6) preference(1,(1,7),1,for(atom(hasDifficulty(3))),6) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasDifficulty(2))),5) preference(1,(1,10),1,for(atom(hasPrep(7))),5) preference(1,(1,12),1,for(atom(hasIngredient(10))),2) preference(1,(1,13),1,for(atom(hasCategory(3))),8) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,77) output(84,better,10) output(38,better,92) output(38,better,10) output(64,better,38) output(64,better,24) output(64,better,92) output(64,better,84) output(64,better,10) output(64,better,77) output(77,better,10) output(92,better,10) output(100,better,52) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,77) output(24,better,10) output(38,worse,24) output(38,worse,84) output(92,worse,77) output(38,eq,77)
Optimization: 4 13
Progression : [4;4] (Error: 0)
Answer: 18
preference(1,(1,1),1,for(atom(hasCost(2))),6) preference(1,(1,2),1,for(atom(hasPrep(7))),5) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,4),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasIngredient(10))),1) preference(1,(1,8),1,for(atom(hasCategory(5))),4) preference(1,(1,9),1,for(atom(hasIngredient(3))),1) preference(1,(1,10),1,for(atom(hasPrepTime(2))),2) preference(1,(1,11),1,for(atom(hasPrep(2))),3) preference(1,(1,12),1,for(atom(hasCategory(3))),6) preference(1,(1,13),1,for(atom(hasPrepTime(1))),3) preference(1,(1,14),1,for(atom(hasDifficulty(2))),5) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,10) output(38,better,24) output(38,better,84) output(38,better,92) output(38,better,10) output(64,better,38) output(64,better,24) output(64,better,92) output(64,better,84) output(64,better,10) output(64,better,77) output(77,better,10) output(92,better,10) output(100,better,52) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,10) output(84,worse,77) output(92,worse,77) output(24,worse,77) output(38,eq,77)
Optimization: 4 12
Answer: 19
preference(1,(1,1),1,for(atom(hasPrepTime(1))),4) preference(1,(1,3),1,for(atom(hasCategory(4))),4) preference(1,(1,4),1,for(atom(hasIngredient(9))),4) preference(1,(1,5),1,for(atom(hasCategory(3))),8) preference(1,(1,7),1,for(atom(hasPrep(0))),8) preference(1,(1,8),1,for(atom(hasCost(2))),8) preference(1,(1,9),1,for(atom(hasDifficulty(3))),7) preference(1,(1,10),1,for(atom(hasPrep(2))),2) preference(1,(1,11),1,for(atom(hasIngredient(10))),8) preference(1,(1,13),1,for(atom(hasCost(3))),3) preference(1,(1,14),1,for(atom(hasDifficulty(1))),1) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,77) output(84,better,10) output(38,better,10) output(64,better,38) output(64,better,24) output(64,better,92) output(64,better,84) output(64,better,10) output(64,better,77) output(77,better,10) output(92,better,77) output(92,better,10) output(100,better,52) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,77) output(24,better,10) output(38,worse,24) output(38,worse,84) output(38,worse,92) output(38,eq,77)
Optimization: 4 11
Progression : 4 [ 1;11] (Error: 10)
Answer: 20
preference(1,(1,1),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasPrepTime(1))),7) preference(1,(1,7),1,for(atom(hasPrep(6))),4) preference(1,(1,8),1,for(atom(hasDifficulty(3))),5) preference(1,(1,9),1,for(atom(hasIngredient(12))),4) preference(1,(1,10),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasCategory(5))),1) preference(1,(1,12),1,for(atom(hasIngredient(10))),7) preference(1,(1,14),1,for(atom(hasCost(2))),1) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,77) output(84,better,10) output(38,better,92) output(38,better,10) output(64,better,38) output(64,better,24) output(64,better,92) output(64,better,84) output(64,better,10) output(64,better,77) output(77,better,10) output(92,better,10) output(100,better,52) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,77) output(24,better,10) output(38,worse,24) output(38,worse,84) output(92,worse,77) output(38,eq,77)
Optimization: 4 9
Progression : 4 [2;9] (Error: 3.5)
Progression : 4 [3;9] (Error: 2)
Answer: 21
preference(1,(1,2),1,for(atom(hasDifficulty(3))),8) preference(1,(1,4),1,for(atom(hasPrepTime(1))),3) preference(1,(1,6),1,for(atom(hasDifficulty(2))),8) preference(1,(1,8),1,for(atom(hasCost(1))),2) preference(1,(1,9),1,for(atom(hasIngredient(10))),7) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,13),1,for(atom(hasCost(2))),2) preference(1,(1,14),1,for(atom(hasPrep(6))),1) preference(1,less(weight)) output(22,better,84) output(22,better,92) output(22,better,77) output(22,better,10) output(51,better,58) output(51,better,90) output(84,better,92) output(84,better,10) output(38,better,24) output(38,better,84) output(38,better,92) output(38,better,10) output(64,better,38) output(64,better,24) output(64,better,92) output(64,better,84) output(64,better,10) output(64,better,77) output(77,better,10) output(92,better,10) output(100,better,52) output(58,better,90) output(65,better,79) output(75,better,64) output(75,better,38) output(75,better,24) output(75,better,84) output(75,better,10) output(75,better,77) output(75,better,92) output(24,better,84) output(24,better,92) output(24,better,10) output(84,worse,77) output(92,worse,77) output(24,worse,77) output(38,eq,77)
Optimization: 4 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.028 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 21+
  Optimum    : unknown
Optimization : 4 8
Bounds       : 4 [3;8]
Calls        : 1
Time         : 298.238s (Solving: 295.49s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1184.529s
Threads      : 4        (Winner: 4)

Choices      : 3706109  (Domain: 193316)
Conflicts    : 3446662  (Analyzed: 3446654)
Restarts     : 3047     (Average: 1131.16 Last: 225274)
Model-Level  : 65.6    
Problems     : 15       (Average Length: 0.27 Splits: 0)
Lemmas       : 3563992  (Deleted: 3333073)
  Binary     : 1079     (Ratio:   0.03%)
  Ternary    : 1544     (Ratio:   0.04%)
  Conflict   : 3446654  (Average Length:  477.7 Ratio:  96.71%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 117338   (Average Length:  566.7 Ratio:   3.29%) 
  Distributed: 39144    (Ratio:   1.14% Average LBD: 3.76) 
  Integrated : 117432   (Ratio: 300.00% Unit: 21 Average Jumps: 9.71)
Backjumps    : 3446654  (Average:  1.06 Max:  97 Sum: 3665393)
  Executed   : 3446647  (Average:  1.06 Max:  97 Sum: 3665324 Ratio: 100.00%)
  Bounded    : 7        (Average:  9.86 Max:  22 Sum:     69 Ratio:   0.00%)

Rules        : 448271  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14236   
Bodies       : 18936   
  Sum        : 74      
  Count      : 14      
Equivalences : 7145     (Atom=Atom: 383 Body=Body: 162 Other: 6600)
Tight        : Yes
Variables    : 17075    (Eliminated:    0 Frozen: 7751)
Constraints  : 469942   (Binary:  97.2% Ternary:   2.0% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(9)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCost(3)) ; 
  4 :: atom(hasCost(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(9)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(6)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(6)) ; 
  2 :: atom(hasCategory(4)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(6)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasCategory(1)) ; 
  3 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCategory(4)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  5 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(2)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasCategory(5)) ; 
  8 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCategory(4)) ; 
  2 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  1 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCategory(4)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  2 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  1 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasCategory(5)) ; 
  1 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasCategory(4)) ; 
  4 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(2)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasCost(3)) ; 
  1 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(6)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCategory(5)) ; 
  7 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(6)) 
}.
