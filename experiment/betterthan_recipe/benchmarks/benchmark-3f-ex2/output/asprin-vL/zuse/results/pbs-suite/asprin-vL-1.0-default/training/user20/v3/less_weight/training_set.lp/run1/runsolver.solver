asprin_vL version 1.0
Reading from stdin
-:1244:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1254:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1269:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1350:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1611:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1624:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1801:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1930:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:2002:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:2006:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:2006:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2012:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2111:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2137:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2257:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2291:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2313:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1161:1-16: info: no atoms over signature occur in program:
  output/3

-:1153:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1154:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(38,eq,75) output(75,eq,5) output(26,eq,20) output(20,eq,48) output(48,eq,60) output(60,eq,55) output(55,eq,22) output(57,eq,75) output(75,eq,62) output(62,eq,76) output(76,eq,38) output(11,eq,10) output(73,eq,26) output(62,eq,38) output(75,eq,76) output(38,eq,62) output(57,eq,62) output(60,eq,22) output(48,eq,55) output(20,eq,60) output(26,eq,48) output(73,eq,20) output(38,eq,5) output(57,eq,5) output(76,eq,75) output(62,eq,75) output(75,eq,75) output(76,eq,5) output(62,eq,5) output(73,eq,48) output(26,eq,60) output(73,eq,60) output(20,eq,55) output(26,eq,55) output(48,eq,22) output(20,eq,22) output(76,eq,62) output(62,eq,62) output(38,eq,76) output(57,eq,76) output(76,eq,76) output(75,eq,38) output(38,eq,38) output(57,eq,38) output(26,eq,22) output(73,eq,22) output(73,eq,55)
Optimization: 47 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(3))),2) preference(1,less(weight)) output(38,better,75) output(38,better,62) output(38,better,76) output(57,better,75) output(57,better,62) output(57,better,76) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,55) output(26,worse,22) output(60,worse,22) output(55,worse,22) output(62,worse,38) output(62,worse,5) output(20,worse,22) output(48,worse,22) output(75,worse,5) output(75,worse,38) output(76,worse,38) output(76,worse,5) output(26,eq,20) output(20,eq,48) output(48,eq,60) output(60,eq,55) output(75,eq,62) output(62,eq,76) output(11,eq,10) output(75,eq,76) output(48,eq,55) output(20,eq,60) output(26,eq,48) output(38,eq,5) output(57,eq,5) output(76,eq,75) output(62,eq,75) output(75,eq,75) output(26,eq,60) output(20,eq,55) output(26,eq,55) output(76,eq,62) output(62,eq,62) output(76,eq,76) output(38,eq,38) output(57,eq,38) output(73,eq,22)
Optimization: 36 14
Answer: 3
preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(26,better,20) output(26,better,60) output(11,better,10) output(48,better,60) output(73,better,20) output(73,better,60) output(75,better,5) output(75,better,62) output(75,better,38) output(76,better,38) output(76,better,5) output(76,better,62) output(60,worse,55) output(60,worse,22) output(38,worse,75) output(38,worse,76) output(62,worse,76) output(62,worse,75) output(20,worse,48) output(20,worse,55) output(20,worse,22) output(57,worse,75) output(57,worse,76) output(55,eq,22) output(73,eq,26) output(62,eq,38) output(75,eq,76) output(38,eq,62) output(57,eq,62) output(48,eq,55) output(20,eq,60) output(26,eq,48) output(38,eq,5) output(57,eq,5) output(76,eq,75) output(75,eq,75) output(62,eq,5) output(73,eq,48) output(26,eq,55) output(48,eq,22) output(62,eq,62) output(76,eq,76) output(38,eq,38) output(57,eq,38) output(26,eq,22) output(73,eq,22) output(73,eq,55)
Optimization: 35 1
Progression : [ 5;35] (Error: 6)
Answer: 4
preference(1,(1,13),1,for(atom(hasCost(1))),3) preference(1,(1,14),1,for(atom(hasPrep(1))),3) preference(1,less(weight)) output(26,better,48) output(26,better,60) output(26,better,55) output(26,better,22) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(75,better,5) output(75,better,62) output(75,better,38) output(76,better,38) output(76,better,5) output(76,better,62) output(38,worse,75) output(38,worse,76) output(62,worse,76) output(62,worse,75) output(57,worse,75) output(57,worse,76) output(73,worse,26) output(73,worse,20) output(26,eq,20) output(48,eq,60) output(60,eq,55) output(55,eq,22) output(11,eq,10) output(62,eq,38) output(75,eq,76) output(38,eq,62) output(57,eq,62) output(60,eq,22) output(48,eq,55) output(38,eq,5) output(57,eq,5) output(76,eq,75) output(75,eq,75) output(62,eq,5) output(73,eq,48) output(73,eq,60) output(48,eq,22) output(62,eq,62) output(76,eq,76) output(38,eq,38) output(57,eq,38) output(73,eq,22) output(73,eq,55)
Optimization: 33 2
Answer: 5
preference(1,(1,13),1,for(atom(hasCost(1))),3) preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(26,better,20) output(26,better,60) output(26,better,22) output(11,better,10) output(55,better,22) output(48,better,60) output(48,better,22) output(73,better,20) output(73,better,60) output(73,better,22) output(75,better,5) output(75,better,62) output(75,better,38) output(76,better,38) output(76,better,5) output(76,better,62) output(60,worse,55) output(38,worse,75) output(38,worse,76) output(62,worse,76) output(62,worse,75) output(20,worse,48) output(20,worse,55) output(57,worse,75) output(57,worse,76) output(73,eq,26) output(62,eq,38) output(75,eq,76) output(38,eq,62) output(57,eq,62) output(60,eq,22) output(48,eq,55) output(20,eq,60) output(26,eq,48) output(38,eq,5) output(57,eq,5) output(76,eq,75) output(75,eq,75) output(62,eq,5) output(73,eq,48) output(26,eq,55) output(20,eq,22) output(62,eq,62) output(76,eq,76) output(38,eq,38) output(57,eq,38) output(73,eq,55)
Optimization: 31 2
Answer: 6
preference(1,(1,1),1,for(atom(hasPrepTime(1))),8) preference(1,(1,2),1,for(atom(hasDifficulty(3))),2) preference(1,(1,3),1,for(atom(hasCost(1))),1) preference(1,(1,4),1,for(atom(hasCategory(2))),1) preference(1,(1,5),1,for(atom(hasCost(4))),1) preference(1,(1,6),1,for(atom(hasCost(5))),1) preference(1,(1,7),1,for(atom(hasPrep(4))),1) preference(1,(1,8),1,for(atom(hasIngredient(1))),1) preference(1,(1,9),1,for(atom(hasIngredient(2))),1) preference(1,(1,10),1,for(atom(hasIngredient(5))),1) preference(1,(1,11),1,for(atom(hasIngredient(8))),1) preference(1,(1,12),1,for(atom(hasIngredient(10))),1) preference(1,(1,13),1,for(atom(hasIngredient(11))),1) preference(1,(1,14),1,for(atom(hasDifficulty(4))),1) preference(1,less(weight)) output(26,better,60) output(26,better,22) output(11,better,10) output(55,better,22) output(62,better,38) output(62,better,5) output(20,better,60) output(20,better,22) output(48,better,60) output(48,better,22) output(57,better,62) output(57,better,5) output(57,better,38) output(75,better,5) output(75,better,62) output(75,better,38) output(76,better,38) output(76,better,5) output(76,better,62) output(60,worse,55) output(38,worse,75) output(38,worse,62) output(38,worse,76) output(62,worse,76) output(62,worse,75) output(73,worse,26) output(73,worse,20) output(73,worse,48) output(73,worse,60) output(73,worse,22) output(73,worse,55) output(26,eq,20) output(20,eq,48) output(57,eq,75) output(75,eq,76) output(60,eq,22) output(48,eq,55) output(26,eq,48) output(38,eq,5) output(76,eq,75) output(75,eq,75) output(20,eq,55) output(26,eq,55) output(62,eq,62) output(57,eq,76) output(76,eq,76) output(38,eq,38)
Optimization: 28 14
Answer: 7
preference(1,(1,13),1,for(atom(hasIngredient(9))),3) preference(1,(1,14),1,for(atom(hasCost(1))),3) preference(1,less(weight)) output(26,better,48) output(26,better,60) output(26,better,55) output(26,better,22) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,38) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(76,better,38) output(76,better,75) output(76,better,5) output(76,better,62) output(38,worse,76) output(62,worse,76) output(75,worse,76) output(38,eq,75) output(75,eq,5) output(26,eq,20) output(48,eq,60) output(60,eq,55) output(55,eq,22) output(75,eq,62) output(11,eq,10) output(73,eq,26) output(62,eq,38) output(38,eq,62) output(60,eq,22) output(48,eq,55) output(73,eq,20) output(38,eq,5) output(62,eq,75) output(75,eq,75) output(62,eq,5) output(48,eq,22) output(62,eq,62) output(57,eq,76) output(76,eq,76) output(75,eq,38) output(38,eq,38)
Optimization: 27 2
Progression : [ 6;27] (Error: 3.5)
Answer: 8
preference(1,(1,1),1,for(atom(hasCategory(5))),2) preference(1,(1,2),1,for(atom(hasDifficulty(2))),5) preference(1,(1,3),1,for(atom(hasIngredient(10))),3) preference(1,(1,4),1,for(atom(hasPrep(1))),1) preference(1,(1,5),1,for(atom(hasDifficulty(1))),5) preference(1,(1,6),1,for(atom(hasPrep(5))),8) preference(1,(1,7),1,for(atom(hasPrepTime(1))),3) preference(1,(1,8),1,for(atom(hasCost(3))),2) preference(1,(1,9),1,for(atom(hasPrep(0))),2) preference(1,(1,10),1,for(atom(hasIngredient(4))),4) preference(1,(1,11),1,for(atom(hasIngredient(7))),6) preference(1,(1,12),1,for(atom(hasIngredient(12))),8) preference(1,(1,13),1,for(atom(hasCategory(3))),8) preference(1,(1,14),1,for(atom(hasIngredient(9))),6) preference(1,less(weight)) output(26,better,48) output(26,better,55) output(60,better,55) output(60,better,22) output(20,better,48) output(20,better,55) output(20,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,76) output(75,better,38) output(26,worse,20) output(26,worse,60) output(11,worse,10) output(38,worse,75) output(55,worse,22) output(62,worse,75) output(48,worse,60) output(48,worse,55) output(48,worse,22) output(76,worse,75) output(62,eq,76) output(76,eq,38) output(62,eq,38) output(38,eq,62) output(20,eq,60) output(38,eq,5) output(75,eq,75) output(76,eq,5) output(62,eq,5) output(76,eq,62) output(62,eq,62) output(38,eq,76) output(76,eq,76) output(38,eq,38) output(26,eq,22)
Optimization: 25 14
Answer: 9
preference(1,(1,1),1,for(atom(hasIngredient(7))),4) preference(1,(1,2),1,for(atom(hasCost(2))),6) preference(1,(1,3),1,for(atom(hasPrepTime(1))),7) preference(1,(1,4),1,for(atom(hasCategory(1))),7) preference(1,(1,5),1,for(atom(hasPrep(0))),6) preference(1,(1,6),1,for(atom(hasPrep(1))),1) preference(1,(1,7),1,for(atom(hasCategory(4))),5) preference(1,(1,8),1,for(atom(hasIngredient(3))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),8) preference(1,(1,10),1,for(atom(hasIngredient(12))),8) preference(1,(1,11),1,for(atom(hasCategory(3))),4) preference(1,(1,12),1,for(atom(hasPrep(7))),2) preference(1,(1,13),1,for(atom(hasCost(1))),1) preference(1,(1,14),1,for(atom(hasIngredient(9))),2) preference(1,less(weight)) output(60,better,22) output(11,better,10) output(38,better,62) output(55,better,22) output(20,better,48) output(20,better,60) output(20,better,22) output(48,better,60) output(48,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,22) output(75,better,5) output(75,better,62) output(75,better,38) output(76,better,38) output(76,better,75) output(76,better,5) output(76,better,62) output(26,worse,20) output(26,worse,48) output(26,worse,60) output(26,worse,55) output(26,worse,22) output(60,worse,55) output(38,worse,75) output(38,worse,76) output(62,worse,76) output(62,worse,38) output(62,worse,75) output(62,worse,5) output(20,worse,55) output(48,worse,55) output(73,worse,20) output(73,worse,48) output(73,worse,60) output(73,worse,55) output(75,worse,76) output(38,eq,5) output(75,eq,75) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 24 14
Answer: 10
preference(1,(1,1),1,for(atom(hasCategory(3))),8) preference(1,(1,2),1,for(atom(hasPrepTime(3))),4) preference(1,(1,3),1,for(atom(hasCost(2))),7) preference(1,(1,5),1,for(atom(hasIngredient(9))),5) preference(1,(1,6),1,for(atom(hasPrep(0))),1) preference(1,(1,7),1,for(atom(hasPrep(6))),6) preference(1,(1,8),1,for(atom(hasIngredient(7))),8) preference(1,(1,9),1,for(atom(hasCost(1))),2) preference(1,(1,10),1,for(atom(hasDifficulty(2))),3) preference(1,(1,11),1,for(atom(hasCategory(1))),6) preference(1,(1,12),1,for(atom(hasDifficulty(1))),1) preference(1,(1,13),1,for(atom(hasPrepTime(1))),4) preference(1,(1,14),1,for(atom(hasPrep(1))),8) preference(1,less(weight)) output(60,better,55) output(38,better,62) output(38,better,5) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(48,better,60) output(48,better,55) output(48,better,22) output(57,better,62) output(57,better,5) output(73,better,26) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,38) output(76,better,38) output(76,better,75) output(76,better,5) output(76,better,62) output(26,worse,20) output(26,worse,48) output(26,worse,60) output(26,worse,55) output(26,worse,22) output(60,worse,22) output(38,worse,75) output(38,worse,76) output(55,worse,22) output(62,worse,76) output(62,worse,38) output(62,worse,75) output(57,worse,75) output(57,worse,76) output(73,worse,20) output(73,worse,48) output(75,worse,76) output(11,eq,10) output(75,eq,75) output(62,eq,5) output(62,eq,62) output(76,eq,76) output(38,eq,38) output(57,eq,38)
Optimization: 24 13
Answer: 11
preference(1,(1,1),1,for(atom(hasDifficulty(2))),5) preference(1,(1,2),1,for(atom(hasCost(1))),5) preference(1,(1,3),1,for(atom(hasCategory(3))),7) preference(1,(1,4),1,for(atom(hasIngredient(9))),1) preference(1,(1,5),1,for(atom(hasPrep(1))),3) preference(1,(1,6),1,for(atom(hasPrep(2))),5) preference(1,(1,7),1,for(atom(hasPrepTime(3))),1) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasCategory(1))),5) preference(1,(1,10),1,for(atom(hasDifficulty(1))),1) preference(1,(1,11),1,for(atom(hasCategory(4))),1) preference(1,(1,12),1,for(atom(hasPrep(6))),1) preference(1,(1,13),1,for(atom(hasIngredient(7))),1) preference(1,(1,14),1,for(atom(hasIngredient(3))),1) preference(1,less(weight)) output(26,better,20) output(26,better,48) output(26,better,60) output(26,better,55) output(60,better,55) output(11,better,10) output(38,better,62) output(38,better,5) output(20,better,55) output(48,better,60) output(48,better,55) output(57,better,62) output(57,better,5) output(57,better,38) output(73,better,20) output(73,better,60) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,76) output(75,better,38) output(76,better,38) output(76,better,5) output(76,better,62) output(60,worse,22) output(38,worse,75) output(38,worse,76) output(55,worse,22) output(62,worse,76) output(62,worse,38) output(62,worse,75) output(20,worse,48) output(20,worse,22) output(48,worse,22) output(57,worse,75) output(57,worse,76) output(73,worse,26) output(73,worse,22) output(76,worse,75) output(20,eq,60) output(75,eq,75) output(62,eq,5) output(73,eq,48) output(62,eq,62) output(76,eq,76) output(38,eq,38) output(26,eq,22)
Optimization: 23 14
Answer: 12
preference(1,(1,1),1,for(atom(hasCost(1))),4) preference(1,(1,2),1,for(atom(hasIngredient(7))),7) preference(1,(1,3),1,for(atom(hasPrep(1))),6) preference(1,(1,4),1,for(atom(hasDifficulty(1))),7) preference(1,(1,5),1,for(atom(hasCost(2))),6) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasCategory(1))),3) preference(1,(1,8),1,for(atom(hasPrep(6))),5) preference(1,(1,9),1,for(atom(hasPrepTime(1))),5) preference(1,(1,10),1,for(atom(hasPrepTime(2))),2) preference(1,(1,11),1,for(atom(hasCategory(3))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,(1,13),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasIngredient(9))),7) preference(1,less(weight)) output(60,better,22) output(55,better,22) output(62,better,38) output(62,better,5) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(48,better,60) output(48,better,22) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,76) output(75,better,38) output(76,better,38) output(76,better,5) output(26,worse,20) output(26,worse,48) output(26,worse,60) output(26,worse,55) output(26,worse,22) output(60,worse,55) output(11,worse,10) output(38,worse,75) output(38,worse,62) output(38,worse,76) output(62,worse,75) output(57,worse,75) output(73,worse,20) output(76,worse,75) output(62,eq,76) output(48,eq,55) output(38,eq,5) output(75,eq,75) output(76,eq,62) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 22 14
Answer: 13
preference(1,(1,1),1,for(atom(hasCost(1))),4) preference(1,(1,2),1,for(atom(hasIngredient(7))),7) preference(1,(1,3),1,for(atom(hasPrep(1))),6) preference(1,(1,4),1,for(atom(hasDifficulty(1))),7) preference(1,(1,5),1,for(atom(hasCost(2))),6) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasCategory(1))),3) preference(1,(1,8),1,for(atom(hasPrepTime(1))),5) preference(1,(1,9),1,for(atom(hasCost(3))),5) preference(1,(1,10),1,for(atom(hasPrepTime(2))),2) preference(1,(1,11),1,for(atom(hasCategory(3))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,(1,13),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasIngredient(9))),7) preference(1,less(weight)) output(60,better,22) output(11,better,10) output(55,better,22) output(62,better,38) output(62,better,5) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,76) output(75,better,38) output(76,better,38) output(76,better,5) output(26,worse,20) output(26,worse,60) output(26,worse,55) output(26,worse,22) output(60,worse,55) output(38,worse,75) output(38,worse,62) output(38,worse,76) output(62,worse,75) output(48,worse,60) output(48,worse,55) output(48,worse,22) output(76,worse,75) output(62,eq,76) output(26,eq,48) output(38,eq,5) output(75,eq,75) output(76,eq,62) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 21 14
Answer: 14
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,2),1,for(atom(hasDifficulty(2))),1) preference(1,(1,3),1,for(atom(hasPrepTime(3))),4) preference(1,(1,4),1,for(atom(hasIngredient(7))),8) preference(1,(1,5),1,for(atom(hasCost(2))),6) preference(1,(1,6),1,for(atom(hasIngredient(9))),5) preference(1,(1,7),1,for(atom(hasPrep(0))),3) preference(1,(1,9),1,for(atom(hasIngredient(12))),7) preference(1,(1,10),1,for(atom(hasCategory(1))),3) preference(1,(1,11),1,for(atom(hasPrep(6))),6) preference(1,(1,12),1,for(atom(hasPrep(1))),4) preference(1,(1,13),1,for(atom(hasCost(1))),4) preference(1,(1,14),1,for(atom(hasPrep(5))),2) preference(1,less(weight)) output(26,better,55) output(60,better,55) output(60,better,22) output(11,better,10) output(38,better,75) output(38,better,62) output(38,better,5) output(38,better,76) output(62,better,75) output(20,better,48) output(20,better,55) output(20,better,22) output(48,better,55) output(48,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(76,better,75) output(76,better,62) output(26,worse,20) output(26,worse,48) output(26,worse,60) output(26,worse,22) output(55,worse,22) output(62,worse,76) output(62,worse,38) output(62,worse,5) output(48,worse,60) output(75,worse,5) output(75,worse,62) output(75,worse,76) output(75,worse,38) output(76,worse,38) output(76,worse,5) output(20,eq,60) output(75,eq,75) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 20 13
Answer: 15
preference(1,(1,1),1,for(atom(hasCost(1))),4) preference(1,(1,2),1,for(atom(hasIngredient(7))),7) preference(1,(1,3),1,for(atom(hasPrep(1))),6) preference(1,(1,4),1,for(atom(hasDifficulty(1))),7) preference(1,(1,5),1,for(atom(hasCost(2))),6) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasCategory(1))),3) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,9),1,for(atom(hasPrepTime(1))),3) preference(1,(1,10),1,for(atom(hasPrepTime(2))),2) preference(1,(1,11),1,for(atom(hasCategory(3))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,(1,13),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasIngredient(9))),7) preference(1,less(weight)) output(60,better,22) output(11,better,10) output(55,better,22) output(62,better,38) output(62,better,5) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(48,better,60) output(48,better,22) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,76) output(75,better,38) output(76,better,38) output(76,better,5) output(76,better,62) output(26,worse,20) output(26,worse,48) output(26,worse,60) output(26,worse,55) output(26,worse,22) output(60,worse,55) output(38,worse,75) output(38,worse,62) output(38,worse,76) output(62,worse,76) output(62,worse,75) output(57,worse,75) output(76,worse,75) output(48,eq,55) output(38,eq,5) output(75,eq,75) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 19 14
Answer: 16
preference(1,(1,1),1,for(atom(hasPrep(7))),4) preference(1,(1,2),1,for(atom(hasDifficulty(1))),7) preference(1,(1,3),1,for(atom(hasPrep(0))),8) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasPrep(6))),6) preference(1,(1,6),1,for(atom(hasPrep(5))),4) preference(1,(1,7),1,for(atom(hasIngredient(9))),5) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasCost(2))),3) preference(1,(1,10),1,for(atom(hasCost(1))),3) preference(1,(1,11),1,for(atom(hasCategory(5))),7) preference(1,(1,12),1,for(atom(hasIngredient(7))),2) preference(1,(1,13),1,for(atom(hasPrepTime(1))),7) preference(1,(1,14),1,for(atom(hasPrepTime(3))),2) preference(1,less(weight)) output(26,better,20) output(26,better,48) output(26,better,60) output(26,better,55) output(26,better,22) output(60,better,55) output(60,better,22) output(11,better,10) output(38,better,62) output(38,better,5) output(55,better,22) output(62,better,5) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(48,better,60) output(48,better,55) output(48,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,76) output(75,better,38) output(76,better,38) output(76,better,5) output(76,better,62) output(38,worse,75) output(38,worse,76) output(62,worse,76) output(62,worse,38) output(62,worse,75) output(76,worse,75) output(75,eq,75) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 10 14
Progression : [ 7;10] (Error: 0.428571)
Progression : [ 8;10] (Error: 0.25)
Progression : [ 9;10] (Error: 0.111111)
Progression : [10;10] (Error: 0)
Progression : 10 [ 1;14] (Error: 13)
Progression : 10 [ 2;14] (Error: 6)
Answer: 17
preference(1,(1,1),1,for(atom(hasPrepTime(3))),2) preference(1,(1,2),1,for(atom(hasCategory(5))),3) preference(1,(1,3),1,for(atom(hasCategory(1))),3) preference(1,(1,4),1,for(atom(hasIngredient(7))),2) preference(1,(1,5),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasPrepTime(1))),1) preference(1,(1,7),1,for(atom(hasIngredient(9))),8) preference(1,(1,8),1,for(atom(hasDifficulty(1))),8) preference(1,(1,9),1,for(atom(hasPrep(7))),1) preference(1,(1,11),1,for(atom(hasCost(1))),5) preference(1,(1,12),1,for(atom(hasPrep(0))),4) preference(1,(1,13),1,for(atom(hasCategory(3))),4) preference(1,(1,14),1,for(atom(hasIngredient(4))),7) preference(1,less(weight)) output(26,better,20) output(26,better,48) output(26,better,60) output(26,better,55) output(26,better,22) output(60,better,55) output(60,better,22) output(11,better,10) output(38,better,62) output(38,better,5) output(55,better,22) output(62,better,5) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(48,better,60) output(48,better,55) output(48,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,76) output(75,better,38) output(76,better,38) output(76,better,5) output(76,better,62) output(38,worse,75) output(38,worse,76) output(62,worse,76) output(62,worse,38) output(62,worse,75) output(76,worse,75) output(75,eq,75) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 10 13
Progression : 10 [ 3;13] (Error: 3.33333)
Answer: 18
preference(1,(1,2),1,for(atom(hasPrepTime(1))),6) preference(1,(1,3),1,for(atom(hasPrepTime(2))),3) preference(1,(1,4),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasCost(1))),4) preference(1,(1,7),1,for(atom(hasPrepTime(3))),7) preference(1,(1,8),1,for(atom(hasPrep(7))),5) preference(1,(1,10),1,for(atom(hasPrep(0))),2) preference(1,(1,11),1,for(atom(hasDifficulty(2))),1) preference(1,(1,12),1,for(atom(hasCategory(3))),2) preference(1,(1,13),1,for(atom(hasIngredient(9))),7) preference(1,(1,14),1,for(atom(hasIngredient(7))),7) preference(1,less(weight)) output(26,better,20) output(26,better,48) output(26,better,60) output(26,better,55) output(26,better,22) output(60,better,55) output(60,better,22) output(11,better,10) output(38,better,5) output(55,better,22) output(62,better,38) output(62,better,5) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(48,better,60) output(48,better,55) output(48,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,38) output(76,better,38) output(76,better,75) output(76,better,5) output(76,better,62) output(38,worse,75) output(38,worse,62) output(38,worse,76) output(62,worse,76) output(62,worse,75) output(75,worse,76) output(75,eq,75) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 10 11
Answer: 19
preference(1,(1,2),1,for(atom(hasPrepTime(1))),6) preference(1,(1,3),1,for(atom(hasDifficulty(1))),2) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,7),1,for(atom(hasCost(1))),4) preference(1,(1,8),1,for(atom(hasPrep(7))),5) preference(1,(1,10),1,for(atom(hasPrep(0))),2) preference(1,(1,11),1,for(atom(hasDifficulty(2))),1) preference(1,(1,12),1,for(atom(hasCategory(3))),2) preference(1,(1,13),1,for(atom(hasIngredient(9))),7) preference(1,(1,14),1,for(atom(hasIngredient(7))),7) preference(1,less(weight)) output(26,better,20) output(26,better,48) output(26,better,60) output(26,better,55) output(26,better,22) output(60,better,55) output(60,better,22) output(11,better,10) output(38,better,5) output(55,better,22) output(62,better,38) output(62,better,5) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(48,better,60) output(48,better,55) output(48,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,38) output(76,better,38) output(76,better,75) output(76,better,5) output(76,better,62) output(38,worse,75) output(38,worse,62) output(38,worse,76) output(62,worse,76) output(62,worse,75) output(75,worse,76) output(75,eq,75) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 10 10
Answer: 20
preference(1,(1,2),1,for(atom(hasPrepTime(1))),6) preference(1,(1,3),1,for(atom(hasIngredient(7))),7) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),7) preference(1,(1,8),1,for(atom(hasPrepTime(2))),4) preference(1,(1,10),1,for(atom(hasPrep(0))),2) preference(1,(1,11),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasIngredient(9))),2) preference(1,(1,14),1,for(atom(hasCost(1))),6) preference(1,less(weight)) output(26,better,20) output(26,better,48) output(26,better,60) output(26,better,55) output(26,better,22) output(60,better,55) output(60,better,22) output(11,better,10) output(38,better,5) output(55,better,22) output(62,better,38) output(62,better,5) output(20,better,48) output(20,better,60) output(20,better,55) output(20,better,22) output(48,better,60) output(48,better,55) output(48,better,22) output(57,better,75) output(57,better,62) output(57,better,5) output(57,better,76) output(57,better,38) output(73,better,26) output(73,better,20) output(73,better,48) output(73,better,60) output(73,better,22) output(73,better,55) output(75,better,5) output(75,better,62) output(75,better,38) output(76,better,38) output(76,better,75) output(76,better,5) output(76,better,62) output(38,worse,75) output(38,worse,62) output(38,worse,76) output(62,worse,76) output(62,worse,75) output(75,worse,76) output(75,eq,75) output(62,eq,62) output(76,eq,76) output(38,eq,38)
Optimization: 10 9
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.101 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 20+
  Optimum    : unknown
Optimization : 10 9
Bounds       : 10 [3;9]
Calls        : 1
Time         : 298.079s (Solving: 295.01s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1182.621s
Threads      : 4        (Winner: 4)

Choices      : 8924759  (Domain: 207702)
Conflicts    : 4123412  (Analyzed: 4123403)
Restarts     : 3820     (Average: 1079.42 Last: 1115446)
Model-Level  : 85.2    
Problems     : 16       (Average Length: 0.25 Splits: 0)
Lemmas       : 4133348  (Deleted: 3859359)
  Binary     : 512      (Ratio:   0.01%)
  Ternary    : 1339     (Ratio:   0.03%)
  Conflict   : 4123403  (Average Length:  536.8 Ratio:  99.76%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 9945     (Average Length:   33.9 Ratio:   0.24%) 
  Distributed: 3328     (Ratio:   0.08% Average LBD: 3.53) 
  Integrated : 9984     (Ratio: 300.00% Unit: 39 Average Jumps: 21.03)
Backjumps    : 4123403  (Average:  1.79 Max: 981 Sum: 7395541)
  Executed   : 4123389  (Average:  1.79 Max: 981 Sum: 7395487 Ratio: 100.00%)
  Bounded    : 14       (Average:  3.86 Max:  27 Sum:     54 Ratio:   0.00%)

Rules        : 542133  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 15208   
Bodies       : 19042   
  Sum        : 90      
  Count      : 14      
Equivalences : 13598    (Atom=Atom: 475 Body=Body: 206 Other: 12917)
Tight        : Yes
Variables    : 17099    (Eliminated:    0 Frozen: 7775)
Constraints  : 562878   (Binary:  97.7% Ternary:   1.7% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasPrep(4)) ; 
  1 :: atom(hasIngredient(1)) ; 
  1 :: atom(hasIngredient(2)) ; 
  1 :: atom(hasIngredient(5)) ; 
  1 :: atom(hasIngredient(8)) ; 
  1 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasIngredient(11)) ; 
  1 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasCategory(5)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCost(3)) ; 
  2 :: atom(hasPrep(0)) ; 
  4 :: atom(hasIngredient(4)) ; 
  6 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasCategory(3)) ; 
  6 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(7)) ; 
  1 :: atom(hasCost(1)) ; 
  2 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasCost(2)) ; 
  5 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(6)) ; 
  8 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasCost(1)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasCategory(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  1 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  5 :: atom(hasCategory(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCategory(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCategory(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasCost(3)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(12)) ; 
  3 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(1)) ; 
  4 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(5)) ; 
  5 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasCost(2)) ; 
  3 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(5)) ; 
  2 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCategory(5)) ; 
  3 :: atom(hasCategory(1)) ; 
  2 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(0)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(0)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasCost(1)) 
}.
