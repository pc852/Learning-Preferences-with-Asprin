asprin_vL version 1.0
Reading from stdin
-:1239:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1249:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1264:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1345:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1606:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1619:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1796:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1925:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1997:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:2001:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:2001:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2007:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2106:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2132:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2252:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2286:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2308:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1156:1-16: info: no atoms over signature occur in program:
  output/3

-:1148:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1149:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(25,eq,75) output(75,eq,86) output(86,eq,55) output(55,eq,52) output(52,eq,62) output(62,eq,78) output(71,eq,51) output(51,eq,55) output(55,eq,57) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(76,eq,8) output(86,eq,57) output(51,eq,57) output(71,eq,55) output(52,eq,78) output(55,eq,62) output(57,eq,62) output(86,eq,52) output(51,eq,52) output(75,eq,55) output(25,eq,86) output(25,eq,55) output(71,eq,52) output(75,eq,52) output(25,eq,52) output(86,eq,62) output(51,eq,62) output(71,eq,62) output(75,eq,62) output(55,eq,78) output(57,eq,78) output(86,eq,78) output(51,eq,78) output(71,eq,57) output(75,eq,57) output(25,eq,57) output(71,eq,78) output(75,eq,78) output(25,eq,78) output(25,eq,62)
Optimization: 42 0
Answer: 2
preference(1,(1,14),1,for(atom(hasCost(2))),6) preference(1,less(weight)) output(75,better,86) output(75,better,55) output(75,better,52) output(75,better,62) output(75,better,57) output(51,worse,78) output(55,worse,78) output(62,worse,78) output(25,worse,75) output(25,worse,78) output(52,worse,78) output(57,worse,78) output(71,worse,78) output(86,worse,78) output(86,eq,55) output(55,eq,52) output(52,eq,62) output(71,eq,51) output(51,eq,55) output(55,eq,57) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(76,eq,8) output(86,eq,57) output(51,eq,57) output(71,eq,55) output(55,eq,62) output(57,eq,62) output(86,eq,52) output(51,eq,52) output(25,eq,86) output(25,eq,55) output(71,eq,52) output(25,eq,52) output(86,eq,62) output(51,eq,62) output(71,eq,62) output(71,eq,57) output(25,eq,57) output(75,eq,78) output(25,eq,62)
Optimization: 37 1
Answer: 3
preference(1,(1,14),1,for(atom(hasCategory(4))),6) preference(1,less(weight)) output(51,better,57) output(51,better,52) output(51,better,78) output(55,better,52) output(55,better,57) output(55,better,78) output(62,better,78) output(25,worse,55) output(25,worse,62) output(52,worse,62) output(57,worse,62) output(71,worse,51) output(71,worse,55) output(71,worse,62) output(75,worse,55) output(75,worse,62) output(86,worse,55) output(86,worse,62) output(25,eq,75) output(75,eq,86) output(51,eq,55) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(76,eq,8) output(86,eq,57) output(52,eq,78) output(55,eq,62) output(86,eq,52) output(25,eq,86) output(71,eq,52) output(75,eq,52) output(25,eq,52) output(51,eq,62) output(57,eq,78) output(86,eq,78) output(71,eq,57) output(75,eq,57) output(25,eq,57) output(71,eq,78) output(75,eq,78) output(25,eq,78)
Optimization: 35 1
Answer: 4
preference(1,(1,14),1,for(atom(hasDifficulty(2))),6) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(71,better,55) output(71,better,52) output(71,better,62) output(71,better,57) output(75,better,86) output(75,better,55) output(75,better,52) output(75,better,62) output(75,better,57) output(55,worse,78) output(62,worse,78) output(25,worse,75) output(25,worse,78) output(52,worse,78) output(57,worse,78) output(86,worse,78) output(86,eq,55) output(55,eq,52) output(52,eq,62) output(71,eq,51) output(55,eq,57) output(57,eq,52) output(76,eq,67) output(67,eq,8) output(76,eq,8) output(86,eq,57) output(55,eq,62) output(57,eq,62) output(86,eq,52) output(25,eq,86) output(25,eq,55) output(25,eq,52) output(86,eq,62) output(51,eq,78) output(25,eq,57) output(71,eq,78) output(75,eq,78) output(25,eq,62)
Optimization: 29 1
Answer: 5
preference(1,(1,1),1,for(atom(hasCategory(4))),3) preference(1,(1,2),1,for(atom(hasPrep(6))),4) preference(1,(1,3),1,for(atom(hasDifficulty(2))),3) preference(1,(1,4),1,for(atom(hasPrep(5))),3) preference(1,(1,5),1,for(atom(hasPrep(1))),4) preference(1,(1,6),1,for(atom(hasPrepTime(2))),4) preference(1,(1,7),1,for(atom(hasPrep(3))),4) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,9),1,for(atom(hasIngredient(6))),4) preference(1,(1,10),1,for(atom(hasIngredient(7))),3) preference(1,(1,11),1,for(atom(hasCategory(3))),5) preference(1,(1,12),1,for(atom(hasIngredient(9))),6) preference(1,(1,13),1,for(atom(hasPrepTime(3))),1) preference(1,(1,14),1,for(atom(hasCost(2))),3) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(51,better,78) output(67,better,8) output(25,better,75) output(25,better,86) output(25,better,55) output(25,better,52) output(25,better,57) output(25,better,78) output(25,better,62) output(52,better,62) output(52,better,78) output(57,better,62) output(57,better,78) output(71,better,55) output(71,better,62) output(75,better,55) output(75,better,62) output(86,better,55) output(86,better,57) output(86,better,52) output(86,better,62) output(86,better,78) output(76,better,67) output(76,better,8) output(55,worse,52) output(55,worse,57) output(55,worse,78) output(62,worse,78) output(71,worse,51) output(71,worse,52) output(71,worse,57) output(71,worse,78) output(75,worse,86) output(75,worse,52) output(75,worse,57) output(75,worse,78) output(57,eq,52) output(55,eq,62)
Optimization: 14 14
Answer: 6
preference(1,(1,1),1,for(atom(hasCategory(4))),3) preference(1,(1,2),1,for(atom(hasPrep(6))),4) preference(1,(1,3),1,for(atom(hasDifficulty(2))),3) preference(1,(1,4),1,for(atom(hasPrep(5))),3) preference(1,(1,5),1,for(atom(hasPrep(1))),4) preference(1,(1,6),1,for(atom(hasPrepTime(2))),4) preference(1,(1,7),1,for(atom(hasPrep(3))),4) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,9),1,for(atom(hasIngredient(6))),4) preference(1,(1,10),1,for(atom(hasIngredient(7))),3) preference(1,(1,11),1,for(atom(hasCategory(3))),5) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,(1,13),1,for(atom(hasPrepTime(3))),1) preference(1,(1,14),1,for(atom(hasCost(2))),3) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(51,better,78) output(67,better,8) output(25,better,75) output(25,better,86) output(25,better,55) output(25,better,52) output(25,better,57) output(25,better,78) output(25,better,62) output(52,better,62) output(52,better,78) output(57,better,62) output(57,better,78) output(71,better,55) output(71,better,62) output(71,better,78) output(75,better,55) output(75,better,62) output(86,better,55) output(86,better,57) output(86,better,52) output(86,better,62) output(86,better,78) output(76,better,67) output(76,better,8) output(55,worse,52) output(55,worse,57) output(55,worse,62) output(55,worse,78) output(62,worse,78) output(71,worse,51) output(75,worse,86) output(75,worse,52) output(75,worse,57) output(57,eq,52) output(71,eq,52) output(71,eq,57) output(75,eq,78)
Optimization: 13 14
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(5))),8) preference(1,(1,2),1,for(atom(hasPrep(0))),8) preference(1,(1,3),1,for(atom(hasCategory(1))),6) preference(1,(1,4),1,for(atom(hasCategory(3))),8) preference(1,(1,5),1,for(atom(hasPrep(3))),8) preference(1,(1,6),1,for(atom(hasIngredient(3))),6) preference(1,(1,7),1,for(atom(hasPrepTime(2))),8) preference(1,(1,8),1,for(atom(hasCost(4))),8) preference(1,(1,9),1,for(atom(hasDifficulty(3))),8) preference(1,(1,10),1,for(atom(hasPrep(7))),6) preference(1,(1,11),1,for(atom(hasCategory(2))),6) preference(1,(1,12),1,for(atom(hasIngredient(12))),6) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(51,better,78) output(25,better,75) output(25,better,86) output(25,better,55) output(25,better,52) output(25,better,57) output(25,better,78) output(25,better,62) output(57,better,52) output(57,better,62) output(57,better,78) output(71,better,51) output(71,better,55) output(71,better,52) output(71,better,62) output(71,better,57) output(71,better,78) output(75,better,86) output(75,better,55) output(75,better,52) output(75,better,62) output(75,better,57) output(75,better,78) output(86,better,55) output(86,better,52) output(86,better,62) output(86,better,78) output(76,better,67) output(76,better,8) output(55,worse,57) output(55,eq,52) output(52,eq,62) output(62,eq,78) output(67,eq,8) output(86,eq,57) output(52,eq,78) output(55,eq,62) output(55,eq,78)
Optimization: 9 12
Answer: 8
preference(1,(1,2),1,for(atom(hasIngredient(12))),6) preference(1,(1,3),1,for(atom(hasCategory(3))),8) preference(1,(1,4),1,for(atom(hasCost(4))),6) preference(1,(1,5),1,for(atom(hasPrep(3))),8) preference(1,(1,6),1,for(atom(hasDifficulty(3))),8) preference(1,(1,7),1,for(atom(hasPrepTime(2))),8) preference(1,(1,8),1,for(atom(hasCategory(2))),6) preference(1,(1,9),1,for(atom(hasPrep(7))),8) preference(1,(1,10),1,for(atom(hasDifficulty(4))),6) preference(1,(1,11),1,for(atom(hasPrep(0))),8) preference(1,(1,12),1,for(atom(hasIngredient(6))),8) preference(1,(1,13),1,for(atom(hasIngredient(3))),6) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(51,better,78) output(67,better,8) output(55,better,52) output(55,better,62) output(55,better,78) output(25,better,75) output(25,better,55) output(25,better,52) output(25,better,57) output(25,better,78) output(25,better,62) output(57,better,52) output(57,better,62) output(57,better,78) output(71,better,51) output(71,better,55) output(71,better,52) output(71,better,62) output(71,better,57) output(71,better,78) output(75,better,55) output(75,better,52) output(75,better,62) output(75,better,57) output(75,better,78) output(86,better,55) output(86,better,57) output(86,better,52) output(86,better,62) output(86,better,78) output(76,better,67) output(76,better,8) output(75,worse,86) output(52,eq,62) output(62,eq,78) output(55,eq,57) output(52,eq,78) output(25,eq,86)
Optimization: 6 12
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(5))),8) preference(1,(1,2),1,for(atom(hasPrep(1))),7) preference(1,(1,3),1,for(atom(hasIngredient(7))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),7) preference(1,(1,5),1,for(atom(hasCategory(2))),7) preference(1,(1,6),1,for(atom(hasPrepTime(2))),6) preference(1,(1,7),1,for(atom(hasPrepTime(3))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasCategory(3))),7) preference(1,(1,10),1,for(atom(hasCost(4))),7) preference(1,(1,11),1,for(atom(hasPrep(7))),7) preference(1,(1,12),1,for(atom(hasPrep(3))),7) preference(1,(1,13),1,for(atom(hasDifficulty(3))),6) preference(1,(1,14),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(51,better,78) output(67,better,8) output(55,better,52) output(55,better,78) output(62,better,78) output(25,better,75) output(25,better,86) output(25,better,55) output(25,better,52) output(25,better,57) output(25,better,78) output(25,better,62) output(57,better,52) output(57,better,62) output(57,better,78) output(71,better,51) output(71,better,55) output(71,better,52) output(71,better,62) output(71,better,57) output(71,better,78) output(75,better,55) output(75,better,52) output(75,better,62) output(75,better,57) output(75,better,78) output(86,better,55) output(86,better,57) output(86,better,52) output(86,better,62) output(86,better,78) output(76,better,67) output(76,better,8) output(55,worse,57) output(52,worse,62) output(75,eq,86) output(52,eq,78) output(55,eq,62)
Optimization: 5 14
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(3))),5) preference(1,(1,2),1,for(atom(hasCategory(3))),7) preference(1,(1,3),1,for(atom(hasCategory(1))),7) preference(1,(1,4),1,for(atom(hasCost(4))),1) preference(1,(1,5),1,for(atom(hasDifficulty(3))),7) preference(1,(1,6),1,for(atom(hasIngredient(10))),1) preference(1,(1,7),1,for(atom(hasIngredient(3))),8) preference(1,(1,8),1,for(atom(hasIngredient(7))),8) preference(1,(1,9),1,for(atom(hasCategory(5))),1) preference(1,(1,10),1,for(atom(hasPrep(0))),2) preference(1,(1,11),1,for(atom(hasCategory(4))),6) preference(1,(1,12),1,for(atom(hasIngredient(12))),3) preference(1,(1,13),1,for(atom(hasDifficulty(2))),4) preference(1,(1,14),1,for(atom(hasPrepTime(2))),3) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(51,better,78) output(67,better,8) output(55,better,52) output(55,better,57) output(55,better,62) output(55,better,78) output(62,better,78) output(25,better,75) output(25,better,86) output(25,better,55) output(25,better,52) output(25,better,57) output(25,better,78) output(25,better,62) output(52,better,62) output(52,better,78) output(57,better,52) output(57,better,62) output(57,better,78) output(71,better,51) output(71,better,55) output(71,better,52) output(71,better,62) output(71,better,57) output(71,better,78) output(75,better,86) output(75,better,55) output(75,better,52) output(75,better,62) output(75,better,57) output(75,better,78) output(86,better,55) output(86,better,57) output(86,better,52) output(86,better,62) output(86,better,78) output(76,better,67) output(76,better,8)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(5))),2) preference(1,(1,2),1,for(atom(hasIngredient(7))),6) preference(1,(1,3),1,for(atom(hasIngredient(12))),6) preference(1,(1,4),1,for(atom(hasPrepTime(3))),6) preference(1,(1,5),1,for(atom(hasCategory(4))),6) preference(1,(1,6),1,for(atom(hasCost(4))),7) preference(1,(1,8),1,for(atom(hasIngredient(3))),1) preference(1,(1,9),1,for(atom(hasDifficulty(3))),6) preference(1,(1,10),1,for(atom(hasCost(2))),6) preference(1,(1,11),1,for(atom(hasCategory(2))),5) preference(1,(1,12),1,for(atom(hasPrep(6))),6) preference(1,(1,13),1,for(atom(hasPrepTime(2))),4) preference(1,(1,14),1,for(atom(hasCategory(3))),3) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(51,better,78) output(67,better,8) output(55,better,52) output(55,better,57) output(55,better,62) output(55,better,78) output(62,better,78) output(25,better,75) output(25,better,86) output(25,better,55) output(25,better,52) output(25,better,57) output(25,better,78) output(25,better,62) output(52,better,62) output(52,better,78) output(57,better,52) output(57,better,62) output(57,better,78) output(71,better,51) output(71,better,55) output(71,better,52) output(71,better,62) output(71,better,57) output(71,better,78) output(75,better,86) output(75,better,55) output(75,better,52) output(75,better,62) output(75,better,57) output(75,better,78) output(86,better,55) output(86,better,57) output(86,better,52) output(86,better,62) output(86,better,78) output(76,better,67) output(76,better,8)
Optimization: 0 13
Progression : 0 [ 2;13] (Error: 5.5)
Answer: 12
preference(1,(1,1),1,for(atom(hasIngredient(3))),4) preference(1,(1,2),1,for(atom(hasIngredient(10))),1) preference(1,(1,4),1,for(atom(hasIngredient(6))),3) preference(1,(1,5),1,for(atom(hasDifficulty(3))),7) preference(1,(1,6),1,for(atom(hasCategory(2))),7) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasCost(4))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),5) preference(1,(1,13),1,for(atom(hasIngredient(12))),4) preference(1,(1,14),1,for(atom(hasCategory(3))),6) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(51,better,78) output(67,better,8) output(55,better,52) output(55,better,57) output(55,better,62) output(55,better,78) output(62,better,78) output(25,better,75) output(25,better,86) output(25,better,55) output(25,better,52) output(25,better,57) output(25,better,78) output(25,better,62) output(52,better,62) output(52,better,78) output(57,better,52) output(57,better,62) output(57,better,78) output(71,better,51) output(71,better,55) output(71,better,52) output(71,better,62) output(71,better,57) output(71,better,78) output(75,better,86) output(75,better,55) output(75,better,52) output(75,better,62) output(75,better,57) output(75,better,78) output(86,better,55) output(86,better,57) output(86,better,52) output(86,better,62) output(86,better,78) output(76,better,67) output(76,better,8)
Optimization: 0 10
Answer: 13
preference(1,(1,2),1,for(atom(hasPrepTime(2))),5) preference(1,(1,4),1,for(atom(hasCategory(2))),6) preference(1,(1,9),1,for(atom(hasPrep(5))),3) preference(1,(1,10),1,for(atom(hasIngredient(3))),2) preference(1,(1,11),1,for(atom(hasCost(4))),8) preference(1,(1,13),1,for(atom(hasDifficulty(3))),4) preference(1,(1,14),1,for(atom(hasCategory(3))),4) preference(1,less(weight)) output(51,better,55) output(51,better,57) output(51,better,52) output(51,better,62) output(51,better,78) output(67,better,8) output(55,better,52) output(55,better,57) output(55,better,62) output(55,better,78) output(62,better,78) output(25,better,75) output(25,better,86) output(25,better,55) output(25,better,52) output(25,better,57) output(25,better,78) output(25,better,62) output(52,better,62) output(52,better,78) output(57,better,52) output(57,better,62) output(57,better,78) output(71,better,51) output(71,better,55) output(71,better,52) output(71,better,62) output(71,better,57) output(71,better,78) output(75,better,86) output(75,better,55) output(75,better,52) output(75,better,62) output(75,better,57) output(75,better,78) output(86,better,55) output(86,better,57) output(86,better,52) output(86,better,62) output(86,better,78) output(76,better,67) output(76,better,8)
Optimization: 0 7
Progression : 0 [3;7] (Error: 1.33333)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.060 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 13+
  Optimum    : unknown
Optimization : 0 7
Calls        : 1
Time         : 298.029s (Solving: 295.01s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1182.571s
Threads      : 4        (Winner: 4)

Choices      : 5815519  (Domain: 190907)
Conflicts    : 4159807  (Analyzed: 4159804)
Restarts     : 3637     (Average: 1143.75 Last: 198583)
Model-Level  : 74.8    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 4163277  (Deleted: 3896467)
  Binary     : 323      (Ratio:   0.01%)
  Ternary    : 424      (Ratio:   0.01%)
  Conflict   : 4159804  (Average Length:  444.1 Ratio:  99.92%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 3473     (Average Length:   64.0 Ratio:   0.08%) 
  Distributed: 1160     (Ratio:   0.03% Average LBD: 3.50) 
  Integrated : 3480     (Ratio: 300.00% Unit: 6 Average Jumps: 4.17)
Backjumps    : 4159804  (Average:  1.30 Max: 1087 Sum: 5427942)
  Executed   : 4159803  (Average:  1.30 Max: 1087 Sum: 5427907 Ratio: 100.00%)
  Bounded    : 1        (Average: 35.00 Max:  35 Sum:     35 Ratio:   0.00%)

Rules        : 492688  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14702   
Bodies       : 18991   
  Sum        : 84      
  Count      : 14      
Equivalences : 7320     (Atom=Atom: 433 Body=Body: 182 Other: 6705)
Tight        : Yes
Variables    : 17071    (Eliminated:    0 Frozen: 7747)
Constraints  : 513880   (Binary:  97.5% Ternary:   1.8% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(4)) ; 
  4 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(3)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasIngredient(6)) ; 
  3 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasCategory(3)) ; 
  6 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(4)) ; 
  4 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(3)) ; 
  4 :: atom(hasPrep(0)) ; 
  4 :: atom(hasIngredient(6)) ; 
  3 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(3)) ; 
  6 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasCategory(2)) ; 
  6 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasCategory(3)) ; 
  6 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCategory(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(6)) ; 
  6 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(1)) ; 
  8 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasCategory(2)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(3)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(3)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCost(4)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasCategory(5)) ; 
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCategory(4)) ; 
  3 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(5)) ; 
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCost(4)) ; 
  1 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasCategory(2)) ; 
  6 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasIngredient(6)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(4)) ; 
  5 :: atom(hasPrep(5)) ; 
  4 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCategory(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  2 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasCost(4)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasCategory(3)) 
}.
