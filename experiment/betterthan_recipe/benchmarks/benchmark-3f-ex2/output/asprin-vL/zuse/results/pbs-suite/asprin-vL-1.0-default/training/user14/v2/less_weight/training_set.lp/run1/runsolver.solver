asprin_vL version 1.0
Reading from stdin
-:1239:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1249:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1264:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1345:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1606:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1619:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1796:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1925:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1997:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:2001:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:2001:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2007:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2106:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2132:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2252:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2286:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2308:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1156:1-16: info: no atoms over signature occur in program:
  output/3

-:1148:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1149:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(67,eq,50) output(50,eq,39) output(21,eq,66) output(66,eq,58) output(58,eq,62) output(62,eq,10) output(10,eq,32) output(8,eq,67) output(67,eq,21) output(61,eq,47) output(7,eq,42) output(18,eq,89) output(89,eq,62) output(18,eq,62) output(8,eq,21) output(62,eq,32) output(58,eq,10) output(89,eq,10) output(66,eq,62) output(21,eq,58) output(67,eq,66) output(67,eq,39) output(8,eq,50) output(8,eq,39) output(8,eq,66) output(67,eq,58) output(8,eq,58) output(21,eq,62) output(67,eq,62) output(18,eq,10) output(66,eq,10) output(21,eq,10) output(58,eq,32) output(89,eq,32) output(18,eq,32) output(66,eq,32) output(21,eq,32) output(67,eq,32) output(8,eq,32) output(67,eq,10) output(8,eq,10) output(8,eq,62)
Optimization: 42 0
Answer: 2
preference(1,(1,13),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(18,better,10) output(67,better,50) output(67,better,10) output(8,better,50) output(8,better,10) output(62,better,10) output(66,better,10) output(89,better,10) output(21,better,10) output(58,better,10) output(10,worse,32) output(50,worse,39) output(7,worse,42) output(21,eq,66) output(66,eq,58) output(58,eq,62) output(8,eq,67) output(67,eq,21) output(61,eq,47) output(18,eq,89) output(89,eq,62) output(18,eq,62) output(8,eq,21) output(62,eq,32) output(66,eq,62) output(21,eq,58) output(67,eq,66) output(67,eq,39) output(8,eq,39) output(8,eq,66) output(67,eq,58) output(8,eq,58) output(21,eq,62) output(67,eq,62) output(58,eq,32) output(89,eq,32) output(18,eq,32) output(66,eq,32) output(21,eq,32) output(67,eq,32) output(8,eq,32) output(8,eq,62)
Optimization: 32 1
Answer: 3
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrep(1))),2) preference(1,less(weight)) output(18,better,62) output(18,better,10) output(50,better,39) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,58) output(67,better,62) output(67,better,10) output(8,better,21) output(8,better,39) output(8,better,66) output(8,better,58) output(8,better,10) output(8,better,62) output(89,better,62) output(89,better,10) output(10,worse,32) output(62,worse,32) output(66,worse,32) output(21,worse,32) output(58,worse,32) output(67,eq,50) output(21,eq,66) output(66,eq,58) output(58,eq,62) output(62,eq,10) output(8,eq,67) output(61,eq,47) output(7,eq,42) output(18,eq,89) output(58,eq,10) output(66,eq,62) output(21,eq,58) output(8,eq,50) output(21,eq,62) output(66,eq,10) output(21,eq,10) output(89,eq,32) output(18,eq,32) output(67,eq,32) output(8,eq,32)
Optimization: 25 14
Answer: 4
preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,(1,13),1,for(atom(hasPrep(7))),8) preference(1,less(weight)) output(18,better,10) output(18,better,32) output(67,better,58) output(67,better,32) output(67,better,10) output(8,better,58) output(8,better,32) output(8,better,10) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(21,better,58) output(21,better,10) output(21,better,32) output(58,worse,62) output(67,eq,50) output(50,eq,39) output(21,eq,66) output(10,eq,32) output(8,eq,67) output(67,eq,21) output(61,eq,47) output(7,eq,42) output(18,eq,89) output(89,eq,62) output(18,eq,62) output(8,eq,21) output(58,eq,10) output(66,eq,62) output(67,eq,66) output(67,eq,39) output(8,eq,50) output(8,eq,39) output(8,eq,66) output(21,eq,62) output(67,eq,62) output(58,eq,32) output(8,eq,62)
Optimization: 24 2
Answer: 5
preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,(1,12),1,for(atom(hasPrep(3))),8) preference(1,(1,13),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(18,better,10) output(18,better,32) output(67,better,50) output(67,better,32) output(67,better,10) output(8,better,50) output(8,better,32) output(8,better,10) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(21,better,10) output(21,better,32) output(58,better,10) output(58,better,32) output(50,worse,39) output(21,eq,66) output(66,eq,58) output(58,eq,62) output(10,eq,32) output(8,eq,67) output(67,eq,21) output(7,eq,42) output(18,eq,89) output(89,eq,62) output(18,eq,62) output(8,eq,21) output(66,eq,62) output(21,eq,58) output(67,eq,66) output(67,eq,39) output(8,eq,39) output(8,eq,66) output(67,eq,58) output(8,eq,58) output(21,eq,62) output(67,eq,62) output(8,eq,62)
Optimization: 23 3
Answer: 6
preference(1,(1,3),1,for(atom(hasPrep(7))),8) preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,(1,12),1,for(atom(hasPrep(3))),8) preference(1,(1,13),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(18,better,10) output(18,better,32) output(67,better,50) output(67,better,58) output(67,better,32) output(67,better,10) output(8,better,50) output(8,better,58) output(8,better,32) output(8,better,10) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(21,better,58) output(21,better,10) output(21,better,32) output(50,worse,39) output(58,worse,62) output(21,eq,66) output(10,eq,32) output(8,eq,67) output(67,eq,21) output(7,eq,42) output(18,eq,89) output(89,eq,62) output(18,eq,62) output(8,eq,21) output(58,eq,10) output(66,eq,62) output(67,eq,66) output(67,eq,39) output(8,eq,39) output(8,eq,66) output(21,eq,62) output(67,eq,62) output(58,eq,32) output(8,eq,62)
Optimization: 21 4
Answer: 7
preference(1,(1,3),1,for(atom(hasPrepTime(1))),8) preference(1,(1,4),1,for(atom(hasCategory(3))),1) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasCategory(2))),2) preference(1,(1,11),1,for(atom(hasPrep(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),2) preference(1,(1,14),1,for(atom(hasIngredient(3))),1) preference(1,less(weight)) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,32) output(67,better,10) output(8,better,21) output(8,better,50) output(8,better,66) output(8,better,32) output(8,better,10) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,10) output(66,better,32) output(7,better,42) output(58,better,10) output(58,better,32) output(50,worse,39) output(67,worse,39) output(67,worse,58) output(67,worse,62) output(8,worse,39) output(8,worse,58) output(8,worse,62) output(66,worse,58) output(66,worse,62) output(89,worse,62) output(89,worse,10) output(89,worse,32) output(21,worse,66) output(21,worse,58) output(21,worse,62) output(21,worse,10) output(21,worse,32) output(58,eq,62) output(10,eq,32) output(8,eq,67)
Optimization: 20 9
Answer: 8
preference(1,(1,1),1,for(atom(hasIngredient(7))),8) preference(1,(1,2),1,for(atom(hasIngredient(12))),8) preference(1,(1,3),1,for(atom(hasDifficulty(2))),2) preference(1,(1,4),1,for(atom(hasPrep(5))),8) preference(1,(1,5),1,for(atom(hasCategory(4))),8) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,8),1,for(atom(hasPrep(1))),8) preference(1,(1,10),1,for(atom(hasIngredient(3))),7) preference(1,(1,11),1,for(atom(hasIngredient(4))),5) preference(1,(1,12),1,for(atom(hasIngredient(9))),8) preference(1,(1,13),1,for(atom(hasPrep(7))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(10,better,32) output(18,better,62) output(67,better,50) output(67,better,21) output(67,better,39) output(67,better,58) output(67,better,62) output(8,better,67) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,58) output(8,better,62) output(61,better,47) output(66,better,58) output(66,better,62) output(66,better,10) output(66,better,32) output(89,better,62) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,58) output(18,worse,89) output(18,worse,10) output(67,worse,66) output(67,worse,32) output(67,worse,10) output(8,worse,66) output(8,worse,10) output(62,worse,10) output(62,worse,32) output(21,worse,66) output(21,worse,10) output(21,worse,32) output(58,worse,62) output(58,worse,10) output(58,worse,32) output(50,eq,39) output(21,eq,62) output(18,eq,32) output(8,eq,32)
Optimization: 19 13
Answer: 9
preference(1,(1,1),1,for(atom(hasPrepTime(1))),3) preference(1,(1,3),1,for(atom(hasCost(1))),2) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasCategory(2))),2) preference(1,(1,11),1,for(atom(hasPrep(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),3) preference(1,(1,14),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(18,better,89) output(18,better,10) output(18,better,32) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,32) output(67,better,10) output(8,better,21) output(8,better,50) output(8,better,66) output(8,better,32) output(8,better,10) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(21,better,10) output(21,better,32) output(58,better,10) output(58,better,32) output(50,worse,39) output(67,worse,39) output(67,worse,58) output(67,worse,62) output(8,worse,39) output(8,worse,58) output(8,worse,62) output(66,worse,58) output(66,worse,62) output(89,worse,62) output(21,worse,58) output(21,worse,62) output(21,eq,66) output(58,eq,62) output(10,eq,32) output(8,eq,67) output(7,eq,42) output(18,eq,62)
Optimization: 18 9
Answer: 10
preference(1,(1,1),1,for(atom(hasCategory(3))),3) preference(1,(1,3),1,for(atom(hasCost(1))),2) preference(1,(1,4),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,8),1,for(atom(hasCategory(2))),2) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasPrepTime(1))),3) preference(1,(1,11),1,for(atom(hasPrep(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),3) preference(1,(1,14),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(18,better,10) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32) output(10,worse,32) output(18,worse,89) output(18,worse,62) output(50,worse,39) output(67,worse,58) output(8,worse,58) output(66,worse,58) output(89,worse,62) output(7,worse,42) output(21,worse,58) output(21,eq,66) output(8,eq,67) output(66,eq,62) output(21,eq,62) output(18,eq,32)
Optimization: 15 11
Answer: 11
preference(1,(1,1),1,for(atom(hasCategory(3))),3) preference(1,(1,3),1,for(atom(hasCost(1))),2) preference(1,(1,4),1,for(atom(hasPrep(2))),7) preference(1,(1,5),1,for(atom(hasCost(4))),7) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,8),1,for(atom(hasPrepTime(1))),3) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasCategory(2))),2) preference(1,(1,11),1,for(atom(hasPrep(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),3) preference(1,less(weight)) output(18,better,10) output(18,better,32) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32) output(10,worse,32) output(18,worse,89) output(18,worse,62) output(50,worse,39) output(67,worse,58) output(8,worse,58) output(66,worse,58) output(89,worse,62) output(7,worse,42) output(21,worse,58) output(21,eq,66) output(8,eq,67) output(66,eq,62) output(21,eq,62)
Optimization: 14 11
Answer: 12
preference(1,(1,1),1,for(atom(hasCategory(3))),3) preference(1,(1,3),1,for(atom(hasCost(1))),2) preference(1,(1,5),1,for(atom(hasPrep(2))),6) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,8),1,for(atom(hasPrepTime(1))),3) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasCategory(2))),2) preference(1,(1,11),1,for(atom(hasPrep(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),3) preference(1,(1,14),1,for(atom(hasCost(4))),4) preference(1,less(weight)) output(18,better,89) output(18,better,10) output(18,better,32) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32) output(10,worse,32) output(18,worse,62) output(50,worse,39) output(67,worse,58) output(8,worse,58) output(66,worse,58) output(89,worse,62) output(7,worse,42) output(21,worse,58) output(21,eq,66) output(8,eq,67) output(66,eq,62) output(21,eq,62)
Optimization: 13 11
Answer: 13
preference(1,(1,1),1,for(atom(hasCategory(3))),3) preference(1,(1,3),1,for(atom(hasCost(1))),2) preference(1,(1,5),1,for(atom(hasCost(4))),4) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,8),1,for(atom(hasPrepTime(1))),3) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasCategory(2))),2) preference(1,(1,11),1,for(atom(hasPrep(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),3) preference(1,(1,14),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(18,better,89) output(18,better,10) output(18,better,32) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32) output(18,worse,62) output(50,worse,39) output(67,worse,58) output(8,worse,58) output(66,worse,58) output(89,worse,62) output(21,worse,58) output(21,eq,66) output(10,eq,32) output(8,eq,67) output(66,eq,62) output(21,eq,62)
Optimization: 12 11
Answer: 14
preference(1,(1,1),1,for(atom(hasCategory(3))),3) preference(1,(1,3),1,for(atom(hasCost(1))),2) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,8),1,for(atom(hasPrepTime(1))),3) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasCategory(2))),2) preference(1,(1,11),1,for(atom(hasPrep(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(1))),3) preference(1,(1,14),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32) output(50,worse,39) output(67,worse,58) output(8,worse,58) output(66,worse,58) output(89,worse,62) output(21,worse,58) output(21,eq,66) output(10,eq,32) output(8,eq,67) output(66,eq,62) output(21,eq,62)
Optimization: 11 10
Answer: 15
preference(1,(1,1),1,for(atom(hasIngredient(3))),2) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,9),1,for(atom(hasPrepTime(1))),1) preference(1,(1,10),1,for(atom(hasCategory(2))),2) preference(1,(1,11),1,for(atom(hasPrep(7))),5) preference(1,(1,12),1,for(atom(hasCost(5))),8) preference(1,(1,14),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,58) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,21) output(8,better,50) output(8,better,66) output(8,better,58) output(8,better,32) output(8,better,10) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,10) output(66,better,32) output(89,better,10) output(89,better,32) output(21,better,66) output(21,better,58) output(21,better,10) output(21,better,32) output(58,better,10) output(58,better,32) output(10,worse,32) output(50,worse,39) output(8,worse,67) output(66,worse,62) output(89,worse,62) output(21,worse,62) output(58,worse,62) output(7,eq,42) output(8,eq,39) output(8,eq,62)
Optimization: 10 9
Answer: 16
preference(1,(1,2),1,for(atom(hasIngredient(4))),6) preference(1,(1,3),1,for(atom(hasDifficulty(3))),7) preference(1,(1,4),1,for(atom(hasCategory(4))),5) preference(1,(1,5),1,for(atom(hasIngredient(3))),5) preference(1,(1,6),1,for(atom(hasCategory(3))),8) preference(1,(1,7),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),2) preference(1,(1,9),1,for(atom(hasCost(3))),7) preference(1,(1,10),1,for(atom(hasIngredient(12))),8) preference(1,(1,11),1,for(atom(hasDifficulty(1))),8) preference(1,(1,12),1,for(atom(hasPrepTime(1))),2) preference(1,(1,14),1,for(atom(hasPrep(2))),2) preference(1,less(weight)) output(10,better,32) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(50,better,39) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,58) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,67) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,58) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,62) output(66,better,10) output(66,better,32) output(89,better,62) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,66) output(21,better,58) output(21,better,62) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32)
Optimization: 0 12
Progression : 0 [ 1;12] (Error: 11)
Answer: 17
preference(1,(1,1),1,for(atom(hasCategory(3))),4) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasIngredient(9))),2) preference(1,(1,6),1,for(atom(hasCost(3))),5) preference(1,(1,7),1,for(atom(hasCategory(5))),2) preference(1,(1,8),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasDifficulty(4))),5) preference(1,(1,12),1,for(atom(hasCost(5))),8) preference(1,(1,13),1,for(atom(hasCategory(4))),3) preference(1,(1,14),1,for(atom(hasIngredient(2))),8) preference(1,less(weight)) output(10,better,32) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(50,better,39) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,58) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,67) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,58) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,62) output(66,better,10) output(66,better,32) output(89,better,62) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,66) output(21,better,58) output(21,better,62) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32)
Optimization: 0 11
Answer: 18
preference(1,(1,1),1,for(atom(hasCategory(3))),4) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasIngredient(9))),2) preference(1,(1,6),1,for(atom(hasCost(3))),5) preference(1,(1,7),1,for(atom(hasCategory(5))),2) preference(1,(1,8),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,12),1,for(atom(hasCost(5))),8) preference(1,(1,13),1,for(atom(hasCategory(4))),3) preference(1,(1,14),1,for(atom(hasIngredient(2))),8) preference(1,less(weight)) output(10,better,32) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(50,better,39) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,58) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,67) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,58) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,62) output(66,better,10) output(66,better,32) output(89,better,62) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,66) output(21,better,58) output(21,better,62) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32)
Optimization: 0 10
Answer: 19
preference(1,(1,1),1,for(atom(hasCategory(3))),4) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasIngredient(9))),2) preference(1,(1,6),1,for(atom(hasCost(3))),5) preference(1,(1,7),1,for(atom(hasCategory(5))),2) preference(1,(1,8),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,12),1,for(atom(hasCost(5))),8) preference(1,(1,13),1,for(atom(hasCategory(4))),3) preference(1,less(weight)) output(10,better,32) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(50,better,39) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,58) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,67) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,58) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,62) output(66,better,10) output(66,better,32) output(89,better,62) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,66) output(21,better,58) output(21,better,62) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32)
Optimization: 0 9
Answer: 20
preference(1,(1,1),1,for(atom(hasCategory(3))),4) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasIngredient(9))),2) preference(1,(1,6),1,for(atom(hasCost(3))),5) preference(1,(1,8),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,12),1,for(atom(hasCost(5))),8) preference(1,(1,13),1,for(atom(hasCategory(4))),3) preference(1,less(weight)) output(10,better,32) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(50,better,39) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,58) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,67) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,58) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,62) output(66,better,10) output(66,better,32) output(89,better,62) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,66) output(21,better,58) output(21,better,62) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32)
Optimization: 0 8
Answer: 21
preference(1,(1,1),1,for(atom(hasCategory(3))),4) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasIngredient(9))),2) preference(1,(1,6),1,for(atom(hasCost(3))),5) preference(1,(1,8),1,for(atom(hasPrep(2))),5) preference(1,(1,12),1,for(atom(hasIngredient(4))),2) preference(1,(1,13),1,for(atom(hasCategory(4))),3) preference(1,less(weight)) output(10,better,32) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(50,better,39) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,58) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,67) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,58) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,62) output(66,better,10) output(66,better,32) output(89,better,62) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,66) output(21,better,58) output(21,better,62) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32)
Optimization: 0 7
Answer: 22
preference(1,(1,1),1,for(atom(hasCategory(3))),4) preference(1,(1,5),1,for(atom(hasIngredient(9))),2) preference(1,(1,6),1,for(atom(hasCost(3))),5) preference(1,(1,8),1,for(atom(hasPrep(2))),5) preference(1,(1,12),1,for(atom(hasIngredient(4))),2) preference(1,(1,13),1,for(atom(hasCategory(4))),3) preference(1,less(weight)) output(10,better,32) output(18,better,89) output(18,better,62) output(18,better,10) output(18,better,32) output(50,better,39) output(67,better,50) output(67,better,21) output(67,better,66) output(67,better,39) output(67,better,58) output(67,better,62) output(67,better,32) output(67,better,10) output(8,better,67) output(8,better,21) output(8,better,50) output(8,better,39) output(8,better,66) output(8,better,58) output(8,better,32) output(8,better,10) output(8,better,62) output(61,better,47) output(62,better,10) output(62,better,32) output(66,better,58) output(66,better,62) output(66,better,10) output(66,better,32) output(89,better,62) output(89,better,10) output(89,better,32) output(7,better,42) output(21,better,66) output(21,better,58) output(21,better,62) output(21,better,10) output(21,better,32) output(58,better,62) output(58,better,10) output(58,better,32)
Optimization: 0 6
Progression : 0 [2;6] (Error: 2)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.051 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 22+
  Optimum    : unknown
Optimization : 0 6
Calls        : 1
Time         : 598.243s (Solving: 595.44s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2384.120s
Threads      : 4        (Winner: 4)

Choices      : 20754659 (Domain: 288750)
Conflicts    : 7803410  (Analyzed: 7803408)
Restarts     : 8488     (Average: 919.35 Last: 428429)
Model-Level  : 234.6   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 7811811  (Deleted: 7371960)
  Binary     : 424      (Ratio:   0.01%)
  Ternary    : 662      (Ratio:   0.01%)
  Conflict   : 7803408  (Average Length:  523.4 Ratio:  99.89%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 8403     (Average Length:  100.5 Ratio:   0.11%) 
  Distributed: 2803     (Ratio:   0.04% Average LBD: 3.64) 
  Integrated : 8409     (Ratio: 300.00% Unit: 0 Average Jumps: 0.00)
Backjumps    : 7803408  (Average:  2.10 Max: 1606 Sum: 16363477)
  Executed   : 7803407  (Average:  2.10 Max: 1606 Sum: 16363439 Ratio: 100.00%)
  Bounded    : 1        (Average: 38.00 Max:  38 Sum:     38 Ratio:   0.00%)

Rules        : 497168  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14726   
Bodies       : 18991   
  Sum        : 84      
  Count      : 14      
Equivalences : 7320     (Atom=Atom: 433 Body=Body: 182 Other: 6705)
Tight        : Yes
Variables    : 17095    (Eliminated:    0 Frozen: 7771)
Constraints  : 518384   (Binary:  97.5% Ternary:   1.8% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasCategory(2)) ; 
  8 :: atom(hasPrep(3)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasCategory(2)) ; 
  8 :: atom(hasPrep(3)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(3)) ; 
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCategory(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(3)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(3)) ; 
  2 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasCategory(2)) ; 
  8 :: atom(hasPrep(3)) ; 
  3 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(3)) ; 
  2 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasCategory(2)) ; 
  8 :: atom(hasPrep(3)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(3)) ; 
  2 :: atom(hasCost(1)) ; 
  4 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasCategory(2)) ; 
  8 :: atom(hasPrep(3)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(3)) ; 
  2 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasCategory(2)) ; 
  8 :: atom(hasPrep(3)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(5)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  5 :: atom(hasCategory(4)) ; 
  5 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  2 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCost(1)) ; 
  2 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasCost(3)) ; 
  2 :: atom(hasCategory(5)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasCost(5)) ; 
  3 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCost(1)) ; 
  2 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasCost(3)) ; 
  2 :: atom(hasCategory(5)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(5)) ; 
  3 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCost(1)) ; 
  2 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasCost(3)) ; 
  2 :: atom(hasCategory(5)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(5)) ; 
  3 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCost(1)) ; 
  2 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasCost(3)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(5)) ; 
  3 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCost(1)) ; 
  2 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasCost(3)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  3 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(3)) ; 
  2 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasCost(3)) ; 
  5 :: atom(hasPrep(2)) ; 
  2 :: atom(hasIngredient(4)) ; 
  3 :: atom(hasCategory(4)) 
}.
