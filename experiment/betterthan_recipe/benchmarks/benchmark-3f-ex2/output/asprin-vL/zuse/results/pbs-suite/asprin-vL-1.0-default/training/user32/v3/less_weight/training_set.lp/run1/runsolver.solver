asprin_vL version 1.0
Reading from stdin
-:1224:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1234:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1249:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1330:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1591:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1604:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1781:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1910:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1982:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1986:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1986:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1992:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2091:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2117:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2237:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2271:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2293:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1141:1-16: info: no atoms over signature occur in program:
  output/3

-:1133:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1134:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(8,eq,55) output(55,eq,52) output(52,eq,78) output(86,eq,75) output(75,eq,62) output(62,eq,25) output(25,eq,94) output(99,eq,55) output(52,eq,67) output(76,eq,91) output(91,eq,51) output(71,eq,57) output(76,eq,51) output(55,eq,67) output(62,eq,94) output(75,eq,25) output(86,eq,62) output(55,eq,78) output(8,eq,52) output(99,eq,52) output(8,eq,78) output(99,eq,78) output(86,eq,25) output(75,eq,94) output(86,eq,94) output(8,eq,67) output(99,eq,67)
Optimization: 27 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(3))),2) preference(1,less(weight)) output(91,better,51) output(25,better,94) output(52,better,78) output(8,worse,52) output(8,worse,67) output(55,worse,52) output(55,worse,67) output(62,worse,25) output(99,worse,52) output(99,worse,67) output(75,worse,25) output(86,worse,25) output(76,worse,91) output(8,eq,55) output(86,eq,75) output(75,eq,62) output(99,eq,55) output(52,eq,67) output(71,eq,57) output(76,eq,51) output(62,eq,94) output(86,eq,62) output(55,eq,78) output(8,eq,78) output(99,eq,78) output(75,eq,94) output(86,eq,94)
Optimization: 24 14
Answer: 3
preference(1,(1,1),1,for(atom(hasDifficulty(2))),8) preference(1,(1,10),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,67) output(75,better,62) output(75,better,25) output(75,better,94) output(8,worse,78) output(55,worse,78) output(52,worse,78) output(86,worse,75) output(76,worse,91) output(8,eq,55) output(55,eq,52) output(62,eq,25) output(25,eq,94) output(52,eq,67) output(71,eq,57) output(76,eq,51) output(55,eq,67) output(62,eq,94) output(86,eq,62) output(8,eq,52) output(99,eq,78) output(86,eq,25) output(86,eq,94) output(8,eq,67)
Optimization: 20 2
Answer: 4
preference(1,(1,2),1,for(atom(hasDifficulty(2))),8) preference(1,(1,10),1,for(atom(hasCost(2))),8) preference(1,(1,12),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(75,better,62) output(75,better,25) output(75,better,94) output(86,worse,75) output(76,worse,91) output(8,eq,55) output(55,eq,52) output(52,eq,78) output(62,eq,25) output(25,eq,94) output(52,eq,67) output(71,eq,57) output(76,eq,51) output(55,eq,67) output(62,eq,94) output(86,eq,62) output(55,eq,78) output(8,eq,52) output(8,eq,78) output(86,eq,25) output(86,eq,94) output(8,eq,67)
Optimization: 19 3
Answer: 5
preference(1,(1,12),1,for(atom(hasCost(4))),8) preference(1,(1,13),1,for(atom(hasPrep(2))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(8,better,52) output(8,better,78) output(8,better,67) output(55,better,52) output(55,better,67) output(55,better,78) output(62,better,25) output(99,better,52) output(99,better,78) output(99,better,67) output(71,better,57) output(75,better,25) output(86,better,25) output(76,better,91) output(76,better,51) output(25,worse,94) output(8,eq,55) output(52,eq,78) output(86,eq,75) output(75,eq,62) output(99,eq,55) output(52,eq,67) output(91,eq,51) output(62,eq,94) output(86,eq,62) output(75,eq,94) output(86,eq,94)
Optimization: 12 3
Answer: 6
preference(1,(1,2),1,for(atom(hasPrep(1))),8) preference(1,(1,3),1,for(atom(hasCost(4))),8) preference(1,(1,8),1,for(atom(hasCategory(1))),8) preference(1,(1,13),1,for(atom(hasPrepTime(1))),8) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,78) output(8,better,67) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(75,better,62) output(75,better,25) output(75,better,94) output(86,better,62) output(86,better,25) output(86,better,94) output(76,better,91) output(76,better,51) output(55,eq,52) output(52,eq,78) output(86,eq,75) output(62,eq,25) output(25,eq,94) output(52,eq,67) output(91,eq,51) output(71,eq,57) output(55,eq,67) output(62,eq,94) output(55,eq,78)
Optimization: 11 4
Answer: 7
preference(1,(1,1),1,for(atom(hasPrepTime(3))),7) preference(1,(1,2),1,for(atom(hasPrep(6))),3) preference(1,(1,3),1,for(atom(hasIngredient(7))),3) preference(1,(1,4),1,for(atom(hasIngredient(9))),3) preference(1,(1,5),1,for(atom(hasCategory(4))),6) preference(1,(1,6),1,for(atom(hasPrep(1))),7) preference(1,(1,7),1,for(atom(hasCategory(3))),5) preference(1,(1,8),1,for(atom(hasPrepTime(2))),7) preference(1,(1,9),1,for(atom(hasIngredient(3))),7) preference(1,(1,10),1,for(atom(hasPrep(2))),3) preference(1,(1,11),1,for(atom(hasCost(4))),8) preference(1,(1,12),1,for(atom(hasCategory(1))),5) preference(1,(1,13),1,for(atom(hasDifficulty(2))),7) preference(1,(1,14),1,for(atom(hasCost(2))),2) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,78) output(8,better,67) output(55,better,52) output(55,better,78) output(62,better,25) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,78) output(52,better,78) output(75,better,62) output(75,better,25) output(75,better,94) output(76,better,91) output(76,better,51) output(55,worse,67) output(99,worse,67) output(25,worse,94) output(52,worse,67) output(86,worse,75) output(86,worse,62) output(86,worse,94) output(71,eq,57) output(62,eq,94) output(86,eq,25)
Optimization: 10 14
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(6))),7) preference(1,(1,2),1,for(atom(hasCategory(4))),4) preference(1,(1,3),1,for(atom(hasPrep(5))),6) preference(1,(1,4),1,for(atom(hasPrepTime(2))),1) preference(1,(1,5),1,for(atom(hasCategory(1))),2) preference(1,(1,6),1,for(atom(hasIngredient(7))),6) preference(1,(1,7),1,for(atom(hasDifficulty(2))),8) preference(1,(1,8),1,for(atom(hasCategory(3))),4) preference(1,(1,9),1,for(atom(hasIngredient(9))),1) preference(1,(1,10),1,for(atom(hasPrep(2))),1) preference(1,(1,11),1,for(atom(hasIngredient(10))),3) preference(1,(1,12),1,for(atom(hasPrep(0))),8) preference(1,(1,13),1,for(atom(hasPrepTime(3))),8) preference(1,(1,14),1,for(atom(hasCost(2))),3) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,78) output(8,better,67) output(55,better,52) output(55,better,78) output(62,better,94) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(25,better,94) output(52,better,78) output(71,better,57) output(86,better,75) output(86,better,62) output(86,better,94) output(76,better,91) output(55,worse,67) output(62,worse,25) output(91,worse,51) output(52,worse,67) output(75,worse,62) output(75,worse,25) output(75,worse,94) output(86,worse,25) output(76,worse,51)
Optimization: 9 14
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(2))),2) preference(1,(1,2),1,for(atom(hasIngredient(3))),3) preference(1,(1,3),1,for(atom(hasDifficulty(2))),7) preference(1,(1,4),1,for(atom(hasPrepTime(3))),4) preference(1,(1,5),1,for(atom(hasPrep(6))),6) preference(1,(1,6),1,for(atom(hasPrepTime(1))),2) preference(1,(1,7),1,for(atom(hasPrep(1))),3) preference(1,(1,8),1,for(atom(hasPrepTime(2))),2) preference(1,(1,9),1,for(atom(hasIngredient(4))),6) preference(1,(1,10),1,for(atom(hasIngredient(10))),6) preference(1,(1,11),1,for(atom(hasCategory(1))),5) preference(1,(1,12),1,for(atom(hasIngredient(12))),8) preference(1,(1,13),1,for(atom(hasCategory(4))),3) preference(1,(1,14),1,for(atom(hasCost(2))),1) preference(1,less(weight)) output(8,better,52) output(8,better,78) output(8,better,67) output(55,better,52) output(55,better,67) output(55,better,78) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(25,better,94) output(52,better,78) output(52,better,67) output(71,better,57) output(86,better,75) output(86,better,62) output(86,better,25) output(86,better,94) output(8,worse,55) output(62,worse,25) output(75,worse,25) output(76,worse,91) output(76,worse,51) output(75,eq,62) output(62,eq,94) output(75,eq,94)
Optimization: 8 14
Answer: 10
preference(1,(1,1),1,for(atom(hasCategory(4))),8) preference(1,(1,2),1,for(atom(hasIngredient(9))),5) preference(1,(1,3),1,for(atom(hasPrep(6))),7) preference(1,(1,4),1,for(atom(hasPrep(1))),8) preference(1,(1,5),1,for(atom(hasPrepTime(3))),3) preference(1,(1,6),1,for(atom(hasDifficulty(2))),6) preference(1,(1,7),1,for(atom(hasIngredient(7))),1) preference(1,(1,8),1,for(atom(hasDifficulty(3))),2) preference(1,(1,9),1,for(atom(hasCategory(3))),5) preference(1,(1,10),1,for(atom(hasCategory(1))),8) preference(1,(1,11),1,for(atom(hasPrep(2))),7) preference(1,(1,12),1,for(atom(hasCost(4))),7) preference(1,(1,13),1,for(atom(hasCost(2))),4) preference(1,(1,14),1,for(atom(hasIngredient(3))),2) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,78) output(8,better,67) output(62,better,94) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(25,better,94) output(71,better,57) output(75,better,62) output(75,better,94) output(86,better,75) output(86,better,62) output(86,better,25) output(86,better,94) output(76,better,91) output(76,better,51) output(55,worse,67) output(55,worse,78) output(62,worse,25) output(52,worse,78) output(52,worse,67) output(75,worse,25) output(55,eq,52)
Optimization: 7 14
Answer: 11
preference(1,(1,1),1,for(atom(hasPrepTime(3))),5) preference(1,(1,2),1,for(atom(hasDifficulty(3))),5) preference(1,(1,3),1,for(atom(hasCost(4))),5) preference(1,(1,4),1,for(atom(hasIngredient(7))),5) preference(1,(1,5),1,for(atom(hasIngredient(4))),2) preference(1,(1,6),1,for(atom(hasCategory(1))),8) preference(1,(1,7),1,for(atom(hasPrepTime(2))),4) preference(1,(1,8),1,for(atom(hasPrep(6))),5) preference(1,(1,9),1,for(atom(hasCategory(4))),5) preference(1,(1,10),1,for(atom(hasPrep(2))),2) preference(1,(1,11),1,for(atom(hasPrep(1))),3) preference(1,(1,13),1,for(atom(hasIngredient(12))),5) preference(1,(1,14),1,for(atom(hasDifficulty(1))),1) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,67) output(55,better,52) output(55,better,67) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,67) output(25,better,94) output(52,better,67) output(71,better,57) output(75,better,62) output(75,better,25) output(75,better,94) output(86,better,75) output(86,better,62) output(86,better,25) output(86,better,94) output(76,better,91) output(76,better,51) output(55,worse,78) output(62,worse,25) output(52,worse,78) output(62,eq,94) output(8,eq,78) output(99,eq,78)
Optimization: 6 13
Answer: 12
preference(1,(1,1),1,for(atom(hasCost(4))),4) preference(1,(1,2),1,for(atom(hasIngredient(12))),6) preference(1,(1,3),1,for(atom(hasCategory(1))),6) preference(1,(1,4),1,for(atom(hasIngredient(10))),5) preference(1,(1,5),1,for(atom(hasPrepTime(2))),8) preference(1,(1,6),1,for(atom(hasDifficulty(2))),3) preference(1,(1,7),1,for(atom(hasPrepTime(3))),5) preference(1,(1,8),1,for(atom(hasPrep(1))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,10),1,for(atom(hasPrep(6))),7) preference(1,(1,12),1,for(atom(hasPrep(0))),1) preference(1,(1,13),1,for(atom(hasCategory(4))),7) preference(1,(1,14),1,for(atom(hasPrep(5))),2) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,78) output(8,better,67) output(55,better,52) output(55,better,67) output(55,better,78) output(62,better,25) output(62,better,94) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(25,better,94) output(52,better,78) output(52,better,67) output(71,better,57) output(75,better,62) output(75,better,25) output(75,better,94) output(86,better,75) output(86,better,62) output(86,better,25) output(86,better,94) output(76,better,91) output(76,better,51)
Optimization: 0 13
Progression : 0 [ 1;13] (Error: 12)
Progression : 0 [ 2;13] (Error: 5.5)
Answer: 13
preference(1,(1,1),1,for(atom(hasIngredient(12))),3) preference(1,(1,2),1,for(atom(hasDifficulty(3))),4) preference(1,(1,3),1,for(atom(hasCategory(3))),4) preference(1,(1,4),1,for(atom(hasPrep(2))),7) preference(1,(1,5),1,for(atom(hasPrep(7))),5) preference(1,(1,6),1,for(atom(hasCategory(1))),8) preference(1,(1,7),1,for(atom(hasIngredient(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),6) preference(1,(1,12),1,for(atom(hasPrepTime(2))),6) preference(1,(1,13),1,for(atom(hasPrep(0))),1) preference(1,(1,14),1,for(atom(hasPrep(6))),3) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,78) output(8,better,67) output(55,better,52) output(55,better,67) output(55,better,78) output(62,better,25) output(62,better,94) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(25,better,94) output(52,better,78) output(52,better,67) output(71,better,57) output(75,better,62) output(75,better,25) output(75,better,94) output(86,better,75) output(86,better,62) output(86,better,25) output(86,better,94) output(76,better,91) output(76,better,51)
Optimization: 0 11
Answer: 14
preference(1,(1,1),1,for(atom(hasCost(2))),4) preference(1,(1,2),1,for(atom(hasPrep(6))),3) preference(1,(1,4),1,for(atom(hasDifficulty(3))),8) preference(1,(1,5),1,for(atom(hasCategory(4))),4) preference(1,(1,6),1,for(atom(hasDifficulty(2))),5) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,8),1,for(atom(hasPrep(1))),6) preference(1,(1,9),1,for(atom(hasPrepTime(2))),6) preference(1,(1,10),1,for(atom(hasCategory(1))),8) preference(1,(1,13),1,for(atom(hasIngredient(12))),5) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,78) output(8,better,67) output(55,better,52) output(55,better,67) output(55,better,78) output(62,better,25) output(62,better,94) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(25,better,94) output(52,better,78) output(52,better,67) output(71,better,57) output(75,better,62) output(75,better,25) output(75,better,94) output(86,better,75) output(86,better,62) output(86,better,25) output(86,better,94) output(76,better,91) output(76,better,51)
Optimization: 0 10
Answer: 15
preference(1,(1,1),1,for(atom(hasCost(4))),7) preference(1,(1,3),1,for(atom(hasPrepTime(1))),6) preference(1,(1,4),1,for(atom(hasPrep(1))),2) preference(1,(1,6),1,for(atom(hasIngredient(6))),7) preference(1,(1,7),1,for(atom(hasDifficulty(2))),4) preference(1,(1,9),1,for(atom(hasCategory(1))),8) preference(1,(1,10),1,for(atom(hasCost(2))),4) preference(1,(1,13),1,for(atom(hasPrep(7))),2) preference(1,(1,14),1,for(atom(hasPrep(6))),5) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,78) output(8,better,67) output(55,better,52) output(55,better,67) output(55,better,78) output(62,better,25) output(62,better,94) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(25,better,94) output(52,better,78) output(52,better,67) output(71,better,57) output(75,better,62) output(75,better,25) output(75,better,94) output(86,better,75) output(86,better,62) output(86,better,25) output(86,better,94) output(76,better,91) output(76,better,51)
Optimization: 0 9
Progression : 0 [3;9] (Error: 2)
Answer: 16
preference(1,(1,2),1,for(atom(hasPrep(2))),4) preference(1,(1,3),1,for(atom(hasPrep(6))),2) preference(1,(1,6),1,for(atom(hasCategory(3))),3) preference(1,(1,8),1,for(atom(hasPrep(7))),5) preference(1,(1,9),1,for(atom(hasPrep(1))),3) preference(1,(1,10),1,for(atom(hasCost(4))),8) preference(1,(1,11),1,for(atom(hasCategory(1))),6) preference(1,(1,13),1,for(atom(hasPrepTime(2))),4) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,78) output(8,better,67) output(55,better,52) output(55,better,67) output(55,better,78) output(62,better,25) output(62,better,94) output(91,better,51) output(99,better,55) output(99,better,52) output(99,better,78) output(99,better,67) output(25,better,94) output(52,better,78) output(52,better,67) output(71,better,57) output(75,better,62) output(75,better,25) output(75,better,94) output(86,better,75) output(86,better,62) output(86,better,25) output(86,better,94) output(76,better,91) output(76,better,51)
Optimization: 0 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.112 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 16+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 598.169s (Solving: 595.59s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2384.525s
Threads      : 4        (Winner: 4)

Choices      : 11244228 (Domain: 479230)
Conflicts    : 8132544  (Analyzed: 8132541)
Restarts     : 7440     (Average: 1093.08 Last: 581134)
Model-Level  : 88.1    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 8147023  (Deleted: 7737653)
  Binary     : 1448     (Ratio:   0.02%)
  Ternary    : 2319     (Ratio:   0.03%)
  Conflict   : 8132541  (Average Length:  496.3 Ratio:  99.82%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 14482    (Average Length:   37.0 Ratio:   0.18%) 
  Distributed: 4830     (Ratio:   0.06% Average LBD: 3.52) 
  Integrated : 14490    (Ratio: 300.00% Unit: 21 Average Jumps: 39.57)
Backjumps    : 8132541  (Average:  1.29 Max: 767 Sum: 10502928)
  Executed   : 8132540  (Average:  1.29 Max: 767 Sum: 10502919 Ratio: 100.00%)
  Bounded    : 1        (Average:  9.00 Max:   9 Sum:      9 Ratio:   0.00%)

Rules        : 353949  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13256   
Bodies       : 18826   
  Sum        : 54      
  Count      : 14      
Equivalences : 6795     (Atom=Atom: 283 Body=Body: 122 Other: 6390)
Tight        : Yes
Variables    : 17035    (Eliminated:    0 Frozen: 7711)
Constraints  : 376530   (Binary:  96.6% Ternary:   2.5% Other:   0.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasPrep(6)) ; 
  3 :: atom(hasIngredient(7)) ; 
  3 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrep(1)) ; 
  5 :: atom(hasCategory(3)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(4)) ; 
  5 :: atom(hasCategory(1)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(6)) ; 
  4 :: atom(hasCategory(4)) ; 
  6 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCategory(1)) ; 
  6 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCategory(3)) ; 
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrep(2)) ; 
  3 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(2)) ; 
  3 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasIngredient(4)) ; 
  6 :: atom(hasIngredient(10)) ; 
  5 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(12)) ; 
  3 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(4)) ; 
  5 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  5 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(4)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  5 :: atom(hasCost(4)) ; 
  5 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCategory(4)) ; 
  2 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  5 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(4)) ; 
  6 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasCategory(1)) ; 
  5 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(0)) ; 
  7 :: atom(hasCategory(4)) ; 
  2 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasCategory(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCategory(1)) ; 
  1 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCost(4)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(6)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasCategory(4)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCategory(1)) ; 
  5 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(4)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(6)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasCategory(1)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  3 :: atom(hasCategory(3)) ; 
  5 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(1)) ; 
  8 :: atom(hasCost(4)) ; 
  6 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrepTime(2)) 
}.
