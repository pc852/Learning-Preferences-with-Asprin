asprin_vL version 1.0
Reading from stdin
-:1230:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1240:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1255:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1336:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1597:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1610:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1787:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1916:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1988:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1992:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1992:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1998:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2097:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2123:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2243:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2277:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2299:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1147:1-16: info: no atoms over signature occur in program:
  output/3

-:1139:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1140:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(25,eq,64) output(65,eq,52) output(52,eq,69) output(69,eq,67) output(67,eq,72) output(72,eq,42) output(10,eq,14) output(14,eq,13) output(13,eq,51) output(18,eq,65) output(65,eq,25) output(25,eq,42) output(65,eq,42) output(18,eq,25) output(14,eq,51) output(10,eq,13) output(67,eq,42) output(69,eq,72) output(52,eq,67) output(65,eq,69) output(18,eq,52) output(65,eq,64) output(18,eq,64) output(18,eq,69) output(65,eq,67) output(18,eq,67) output(52,eq,72) output(65,eq,72) output(69,eq,42) output(52,eq,42) output(10,eq,51) output(18,eq,42) output(18,eq,72)
Optimization: 33 0
Answer: 2
preference(1,(1,14),1,for(atom(hasCost(3))),2) preference(1,less(weight)) output(10,better,14) output(18,better,65) output(18,better,42) output(18,better,72) output(67,better,72) output(67,better,42) output(69,better,72) output(69,better,42) output(25,better,42) output(52,better,72) output(52,better,42) output(14,worse,13) output(14,worse,51) output(65,worse,52) output(65,worse,25) output(65,worse,69) output(65,worse,64) output(65,worse,67) output(25,eq,64) output(52,eq,69) output(69,eq,67) output(72,eq,42) output(13,eq,51) output(65,eq,42) output(18,eq,25) output(10,eq,13) output(52,eq,67) output(18,eq,52) output(18,eq,64) output(18,eq,69) output(18,eq,67) output(65,eq,72) output(10,eq,51)
Optimization: 22 1
Answer: 3
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(10,better,13) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(14,better,13) output(25,better,64) output(25,better,42) output(65,better,52) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(13,worse,51) output(52,eq,69) output(69,eq,67) output(67,eq,72) output(72,eq,42) output(10,eq,14) output(18,eq,65) output(65,eq,25) output(18,eq,25) output(14,eq,51) output(67,eq,42) output(69,eq,72) output(52,eq,67) output(52,eq,72) output(69,eq,42) output(52,eq,42) output(10,eq,51)
Optimization: 17 14
Answer: 4
preference(1,(1,1),1,for(atom(hasIngredient(4))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(10,better,13) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(14,better,13) output(69,better,67) output(25,better,64) output(25,better,42) output(52,better,67) output(65,better,52) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(67,worse,72) output(67,worse,42) output(13,worse,51) output(52,eq,69) output(72,eq,42) output(10,eq,14) output(18,eq,65) output(65,eq,25) output(18,eq,25) output(14,eq,51) output(69,eq,72) output(52,eq,72) output(69,eq,42) output(52,eq,42) output(10,eq,51)
Optimization: 15 2
Answer: 5
preference(1,(1,1),1,for(atom(hasCost(3))),2) preference(1,(1,2),1,for(atom(hasPrep(2))),8) preference(1,(1,3),1,for(atom(hasDifficulty(4))),2) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,6),1,for(atom(hasCategory(3))),8) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(10,better,14) output(10,better,51) output(18,better,65) output(18,better,25) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(67,better,72) output(67,better,42) output(13,better,51) output(69,better,72) output(69,better,42) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72) output(14,worse,13) output(65,worse,52) output(25,eq,64) output(69,eq,67) output(72,eq,42) output(14,eq,51) output(10,eq,13) output(18,eq,52)
Optimization: 8 6
Answer: 6
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,2),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasIngredient(4))),2) preference(1,(1,4),1,for(atom(hasIngredient(1))),2) preference(1,(1,5),1,for(atom(hasPrep(0))),2) preference(1,(1,6),1,for(atom(hasIngredient(8))),8) preference(1,(1,8),1,for(atom(hasDifficulty(4))),7) preference(1,(1,9),1,for(atom(hasIngredient(3))),8) preference(1,(1,10),1,for(atom(hasCategory(3))),6) preference(1,(1,11),1,for(atom(hasIngredient(6))),8) preference(1,(1,13),1,for(atom(hasCost(3))),4) preference(1,(1,14),1,for(atom(hasIngredient(10))),6) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(10,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(67,better,72) output(67,better,42) output(72,better,42) output(13,better,51) output(14,better,13) output(14,better,51) output(69,better,67) output(69,better,72) output(69,better,42) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72)
Optimization: 0 12
Progression : 0 [ 1;12] (Error: 11)
Answer: 7
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,2),1,for(atom(hasPrep(2))),5) preference(1,(1,4),1,for(atom(hasDifficulty(4))),4) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasCategory(1))),3) preference(1,(1,8),1,for(atom(hasCost(3))),6) preference(1,(1,10),1,for(atom(hasIngredient(3))),5) preference(1,(1,11),1,for(atom(hasIngredient(10))),2) preference(1,(1,12),1,for(atom(hasCategory(3))),1) preference(1,(1,13),1,for(atom(hasPrep(5))),3) preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(10,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(67,better,72) output(67,better,42) output(72,better,42) output(13,better,51) output(14,better,13) output(14,better,51) output(69,better,67) output(69,better,72) output(69,better,42) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72)
Optimization: 0 11
Answer: 8
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,4),1,for(atom(hasIngredient(10))),3) preference(1,(1,5),1,for(atom(hasDifficulty(4))),4) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasCategory(1))),3) preference(1,(1,8),1,for(atom(hasCost(3))),6) preference(1,(1,10),1,for(atom(hasIngredient(3))),5) preference(1,(1,12),1,for(atom(hasCategory(3))),1) preference(1,(1,13),1,for(atom(hasPrep(5))),3) preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(10,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(67,better,72) output(67,better,42) output(72,better,42) output(13,better,51) output(14,better,13) output(14,better,51) output(69,better,67) output(69,better,72) output(69,better,42) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72)
Optimization: 0 10
Answer: 9
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,3),1,for(atom(hasPrep(2))),3) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasCategory(1))),3) preference(1,(1,8),1,for(atom(hasCost(3))),6) preference(1,(1,10),1,for(atom(hasDifficulty(4))),8) preference(1,(1,12),1,for(atom(hasCategory(3))),1) preference(1,(1,13),1,for(atom(hasPrep(5))),3) preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(10,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(67,better,72) output(67,better,42) output(72,better,42) output(13,better,51) output(14,better,13) output(14,better,51) output(69,better,67) output(69,better,72) output(69,better,42) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72)
Optimization: 0 9
Answer: 10
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,3),1,for(atom(hasDifficulty(4))),7) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,8),1,for(atom(hasCost(3))),6) preference(1,(1,10),1,for(atom(hasPrepTime(1))),3) preference(1,(1,12),1,for(atom(hasCategory(3))),1) preference(1,(1,13),1,for(atom(hasPrep(5))),3) preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(10,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(67,better,72) output(67,better,42) output(72,better,42) output(13,better,51) output(14,better,13) output(14,better,51) output(69,better,67) output(69,better,72) output(69,better,42) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72)
Optimization: 0 8
Progression : 0 [2;8] (Error: 3)
Answer: 11
preference(1,(1,1),1,for(atom(hasIngredient(4))),4) preference(1,(1,4),1,for(atom(hasCategory(3))),1) preference(1,(1,7),1,for(atom(hasDifficulty(4))),8) preference(1,(1,10),1,for(atom(hasCost(2))),2) preference(1,(1,12),1,for(atom(hasIngredient(10))),6) preference(1,(1,13),1,for(atom(hasPrepTime(2))),6) preference(1,(1,14),1,for(atom(hasCost(3))),7) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(10,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(67,better,72) output(67,better,42) output(72,better,42) output(13,better,51) output(14,better,13) output(14,better,51) output(69,better,67) output(69,better,72) output(69,better,42) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72)
Optimization: 0 7
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(4))),8) preference(1,(1,4),1,for(atom(hasIngredient(4))),3) preference(1,(1,6),1,for(atom(hasCategory(3))),1) preference(1,(1,10),1,for(atom(hasPrepTime(1))),6) preference(1,(1,11),1,for(atom(hasCost(3))),4) preference(1,(1,12),1,for(atom(hasPrepTime(2))),6) preference(1,less(weight)) output(10,better,14) output(10,better,13) output(10,better,51) output(18,better,65) output(18,better,25) output(18,better,52) output(18,better,64) output(18,better,69) output(18,better,67) output(18,better,42) output(18,better,72) output(67,better,72) output(67,better,42) output(72,better,42) output(13,better,51) output(14,better,13) output(14,better,51) output(69,better,67) output(69,better,72) output(69,better,42) output(25,better,64) output(25,better,42) output(52,better,69) output(52,better,67) output(52,better,72) output(52,better,42) output(65,better,52) output(65,better,25) output(65,better,42) output(65,better,69) output(65,better,64) output(65,better,67) output(65,better,72)
Optimization: 0 6
Progression : 0 [3;6] (Error: 1)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.072 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 12+
  Optimum    : unknown
Optimization : 0 6
Calls        : 1
Time         : 298.252s (Solving: 295.56s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1184.570s
Threads      : 4        (Winner: 4)

Choices      : 6123485  (Domain: 204347)
Conflicts    : 3762828  (Analyzed: 3762825)
Restarts     : 4275     (Average: 880.19 Last: 242213)
Model-Level  : 52.2    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 3770821  (Deleted: 3544949)
  Binary     : 332      (Ratio:   0.01%)
  Ternary    : 775      (Ratio:   0.02%)
  Conflict   : 3762825  (Average Length:  458.3 Ratio:  99.79%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7996     (Average Length:   49.3 Ratio:   0.21%) 
  Distributed: 2671     (Ratio:   0.07% Average LBD: 3.62) 
  Integrated : 8013     (Ratio: 300.00% Unit: 7 Average Jumps: 2.71)
Backjumps    : 3762825  (Average:  1.45 Max: 959 Sum: 5443523)
  Executed   : 3762824  (Average:  1.45 Max: 959 Sum: 5443512 Ratio: 100.00%)
  Bounded    : 1        (Average: 11.00 Max:  11 Sum:     11 Ratio:   0.00%)

Rules        : 407899  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13820   
Bodies       : 18892   
  Sum        : 66      
  Count      : 14      
Equivalences : 7005     (Atom=Atom: 343 Body=Body: 146 Other: 6516)
Tight        : Yes
Variables    : 17035    (Eliminated:    0 Frozen: 7711)
Constraints  : 429910   (Binary:  97.0% Ternary:   2.2% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(2)) ; 
  2 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasIngredient(1)) ; 
  2 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCategory(3)) ; 
  8 :: atom(hasIngredient(6)) ; 
  4 :: atom(hasCost(3)) ; 
  6 :: atom(hasIngredient(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  4 :: atom(hasDifficulty(4)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCost(3)) ; 
  5 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  3 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasDifficulty(4)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCost(3)) ; 
  5 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  1 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(3)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasIngredient(4)) ; 
  1 :: atom(hasCategory(3)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  2 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(4)) ; 
  3 :: atom(hasIngredient(4)) ; 
  1 :: atom(hasCategory(3)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasCost(3)) ; 
  6 :: atom(hasPrepTime(2)) 
}.
