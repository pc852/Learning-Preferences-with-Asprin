asprin_vL version 1.0
Reading from stdin
-:1241:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1251:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1266:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1347:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1608:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1621:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1798:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1927:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1999:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:2003:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:2003:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2009:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2108:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2134:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2254:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2288:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2310:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1158:1-16: info: no atoms over signature occur in program:
  output/3

-:1150:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1151:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(90,eq,42) output(42,eq,78) output(51,eq,18) output(18,eq,72) output(72,eq,31) output(31,eq,23) output(23,eq,79) output(4,eq,18) output(18,eq,76) output(76,eq,41) output(41,eq,37) output(32,eq,72) output(72,eq,92) output(18,eq,92) output(32,eq,92) output(76,eq,37) output(18,eq,41) output(51,eq,76) output(4,eq,76) output(31,eq,79) output(72,eq,23) output(18,eq,31) output(32,eq,31) output(51,eq,72) output(4,eq,72) output(90,eq,78) output(51,eq,31) output(4,eq,31) output(18,eq,23) output(32,eq,23) output(51,eq,23) output(4,eq,23) output(72,eq,79) output(18,eq,79) output(32,eq,79) output(51,eq,41) output(4,eq,41) output(18,eq,37) output(51,eq,37) output(4,eq,37) output(51,eq,92) output(4,eq,92) output(51,eq,79) output(4,eq,79)
Optimization: 44 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasIngredient(4))),8) preference(1,less(weight)) output(18,better,76) output(51,better,76) output(4,better,76) output(76,worse,41) output(76,worse,37) output(90,eq,42) output(42,eq,78) output(51,eq,18) output(18,eq,72) output(72,eq,31) output(31,eq,23) output(23,eq,79) output(4,eq,18) output(41,eq,37) output(32,eq,72) output(72,eq,92) output(18,eq,92) output(32,eq,92) output(18,eq,41) output(31,eq,79) output(72,eq,23) output(18,eq,31) output(32,eq,31) output(51,eq,72) output(4,eq,72) output(90,eq,78) output(51,eq,31) output(4,eq,31) output(18,eq,23) output(32,eq,23) output(51,eq,23) output(4,eq,23) output(72,eq,79) output(18,eq,79) output(32,eq,79) output(51,eq,41) output(4,eq,41) output(18,eq,37) output(51,eq,37) output(4,eq,37) output(51,eq,92) output(4,eq,92) output(51,eq,79) output(4,eq,79)
Optimization: 41 14
Answer: 3
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,2),1,for(atom(hasCategory(3))),8) preference(1,(1,7),1,for(atom(hasPrep(0))),8) preference(1,(1,8),1,for(atom(hasIngredient(9))),8) preference(1,(1,10),1,for(atom(hasIngredient(12))),8) preference(1,(1,14),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(90,eq,42) output(42,eq,78) output(18,eq,72) output(72,eq,31) output(31,eq,23) output(23,eq,79) output(4,eq,18) output(18,eq,76) output(76,eq,41) output(41,eq,37) output(32,eq,72) output(72,eq,92) output(18,eq,92) output(32,eq,92) output(76,eq,37) output(18,eq,41) output(4,eq,76) output(31,eq,79) output(72,eq,23) output(18,eq,31) output(32,eq,31) output(4,eq,72) output(90,eq,78) output(4,eq,31) output(18,eq,23) output(32,eq,23) output(4,eq,23) output(72,eq,79) output(18,eq,79) output(32,eq,79) output(4,eq,41) output(18,eq,37) output(4,eq,37) output(4,eq,92) output(4,eq,79)
Optimization: 35 6
Answer: 4
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,6),1,for(atom(hasIngredient(9))),8) preference(1,(1,10),1,for(atom(hasIngredient(12))),8) preference(1,(1,14),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(31,better,23) output(31,better,79) output(18,worse,31) output(72,worse,31) output(4,worse,31) output(32,worse,31) output(90,eq,42) output(42,eq,78) output(18,eq,72) output(23,eq,79) output(4,eq,18) output(18,eq,76) output(76,eq,41) output(41,eq,37) output(32,eq,72) output(72,eq,92) output(18,eq,92) output(32,eq,92) output(76,eq,37) output(18,eq,41) output(4,eq,76) output(72,eq,23) output(4,eq,72) output(90,eq,78) output(51,eq,31) output(18,eq,23) output(32,eq,23) output(4,eq,23) output(72,eq,79) output(18,eq,79) output(32,eq,79) output(4,eq,41) output(18,eq,37) output(4,eq,37) output(4,eq,92) output(4,eq,79)
Optimization: 34 4
Answer: 5
preference(1,(1,1),1,for(atom(hasDifficulty(2))),3) preference(1,(1,2),1,for(atom(hasPrepTime(2))),3) preference(1,(1,3),1,for(atom(hasPrep(0))),3) preference(1,(1,4),1,for(atom(hasCategory(3))),3) preference(1,(1,5),1,for(atom(hasIngredient(9))),3) preference(1,(1,6),1,for(atom(hasCategory(1))),8) preference(1,(1,7),1,for(atom(hasPrep(1))),3) preference(1,(1,10),1,for(atom(hasPrep(6))),3) preference(1,(1,11),1,for(atom(hasDifficulty(3))),4) preference(1,(1,12),1,for(atom(hasPrep(5))),7) preference(1,(1,13),1,for(atom(hasCost(2))),3) preference(1,(1,14),1,for(atom(hasIngredient(12))),3) preference(1,less(weight)) output(18,better,72) output(51,better,72) output(4,better,18) output(4,better,76) output(4,better,72) output(4,better,23) output(4,better,41) output(31,better,23) output(42,better,78) output(32,better,72) output(90,better,78) output(18,worse,76) output(18,worse,92) output(18,worse,41) output(18,worse,31) output(18,worse,23) output(18,worse,79) output(18,worse,37) output(51,worse,76) output(51,worse,31) output(51,worse,23) output(51,worse,41) output(51,worse,37) output(51,worse,92) output(51,worse,79) output(72,worse,31) output(72,worse,92) output(72,worse,23) output(72,worse,79) output(23,worse,79) output(32,worse,92) output(32,worse,31) output(32,worse,23) output(32,worse,79) output(41,worse,37) output(76,worse,37) output(90,eq,42) output(51,eq,18) output(76,eq,41) output(31,eq,79) output(4,eq,31) output(4,eq,37) output(4,eq,92) output(4,eq,79)
Optimization: 33 12
Answer: 6
preference(1,(1,3),1,for(atom(hasCategory(3))),8) preference(1,(1,5),1,for(atom(hasPrep(1))),8) preference(1,(1,11),1,for(atom(hasIngredient(4))),8) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,less(weight)) output(18,better,76) output(18,better,92) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,76) output(51,better,31) output(51,better,23) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,92) output(72,better,23) output(72,better,79) output(32,better,92) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(4,worse,18) output(4,worse,72) output(4,worse,41) output(76,worse,41) output(42,eq,78) output(51,eq,18) output(18,eq,72) output(31,eq,23) output(23,eq,79) output(32,eq,72) output(76,eq,37) output(18,eq,41) output(4,eq,76) output(31,eq,79) output(51,eq,72) output(4,eq,31) output(4,eq,23) output(51,eq,41) output(4,eq,37) output(4,eq,92) output(4,eq,79)
Optimization: 21 4
Progression : [ 1;21] (Error: 20)
Answer: 7
preference(1,(1,9),1,for(atom(hasCategory(5))),8) preference(1,(1,10),1,for(atom(hasIngredient(10))),8) preference(1,(1,11),1,for(atom(hasPrepTime(1))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),8) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,less(weight)) output(18,better,76) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,76) output(51,better,31) output(51,better,23) output(51,better,37) output(51,better,79) output(72,better,31) output(72,better,23) output(72,better,79) output(4,better,76) output(4,better,31) output(4,better,23) output(4,better,37) output(4,better,79) output(42,better,78) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,78) output(76,worse,41) output(90,eq,42) output(51,eq,18) output(18,eq,72) output(31,eq,23) output(23,eq,79) output(4,eq,18) output(32,eq,72) output(72,eq,92) output(18,eq,92) output(32,eq,92) output(76,eq,37) output(18,eq,41) output(31,eq,79) output(51,eq,72) output(4,eq,72) output(51,eq,41) output(4,eq,41) output(51,eq,92) output(4,eq,92)
Optimization: 20 5
Answer: 8
preference(1,(1,1),1,for(atom(hasCategory(3))),8) preference(1,(1,2),1,for(atom(hasPrep(1))),8) preference(1,(1,3),1,for(atom(hasCategory(1))),7) preference(1,(1,4),1,for(atom(hasPrep(6))),7) preference(1,(1,5),1,for(atom(hasPrepTime(3))),7) preference(1,(1,6),1,for(atom(hasCost(2))),7) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasDifficulty(3))),8) preference(1,(1,9),1,for(atom(hasPrep(7))),7) preference(1,(1,10),1,for(atom(hasDifficulty(1))),7) preference(1,(1,11),1,for(atom(hasCost(4))),7) preference(1,(1,12),1,for(atom(hasPrepTime(1))),7) preference(1,(1,13),1,for(atom(hasCategory(5))),7) preference(1,(1,14),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(18,better,72) output(18,better,92) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(42,better,78) output(32,better,72) output(32,better,92) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,41) output(76,better,37) output(4,worse,18) output(4,worse,76) output(4,worse,41) output(51,eq,18) output(72,eq,31) output(31,eq,23) output(23,eq,79) output(18,eq,76) output(72,eq,92) output(51,eq,76) output(31,eq,79) output(72,eq,23) output(4,eq,72) output(4,eq,31) output(4,eq,23) output(72,eq,79) output(4,eq,37) output(4,eq,92) output(4,eq,79)
Optimization: 19 14
Answer: 9
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,2),1,for(atom(hasCategory(3))),8) preference(1,(1,3),1,for(atom(hasPrep(1))),8) preference(1,(1,4),1,for(atom(hasCategory(1))),7) preference(1,(1,5),1,for(atom(hasCategory(4))),8) preference(1,(1,6),1,for(atom(hasDifficulty(3))),8) preference(1,(1,7),1,for(atom(hasPrepTime(3))),7) preference(1,(1,8),1,for(atom(hasPrep(7))),7) preference(1,(1,9),1,for(atom(hasPrepTime(1))),7) preference(1,(1,10),1,for(atom(hasCost(4))),7) preference(1,(1,11),1,for(atom(hasIngredient(10))),7) preference(1,(1,12),1,for(atom(hasCost(1))),7) preference(1,(1,13),1,for(atom(hasDifficulty(1))),7) preference(1,(1,14),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(18,better,72) output(18,better,92) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(4,better,72) output(4,better,31) output(4,better,23) output(4,better,37) output(4,better,79) output(42,better,78) output(32,better,72) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,78) output(76,better,41) output(76,better,37) output(72,worse,92) output(4,worse,18) output(4,worse,76) output(90,eq,42) output(51,eq,18) output(72,eq,31) output(31,eq,23) output(23,eq,79) output(18,eq,76) output(32,eq,92) output(51,eq,76) output(31,eq,79) output(72,eq,23) output(72,eq,79) output(4,eq,41) output(4,eq,92)
Optimization: 16 14
Answer: 10
preference(1,(1,1),1,for(atom(hasCategory(3))),8) preference(1,(1,2),1,for(atom(hasCategory(1))),7) preference(1,(1,3),1,for(atom(hasDifficulty(3))),8) preference(1,(1,4),1,for(atom(hasPrepTime(3))),7) preference(1,(1,5),1,for(atom(hasPrep(1))),8) preference(1,(1,6),1,for(atom(hasPrep(7))),7) preference(1,(1,7),1,for(atom(hasCategory(5))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),7) preference(1,(1,9),1,for(atom(hasIngredient(4))),7) preference(1,(1,10),1,for(atom(hasCost(4))),7) preference(1,(1,11),1,for(atom(hasIngredient(10))),7) preference(1,(1,12),1,for(atom(hasCost(1))),7) preference(1,(1,13),1,for(atom(hasPrepTime(1))),7) preference(1,(1,14),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(18,better,72) output(18,better,92) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(4,better,72) output(4,better,31) output(4,better,23) output(4,better,37) output(4,better,79) output(42,better,78) output(32,better,72) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,41) output(76,better,37) output(72,worse,92) output(4,worse,18) output(4,worse,76) output(51,eq,18) output(72,eq,31) output(31,eq,23) output(23,eq,79) output(18,eq,76) output(32,eq,92) output(51,eq,76) output(31,eq,79) output(72,eq,23) output(72,eq,79) output(4,eq,41) output(4,eq,92)
Optimization: 15 14
Answer: 11
preference(1,(1,1),1,for(atom(hasPrepTime(3))),4) preference(1,(1,2),1,for(atom(hasPrepTime(2))),5) preference(1,(1,3),1,for(atom(hasDifficulty(2))),2) preference(1,(1,4),1,for(atom(hasIngredient(9))),8) preference(1,(1,5),1,for(atom(hasPrep(1))),5) preference(1,(1,6),1,for(atom(hasCategory(3))),7) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),4) preference(1,(1,10),1,for(atom(hasCategory(4))),7) preference(1,(1,11),1,for(atom(hasPrep(7))),6) preference(1,(1,12),1,for(atom(hasPrep(6))),4) preference(1,(1,13),1,for(atom(hasPrep(0))),7) preference(1,(1,14),1,for(atom(hasIngredient(7))),6) preference(1,less(weight)) output(18,better,31) output(18,better,79) output(18,better,37) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,92) output(72,better,23) output(72,better,79) output(4,better,18) output(4,better,31) output(4,better,37) output(4,better,79) output(23,better,79) output(32,better,92) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,41) output(76,better,37) output(18,worse,72) output(18,worse,76) output(18,worse,92) output(18,worse,41) output(18,worse,23) output(4,worse,76) output(4,worse,72) output(4,worse,23) output(4,worse,41) output(31,worse,23) output(42,worse,78) output(32,worse,72) output(31,eq,79) output(4,eq,92)
Optimization: 14 14
Answer: 12
preference(1,(1,1),1,for(atom(hasPrep(1))),8) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasCost(1))),8) preference(1,(1,5),1,for(atom(hasCategory(5))),7) preference(1,(1,6),1,for(atom(hasCost(3))),7) preference(1,(1,8),1,for(atom(hasPrep(5))),7) preference(1,(1,9),1,for(atom(hasIngredient(4))),8) preference(1,(1,10),1,for(atom(hasIngredient(10))),7) preference(1,(1,11),1,for(atom(hasPrepTime(1))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),7) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,(1,14),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,92) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,92) output(72,better,23) output(72,better,79) output(4,better,76) output(4,better,23) output(4,better,37) output(4,better,79) output(31,better,23) output(31,better,79) output(32,better,92) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(4,worse,18) output(4,worse,72) output(4,worse,41) output(76,worse,41) output(42,eq,78) output(51,eq,18) output(23,eq,79) output(32,eq,72) output(76,eq,37) output(4,eq,31) output(4,eq,92)
Optimization: 11 13
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(1))),8) preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,3),1,for(atom(hasDifficulty(3))),8) preference(1,(1,4),1,for(atom(hasIngredient(4))),8) preference(1,(1,5),1,for(atom(hasDifficulty(1))),8) preference(1,(1,6),1,for(atom(hasCategory(5))),8) preference(1,(1,8),1,for(atom(hasPrep(5))),7) preference(1,(1,9),1,for(atom(hasIngredient(5))),7) preference(1,(1,10),1,for(atom(hasIngredient(10))),7) preference(1,(1,11),1,for(atom(hasCategory(4))),7) preference(1,(1,12),1,for(atom(hasCategory(3))),8) preference(1,(1,13),1,for(atom(hasPrepTime(1))),8) preference(1,(1,14),1,for(atom(hasPrep(7))),7) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,92) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,92) output(72,better,23) output(72,better,79) output(4,better,76) output(4,better,23) output(4,better,37) output(4,better,79) output(31,better,23) output(31,better,79) output(42,better,78) output(32,better,92) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(4,worse,18) output(4,worse,72) output(4,worse,41) output(76,worse,41) output(51,eq,18) output(23,eq,79) output(32,eq,72) output(76,eq,37) output(4,eq,31) output(4,eq,92)
Optimization: 10 13
Progression : [ 2;10] (Error: 4)
Answer: 14
preference(1,(1,1),1,for(atom(hasIngredient(7))),4) preference(1,(1,2),1,for(atom(hasCategory(3))),6) preference(1,(1,3),1,for(atom(hasDifficulty(3))),7) preference(1,(1,4),1,for(atom(hasPrep(6))),2) preference(1,(1,5),1,for(atom(hasPrepTime(2))),1) preference(1,(1,6),1,for(atom(hasPrep(5))),6) preference(1,(1,7),1,for(atom(hasCost(1))),8) preference(1,(1,8),1,for(atom(hasDifficulty(2))),4) preference(1,(1,9),1,for(atom(hasIngredient(9))),5) preference(1,(1,11),1,for(atom(hasPrepTime(1))),3) preference(1,(1,12),1,for(atom(hasCost(3))),8) preference(1,(1,13),1,for(atom(hasPrep(0))),3) preference(1,(1,14),1,for(atom(hasCost(2))),5) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,92) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,92) output(72,better,23) output(72,better,79) output(4,better,31) output(4,better,23) output(4,better,37) output(4,better,79) output(31,better,79) output(23,better,79) output(32,better,92) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,41) output(76,better,37) output(4,worse,18) output(4,worse,76) output(4,worse,72) output(4,worse,41) output(31,worse,23) output(42,worse,78) output(32,eq,72) output(4,eq,92)
Optimization: 8 13
Answer: 15
preference(1,(1,1),1,for(atom(hasCost(3))),6) preference(1,(1,2),1,for(atom(hasPrep(6))),6) preference(1,(1,3),1,for(atom(hasCost(1))),1) preference(1,(1,4),1,for(atom(hasPrep(7))),7) preference(1,(1,7),1,for(atom(hasIngredient(9))),2) preference(1,(1,8),1,for(atom(hasDifficulty(2))),6) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrepTime(2))),6) preference(1,(1,11),1,for(atom(hasIngredient(10))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),4) preference(1,(1,13),1,for(atom(hasCategory(1))),6) preference(1,(1,14),1,for(atom(hasDifficulty(3))),3) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,23) output(72,better,79) output(4,better,76) output(4,better,72) output(4,better,31) output(4,better,23) output(4,better,41) output(4,better,37) output(4,better,79) output(31,better,23) output(31,better,79) output(42,better,78) output(23,better,79) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,37) output(72,worse,92) output(32,worse,92) output(4,eq,18) output(76,eq,41) output(32,eq,72) output(18,eq,92) output(4,eq,92)
Optimization: 7 12
Answer: 16
preference(1,(1,1),1,for(atom(hasCost(3))),6) preference(1,(1,2),1,for(atom(hasPrep(7))),8) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCost(4))),2) preference(1,(1,5),1,for(atom(hasPrep(6))),1) preference(1,(1,6),1,for(atom(hasPrep(0))),1) preference(1,(1,7),1,for(atom(hasCost(1))),1) preference(1,(1,8),1,for(atom(hasDifficulty(2))),6) preference(1,(1,9),1,for(atom(hasDifficulty(1))),4) preference(1,(1,10),1,for(atom(hasPrepTime(2))),6) preference(1,(1,11),1,for(atom(hasIngredient(10))),5) preference(1,(1,12),1,for(atom(hasPrep(5))),4) preference(1,(1,13),1,for(atom(hasCategory(1))),6) preference(1,(1,14),1,for(atom(hasIngredient(7))),6) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,23) output(72,better,79) output(4,better,18) output(4,better,76) output(4,better,72) output(4,better,31) output(4,better,23) output(4,better,41) output(4,better,37) output(4,better,79) output(31,better,23) output(31,better,79) output(42,better,78) output(23,better,79) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,37) output(18,worse,92) output(72,worse,92) output(32,worse,92) output(76,eq,41) output(32,eq,72) output(4,eq,92)
Optimization: 6 14
Answer: 17
preference(1,(1,1),1,for(atom(hasCategory(4))),6) preference(1,(1,2),1,for(atom(hasDifficulty(3))),5) preference(1,(1,4),1,for(atom(hasPrep(5))),3) preference(1,(1,5),1,for(atom(hasCategory(5))),4) preference(1,(1,6),1,for(atom(hasIngredient(7))),1) preference(1,(1,9),1,for(atom(hasCost(1))),5) preference(1,(1,10),1,for(atom(hasCategory(1))),5) preference(1,(1,11),1,for(atom(hasIngredient(10))),8) preference(1,(1,12),1,for(atom(hasCategory(3))),7) preference(1,(1,14),1,for(atom(hasCost(3))),3) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,92) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,23) output(72,better,79) output(4,better,76) output(4,better,72) output(4,better,31) output(4,better,23) output(4,better,41) output(4,better,37) output(4,better,79) output(31,better,23) output(31,better,79) output(42,better,78) output(23,better,79) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,41) output(76,better,37) output(72,worse,92) output(4,worse,18) output(32,worse,72) output(32,worse,92) output(4,eq,92)
Optimization: 5 10
Answer: 18
preference(1,(1,1),1,for(atom(hasPrep(7))),6) preference(1,(1,2),1,for(atom(hasCategory(4))),1) preference(1,(1,3),1,for(atom(hasCost(3))),4) preference(1,(1,4),1,for(atom(hasIngredient(7))),4) preference(1,(1,5),1,for(atom(hasCategory(3))),4) preference(1,(1,6),1,for(atom(hasCost(1))),4) preference(1,(1,7),1,for(atom(hasPrepTime(1))),6) preference(1,(1,8),1,for(atom(hasDifficulty(1))),4) preference(1,(1,9),1,for(atom(hasPrep(1))),4) preference(1,(1,10),1,for(atom(hasPrep(6))),4) preference(1,(1,11),1,for(atom(hasCategory(1))),2) preference(1,(1,12),1,for(atom(hasPrep(0))),4) preference(1,(1,13),1,for(atom(hasIngredient(10))),8) preference(1,(1,14),1,for(atom(hasPrep(5))),3) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,23) output(72,better,79) output(4,better,18) output(4,better,76) output(4,better,72) output(4,better,31) output(4,better,23) output(4,better,41) output(4,better,37) output(4,better,79) output(31,better,23) output(31,better,79) output(42,better,78) output(23,better,79) output(32,better,72) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,41) output(76,better,37) output(18,worse,92) output(72,worse,92) output(32,worse,92) output(4,eq,92)
Optimization: 4 14
Progression : [4;4] (Error: 0)
Progression : 4 [ 1;14] (Error: 13)
Progression : 4 [ 2;14] (Error: 6)
Answer: 19
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasPrep(0))),2) preference(1,(1,4),1,for(atom(hasPrep(7))),3) preference(1,(1,5),1,for(atom(hasCategory(3))),2) preference(1,(1,6),1,for(atom(hasIngredient(9))),2) preference(1,(1,7),1,for(atom(hasCost(1))),8) preference(1,(1,8),1,for(atom(hasCategory(1))),1) preference(1,(1,9),1,for(atom(hasCost(3))),2) preference(1,(1,10),1,for(atom(hasIngredient(10))),5) preference(1,(1,11),1,for(atom(hasPrep(1))),2) preference(1,(1,14),1,for(atom(hasDifficulty(3))),7) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,23) output(72,better,79) output(4,better,18) output(4,better,76) output(4,better,72) output(4,better,31) output(4,better,23) output(4,better,41) output(4,better,37) output(4,better,79) output(31,better,23) output(31,better,79) output(42,better,78) output(23,better,79) output(32,better,72) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,41) output(76,better,37) output(18,worse,92) output(72,worse,92) output(32,worse,92) output(4,eq,92)
Optimization: 4 11
Answer: 20
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasPrep(0))),2) preference(1,(1,4),1,for(atom(hasIngredient(10))),5) preference(1,(1,5),1,for(atom(hasCategory(3))),2) preference(1,(1,6),1,for(atom(hasIngredient(9))),2) preference(1,(1,8),1,for(atom(hasCategory(1))),1) preference(1,(1,9),1,for(atom(hasCost(3))),2) preference(1,(1,11),1,for(atom(hasPrep(7))),7) preference(1,(1,12),1,for(atom(hasCost(1))),8) preference(1,(1,13),1,for(atom(hasDifficulty(3))),3) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,23) output(72,better,79) output(4,better,18) output(4,better,76) output(4,better,72) output(4,better,31) output(4,better,23) output(4,better,41) output(4,better,37) output(4,better,79) output(31,better,23) output(31,better,79) output(42,better,78) output(23,better,79) output(32,better,72) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,41) output(76,better,37) output(18,worse,92) output(72,worse,92) output(32,worse,92) output(4,eq,92)
Optimization: 4 10
Answer: 21
preference(1,(1,3),1,for(atom(hasCategory(1))),1) preference(1,(1,4),1,for(atom(hasCost(3))),2) preference(1,(1,5),1,for(atom(hasPrep(7))),7) preference(1,(1,7),1,for(atom(hasCategory(5))),5) preference(1,(1,8),1,for(atom(hasCost(4))),2) preference(1,(1,10),1,for(atom(hasDifficulty(1))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),4) preference(1,less(weight)) output(18,better,72) output(18,better,76) output(18,better,92) output(18,better,41) output(18,better,31) output(18,better,23) output(18,better,79) output(18,better,37) output(51,better,18) output(51,better,76) output(51,better,72) output(51,better,31) output(51,better,23) output(51,better,41) output(51,better,37) output(51,better,92) output(51,better,79) output(72,better,31) output(72,better,23) output(72,better,79) output(4,better,76) output(4,better,72) output(4,better,31) output(4,better,23) output(4,better,41) output(4,better,37) output(4,better,79) output(31,better,23) output(31,better,79) output(42,better,78) output(23,better,79) output(32,better,72) output(32,better,31) output(32,better,23) output(32,better,79) output(41,better,37) output(90,better,42) output(90,better,78) output(76,better,41) output(76,better,37) output(72,worse,92) output(4,worse,18) output(32,worse,92) output(4,eq,92)
Optimization: 4 8
Progression : 4 [3;8] (Error: 1.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.072 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 21+
  Optimum    : unknown
Optimization : 4 8
Bounds       : 4 [3;8]
Calls        : 1
Time         : 298.260s (Solving: 295.41s 1st Model: 0.03s Unsat: 0.00s)
CPU Time     : 1184.163s
Threads      : 4        (Winner: 4)

Choices      : 4380447  (Domain: 106686)
Conflicts    : 2780641  (Analyzed: 2780633)
Restarts     : 3092     (Average: 899.30 Last: 161343)
Model-Level  : 56.7    
Problems     : 15       (Average Length: 0.27 Splits: 0)
Lemmas       : 2793304  (Deleted: 2584425)
  Binary     : 470      (Ratio:   0.02%)
  Ternary    : 1257     (Ratio:   0.05%)
  Conflict   : 2780633  (Average Length:  477.0 Ratio:  99.55%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 12671    (Average Length:   37.5 Ratio:   0.45%) 
  Distributed: 4235     (Ratio:   0.15% Average LBD: 3.54) 
  Integrated : 12705    (Ratio: 300.00% Unit: 29 Average Jumps: 7.00)
Backjumps    : 2780633  (Average:  1.45 Max: 885 Sum: 4039040)
  Executed   : 2780624  (Average:  1.45 Max: 885 Sum: 4038929 Ratio: 100.00%)
  Bounded    : 9        (Average: 12.33 Max:  23 Sum:    111 Ratio:   0.00%)

Rules        : 512538  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14914   
Bodies       : 19013   
  Sum        : 88      
  Count      : 14      
Equivalences : 7390     (Atom=Atom: 453 Body=Body: 190 Other: 6747)
Tight        : Yes
Variables    : 17095    (Eliminated:    0 Frozen: 7771)
Constraints  : 533564   (Binary:  97.6% Ternary:   1.8% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  3 :: atom(hasCategory(3)) ; 
  3 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCategory(1)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(6)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCost(2)) ; 
  3 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(5)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCategory(4)) ; 
  6 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrep(0)) ; 
  6 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCategory(5)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(5)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasCategory(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(1)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasIngredient(9)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(3)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(3)) ; 
  6 :: atom(hasPrep(6)) ; 
  1 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  2 :: atom(hasIngredient(9)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(1)) ; 
  3 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  1 :: atom(hasCategory(3)) ; 
  2 :: atom(hasCost(4)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(0)) ; 
  1 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(1)) ; 
  6 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCategory(4)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCategory(5)) ; 
  1 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasCategory(3)) ; 
  3 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(7)) ; 
  1 :: atom(hasCategory(4)) ; 
  4 :: atom(hasCost(3)) ; 
  4 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrep(6)) ; 
  2 :: atom(hasCategory(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  8 :: atom(hasIngredient(10)) ; 
  3 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCategory(3)) ; 
  2 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCost(1)) ; 
  1 :: atom(hasCategory(1)) ; 
  2 :: atom(hasCost(3)) ; 
  5 :: atom(hasIngredient(10)) ; 
  2 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(0)) ; 
  5 :: atom(hasIngredient(10)) ; 
  2 :: atom(hasCategory(3)) ; 
  2 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasCategory(1)) ; 
  2 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(1)) ; 
  3 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  2 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCategory(5)) ; 
  2 :: atom(hasCost(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasPrepTime(2)) 
}.
