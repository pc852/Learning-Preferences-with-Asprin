asprin_vL version 1.0
Reading from stdin
-:1232:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1242:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1257:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1338:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1599:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1612:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1789:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1918:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1990:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1994:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1994:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2000:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2099:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2125:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2245:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2279:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2301:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1149:1-16: info: no atoms over signature occur in program:
  output/3

-:1141:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1142:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(23,eq,72) output(72,eq,42) output(42,eq,90) output(90,eq,18) output(18,eq,51) output(51,eq,79) output(41,eq,92) output(32,eq,76) output(4,eq,72) output(42,eq,18) output(18,eq,37) output(90,eq,37) output(42,eq,37) output(72,eq,18) output(18,eq,79) output(90,eq,51) output(42,eq,51) output(72,eq,90) output(23,eq,42) output(4,eq,42) output(23,eq,90) output(4,eq,90) output(72,eq,51) output(23,eq,51) output(4,eq,51) output(90,eq,79) output(42,eq,79) output(72,eq,79) output(23,eq,18) output(4,eq,18) output(72,eq,37) output(23,eq,37) output(4,eq,37) output(23,eq,79) output(4,eq,79)
Optimization: 35 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrep(5))),2) preference(1,less(weight)) output(4,better,72) output(23,better,72) output(72,worse,42) output(72,worse,18) output(72,worse,90) output(72,worse,51) output(72,worse,79) output(72,worse,37) output(41,worse,92) output(42,eq,90) output(90,eq,18) output(18,eq,51) output(51,eq,79) output(32,eq,76) output(42,eq,18) output(18,eq,37) output(90,eq,37) output(42,eq,37) output(18,eq,79) output(90,eq,51) output(42,eq,51) output(23,eq,42) output(4,eq,42) output(23,eq,90) output(4,eq,90) output(23,eq,51) output(4,eq,51) output(90,eq,79) output(42,eq,79) output(23,eq,18) output(4,eq,18) output(23,eq,37) output(4,eq,37) output(23,eq,79) output(4,eq,79)
Optimization: 33 14
Answer: 3
preference(1,(1,7),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(72,better,18) output(4,better,18) output(42,better,18) output(23,better,18) output(90,better,18) output(18,worse,51) output(18,worse,37) output(18,worse,79) output(23,eq,72) output(72,eq,42) output(42,eq,90) output(51,eq,79) output(41,eq,92) output(32,eq,76) output(4,eq,72) output(90,eq,37) output(42,eq,37) output(90,eq,51) output(42,eq,51) output(72,eq,90) output(23,eq,42) output(4,eq,42) output(23,eq,90) output(4,eq,90) output(72,eq,51) output(23,eq,51) output(4,eq,51) output(90,eq,79) output(42,eq,79) output(72,eq,79) output(72,eq,37) output(23,eq,37) output(4,eq,37) output(23,eq,79) output(4,eq,79)
Optimization: 30 1
Answer: 4
preference(1,(1,7),1,for(atom(hasCost(4))),8) preference(1,(1,13),1,for(atom(hasIngredient(4))),8) preference(1,less(weight)) output(72,better,18) output(4,better,18) output(42,better,18) output(23,better,18) output(32,better,76) output(90,better,18) output(18,worse,51) output(18,worse,37) output(18,worse,79) output(23,eq,72) output(72,eq,42) output(42,eq,90) output(51,eq,79) output(41,eq,92) output(4,eq,72) output(90,eq,37) output(42,eq,37) output(90,eq,51) output(42,eq,51) output(72,eq,90) output(23,eq,42) output(4,eq,42) output(23,eq,90) output(4,eq,90) output(72,eq,51) output(23,eq,51) output(4,eq,51) output(90,eq,79) output(42,eq,79) output(72,eq,79) output(72,eq,37) output(23,eq,37) output(4,eq,37) output(23,eq,79) output(4,eq,79)
Optimization: 29 2
Answer: 5
preference(1,(1,7),1,for(atom(hasCost(4))),8) preference(1,(1,13),1,for(atom(hasIngredient(10))),8) preference(1,less(weight)) output(51,better,79) output(72,better,18) output(72,better,79) output(4,better,18) output(4,better,79) output(42,better,18) output(42,better,79) output(23,better,18) output(23,better,79) output(90,better,18) output(90,better,79) output(18,worse,51) output(18,worse,37) output(23,eq,72) output(72,eq,42) output(42,eq,90) output(41,eq,92) output(32,eq,76) output(4,eq,72) output(90,eq,37) output(42,eq,37) output(18,eq,79) output(90,eq,51) output(42,eq,51) output(72,eq,90) output(23,eq,42) output(4,eq,42) output(23,eq,90) output(4,eq,90) output(72,eq,51) output(23,eq,51) output(4,eq,51) output(72,eq,37) output(23,eq,37) output(4,eq,37)
Optimization: 24 2
Answer: 6
preference(1,(1,7),1,for(atom(hasDifficulty(1))),8) preference(1,(1,13),1,for(atom(hasDifficulty(4))),8) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(72,better,51) output(72,better,79) output(4,better,51) output(4,better,79) output(42,better,51) output(42,better,79) output(23,better,51) output(23,better,79) output(90,better,51) output(90,better,79) output(23,eq,72) output(72,eq,42) output(42,eq,90) output(90,eq,18) output(51,eq,79) output(41,eq,92) output(32,eq,76) output(4,eq,72) output(42,eq,18) output(18,eq,37) output(90,eq,37) output(42,eq,37) output(72,eq,18) output(72,eq,90) output(23,eq,42) output(4,eq,42) output(23,eq,90) output(4,eq,90) output(23,eq,18) output(4,eq,18) output(72,eq,37) output(23,eq,37) output(4,eq,37)
Optimization: 23 2
Answer: 7
preference(1,(1,3),1,for(atom(hasIngredient(10))),8) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCost(4))),8) preference(1,(1,13),1,for(atom(hasDifficulty(4))),8) preference(1,less(weight)) output(72,better,18) output(72,better,51) output(72,better,79) output(4,better,51) output(4,better,18) output(4,better,79) output(42,better,18) output(42,better,51) output(42,better,79) output(23,better,51) output(23,better,18) output(23,better,79) output(32,better,76) output(90,better,18) output(90,better,51) output(90,better,79) output(18,worse,37) output(23,eq,72) output(72,eq,42) output(42,eq,90) output(18,eq,51) output(51,eq,79) output(41,eq,92) output(4,eq,72) output(90,eq,37) output(42,eq,37) output(18,eq,79) output(72,eq,90) output(23,eq,42) output(4,eq,42) output(23,eq,90) output(4,eq,90) output(72,eq,37) output(23,eq,37) output(4,eq,37)
Optimization: 19 4
Answer: 8
preference(1,(1,1),1,for(atom(hasDifficulty(4))),8) preference(1,(1,2),1,for(atom(hasIngredient(3))),8) preference(1,(1,5),1,for(atom(hasIngredient(10))),8) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCost(1))),8) preference(1,(1,13),1,for(atom(hasCategory(5))),8) preference(1,(1,14),1,for(atom(hasDifficulty(1))),8) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,51) output(4,better,37) output(4,better,79) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,51) output(23,better,37) output(23,better,79) output(32,better,76) output(90,better,37) output(90,better,51) output(90,better,79) output(23,eq,72) output(72,eq,42) output(42,eq,90) output(90,eq,18) output(51,eq,79) output(41,eq,92) output(4,eq,72) output(42,eq,18) output(72,eq,18) output(72,eq,90) output(23,eq,42) output(4,eq,42) output(23,eq,90) output(4,eq,90) output(23,eq,18) output(4,eq,18)
Optimization: 16 7
Answer: 9
preference(1,(1,1),1,for(atom(hasIngredient(3))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasIngredient(10))),8) preference(1,(1,4),1,for(atom(hasDifficulty(4))),8) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCost(1))),8) preference(1,(1,13),1,for(atom(hasCategory(5))),8) preference(1,(1,14),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(72,better,18) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79) output(23,eq,72) output(72,eq,42) output(42,eq,90) output(18,eq,51) output(51,eq,79) output(41,eq,92) output(4,eq,72) output(18,eq,37) output(18,eq,79) output(72,eq,90) output(23,eq,42) output(4,eq,42) output(23,eq,90) output(4,eq,90)
Optimization: 14 8
Answer: 10
preference(1,(1,1),1,for(atom(hasIngredient(4))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasIngredient(10))),8) preference(1,(1,4),1,for(atom(hasDifficulty(4))),8) preference(1,(1,5),1,for(atom(hasIngredient(3))),8) preference(1,(1,6),1,for(atom(hasCost(4))),8) preference(1,(1,8),1,for(atom(hasPrep(2))),7) preference(1,(1,9),1,for(atom(hasIngredient(2))),7) preference(1,(1,10),1,for(atom(hasCost(1))),7) preference(1,(1,11),1,for(atom(hasPrep(4))),7) preference(1,(1,12),1,for(atom(hasPrep(5))),7) preference(1,(1,13),1,for(atom(hasCategory(5))),8) preference(1,(1,14),1,for(atom(hasIngredient(7))),8) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(72,better,18) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,72) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,72) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79) output(72,worse,42) output(41,worse,92) output(51,eq,79) output(32,eq,76) output(72,eq,90) output(23,eq,42) output(4,eq,42)
Optimization: 7 13
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,2),1,for(atom(hasIngredient(3))),7) preference(1,(1,3),1,for(atom(hasPrep(5))),7) preference(1,(1,4),1,for(atom(hasCost(3))),7) preference(1,(1,5),1,for(atom(hasCost(1))),8) preference(1,(1,6),1,for(atom(hasDifficulty(4))),8) preference(1,(1,8),1,for(atom(hasDifficulty(1))),7) preference(1,(1,9),1,for(atom(hasCost(4))),8) preference(1,(1,11),1,for(atom(hasPrep(2))),8) preference(1,(1,12),1,for(atom(hasIngredient(4))),8) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,72) output(4,better,42) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(90,better,37) output(90,better,51) output(90,better,79) output(41,worse,92) output(23,eq,72) output(72,eq,42) output(90,eq,18) output(51,eq,79) output(23,eq,42)
Optimization: 6 10
Answer: 12
preference(1,(1,1),1,for(atom(hasCost(4))),8) preference(1,(1,2),1,for(atom(hasIngredient(3))),8) preference(1,(1,3),1,for(atom(hasPrep(2))),8) preference(1,(1,5),1,for(atom(hasDifficulty(1))),7) preference(1,(1,6),1,for(atom(hasIngredient(4))),7) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasCategory(5))),8) preference(1,(1,10),1,for(atom(hasDifficulty(4))),7) preference(1,(1,11),1,for(atom(hasPrep(1))),7) preference(1,(1,12),1,for(atom(hasCategory(3))),7) preference(1,(1,14),1,for(atom(hasIngredient(7))),8) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(41,better,92) output(90,better,37) output(90,better,51) output(90,better,79) output(4,worse,72) output(23,eq,72) output(90,eq,18) output(51,eq,79) output(4,eq,42)
Optimization: 5 12
Answer: 13
preference(1,(1,1),1,for(atom(hasIngredient(7))),6) preference(1,(1,2),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasCategory(1))),6) preference(1,(1,4),1,for(atom(hasPrep(7))),6) preference(1,(1,5),1,for(atom(hasCost(1))),8) preference(1,(1,6),1,for(atom(hasDifficulty(1))),6) preference(1,(1,7),1,for(atom(hasIngredient(3))),6) preference(1,(1,8),1,for(atom(hasIngredient(4))),6) preference(1,(1,9),1,for(atom(hasCategory(5))),8) preference(1,(1,10),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasCost(3))),6) preference(1,(1,12),1,for(atom(hasCost(4))),7) preference(1,(1,13),1,for(atom(hasIngredient(10))),7) preference(1,(1,14),1,for(atom(hasPrepTime(3))),6) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,72) output(4,better,42) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79) output(41,worse,92) output(23,eq,72) output(72,eq,42) output(23,eq,42)
Optimization: 4 14
Answer: 14
preference(1,(1,1),1,for(atom(hasDifficulty(4))),5) preference(1,(1,2),1,for(atom(hasIngredient(7))),8) preference(1,(1,3),1,for(atom(hasPrep(0))),6) preference(1,(1,4),1,for(atom(hasPrepTime(2))),4) preference(1,(1,5),1,for(atom(hasPrepTime(3))),2) preference(1,(1,6),1,for(atom(hasCategory(1))),6) preference(1,(1,7),1,for(atom(hasDifficulty(2))),4) preference(1,(1,8),1,for(atom(hasCategory(3))),5) preference(1,(1,9),1,for(atom(hasCost(1))),3) preference(1,(1,10),1,for(atom(hasPrep(2))),6) preference(1,(1,11),1,for(atom(hasIngredient(3))),7) preference(1,(1,13),1,for(atom(hasCategory(4))),5) preference(1,(1,14),1,for(atom(hasCost(2))),3) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,72) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(41,better,92) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79) output(4,worse,72) output(4,worse,42) output(32,eq,76) output(4,eq,90)
Optimization: 4 13
Answer: 15
preference(1,(1,1),1,for(atom(hasDifficulty(4))),4) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasPrepTime(3))),5) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasIngredient(3))),3) preference(1,(1,6),1,for(atom(hasCategory(3))),1) preference(1,(1,8),1,for(atom(hasIngredient(7))),7) preference(1,(1,9),1,for(atom(hasIngredient(10))),5) preference(1,(1,11),1,for(atom(hasCost(2))),2) preference(1,(1,12),1,for(atom(hasPrep(2))),5) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,(1,14),1,for(atom(hasPrep(7))),5) preference(1,less(weight)) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,72) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(41,better,92) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79) output(18,worse,51) output(4,worse,72) output(4,worse,42)
Optimization: 3 12
Answer: 16
preference(1,(1,1),1,for(atom(hasPrep(0))),3) preference(1,(1,2),1,for(atom(hasIngredient(10))),6) preference(1,(1,3),1,for(atom(hasPrepTime(3))),5) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasIngredient(3))),3) preference(1,(1,6),1,for(atom(hasCategory(3))),1) preference(1,(1,9),1,for(atom(hasDifficulty(4))),6) preference(1,(1,11),1,for(atom(hasCost(2))),2) preference(1,(1,12),1,for(atom(hasPrep(2))),5) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,(1,14),1,for(atom(hasDifficulty(1))),8) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,72) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(41,better,92) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79) output(4,worse,72) output(4,worse,42)
Optimization: 2 11
Answer: 17
preference(1,(1,1),1,for(atom(hasCost(3))),4) preference(1,(1,2),1,for(atom(hasPrepTime(3))),4) preference(1,(1,3),1,for(atom(hasIngredient(7))),3) preference(1,(1,4),1,for(atom(hasCategory(3))),1) preference(1,(1,5),1,for(atom(hasCost(2))),6) preference(1,(1,6),1,for(atom(hasPrep(1))),6) preference(1,(1,7),1,for(atom(hasIngredient(9))),1) preference(1,(1,8),1,for(atom(hasDifficulty(1))),8) preference(1,(1,9),1,for(atom(hasPrep(7))),5) preference(1,(1,10),1,for(atom(hasPrep(2))),7) preference(1,(1,11),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasCost(1))),6) preference(1,(1,13),1,for(atom(hasCost(4))),2) preference(1,(1,14),1,for(atom(hasCategory(1))),6) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,72) output(4,better,42) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(41,better,92) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79) output(23,eq,72)
Optimization: 1 14
Answer: 18
preference(1,(1,1),1,for(atom(hasPrepTime(2))),7) preference(1,(1,2),1,for(atom(hasDifficulty(2))),7) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,4),1,for(atom(hasPrep(2))),7) preference(1,(1,5),1,for(atom(hasDifficulty(4))),2) preference(1,(1,6),1,for(atom(hasCategory(3))),8) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,8),1,for(atom(hasIngredient(7))),6) preference(1,(1,9),1,for(atom(hasPrep(6))),8) preference(1,(1,10),1,for(atom(hasCost(3))),3) preference(1,(1,11),1,for(atom(hasCategory(4))),4) preference(1,(1,12),1,for(atom(hasPrep(0))),8) preference(1,(1,13),1,for(atom(hasCategory(1))),6) preference(1,(1,14),1,for(atom(hasDifficulty(1))),4) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,72) output(4,better,42) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,72) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(41,better,92) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 19
preference(1,(1,1),1,for(atom(hasPrep(0))),4) preference(1,(1,2),1,for(atom(hasCost(1))),5) preference(1,(1,3),1,for(atom(hasPrepTime(3))),1) preference(1,(1,4),1,for(atom(hasCategory(3))),4) preference(1,(1,5),1,for(atom(hasPrep(1))),4) preference(1,(1,6),1,for(atom(hasIngredient(3))),6) preference(1,(1,7),1,for(atom(hasPrep(5))),2) preference(1,(1,8),1,for(atom(hasCategory(1))),3) preference(1,(1,9),1,for(atom(hasIngredient(7))),3) preference(1,(1,10),1,for(atom(hasCost(2))),4) preference(1,(1,11),1,for(atom(hasDifficulty(1))),8) preference(1,(1,13),1,for(atom(hasPrep(2))),3) preference(1,(1,14),1,for(atom(hasCost(3))),2) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,72) output(4,better,42) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,72) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(41,better,92) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79)
Optimization: 0 13
Answer: 20
preference(1,(1,1),1,for(atom(hasPrep(0))),4) preference(1,(1,2),1,for(atom(hasCost(1))),5) preference(1,(1,3),1,for(atom(hasPrepTime(3))),1) preference(1,(1,4),1,for(atom(hasCategory(3))),4) preference(1,(1,5),1,for(atom(hasPrep(1))),4) preference(1,(1,7),1,for(atom(hasPrep(5))),2) preference(1,(1,8),1,for(atom(hasCategory(1))),3) preference(1,(1,9),1,for(atom(hasIngredient(7))),3) preference(1,(1,10),1,for(atom(hasCost(2))),4) preference(1,(1,12),1,for(atom(hasIngredient(3))),2) preference(1,(1,13),1,for(atom(hasPrep(2))),3) preference(1,(1,14),1,for(atom(hasCost(3))),2) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,72) output(4,better,42) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,72) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(41,better,92) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79)
Optimization: 0 12
Answer: 21
preference(1,(1,1),1,for(atom(hasPrep(0))),4) preference(1,(1,3),1,for(atom(hasPrepTime(3))),1) preference(1,(1,4),1,for(atom(hasCategory(3))),4) preference(1,(1,6),1,for(atom(hasCost(1))),8) preference(1,(1,7),1,for(atom(hasPrep(5))),2) preference(1,(1,8),1,for(atom(hasCategory(1))),3) preference(1,(1,9),1,for(atom(hasIngredient(7))),3) preference(1,(1,10),1,for(atom(hasCost(2))),4) preference(1,(1,11),1,for(atom(hasIngredient(3))),6) preference(1,(1,13),1,for(atom(hasPrep(2))),3) preference(1,(1,14),1,for(atom(hasCost(3))),2) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,72) output(4,better,42) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,72) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(41,better,92) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79)
Optimization: 0 11
Progression : 0 [ 2;11] (Error: 4.5)
Answer: 22
preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),6) preference(1,(1,6),1,for(atom(hasPrep(2))),3) preference(1,(1,7),1,for(atom(hasCategory(3))),6) preference(1,(1,10),1,for(atom(hasCategory(1))),4) preference(1,(1,11),1,for(atom(hasCost(3))),2) preference(1,(1,12),1,for(atom(hasPrep(5))),1) preference(1,(1,14),1,for(atom(hasCost(2))),6) preference(1,less(weight)) output(18,better,51) output(18,better,37) output(18,better,79) output(51,better,79) output(72,better,42) output(72,better,18) output(72,better,90) output(72,better,51) output(72,better,79) output(72,better,37) output(4,better,72) output(4,better,42) output(4,better,90) output(4,better,51) output(4,better,18) output(4,better,37) output(4,better,79) output(42,better,90) output(42,better,18) output(42,better,37) output(42,better,51) output(42,better,79) output(23,better,72) output(23,better,42) output(23,better,90) output(23,better,51) output(23,better,18) output(23,better,37) output(23,better,79) output(32,better,76) output(41,better,92) output(90,better,18) output(90,better,37) output(90,better,51) output(90,better,79)
Optimization: 0 8
Progression : 0 [3;8] (Error: 1.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.048 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 22+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 598.115s (Solving: 595.56s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2382.977s
Threads      : 4        (Winner: 4)

Choices      : 8900533  (Domain: 641642)
Conflicts    : 8470651  (Analyzed: 8470648)
Restarts     : 6374     (Average: 1328.94 Last: 669521)
Model-Level  : 151.6   
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 8630234  (Deleted: 8283799)
  Binary     : 454      (Ratio:   0.01%)
  Ternary    : 963      (Ratio:   0.01%)
  Conflict   : 8470648  (Average Length:  391.4 Ratio:  98.15%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 159586   (Average Length:  506.4 Ratio:   1.85%) 
  Distributed: 53213    (Ratio:   0.63% Average LBD: 3.85) 
  Integrated : 159639   (Ratio: 300.00% Unit: 31 Average Jumps: 4.68)
Backjumps    : 8470648  (Average:  1.04 Max: 139 Sum: 8823075)
  Executed   : 8470647  (Average:  1.04 Max: 139 Sum: 8823047 Ratio: 100.00%)
  Bounded    : 1        (Average: 28.00 Max:  28 Sum:     28 Ratio:   0.00%)

Rules        : 426069  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14016   
Bodies       : 18914   
  Sum        : 70      
  Count      : 14      
Equivalences : 7075     (Atom=Atom: 363 Body=Body: 154 Other: 6558)
Tight        : Yes
Variables    : 17043    (Eliminated:    0 Frozen: 7719)
Constraints  : 447898   (Binary:  97.1% Ternary:   2.1% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasIngredient(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasIngredient(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasCategory(5)) ; 
  8 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasCategory(5)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasIngredient(2)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCategory(5)) ; 
  8 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasCategory(5)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  8 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(5)) ; 
  8 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCost(3)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCategory(1)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasCategory(3)) ; 
  3 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasCategory(4)) ; 
  3 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasIngredient(10)) ; 
  2 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(0)) ; 
  6 :: atom(hasIngredient(10)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasCategory(3)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  2 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(1)) ; 
  8 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(3)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasCategory(3)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  1 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCost(1)) ; 
  2 :: atom(hasCost(4)) ; 
  6 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  2 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrep(6)) ; 
  3 :: atom(hasCost(3)) ; 
  4 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCategory(1)) ; 
  4 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(0)) ; 
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrep(1)) ; 
  6 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCategory(1)) ; 
  3 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(0)) ; 
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCategory(1)) ; 
  3 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCategory(1)) ; 
  3 :: atom(hasIngredient(7)) ; 
  4 :: atom(hasCost(2)) ; 
  6 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCategory(1)) ; 
  2 :: atom(hasCost(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(2)) 
}.
