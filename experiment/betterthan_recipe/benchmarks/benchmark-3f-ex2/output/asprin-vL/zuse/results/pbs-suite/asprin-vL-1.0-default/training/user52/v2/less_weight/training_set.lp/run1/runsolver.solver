asprin_vL version 1.0
Reading from stdin
-:1235:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1245:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1260:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1341:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1602:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1615:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1792:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1921:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1993:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1997:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1997:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2003:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2102:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2128:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2248:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2282:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2304:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1152:1-16: info: no atoms over signature occur in program:
  output/3

-:1144:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1145:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(10,eq,39) output(21,eq,50) output(50,eq,58) output(58,eq,62) output(62,eq,67) output(67,eq,84) output(66,eq,32) output(8,eq,21) output(21,eq,67) output(18,eq,47) output(7,eq,42) output(42,eq,62) output(62,eq,89) output(58,eq,89) output(42,eq,89) output(7,eq,62) output(8,eq,67) output(62,eq,84) output(21,eq,84) output(58,eq,67) output(42,eq,67) output(50,eq,62) output(21,eq,58) output(8,eq,50) output(8,eq,58) output(21,eq,62) output(8,eq,62) output(7,eq,67) output(50,eq,67) output(8,eq,84) output(58,eq,84) output(42,eq,84) output(7,eq,84) output(50,eq,84) output(7,eq,89) output(50,eq,89) output(21,eq,89) output(8,eq,89)
Optimization: 38 0
Answer: 2
preference(1,(1,13),1,for(atom(hasIngredient(4))),8) preference(1,less(weight)) output(50,better,67) output(8,better,67) output(42,better,67) output(62,better,67) output(7,better,67) output(21,better,67) output(58,better,67) output(67,worse,84) output(10,eq,39) output(21,eq,50) output(50,eq,58) output(58,eq,62) output(66,eq,32) output(8,eq,21) output(18,eq,47) output(7,eq,42) output(42,eq,62) output(62,eq,89) output(58,eq,89) output(42,eq,89) output(7,eq,62) output(62,eq,84) output(21,eq,84) output(50,eq,62) output(21,eq,58) output(8,eq,50) output(8,eq,58) output(21,eq,62) output(8,eq,62) output(8,eq,84) output(58,eq,84) output(42,eq,84) output(7,eq,84) output(50,eq,84) output(7,eq,89) output(50,eq,89) output(21,eq,89) output(8,eq,89)
Optimization: 31 1
Answer: 3
preference(1,(1,12),1,for(atom(hasIngredient(4))),8) preference(1,(1,13),1,for(atom(hasCost(5))),8) preference(1,less(weight)) output(18,better,47) output(50,better,67) output(8,better,67) output(42,better,67) output(62,better,67) output(7,better,67) output(21,better,67) output(58,better,67) output(67,worse,84) output(10,eq,39) output(21,eq,50) output(50,eq,58) output(58,eq,62) output(66,eq,32) output(8,eq,21) output(7,eq,42) output(42,eq,62) output(62,eq,89) output(58,eq,89) output(42,eq,89) output(7,eq,62) output(62,eq,84) output(21,eq,84) output(50,eq,62) output(21,eq,58) output(8,eq,50) output(8,eq,58) output(21,eq,62) output(8,eq,62) output(8,eq,84) output(58,eq,84) output(42,eq,84) output(7,eq,84) output(50,eq,84) output(7,eq,89) output(50,eq,89) output(21,eq,89) output(8,eq,89)
Optimization: 30 2
Answer: 4
preference(1,(1,1),1,for(atom(hasPrep(3))),8) preference(1,(1,7),1,for(atom(hasCost(1))),8) preference(1,(1,12),1,for(atom(hasIngredient(4))),8) preference(1,(1,14),1,for(atom(hasCost(5))),8) preference(1,less(weight)) output(18,better,47) output(50,better,67) output(50,better,84) output(50,better,89) output(8,better,67) output(8,better,84) output(8,better,89) output(42,better,89) output(42,better,67) output(42,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,67) output(7,better,84) output(7,better,89) output(21,better,67) output(21,better,84) output(21,better,89) output(58,better,89) output(58,better,67) output(58,better,84) output(10,eq,39) output(21,eq,50) output(50,eq,58) output(58,eq,62) output(67,eq,84) output(66,eq,32) output(8,eq,21) output(7,eq,42) output(42,eq,62) output(7,eq,62) output(50,eq,62) output(21,eq,58) output(8,eq,50) output(8,eq,58) output(21,eq,62) output(8,eq,62)
Optimization: 16 4
Answer: 5
preference(1,(1,1),1,for(atom(hasCost(5))),8) preference(1,(1,2),1,for(atom(hasPrep(3))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),8) preference(1,(1,12),1,for(atom(hasIngredient(4))),8) preference(1,(1,14),1,for(atom(hasCost(1))),8) preference(1,less(weight)) output(10,better,39) output(18,better,47) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(8,better,67) output(8,better,62) output(8,better,84) output(8,better,89) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(21,better,67) output(21,better,84) output(21,better,62) output(21,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(66,worse,32) output(21,eq,50) output(50,eq,58) output(62,eq,67) output(67,eq,84) output(8,eq,21) output(42,eq,62) output(62,eq,89) output(42,eq,89) output(62,eq,84) output(42,eq,67) output(21,eq,58) output(8,eq,50) output(8,eq,58) output(42,eq,84)
Optimization: 15 6
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(2))),7) preference(1,(1,2),1,for(atom(hasCost(3))),7) preference(1,(1,3),1,for(atom(hasDifficulty(1))),7) preference(1,(1,4),1,for(atom(hasPrep(3))),8) preference(1,(1,5),1,for(atom(hasDifficulty(3))),7) preference(1,(1,6),1,for(atom(hasPrep(4))),7) preference(1,(1,8),1,for(atom(hasCost(4))),7) preference(1,(1,9),1,for(atom(hasCost(5))),8) preference(1,(1,10),1,for(atom(hasDifficulty(4))),7) preference(1,(1,11),1,for(atom(hasPrepTime(2))),8) preference(1,(1,12),1,for(atom(hasCategory(5))),7) preference(1,(1,13),1,for(atom(hasCost(1))),8) preference(1,(1,14),1,for(atom(hasCategory(3))),7) preference(1,less(weight)) output(18,better,47) output(50,better,67) output(50,better,84) output(50,better,89) output(67,better,84) output(8,better,67) output(8,better,50) output(8,better,62) output(8,better,84) output(8,better,89) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,42) output(7,better,67) output(7,better,84) output(7,better,89) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,62) output(21,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(50,worse,58) output(42,worse,62) output(42,worse,67) output(10,eq,39) output(66,eq,32) output(8,eq,21) output(42,eq,89) output(7,eq,62) output(50,eq,62) output(21,eq,58) output(8,eq,58) output(42,eq,84)
Optimization: 12 13
Answer: 7
preference(1,(1,1),1,for(atom(hasCategory(3))),7) preference(1,(1,2),1,for(atom(hasCost(1))),8) preference(1,(1,3),1,for(atom(hasCost(3))),7) preference(1,(1,4),1,for(atom(hasPrep(3))),8) preference(1,(1,5),1,for(atom(hasDifficulty(3))),7) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,8),1,for(atom(hasCost(4))),7) preference(1,(1,9),1,for(atom(hasCost(5))),8) preference(1,(1,10),1,for(atom(hasDifficulty(4))),7) preference(1,(1,11),1,for(atom(hasPrep(2))),7) preference(1,(1,12),1,for(atom(hasCategory(5))),7) preference(1,(1,14),1,for(atom(hasDifficulty(1))),8) preference(1,less(weight)) output(18,better,47) output(50,better,67) output(50,better,84) output(50,better,89) output(67,better,84) output(8,better,67) output(8,better,50) output(8,better,62) output(8,better,84) output(8,better,89) output(42,better,89) output(42,better,67) output(42,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(7,better,67) output(7,better,84) output(7,better,89) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,62) output(21,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(50,worse,58) output(66,worse,32) output(10,eq,39) output(8,eq,21) output(7,eq,42) output(42,eq,62) output(7,eq,62) output(50,eq,62) output(21,eq,58) output(8,eq,58)
Optimization: 10 12
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(2))),7) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasCost(1))),7) preference(1,(1,4),1,for(atom(hasCost(3))),7) preference(1,(1,5),1,for(atom(hasPrep(7))),7) preference(1,(1,6),1,for(atom(hasPrep(3))),8) preference(1,(1,7),1,for(atom(hasIngredient(9))),7) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasCost(5))),8) preference(1,(1,10),1,for(atom(hasCost(4))),7) preference(1,(1,11),1,for(atom(hasPrepTime(2))),8) preference(1,(1,12),1,for(atom(hasCategory(5))),7) preference(1,(1,14),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(10,better,39) output(18,better,47) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(67,better,84) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(66,better,32) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(42,worse,67) output(62,worse,67) output(50,eq,58) output(8,eq,21) output(42,eq,62) output(62,eq,89) output(42,eq,89) output(62,eq,84) output(42,eq,84)
Optimization: 9 13
Answer: 9
preference(1,(1,2),1,for(atom(hasPrep(7))),7) preference(1,(1,3),1,for(atom(hasPrep(3))),8) preference(1,(1,4),1,for(atom(hasCost(1))),7) preference(1,(1,5),1,for(atom(hasCost(5))),8) preference(1,(1,6),1,for(atom(hasCost(4))),7) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),8) preference(1,(1,9),1,for(atom(hasDifficulty(3))),7) preference(1,(1,10),1,for(atom(hasIngredient(5))),7) preference(1,(1,11),1,for(atom(hasPrepTime(2))),8) preference(1,(1,12),1,for(atom(hasIngredient(2))),7) preference(1,(1,13),1,for(atom(hasCost(3))),7) preference(1,(1,14),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(10,better,39) output(18,better,47) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(67,better,84) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(62,better,89) output(62,better,84) output(66,better,32) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(42,worse,62) output(42,worse,67) output(50,eq,58) output(62,eq,67) output(8,eq,21) output(42,eq,89) output(42,eq,84)
Optimization: 7 13
Answer: 10
preference(1,(1,1),1,for(atom(hasIngredient(12))),7) preference(1,(1,2),1,for(atom(hasDifficulty(1))),7) preference(1,(1,3),1,for(atom(hasPrep(3))),8) preference(1,(1,4),1,for(atom(hasCost(1))),7) preference(1,(1,5),1,for(atom(hasCost(5))),8) preference(1,(1,6),1,for(atom(hasCost(4))),7) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,8),1,for(atom(hasPrep(7))),7) preference(1,(1,9),1,for(atom(hasDifficulty(3))),7) preference(1,(1,10),1,for(atom(hasIngredient(5))),7) preference(1,(1,11),1,for(atom(hasPrepTime(2))),8) preference(1,(1,12),1,for(atom(hasIngredient(6))),7) preference(1,(1,14),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(10,better,39) output(18,better,47) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(67,better,84) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(42,better,89) output(42,better,84) output(62,better,89) output(62,better,84) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84) output(50,eq,58) output(62,eq,67) output(66,eq,32) output(8,eq,21) output(42,eq,62) output(42,eq,67)
Optimization: 6 13
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(6))),1) preference(1,(1,2),1,for(atom(hasIngredient(3))),2) preference(1,(1,3),1,for(atom(hasPrepTime(3))),4) preference(1,(1,4),1,for(atom(hasCost(3))),4) preference(1,(1,5),1,for(atom(hasCost(1))),6) preference(1,(1,6),1,for(atom(hasCategory(1))),7) preference(1,(1,7),1,for(atom(hasIngredient(4))),5) preference(1,(1,8),1,for(atom(hasCategory(4))),3) preference(1,(1,9),1,for(atom(hasCategory(3))),5) preference(1,(1,12),1,for(atom(hasPrep(7))),4) preference(1,(1,13),1,for(atom(hasCost(5))),5) preference(1,(1,14),1,for(atom(hasIngredient(9))),4) preference(1,less(weight)) output(10,better,39) output(18,better,47) output(50,better,58) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(67,better,84) output(8,better,21) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(66,better,32) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84)
Optimization: 0 12
Progression : 0 [ 1;12] (Error: 11)
Progression : 0 [ 2;12] (Error: 5)
Answer: 12
preference(1,(1,1),1,for(atom(hasPrepTime(3))),2) preference(1,(1,2),1,for(atom(hasPrepTime(2))),3) preference(1,(1,4),1,for(atom(hasCost(1))),8) preference(1,(1,5),1,for(atom(hasCost(5))),1) preference(1,(1,6),1,for(atom(hasCategory(3))),4) preference(1,(1,7),1,for(atom(hasIngredient(12))),4) preference(1,(1,9),1,for(atom(hasIngredient(4))),8) preference(1,(1,10),1,for(atom(hasPrepTime(1))),5) preference(1,(1,11),1,for(atom(hasCategory(4))),2) preference(1,(1,13),1,for(atom(hasIngredient(7))),3) preference(1,(1,14),1,for(atom(hasIngredient(10))),1) preference(1,less(weight)) output(10,better,39) output(18,better,47) output(50,better,58) output(50,better,62) output(50,better,67) output(50,better,84) output(50,better,89) output(67,better,84) output(8,better,21) output(8,better,67) output(8,better,50) output(8,better,58) output(8,better,62) output(8,better,84) output(8,better,89) output(42,better,62) output(42,better,89) output(42,better,67) output(42,better,84) output(62,better,67) output(62,better,89) output(62,better,84) output(66,better,32) output(7,better,42) output(7,better,62) output(7,better,67) output(7,better,84) output(7,better,89) output(21,better,50) output(21,better,67) output(21,better,84) output(21,better,58) output(21,better,62) output(21,better,89) output(58,better,62) output(58,better,89) output(58,better,67) output(58,better,84)
Optimization: 0 11
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.139 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 12+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 598.161s (Solving: 595.35s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2383.672s
Threads      : 4        (Winner: 4)

Choices      : 18587886 (Domain: 614116)
Conflicts    : 7773294  (Analyzed: 7773292)
Restarts     : 7971     (Average: 975.20 Last: 338082)
Model-Level  : 261.2   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 7780769  (Deleted: 7454964)
  Binary     : 627      (Ratio:   0.01%)
  Ternary    : 1122     (Ratio:   0.01%)
  Conflict   : 7773292  (Average Length:  598.0 Ratio:  99.90%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7477     (Average Length:   92.1 Ratio:   0.10%) 
  Distributed: 2493     (Ratio:   0.03% Average LBD: 3.48) 
  Integrated : 7479     (Ratio: 300.00% Unit: 3 Average Jumps: 112.33)
Backjumps    : 7773292  (Average:  1.87 Max: 1213 Sum: 14506883)
  Executed   : 7773291  (Average:  1.87 Max: 1213 Sum: 14506847 Ratio: 100.00%)
  Bounded    : 1        (Average: 36.00 Max:  36 Sum:     36 Ratio:   0.00%)

Rules        : 459484  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14334   
Bodies       : 18947   
  Sum        : 76      
  Count      : 14      
Equivalences : 7180     (Atom=Atom: 393 Body=Body: 166 Other: 6621)
Tight        : Yes
Variables    : 17079    (Eliminated:    0 Frozen: 7755)
Constraints  : 481064   (Binary:  97.3% Ternary:   1.9% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(5)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(5)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(5)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(3)) ; 
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCost(5)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCategory(5)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(3)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(5)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasIngredient(5)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(2)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(3)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(5)) ; 
  7 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasIngredient(5)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(6)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(6)) ; 
  2 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCost(3)) ; 
  6 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(1)) ; 
  5 :: atom(hasIngredient(4)) ; 
  3 :: atom(hasCategory(4)) ; 
  5 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCost(5)) ; 
  4 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(5)) ; 
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(4)) ; 
  3 :: atom(hasIngredient(7)) ; 
  1 :: atom(hasIngredient(10)) 
}.
