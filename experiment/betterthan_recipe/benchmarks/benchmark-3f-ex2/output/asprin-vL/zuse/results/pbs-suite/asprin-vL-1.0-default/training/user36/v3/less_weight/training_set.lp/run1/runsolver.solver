asprin_vL version 1.0
Reading from stdin
-:1221:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1231:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1246:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1327:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1588:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1601:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1778:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1907:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1979:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1983:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1983:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1989:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2088:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2114:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2234:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2268:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2290:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1138:1-16: info: no atoms over signature occur in program:
  output/3

-:1130:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1131:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(8,eq,55) output(55,eq,52) output(52,eq,17) output(86,eq,94) output(62,eq,25) output(25,eq,75) output(8,eq,57) output(57,eq,55) output(52,eq,51) output(51,eq,67) output(99,eq,91) output(52,eq,67) output(55,eq,51) output(62,eq,75) output(55,eq,17) output(8,eq,52) output(57,eq,52) output(8,eq,17) output(57,eq,17) output(8,eq,51) output(57,eq,51) output(55,eq,67) output(8,eq,67) output(57,eq,67)
Optimization: 24 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(51,better,67) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,67) output(55,better,52) output(55,better,17) output(55,better,67) output(99,better,91) output(52,worse,51) output(57,worse,55) output(57,worse,51) output(8,eq,55) output(52,eq,17) output(86,eq,94) output(62,eq,25) output(25,eq,75) output(52,eq,67) output(55,eq,51) output(62,eq,75) output(57,eq,52) output(57,eq,17) output(8,eq,51) output(57,eq,67)
Optimization: 15 14
Answer: 3
preference(1,(1,3),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCategory(4))),8) preference(1,less(weight)) output(51,better,67) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,67) output(55,better,52) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(52,worse,51) output(57,worse,55) output(57,worse,51) output(86,worse,94) output(8,eq,55) output(52,eq,17) output(25,eq,75) output(99,eq,91) output(52,eq,67) output(55,eq,51) output(57,eq,52) output(57,eq,17) output(8,eq,51) output(57,eq,67)
Optimization: 14 2
Answer: 4
preference(1,(1,3),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCategory(4))),8) preference(1,(1,12),1,for(atom(hasCost(5))),8) preference(1,less(weight)) output(51,better,67) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,67) output(55,better,52) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(52,worse,51) output(57,worse,55) output(57,worse,51) output(86,worse,94) output(8,eq,55) output(52,eq,17) output(25,eq,75) output(52,eq,67) output(55,eq,51) output(57,eq,52) output(57,eq,17) output(8,eq,51) output(57,eq,67)
Optimization: 13 3
Answer: 5
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,2),1,for(atom(hasIngredient(4))),7) preference(1,(1,3),1,for(atom(hasCategory(4))),8) preference(1,(1,4),1,for(atom(hasDifficulty(3))),7) preference(1,(1,5),1,for(atom(hasCost(3))),7) preference(1,(1,6),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasPrep(6))),8) preference(1,(1,8),1,for(atom(hasIngredient(9))),8) preference(1,(1,9),1,for(atom(hasCategory(3))),7) preference(1,(1,10),1,for(atom(hasPrep(2))),7) preference(1,(1,11),1,for(atom(hasDifficulty(4))),7) preference(1,(1,12),1,for(atom(hasPrep(1))),8) preference(1,(1,13),1,for(atom(hasIngredient(3))),7) preference(1,(1,14),1,for(atom(hasCategory(1))),7) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,67) output(86,better,94) output(55,worse,51) output(52,worse,51) output(57,worse,51) output(55,eq,52) output(52,eq,17) output(62,eq,25) output(25,eq,75) output(99,eq,91) output(52,eq,67) output(62,eq,75) output(55,eq,17) output(55,eq,67)
Optimization: 12 14
Answer: 6
preference(1,(1,1),1,for(atom(hasCategory(3))),8) preference(1,(1,2),1,for(atom(hasCategory(1))),7) preference(1,(1,3),1,for(atom(hasIngredient(4))),7) preference(1,(1,4),1,for(atom(hasDifficulty(3))),7) preference(1,(1,5),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasPrep(6))),8) preference(1,(1,8),1,for(atom(hasIngredient(9))),7) preference(1,(1,9),1,for(atom(hasCategory(5))),7) preference(1,(1,10),1,for(atom(hasCost(3))),7) preference(1,(1,11),1,for(atom(hasDifficulty(4))),7) preference(1,(1,12),1,for(atom(hasPrep(1))),8) preference(1,(1,13),1,for(atom(hasIngredient(3))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(25,better,75) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,67) output(86,better,94) output(55,worse,51) output(62,worse,25) output(52,worse,51) output(57,worse,51) output(55,eq,52) output(52,eq,17) output(99,eq,91) output(52,eq,67) output(62,eq,75) output(55,eq,17) output(55,eq,67)
Optimization: 11 14
Answer: 7
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,2),1,for(atom(hasIngredient(12))),8) preference(1,(1,3),1,for(atom(hasPrep(2))),7) preference(1,(1,4),1,for(atom(hasCategory(3))),7) preference(1,(1,5),1,for(atom(hasDifficulty(3))),7) preference(1,(1,6),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasIngredient(9))),7) preference(1,(1,8),1,for(atom(hasIngredient(4))),7) preference(1,(1,9),1,for(atom(hasCost(3))),7) preference(1,(1,10),1,for(atom(hasCost(5))),7) preference(1,(1,11),1,for(atom(hasDifficulty(4))),7) preference(1,(1,12),1,for(atom(hasPrep(1))),8) preference(1,(1,13),1,for(atom(hasIngredient(3))),7) preference(1,(1,14),1,for(atom(hasCategory(1))),7) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(99,better,91) output(25,better,75) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,67) output(86,better,94) output(55,worse,51) output(62,worse,25) output(52,worse,51) output(57,worse,51) output(55,eq,52) output(52,eq,17) output(52,eq,67) output(62,eq,75) output(55,eq,17) output(55,eq,67)
Optimization: 10 14
Answer: 8
preference(1,(1,1),1,for(atom(hasCategory(4))),8) preference(1,(1,2),1,for(atom(hasCost(3))),8) preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasCategory(3))),7) preference(1,(1,5),1,for(atom(hasPrep(7))),8) preference(1,(1,6),1,for(atom(hasDifficulty(3))),7) preference(1,(1,7),1,for(atom(hasPrep(6))),8) preference(1,(1,8),1,for(atom(hasIngredient(4))),7) preference(1,(1,9),1,for(atom(hasCategory(5))),7) preference(1,(1,10),1,for(atom(hasCost(5))),7) preference(1,(1,11),1,for(atom(hasPrepTime(2))),8) preference(1,(1,12),1,for(atom(hasIngredient(9))),7) preference(1,(1,13),1,for(atom(hasIngredient(3))),7) preference(1,(1,14),1,for(atom(hasCategory(1))),7) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(62,better,25) output(62,better,75) output(25,better,75) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,67) output(86,better,94) output(55,worse,51) output(52,worse,51) output(57,worse,51) output(55,eq,52) output(52,eq,17) output(99,eq,91) output(52,eq,67) output(55,eq,17) output(55,eq,67)
Optimization: 9 14
Answer: 9
preference(1,(1,1),1,for(atom(hasCost(3))),7) preference(1,(1,2),1,for(atom(hasPrep(7))),8) preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasPrepTime(2))),8) preference(1,(1,5),1,for(atom(hasCost(5))),7) preference(1,(1,6),1,for(atom(hasCategory(1))),7) preference(1,(1,7),1,for(atom(hasIngredient(9))),7) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasCategory(5))),7) preference(1,(1,10),1,for(atom(hasDifficulty(4))),7) preference(1,(1,11),1,for(atom(hasPrepTime(1))),8) preference(1,(1,12),1,for(atom(hasCategory(3))),7) preference(1,(1,13),1,for(atom(hasIngredient(3))),7) preference(1,(1,14),1,for(atom(hasIngredient(4))),7) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,67) output(86,better,94) output(55,worse,51) output(52,worse,51) output(57,worse,51) output(55,eq,52) output(52,eq,17) output(52,eq,67) output(55,eq,17) output(55,eq,67)
Optimization: 8 14
Answer: 10
preference(1,(1,1),1,for(atom(hasPrepTime(2))),7) preference(1,(1,2),1,for(atom(hasCategory(1))),7) preference(1,(1,3),1,for(atom(hasDifficulty(3))),7) preference(1,(1,4),1,for(atom(hasPrep(2))),7) preference(1,(1,5),1,for(atom(hasPrepTime(1))),8) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,8),1,for(atom(hasDifficulty(4))),7) preference(1,(1,9),1,for(atom(hasPrep(7))),7) preference(1,(1,10),1,for(atom(hasPrep(6))),7) preference(1,(1,11),1,for(atom(hasCost(3))),7) preference(1,(1,12),1,for(atom(hasDifficulty(1))),7) preference(1,(1,14),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94) output(99,worse,91) output(52,eq,17) output(25,eq,75) output(57,eq,55) output(52,eq,51) output(51,eq,67) output(52,eq,67)
Optimization: 7 12
Answer: 11
preference(1,(1,1),1,for(atom(hasPrepTime(3))),2) preference(1,(1,2),1,for(atom(hasIngredient(3))),8) preference(1,(1,3),1,for(atom(hasIngredient(9))),2) preference(1,(1,4),1,for(atom(hasCategory(4))),2) preference(1,(1,5),1,for(atom(hasIngredient(7))),2) preference(1,(1,6),1,for(atom(hasDifficulty(1))),2) preference(1,(1,7),1,for(atom(hasCost(3))),2) preference(1,(1,8),1,for(atom(hasIngredient(12))),2) preference(1,(1,9),1,for(atom(hasCategory(1))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),2) preference(1,(1,11),1,for(atom(hasPrep(2))),7) preference(1,(1,12),1,for(atom(hasIngredient(4))),7) preference(1,(1,13),1,for(atom(hasPrep(6))),1) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94) output(99,worse,91) output(25,worse,75) output(57,worse,55) output(8,eq,55) output(51,eq,67) output(57,eq,52)
Optimization: 6 14
Answer: 12
preference(1,(1,1),1,for(atom(hasCategory(4))),7) preference(1,(1,2),1,for(atom(hasIngredient(9))),8) preference(1,(1,3),1,for(atom(hasCategory(3))),8) preference(1,(1,4),1,for(atom(hasIngredient(6))),7) preference(1,(1,5),1,for(atom(hasPrep(2))),8) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasCategory(1))),8) preference(1,(1,8),1,for(atom(hasPrep(3))),7) preference(1,(1,9),1,for(atom(hasDifficulty(1))),7) preference(1,(1,10),1,for(atom(hasPrepTime(2))),7) preference(1,(1,11),1,for(atom(hasIngredient(4))),7) preference(1,(1,12),1,for(atom(hasCost(5))),7) preference(1,(1,13),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94) output(52,worse,51) output(52,eq,17) output(25,eq,75) output(52,eq,67) output(55,eq,51)
Optimization: 5 13
Answer: 13
preference(1,(1,1),1,for(atom(hasCost(5))),7) preference(1,(1,2),1,for(atom(hasDifficulty(3))),8) preference(1,(1,3),1,for(atom(hasCost(3))),8) preference(1,(1,4),1,for(atom(hasDifficulty(4))),7) preference(1,(1,5),1,for(atom(hasIngredient(4))),7) preference(1,(1,6),1,for(atom(hasIngredient(12))),7) preference(1,(1,8),1,for(atom(hasPrepTime(1))),8) preference(1,(1,9),1,for(atom(hasCategory(5))),8) preference(1,(1,10),1,for(atom(hasPrep(7))),7) preference(1,(1,11),1,for(atom(hasPrep(2))),7) preference(1,(1,12),1,for(atom(hasCategory(1))),8) preference(1,(1,13),1,for(atom(hasDifficulty(1))),7) preference(1,(1,14),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(8,better,55) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,eq,94) output(25,eq,75) output(8,eq,57) output(51,eq,67)
Optimization: 4 13
Answer: 14
preference(1,(1,1),1,for(atom(hasPrepTime(2))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),7) preference(1,(1,3),1,for(atom(hasDifficulty(4))),8) preference(1,(1,4),1,for(atom(hasCategory(1))),7) preference(1,(1,5),1,for(atom(hasIngredient(4))),7) preference(1,(1,6),1,for(atom(hasPrep(6))),8) preference(1,(1,7),1,for(atom(hasPrepTime(1))),7) preference(1,(1,8),1,for(atom(hasCost(5))),7) preference(1,(1,9),1,for(atom(hasIngredient(12))),7) preference(1,(1,10),1,for(atom(hasPrep(7))),7) preference(1,(1,11),1,for(atom(hasDifficulty(3))),8) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,less(weight)) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94) output(57,worse,55) output(51,eq,67) output(57,eq,52)
Optimization: 3 12
Answer: 15
preference(1,(1,1),1,for(atom(hasIngredient(3))),7) preference(1,(1,2),1,for(atom(hasPrepTime(1))),8) preference(1,(1,3),1,for(atom(hasCategory(3))),6) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasPrepTime(2))),6) preference(1,(1,6),1,for(atom(hasCategory(5))),8) preference(1,(1,7),1,for(atom(hasIngredient(12))),8) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,9),1,for(atom(hasCost(5))),8) preference(1,(1,10),1,for(atom(hasPrep(7))),8) preference(1,(1,11),1,for(atom(hasIngredient(4))),7) preference(1,(1,12),1,for(atom(hasCategory(1))),8) preference(1,(1,13),1,for(atom(hasPrep(1))),6) preference(1,(1,14),1,for(atom(hasIngredient(9))),6) preference(1,less(weight)) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94) output(55,worse,52) output(51,eq,67)
Optimization: 2 14
Answer: 16
preference(1,(1,1),1,for(atom(hasIngredient(9))),8) preference(1,(1,2),1,for(atom(hasIngredient(4))),8) preference(1,(1,4),1,for(atom(hasDifficulty(1))),7) preference(1,(1,5),1,for(atom(hasPrepTime(2))),7) preference(1,(1,7),1,for(atom(hasPrep(5))),6) preference(1,(1,8),1,for(atom(hasPrep(2))),6) preference(1,(1,9),1,for(atom(hasCost(5))),8) preference(1,(1,10),1,for(atom(hasIngredient(3))),6) preference(1,(1,11),1,for(atom(hasCategory(1))),6) preference(1,(1,12),1,for(atom(hasDifficulty(4))),8) preference(1,(1,13),1,for(atom(hasCategory(3))),8) preference(1,(1,14),1,for(atom(hasPrepTime(1))),7) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94) output(62,worse,25)
Optimization: 1 12
Answer: 17
preference(1,(1,1),1,for(atom(hasPrep(2))),5) preference(1,(1,2),1,for(atom(hasIngredient(4))),8) preference(1,(1,3),1,for(atom(hasIngredient(3))),5) preference(1,(1,4),1,for(atom(hasPrep(7))),4) preference(1,(1,5),1,for(atom(hasCost(5))),8) preference(1,(1,6),1,for(atom(hasCost(3))),6) preference(1,(1,7),1,for(atom(hasDifficulty(4))),3) preference(1,(1,8),1,for(atom(hasIngredient(6))),3) preference(1,(1,9),1,for(atom(hasPrepTime(2))),2) preference(1,(1,10),1,for(atom(hasPrepTime(1))),7) preference(1,(1,11),1,for(atom(hasCategory(1))),4) preference(1,(1,12),1,for(atom(hasDifficulty(3))),6) preference(1,(1,13),1,for(atom(hasPrep(6))),1) preference(1,(1,14),1,for(atom(hasIngredient(9))),3) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 18
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,2),1,for(atom(hasDifficulty(3))),8) preference(1,(1,3),1,for(atom(hasIngredient(4))),7) preference(1,(1,4),1,for(atom(hasCost(5))),5) preference(1,(1,5),1,for(atom(hasDifficulty(1))),6) preference(1,(1,6),1,for(atom(hasPrep(5))),5) preference(1,(1,7),1,for(atom(hasIngredient(3))),2) preference(1,(1,8),1,for(atom(hasPrep(2))),3) preference(1,(1,9),1,for(atom(hasDifficulty(2))),5) preference(1,(1,10),1,for(atom(hasCategory(1))),4) preference(1,(1,12),1,for(atom(hasPrep(6))),1) preference(1,(1,13),1,for(atom(hasIngredient(9))),2) preference(1,(1,14),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94)
Optimization: 0 13
Progression : 0 [ 2;13] (Error: 5.5)
Answer: 19
preference(1,(1,1),1,for(atom(hasDifficulty(1))),7) preference(1,(1,2),1,for(atom(hasIngredient(4))),7) preference(1,(1,3),1,for(atom(hasPrepTime(2))),5) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasCost(2))),4) preference(1,(1,6),1,for(atom(hasPrep(7))),5) preference(1,(1,9),1,for(atom(hasCategory(3))),2) preference(1,(1,10),1,for(atom(hasCategory(1))),6) preference(1,(1,11),1,for(atom(hasIngredient(3))),3) preference(1,(1,12),1,for(atom(hasPrep(6))),5) preference(1,(1,13),1,for(atom(hasIngredient(9))),6) preference(1,(1,14),1,for(atom(hasPrep(2))),7) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94)
Optimization: 0 12
Answer: 20
preference(1,(1,2),1,for(atom(hasCategory(1))),1) preference(1,(1,3),1,for(atom(hasIngredient(4))),4) preference(1,(1,5),1,for(atom(hasDifficulty(2))),1) preference(1,(1,6),1,for(atom(hasPrep(5))),1) preference(1,(1,7),1,for(atom(hasPrep(2))),7) preference(1,(1,8),1,for(atom(hasDifficulty(4))),7) preference(1,(1,10),1,for(atom(hasPrepTime(2))),6) preference(1,(1,11),1,for(atom(hasCost(2))),1) preference(1,(1,12),1,for(atom(hasCategory(4))),6) preference(1,(1,13),1,for(atom(hasIngredient(3))),2) preference(1,(1,14),1,for(atom(hasIngredient(9))),7) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94)
Optimization: 0 11
Answer: 21
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,2),1,for(atom(hasCategory(4))),3) preference(1,(1,3),1,for(atom(hasDifficulty(2))),1) preference(1,(1,4),1,for(atom(hasIngredient(4))),7) preference(1,(1,6),1,for(atom(hasIngredient(3))),2) preference(1,(1,8),1,for(atom(hasIngredient(9))),4) preference(1,(1,9),1,for(atom(hasPrep(2))),4) preference(1,(1,10),1,for(atom(hasPrep(5))),1) preference(1,(1,12),1,for(atom(hasPrepTime(2))),1) preference(1,(1,13),1,for(atom(hasCategory(1))),1) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94)
Optimization: 0 10
Progression : 0 [ 3;10] (Error: 2.33333)
Answer: 22
preference(1,(1,1),1,for(atom(hasPrep(2))),8) preference(1,(1,2),1,for(atom(hasPrepTime(2))),5) preference(1,(1,3),1,for(atom(hasPrep(6))),5) preference(1,(1,4),1,for(atom(hasIngredient(3))),3) preference(1,(1,6),1,for(atom(hasCategory(4))),5) preference(1,(1,9),1,for(atom(hasIngredient(4))),2) preference(1,(1,10),1,for(atom(hasCategory(1))),8) preference(1,(1,11),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasIngredient(9))),6) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94)
Optimization: 0 9
Answer: 23
preference(1,(1,2),1,for(atom(hasPrepTime(2))),6) preference(1,(1,5),1,for(atom(hasPrep(2))),7) preference(1,(1,6),1,for(atom(hasCategory(4))),6) preference(1,(1,9),1,for(atom(hasIngredient(3))),5) preference(1,(1,11),1,for(atom(hasIngredient(9))),7) preference(1,(1,12),1,for(atom(hasCategory(1))),7) preference(1,(1,13),1,for(atom(hasPrep(6))),6) preference(1,less(weight)) output(51,better,67) output(8,better,55) output(8,better,57) output(8,better,52) output(8,better,17) output(8,better,51) output(8,better,67) output(55,better,52) output(55,better,51) output(55,better,17) output(55,better,67) output(62,better,25) output(62,better,75) output(99,better,91) output(25,better,75) output(52,better,17) output(52,better,51) output(52,better,67) output(57,better,55) output(57,better,52) output(57,better,17) output(57,better,51) output(57,better,67) output(86,better,94)
Optimization: 0 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.115 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 23+
  Optimum    : unknown
Optimization : 0 7
Calls        : 1
Time         : 598.167s (Solving: 595.67s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2380.602s
Threads      : 4        (Winner: 4)

Choices      : 13298324 (Domain: 404026)
Conflicts    : 9080504  (Analyzed: 9080501)
Restarts     : 7081     (Average: 1282.38 Last: 480394)
Model-Level  : 64.9    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 9091037  (Deleted: 8632884)
  Binary     : 1176     (Ratio:   0.01%)
  Ternary    : 1977     (Ratio:   0.02%)
  Conflict   : 9080501  (Average Length:  547.5 Ratio:  99.88%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 10536    (Average Length:   31.1 Ratio:   0.12%) 
  Distributed: 3517     (Ratio:   0.04% Average LBD: 3.41) 
  Integrated : 10551    (Ratio: 300.00% Unit: 11 Average Jumps: 7.09)
Backjumps    : 9080501  (Average:  1.34 Max: 1075 Sum: 12197380)
  Executed   : 9080500  (Average:  1.34 Max: 1075 Sum: 12197377 Ratio: 100.00%)
  Bounded    : 1        (Average:  3.00 Max:   3 Sum:      3 Ratio:   0.00%)

Rules        : 324118  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 12946   
Bodies       : 18793   
  Sum        : 48      
  Count      : 14      
Equivalences : 6690     (Atom=Atom: 253 Body=Body: 110 Other: 6327)
Tight        : Yes
Variables    : 17007    (Eliminated:    0 Frozen: 7683)
Constraints  : 346956   (Binary:  96.3% Ternary:   2.7% Other:   1.0%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCost(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  8 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasCost(5)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(6)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasCost(5)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(5)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCategory(5)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasIngredient(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasCategory(4)) ; 
  2 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCost(3)) ; 
  2 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasCategory(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasIngredient(4)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(6)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasCost(5)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(5)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCategory(5)) ; 
  7 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCategory(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasPrep(6)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(5)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasCategory(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCategory(5)) ; 
  8 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(5)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasIngredient(4)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(5)) ; 
  6 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasCategory(1)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(5)) ; 
  6 :: atom(hasCost(3)) ; 
  3 :: atom(hasDifficulty(4)) ; 
  3 :: atom(hasIngredient(6)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasCategory(1)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasPrep(6)) ; 
  3 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasCost(5)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(5)) ; 
  2 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasPrep(2)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCategory(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  2 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasIngredient(4)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCategory(3)) ; 
  6 :: atom(hasCategory(1)) ; 
  3 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasPrep(6)) ; 
  6 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  4 :: atom(hasIngredient(4)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasCategory(4)) ; 
  2 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  3 :: atom(hasCategory(4)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasIngredient(9)) ; 
  4 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasCategory(4)) ; 
  2 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(1)) ; 
  2 :: atom(hasPrep(5)) ; 
  6 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCategory(4)) ; 
  5 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasCategory(1)) ; 
  6 :: atom(hasPrep(6)) 
}.
