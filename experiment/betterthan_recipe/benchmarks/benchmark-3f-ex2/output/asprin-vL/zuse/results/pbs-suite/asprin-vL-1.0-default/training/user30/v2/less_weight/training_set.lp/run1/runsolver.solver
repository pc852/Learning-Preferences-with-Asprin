asprin_vL version 1.0
Reading from stdin
-:1233:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1243:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1258:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1339:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1600:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1613:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1790:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1919:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1991:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1995:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1995:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2001:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2100:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2126:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2246:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2280:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2302:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1150:1-16: info: no atoms over signature occur in program:
  output/3

-:1142:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1143:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(39,eq,82) output(82,eq,65) output(65,eq,33) output(68,eq,22) output(10,eq,74) output(74,eq,80) output(46,eq,39) output(39,eq,60) output(60,eq,68) output(52,eq,74) output(74,eq,66) output(66,eq,55) output(55,eq,47) output(66,eq,47) output(74,eq,55) output(10,eq,66) output(52,eq,66) output(39,eq,68) output(46,eq,60) output(10,eq,80) output(52,eq,80) output(60,eq,22) output(82,eq,33) output(39,eq,65) output(46,eq,82) output(46,eq,65) output(39,eq,33) output(46,eq,33) output(39,eq,22) output(46,eq,22) output(46,eq,68) output(10,eq,55) output(52,eq,55) output(74,eq,47) output(10,eq,47) output(52,eq,47)
Optimization: 36 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCost(2))),8) preference(1,(1,2),1,for(atom(hasPrepTime(3))),8) preference(1,(1,4),1,for(atom(hasCategory(3))),8) preference(1,(1,7),1,for(atom(hasPrep(1))),8) preference(1,(1,8),1,for(atom(hasIngredient(9))),8) preference(1,(1,13),1,for(atom(hasPrep(7))),8) preference(1,(1,14),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(68,better,22) output(46,worse,68) output(60,worse,68) output(39,worse,68) output(39,eq,82) output(82,eq,65) output(65,eq,33) output(10,eq,74) output(74,eq,80) output(46,eq,39) output(39,eq,60) output(52,eq,74) output(74,eq,66) output(66,eq,55) output(55,eq,47) output(66,eq,47) output(74,eq,55) output(10,eq,66) output(52,eq,66) output(46,eq,60) output(10,eq,80) output(52,eq,80) output(60,eq,22) output(82,eq,33) output(39,eq,65) output(46,eq,82) output(46,eq,65) output(39,eq,33) output(46,eq,33) output(39,eq,22) output(46,eq,22) output(10,eq,55) output(52,eq,55) output(74,eq,47) output(10,eq,47) output(52,eq,47)
Optimization: 35 7
Answer: 3
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasIngredient(7))),2) preference(1,less(weight)) output(10,better,74) output(10,better,66) output(10,better,55) output(10,better,47) output(46,better,39) output(46,better,60) output(46,better,65) output(46,better,22) output(46,better,68) output(82,better,65) output(52,better,74) output(52,better,66) output(52,better,55) output(52,better,47) output(39,worse,82) output(39,worse,33) output(65,worse,33) output(74,worse,80) output(68,eq,22) output(39,eq,60) output(60,eq,68) output(74,eq,66) output(66,eq,55) output(55,eq,47) output(66,eq,47) output(74,eq,55) output(39,eq,68) output(10,eq,80) output(52,eq,80) output(60,eq,22) output(82,eq,33) output(39,eq,65) output(46,eq,82) output(46,eq,33) output(39,eq,22) output(74,eq,47)
Optimization: 22 14
Answer: 4
preference(1,(1,1),1,for(atom(hasIngredient(9))),7) preference(1,(1,2),1,for(atom(hasDifficulty(1))),7) preference(1,(1,3),1,for(atom(hasCategory(3))),7) preference(1,(1,4),1,for(atom(hasCost(1))),7) preference(1,(1,5),1,for(atom(hasPrepTime(3))),7) preference(1,(1,6),1,for(atom(hasPrep(2))),7) preference(1,(1,7),1,for(atom(hasIngredient(12))),8) preference(1,(1,8),1,for(atom(hasPrep(1))),7) preference(1,(1,9),1,for(atom(hasDifficulty(2))),7) preference(1,(1,10),1,for(atom(hasCost(2))),7) preference(1,(1,11),1,for(atom(hasCategory(1))),7) preference(1,(1,12),1,for(atom(hasPrepTime(2))),2) preference(1,(1,13),1,for(atom(hasPrep(0))),2) preference(1,(1,14),1,for(atom(hasIngredient(7))),7) preference(1,less(weight)) output(46,better,39) output(46,better,60) output(46,better,82) output(46,better,65) output(46,better,33) output(46,better,22) output(39,better,33) output(55,better,47) output(82,better,65) output(82,better,33) output(52,better,66) output(52,better,47) output(65,better,33) output(68,better,22) output(74,better,80) output(74,better,66) output(74,better,47) output(10,worse,74) output(10,worse,80) output(10,worse,55) output(10,worse,47) output(60,worse,68) output(39,worse,82) output(39,worse,60) output(39,worse,68) output(39,worse,22) output(66,worse,55) output(66,worse,47) output(52,worse,74) output(52,worse,55) output(74,eq,55) output(10,eq,66) output(52,eq,80) output(60,eq,22) output(39,eq,65) output(46,eq,68)
Optimization: 19 14
Answer: 5
preference(1,(1,5),1,for(atom(hasCategory(2))),8) preference(1,(1,6),1,for(atom(hasPrep(3))),8) preference(1,(1,9),1,for(atom(hasCost(4))),8) preference(1,(1,10),1,for(atom(hasCost(3))),8) preference(1,(1,13),1,for(atom(hasPrep(7))),8) preference(1,(1,14),1,for(atom(hasCost(1))),8) preference(1,less(weight)) output(46,better,60) output(46,better,65) output(46,better,33) output(46,better,22) output(46,better,68) output(39,better,60) output(39,better,68) output(39,better,65) output(39,better,33) output(39,better,22) output(66,better,55) output(66,better,47) output(82,better,65) output(82,better,33) output(52,better,74) output(52,better,80) output(52,better,55) output(52,better,47) output(10,worse,66) output(74,worse,66) output(39,eq,82) output(65,eq,33) output(68,eq,22) output(10,eq,74) output(74,eq,80) output(46,eq,39) output(60,eq,68) output(55,eq,47) output(74,eq,55) output(52,eq,66) output(10,eq,80) output(60,eq,22) output(46,eq,82) output(10,eq,55) output(74,eq,47) output(10,eq,47)
Optimization: 18 6
Answer: 6
preference(1,(1,1),1,for(atom(hasCategory(3))),8) preference(1,(1,5),1,for(atom(hasCategory(2))),8) preference(1,(1,9),1,for(atom(hasCost(4))),8) preference(1,(1,10),1,for(atom(hasCost(3))),8) preference(1,(1,11),1,for(atom(hasPrep(3))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(10,better,66) output(10,better,80) output(10,better,55) output(10,better,47) output(46,better,39) output(46,better,82) output(46,better,65) output(46,better,33) output(46,better,22) output(46,better,68) output(60,better,68) output(60,better,22) output(52,better,66) output(52,better,80) output(52,better,55) output(52,better,47) output(74,better,80) output(74,better,66) output(74,better,55) output(74,better,47) output(39,worse,60) output(39,eq,82) output(82,eq,65) output(65,eq,33) output(68,eq,22) output(10,eq,74) output(52,eq,74) output(66,eq,55) output(55,eq,47) output(66,eq,47) output(39,eq,68) output(46,eq,60) output(82,eq,33) output(39,eq,65) output(39,eq,33) output(39,eq,22)
Optimization: 16 6
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),2) preference(1,(1,3),1,for(atom(hasIngredient(9))),4) preference(1,(1,4),1,for(atom(hasCategory(1))),8) preference(1,(1,5),1,for(atom(hasDifficulty(3))),8) preference(1,(1,6),1,for(atom(hasCost(1))),2) preference(1,(1,7),1,for(atom(hasPrep(5))),4) preference(1,(1,8),1,for(atom(hasPrep(2))),8) preference(1,(1,9),1,for(atom(hasPrepTime(2))),8) preference(1,(1,10),1,for(atom(hasPrep(6))),8) preference(1,(1,11),1,for(atom(hasCategory(4))),7) preference(1,(1,12),1,for(atom(hasCost(2))),8) preference(1,(1,13),1,for(atom(hasIngredient(12))),8) preference(1,(1,14),1,for(atom(hasIngredient(7))),2) preference(1,less(weight)) output(10,better,74) output(10,better,55) output(10,better,47) output(46,better,39) output(46,better,60) output(46,better,82) output(46,better,65) output(46,better,33) output(46,better,22) output(46,better,68) output(60,better,68) output(60,better,22) output(39,better,65) output(39,better,33) output(55,better,47) output(66,better,55) output(66,better,47) output(82,better,65) output(82,better,33) output(52,better,74) output(52,better,47) output(68,better,22) output(74,better,47) output(10,worse,66) output(10,worse,80) output(39,worse,82) output(39,worse,60) output(39,worse,68) output(52,worse,66) output(52,worse,80) output(52,worse,55) output(65,worse,33) output(74,worse,80) output(74,worse,66) output(74,worse,55) output(39,eq,22)
Optimization: 13 14
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(3))),5) preference(1,(1,2),1,for(atom(hasDifficulty(4))),1) preference(1,(1,3),1,for(atom(hasPrepTime(1))),5) preference(1,(1,4),1,for(atom(hasCost(4))),8) preference(1,(1,5),1,for(atom(hasCost(5))),6) preference(1,(1,6),1,for(atom(hasCost(3))),6) preference(1,(1,7),1,for(atom(hasCategory(5))),1) preference(1,(1,8),1,for(atom(hasCategory(2))),6) preference(1,(1,9),1,for(atom(hasDifficulty(3))),1) preference(1,(1,10),1,for(atom(hasPrepTime(2))),2) preference(1,(1,11),1,for(atom(hasPrep(7))),3) preference(1,(1,12),1,for(atom(hasCost(1))),7) preference(1,(1,13),1,for(atom(hasPrep(5))),6) preference(1,(1,14),1,for(atom(hasCategory(3))),6) preference(1,less(weight)) output(10,better,74) output(10,better,66) output(10,better,80) output(10,better,55) output(10,better,47) output(46,better,39) output(46,better,60) output(46,better,82) output(46,better,65) output(46,better,33) output(46,better,22) output(46,better,68) output(60,better,68) output(60,better,22) output(39,better,82) output(39,better,60) output(39,better,68) output(39,better,65) output(39,better,33) output(39,better,22) output(55,better,47) output(66,better,55) output(66,better,47) output(82,better,65) output(82,better,33) output(52,better,74) output(52,better,66) output(52,better,80) output(52,better,55) output(52,better,47) output(65,better,33) output(68,better,22) output(74,better,80) output(74,better,66) output(74,better,55) output(74,better,47)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Progression : 0 [ 2;14] (Error: 6)
Answer: 9
preference(1,(1,1),1,for(atom(hasCost(1))),3) preference(1,(1,2),1,for(atom(hasPrepTime(2))),1) preference(1,(1,4),1,for(atom(hasPrep(5))),2) preference(1,(1,5),1,for(atom(hasIngredient(9))),2) preference(1,(1,6),1,for(atom(hasIngredient(7))),8) preference(1,(1,7),1,for(atom(hasDifficulty(2))),8) preference(1,(1,8),1,for(atom(hasPrep(3))),6) preference(1,(1,10),1,for(atom(hasPrep(7))),3) preference(1,(1,11),1,for(atom(hasCost(4))),5) preference(1,(1,12),1,for(atom(hasDifficulty(1))),3) preference(1,(1,13),1,for(atom(hasCategory(2))),6) preference(1,(1,14),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(10,better,74) output(10,better,66) output(10,better,80) output(10,better,55) output(10,better,47) output(46,better,39) output(46,better,60) output(46,better,82) output(46,better,65) output(46,better,33) output(46,better,22) output(46,better,68) output(60,better,68) output(60,better,22) output(39,better,82) output(39,better,60) output(39,better,68) output(39,better,65) output(39,better,33) output(39,better,22) output(55,better,47) output(66,better,55) output(66,better,47) output(82,better,65) output(82,better,33) output(52,better,74) output(52,better,66) output(52,better,80) output(52,better,55) output(52,better,47) output(65,better,33) output(68,better,22) output(74,better,80) output(74,better,66) output(74,better,55) output(74,better,47)
Optimization: 0 12
Answer: 10
preference(1,(1,1),1,for(atom(hasIngredient(9))),1) preference(1,(1,2),1,for(atom(hasPrepTime(3))),1) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,4),1,for(atom(hasPrep(7))),3) preference(1,(1,7),1,for(atom(hasPrep(3))),8) preference(1,(1,8),1,for(atom(hasCost(4))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),7) preference(1,(1,10),1,for(atom(hasCost(3))),2) preference(1,(1,11),1,for(atom(hasPrep(0))),4) preference(1,(1,13),1,for(atom(hasDifficulty(2))),7) preference(1,(1,14),1,for(atom(hasCost(1))),2) preference(1,less(weight)) output(10,better,74) output(10,better,66) output(10,better,80) output(10,better,55) output(10,better,47) output(46,better,39) output(46,better,60) output(46,better,82) output(46,better,65) output(46,better,33) output(46,better,22) output(46,better,68) output(60,better,68) output(60,better,22) output(39,better,82) output(39,better,60) output(39,better,68) output(39,better,65) output(39,better,33) output(39,better,22) output(55,better,47) output(66,better,55) output(66,better,47) output(82,better,65) output(82,better,33) output(52,better,74) output(52,better,66) output(52,better,80) output(52,better,55) output(52,better,47) output(65,better,33) output(68,better,22) output(74,better,80) output(74,better,66) output(74,better,55) output(74,better,47)
Optimization: 0 11
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.047 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 10+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 298.114s (Solving: 295.37s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 1183.927s
Threads      : 4        (Winner: 4)

Choices      : 6796399  (Domain: 369252)
Conflicts    : 4299394  (Analyzed: 4299392)
Restarts     : 4640     (Average: 926.59 Last: 313977)
Model-Level  : 77.8    
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 4306473  (Deleted: 4109575)
  Binary     : 742      (Ratio:   0.02%)
  Ternary    : 1040     (Ratio:   0.02%)
  Conflict   : 4299392  (Average Length:  542.1 Ratio:  99.84%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7081     (Average Length:   80.2 Ratio:   0.16%) 
  Distributed: 2362     (Ratio:   0.05% Average LBD: 3.45) 
  Integrated : 7086     (Ratio: 300.00% Unit: 6 Average Jumps: 3.83)
Backjumps    : 4299392  (Average:  1.38 Max: 628 Sum: 5951004)
  Executed   : 4299391  (Average:  1.38 Max: 628 Sum: 5950973 Ratio: 100.00%)
  Bounded    : 1        (Average: 31.00 Max:  31 Sum:     31 Ratio:   0.00%)

Rules        : 438402  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14130   
Bodies       : 18925   
  Sum        : 72      
  Count      : 14      
Equivalences : 7110     (Atom=Atom: 373 Body=Body: 158 Other: 6579)
Tight        : Yes
Variables    : 17063    (Eliminated:    0 Frozen: 7739)
Constraints  : 460156   (Binary:  97.2% Ternary:   2.0% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasCategory(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(2)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCategory(2)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(3)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(4)) ; 
  6 :: atom(hasCost(5)) ; 
  6 :: atom(hasCost(3)) ; 
  1 :: atom(hasCategory(5)) ; 
  6 :: atom(hasCategory(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(5)) ; 
  2 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(3)) ; 
  3 :: atom(hasPrep(7)) ; 
  5 :: atom(hasCost(4)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCategory(2)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(3)) ; 
  8 :: atom(hasCost(4)) ; 
  7 :: atom(hasPrep(5)) ; 
  2 :: atom(hasCost(3)) ; 
  4 :: atom(hasPrep(0)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasCost(1)) 
}.
