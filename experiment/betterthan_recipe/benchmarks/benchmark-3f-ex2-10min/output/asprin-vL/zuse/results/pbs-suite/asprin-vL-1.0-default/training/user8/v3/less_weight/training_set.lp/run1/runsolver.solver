asprin_vL version 1.0
Reading from stdin
-:1216:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1226:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1241:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1322:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1583:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1596:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1773:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1902:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1974:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1978:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1978:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1984:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2083:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2109:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2229:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2263:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2285:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1133:1-16: info: no atoms over signature occur in program:
  output/3

-:1125:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1126:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(78,eq,7) output(7,eq,33) output(33,eq,32) output(52,eq,39) output(39,eq,4) output(46,eq,60) output(7,eq,23) output(42,eq,90) output(18,eq,51) output(51,eq,79) output(79,eq,31) output(51,eq,31) output(18,eq,79) output(78,eq,23) output(52,eq,4) output(7,eq,32) output(78,eq,33) output(78,eq,32) output(18,eq,31)
Optimization: 19 0
Answer: 2
preference(1,(1,13),1,for(atom(hasIngredient(10))),8) preference(1,(1,14),1,for(atom(hasCost(4))),8) preference(1,less(weight)) output(51,better,79) output(18,worse,51) output(18,worse,31) output(46,worse,60) output(79,worse,31) output(7,worse,23) output(7,worse,32) output(33,worse,32) output(78,worse,23) output(78,worse,32) output(78,eq,7) output(7,eq,33) output(52,eq,39) output(39,eq,4) output(42,eq,90) output(51,eq,31) output(18,eq,79) output(52,eq,4) output(78,eq,33)
Optimization: 18 2
Answer: 3
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrep(6))),2) preference(1,less(weight)) output(51,better,79) output(51,better,31) output(18,worse,51) output(7,worse,32) output(33,worse,32) output(78,worse,32) output(78,eq,7) output(7,eq,33) output(52,eq,39) output(39,eq,4) output(46,eq,60) output(7,eq,23) output(42,eq,90) output(79,eq,31) output(18,eq,79) output(78,eq,23) output(52,eq,4) output(78,eq,33) output(18,eq,31)
Optimization: 17 14
Answer: 4
preference(1,(1,14),1,for(atom(hasIngredient(7))),8) preference(1,less(weight)) output(46,better,60) output(51,better,79) output(51,better,31) output(33,better,32) output(52,better,39) output(18,worse,51) output(39,worse,4) output(7,worse,33) output(7,worse,23) output(78,worse,23) output(78,worse,33) output(78,eq,7) output(42,eq,90) output(79,eq,31) output(18,eq,79) output(52,eq,4) output(7,eq,32) output(78,eq,32) output(18,eq,31)
Optimization: 14 1
Answer: 5
preference(1,(1,14),1,for(atom(hasPrep(0))),8) preference(1,less(weight)) output(46,better,60) output(51,better,79) output(51,better,31) output(39,better,4) output(52,better,4) output(78,better,7) output(18,worse,51) output(42,worse,90) output(7,worse,33) output(7,worse,23) output(7,worse,32) output(33,eq,32) output(52,eq,39) output(79,eq,31) output(18,eq,79) output(78,eq,23) output(78,eq,33) output(78,eq,32) output(18,eq,31)
Optimization: 13 1
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(7))),7) preference(1,(1,2),1,for(atom(hasDifficulty(3))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),7) preference(1,(1,10),1,for(atom(hasCategory(4))),8) preference(1,(1,13),1,for(atom(hasIngredient(10))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),7) preference(1,less(weight)) output(18,better,79) output(18,better,31) output(51,better,79) output(51,better,31) output(42,better,90) output(7,better,33) output(7,better,23) output(7,better,32) output(78,better,23) output(78,better,33) output(78,better,32) output(46,worse,60) output(79,worse,31) output(52,worse,39) output(52,worse,4) output(78,eq,7) output(33,eq,32) output(39,eq,4) output(18,eq,51)
Optimization: 8 6
Answer: 7
preference(1,(1,1),1,for(atom(hasPrepTime(1))),7) preference(1,(1,7),1,for(atom(hasDifficulty(3))),8) preference(1,(1,10),1,for(atom(hasCategory(4))),8) preference(1,(1,12),1,for(atom(hasPrep(7))),7) preference(1,(1,13),1,for(atom(hasIngredient(10))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),7) preference(1,less(weight)) output(18,better,79) output(18,better,31) output(51,better,79) output(51,better,31) output(39,better,4) output(42,better,90) output(7,better,33) output(7,better,23) output(7,better,32) output(78,better,23) output(78,better,33) output(78,better,32) output(46,worse,60) output(79,worse,31) output(52,worse,39) output(52,worse,4) output(78,eq,7) output(33,eq,32) output(18,eq,51)
Optimization: 7 6
Answer: 8
preference(1,(1,1),1,for(atom(hasCategory(3))),8) preference(1,(1,2),1,for(atom(hasCost(2))),7) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasPrep(7))),8) preference(1,(1,6),1,for(atom(hasPrepTime(1))),7) preference(1,(1,8),1,for(atom(hasCost(1))),8) preference(1,(1,10),1,for(atom(hasPrep(5))),7) preference(1,(1,11),1,for(atom(hasIngredient(3))),7) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,13),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(18,better,31) output(46,better,60) output(51,better,79) output(51,better,31) output(42,better,90) output(79,better,31) output(7,better,33) output(7,better,23) output(7,better,32) output(33,better,32) output(78,better,7) output(78,better,23) output(78,better,33) output(78,better,32) output(52,eq,39) output(39,eq,4) output(52,eq,4)
Optimization: 3 10
Answer: 9
preference(1,(1,1),1,for(atom(hasPrepTime(1))),7) preference(1,(1,2),1,for(atom(hasCost(2))),7) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasPrep(5))),7) preference(1,(1,6),1,for(atom(hasIngredient(5))),8) preference(1,(1,8),1,for(atom(hasCost(1))),8) preference(1,(1,9),1,for(atom(hasPrepTime(2))),8) preference(1,(1,10),1,for(atom(hasDifficulty(4))),7) preference(1,(1,11),1,for(atom(hasIngredient(3))),7) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,13),1,for(atom(hasPrep(7))),8) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(18,better,31) output(46,better,60) output(51,better,79) output(51,better,31) output(39,better,4) output(42,better,90) output(79,better,31) output(7,better,33) output(7,better,23) output(7,better,32) output(33,better,32) output(78,better,7) output(78,better,23) output(78,better,33) output(78,better,32) output(52,worse,39) output(52,eq,4)
Optimization: 2 11
Answer: 10
preference(1,(1,1),1,for(atom(hasCategory(3))),6) preference(1,(1,2),1,for(atom(hasPrep(5))),8) preference(1,(1,4),1,for(atom(hasPrep(7))),7) preference(1,(1,5),1,for(atom(hasCost(1))),6) preference(1,(1,6),1,for(atom(hasPrepTime(1))),8) preference(1,(1,7),1,for(atom(hasCategory(4))),8) preference(1,(1,10),1,for(atom(hasCost(2))),8) preference(1,(1,11),1,for(atom(hasCost(3))),6) preference(1,(1,12),1,for(atom(hasPrep(2))),8) preference(1,(1,13),1,for(atom(hasPrepTime(2))),7) preference(1,(1,14),1,for(atom(hasDifficulty(2))),7) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(18,better,31) output(46,better,60) output(51,better,79) output(51,better,31) output(42,better,90) output(79,better,31) output(7,better,33) output(7,better,23) output(7,better,32) output(33,better,32) output(52,better,39) output(52,better,4) output(78,better,7) output(78,better,23) output(78,better,33) output(78,better,32) output(39,eq,4)
Optimization: 1 11
Answer: 11
preference(1,(1,1),1,for(atom(hasDifficulty(4))),4) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasCategory(3))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),1) preference(1,(1,5),1,for(atom(hasCost(1))),8) preference(1,(1,6),1,for(atom(hasIngredient(3))),3) preference(1,(1,7),1,for(atom(hasPrep(7))),6) preference(1,(1,8),1,for(atom(hasPrep(0))),7) preference(1,(1,9),1,for(atom(hasPrep(5))),6) preference(1,(1,10),1,for(atom(hasPrepTime(2))),8) preference(1,(1,11),1,for(atom(hasCost(2))),1) preference(1,(1,12),1,for(atom(hasIngredient(12))),5) preference(1,(1,13),1,for(atom(hasPrep(2))),6) preference(1,(1,14),1,for(atom(hasPrepTime(3))),2) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(18,better,31) output(46,better,60) output(51,better,79) output(51,better,31) output(39,better,4) output(42,better,90) output(79,better,31) output(7,better,33) output(7,better,23) output(7,better,32) output(33,better,32) output(52,better,39) output(52,better,4) output(78,better,7) output(78,better,23) output(78,better,33) output(78,better,32)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Progression : 0 [ 2;14] (Error: 6)
Answer: 12
preference(1,(1,1),1,for(atom(hasCost(4))),3) preference(1,(1,2),1,for(atom(hasDifficulty(2))),7) preference(1,(1,3),1,for(atom(hasCost(3))),4) preference(1,(1,4),1,for(atom(hasDifficulty(4))),3) preference(1,(1,5),1,for(atom(hasPrepTime(2))),7) preference(1,(1,6),1,for(atom(hasCost(1))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),7) preference(1,(1,8),1,for(atom(hasIngredient(3))),7) preference(1,(1,9),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasPrepTime(1))),1) preference(1,(1,12),1,for(atom(hasCost(2))),8) preference(1,(1,13),1,for(atom(hasCategory(1))),3) preference(1,(1,14),1,for(atom(hasIngredient(12))),3) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(18,better,31) output(46,better,60) output(51,better,79) output(51,better,31) output(39,better,4) output(42,better,90) output(79,better,31) output(7,better,33) output(7,better,23) output(7,better,32) output(33,better,32) output(52,better,39) output(52,better,4) output(78,better,7) output(78,better,23) output(78,better,33) output(78,better,32)
Optimization: 0 13
Answer: 13
preference(1,(1,3),1,for(atom(hasCost(3))),3) preference(1,(1,4),1,for(atom(hasPrep(5))),1) preference(1,(1,5),1,for(atom(hasPrep(1))),2) preference(1,(1,6),1,for(atom(hasDifficulty(2))),5) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,9),1,for(atom(hasPrep(0))),3) preference(1,(1,10),1,for(atom(hasCost(1))),8) preference(1,(1,11),1,for(atom(hasPrep(2))),1) preference(1,(1,12),1,for(atom(hasCategory(3))),5) preference(1,(1,13),1,for(atom(hasPrepTime(2))),5) preference(1,(1,14),1,for(atom(hasIngredient(12))),5) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(18,better,31) output(46,better,60) output(51,better,79) output(51,better,31) output(39,better,4) output(42,better,90) output(79,better,31) output(7,better,33) output(7,better,23) output(7,better,32) output(33,better,32) output(52,better,39) output(52,better,4) output(78,better,7) output(78,better,23) output(78,better,33) output(78,better,32)
Optimization: 0 11
Answer: 14
preference(1,(1,1),1,for(atom(hasPrepTime(2))),4) preference(1,(1,2),1,for(atom(hasCategory(3))),5) preference(1,(1,3),1,for(atom(hasDifficulty(2))),4) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,5),1,for(atom(hasIngredient(12))),1) preference(1,(1,6),1,for(atom(hasPrep(0))),2) preference(1,(1,8),1,for(atom(hasPrepTime(1))),6) preference(1,(1,10),1,for(atom(hasCost(1))),8) preference(1,(1,12),1,for(atom(hasPrep(2))),2) preference(1,(1,14),1,for(atom(hasCost(3))),2) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(18,better,31) output(46,better,60) output(51,better,79) output(51,better,31) output(39,better,4) output(42,better,90) output(79,better,31) output(7,better,33) output(7,better,23) output(7,better,32) output(33,better,32) output(52,better,39) output(52,better,4) output(78,better,7) output(78,better,23) output(78,better,33) output(78,better,32)
Optimization: 0 10
Answer: 15
preference(1,(1,1),1,for(atom(hasPrepTime(2))),7) preference(1,(1,6),1,for(atom(hasCost(1))),6) preference(1,(1,7),1,for(atom(hasPrepTime(1))),8) preference(1,(1,8),1,for(atom(hasPrep(2))),1) preference(1,(1,9),1,for(atom(hasCategory(3))),4) preference(1,(1,10),1,for(atom(hasCost(3))),4) preference(1,(1,11),1,for(atom(hasCost(2))),8) preference(1,(1,13),1,for(atom(hasPrep(0))),3) preference(1,(1,14),1,for(atom(hasIngredient(12))),5) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(18,better,31) output(46,better,60) output(51,better,79) output(51,better,31) output(39,better,4) output(42,better,90) output(79,better,31) output(7,better,33) output(7,better,23) output(7,better,32) output(33,better,32) output(52,better,39) output(52,better,4) output(78,better,7) output(78,better,23) output(78,better,33) output(78,better,32)
Optimization: 0 9
Answer: 16
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,2),1,for(atom(hasPrepTime(1))),5) preference(1,(1,3),1,for(atom(hasCost(1))),8) preference(1,(1,4),1,for(atom(hasCost(2))),5) preference(1,(1,7),1,for(atom(hasPrep(5))),1) preference(1,(1,9),1,for(atom(hasPrep(7))),5) preference(1,(1,12),1,for(atom(hasIngredient(3))),5) preference(1,(1,13),1,for(atom(hasCategory(3))),3) preference(1,less(weight)) output(18,better,51) output(18,better,79) output(18,better,31) output(46,better,60) output(51,better,79) output(51,better,31) output(39,better,4) output(42,better,90) output(79,better,31) output(7,better,33) output(7,better,23) output(7,better,32) output(33,better,32) output(52,better,39) output(52,better,4) output(78,better,7) output(78,better,23) output(78,better,33) output(78,better,32)
Optimization: 0 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.059 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 16+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 597.846s (Solving: 595.62s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 2384.478s
Threads      : 4        (Winner: 4)

Choices      : 12471409 (Domain: 384654)
Conflicts    : 8134977  (Analyzed: 8134975)
Restarts     : 8533     (Average: 953.35 Last: 515357)
Model-Level  : 56.9    
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 8144091  (Deleted: 7747278)
  Binary     : 798      (Ratio:   0.01%)
  Ternary    : 1432     (Ratio:   0.02%)
  Conflict   : 8134975  (Average Length:  634.1 Ratio:  99.89%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 9116     (Average Length:  110.2 Ratio:   0.11%) 
  Distributed: 3042     (Ratio:   0.04% Average LBD: 3.43) 
  Integrated : 9126     (Ratio: 300.00% Unit: 2 Average Jumps: 4.50)
Backjumps    : 8134975  (Average:  1.37 Max: 803 Sum: 11129422)
  Executed   : 8134974  (Average:  1.37 Max: 803 Sum: 11129412 Ratio: 100.00%)
  Bounded    : 1        (Average: 10.00 Max:  10 Sum:     10 Ratio:   0.00%)

Rules        : 279029  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 12472   
Bodies       : 18738   
  Sum        : 38      
  Count      : 14      
Equivalences : 6515     (Atom=Atom: 203 Body=Body: 90 Other: 6222)
Tight        : Yes
Variables    : 17003    (Eliminated:    0 Frozen: 7679)
Constraints  : 302338   (Binary:  95.7% Ternary:   3.1% Other:   1.2%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasCost(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCategory(3)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(5)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(7)) ; 
  6 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCost(2)) ; 
  6 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasCategory(4)) ; 
  4 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(1)) ; 
  3 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCost(2)) ; 
  5 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(4)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(3)) ; 
  3 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(1)) ; 
  7 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(2)) ; 
  3 :: atom(hasCategory(1)) ; 
  3 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(1)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  5 :: atom(hasCategory(3)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCategory(3)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasCost(2)) ; 
  1 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasCost(3)) ; 
  8 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasCost(1)) ; 
  5 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(7)) ; 
  5 :: atom(hasIngredient(3)) ; 
  3 :: atom(hasCategory(3)) 
}.
