asprin_vL version 1.0
Reading from stdin
-:1229:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1239:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1254:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1335:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1596:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1609:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1786:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1915:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1987:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1991:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1991:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1997:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2096:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2122:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2242:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2276:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2298:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1146:1-16: info: no atoms over signature occur in program:
  output/3

-:1138:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1139:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(46,eq,50) output(50,eq,22) output(22,eq,19) output(19,eq,86) output(68,eq,88) output(100,eq,28) output(50,eq,54) output(54,eq,67) output(67,eq,100) output(100,eq,52) output(65,eq,73) output(98,eq,63) output(67,eq,52) output(54,eq,100) output(50,eq,67) output(46,eq,54) output(67,eq,28) output(22,eq,86) output(50,eq,19) output(46,eq,22) output(46,eq,19) output(50,eq,86) output(46,eq,86) output(54,eq,28) output(50,eq,28) output(46,eq,67) output(50,eq,100) output(46,eq,100) output(54,eq,52) output(50,eq,52) output(46,eq,52) output(46,eq,28)
Optimization: 32 0
Answer: 2
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(46,better,54) output(46,better,22) output(46,better,67) output(46,better,100) output(46,better,52) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,100) output(50,better,52) output(22,worse,19) output(22,worse,86) output(67,worse,28) output(54,worse,28) output(100,worse,28) output(46,eq,50) output(19,eq,86) output(68,eq,88) output(54,eq,67) output(67,eq,100) output(100,eq,52) output(65,eq,73) output(98,eq,63) output(67,eq,52) output(54,eq,100) output(50,eq,19) output(46,eq,19) output(50,eq,86) output(46,eq,86) output(50,eq,28) output(54,eq,52) output(46,eq,28)
Optimization: 22 14
Answer: 3
preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,11),1,for(atom(hasCost(4))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),8) preference(1,(1,13),1,for(atom(hasPrepTime(3))),8) preference(1,less(weight)) output(22,better,86) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,28) output(50,better,67) output(50,better,86) output(50,better,28) output(50,better,100) output(54,better,67) output(54,better,100) output(54,better,28) output(19,better,86) output(67,worse,52) output(100,worse,52) output(65,worse,73) output(46,eq,50) output(50,eq,22) output(22,eq,19) output(68,eq,88) output(100,eq,28) output(50,eq,54) output(67,eq,100) output(98,eq,63) output(46,eq,54) output(67,eq,28) output(50,eq,19) output(46,eq,22) output(46,eq,19) output(54,eq,52) output(50,eq,52) output(46,eq,52)
Optimization: 19 4
Answer: 4
preference(1,(1,1),1,for(atom(hasCost(2))),8) preference(1,(1,2),1,for(atom(hasCategory(1))),8) preference(1,(1,3),1,for(atom(hasIngredient(3))),8) preference(1,(1,4),1,for(atom(hasPrep(2))),8) preference(1,(1,8),1,for(atom(hasIngredient(10))),7) preference(1,(1,9),1,for(atom(hasPrep(6))),6) preference(1,(1,11),1,for(atom(hasPrepTime(1))),8) preference(1,(1,12),1,for(atom(hasPrepTime(2))),7) preference(1,(1,13),1,for(atom(hasDifficulty(2))),8) preference(1,(1,14),1,for(atom(hasIngredient(7))),6) preference(1,less(weight)) output(46,better,22) output(46,better,19) output(46,better,100) output(46,better,52) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(54,better,100) output(54,better,52) output(98,better,63) output(22,worse,86) output(46,worse,50) output(46,worse,86) output(46,worse,28) output(50,worse,28) output(67,worse,28) output(54,worse,28) output(19,worse,86) output(100,worse,28) output(68,worse,88) output(22,eq,19) output(54,eq,67) output(100,eq,52) output(65,eq,73) output(46,eq,54) output(50,eq,86) output(46,eq,67)
Optimization: 17 10
Answer: 5
preference(1,(1,3),1,for(atom(hasPrepTime(3))),8) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCategory(4))),8) preference(1,(1,14),1,for(atom(hasIngredient(12))),8) preference(1,less(weight)) output(46,better,22) output(46,better,86) output(46,better,67) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,67) output(50,better,86) output(50,better,28) output(50,better,52) output(54,better,67) output(54,better,28) output(54,better,52) output(19,better,86) output(100,better,28) output(100,better,52) output(22,worse,19) output(67,worse,100) output(46,eq,50) output(68,eq,88) output(50,eq,54) output(65,eq,73) output(98,eq,63) output(67,eq,52) output(54,eq,100) output(46,eq,54) output(67,eq,28) output(22,eq,86) output(50,eq,19) output(46,eq,19) output(50,eq,100) output(46,eq,100)
Optimization: 16 5
Answer: 6
preference(1,(1,1),1,for(atom(hasCost(4))),8) preference(1,(1,4),1,for(atom(hasPrepTime(3))),8) preference(1,(1,5),1,for(atom(hasPrep(4))),8) preference(1,(1,6),1,for(atom(hasPrep(0))),8) preference(1,(1,7),1,for(atom(hasCategory(4))),8) preference(1,(1,14),1,for(atom(hasIngredient(12))),8) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,19) output(46,better,86) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,100) output(54,better,28) output(54,better,52) output(68,worse,88) output(46,eq,50) output(50,eq,22) output(19,eq,86) output(100,eq,28) output(50,eq,54) output(54,eq,67) output(100,eq,52) output(65,eq,73) output(98,eq,63) output(50,eq,67) output(46,eq,54) output(46,eq,22) output(46,eq,67)
Optimization: 14 6
Answer: 7
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasIngredient(7))),8) preference(1,(1,3),1,for(atom(hasCategory(2))),7) preference(1,(1,5),1,for(atom(hasDifficulty(3))),7) preference(1,(1,6),1,for(atom(hasIngredient(4))),7) preference(1,(1,7),1,for(atom(hasCategory(4))),8) preference(1,(1,9),1,for(atom(hasIngredient(3))),7) preference(1,(1,10),1,for(atom(hasCost(2))),7) preference(1,(1,11),1,for(atom(hasDifficulty(1))),8) preference(1,(1,12),1,for(atom(hasPrep(4))),8) preference(1,(1,13),1,for(atom(hasPrep(6))),8) preference(1,(1,14),1,for(atom(hasCategory(1))),7) preference(1,less(weight)) output(46,better,50) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,100) output(46,better,52) output(46,better,28) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(65,better,73) output(68,better,88) output(22,worse,19) output(50,worse,54) output(50,worse,67) output(50,worse,19) output(50,worse,100) output(50,eq,22) output(54,eq,67) output(46,eq,54) output(22,eq,86) output(50,eq,86) output(50,eq,28) output(46,eq,67) output(50,eq,52)
Optimization: 13 12
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(6))),7) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasCost(3))),7) preference(1,(1,4),1,for(atom(hasPrepTime(3))),7) preference(1,(1,5),1,for(atom(hasPrep(1))),7) preference(1,(1,6),1,for(atom(hasIngredient(9))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),8) preference(1,(1,11),1,for(atom(hasPrepTime(2))),8) preference(1,(1,12),1,for(atom(hasIngredient(7))),8) preference(1,(1,13),1,for(atom(hasIngredient(10))),7) preference(1,(1,14),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,54) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,worse,67) output(65,worse,73) output(50,eq,22) output(19,eq,86) output(68,eq,88) output(100,eq,28) output(100,eq,52) output(98,eq,63) output(54,eq,100) output(50,eq,67) output(54,eq,28) output(54,eq,52)
Optimization: 12 12
Answer: 9
preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasCost(3))),7) preference(1,(1,5),1,for(atom(hasPrepTime(3))),7) preference(1,(1,6),1,for(atom(hasPrep(4))),8) preference(1,(1,7),1,for(atom(hasIngredient(10))),7) preference(1,(1,8),1,for(atom(hasPrep(1))),7) preference(1,(1,9),1,for(atom(hasDifficulty(1))),8) preference(1,(1,11),1,for(atom(hasIngredient(9))),8) preference(1,(1,12),1,for(atom(hasIngredient(7))),8) preference(1,(1,13),1,for(atom(hasPrep(6))),8) preference(1,(1,14),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,54) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(98,better,63) output(54,worse,67) output(50,eq,22) output(19,eq,86) output(68,eq,88) output(100,eq,28) output(100,eq,52) output(65,eq,73) output(54,eq,100) output(50,eq,67) output(54,eq,28) output(54,eq,52)
Optimization: 11 11
Answer: 10
preference(1,(1,1),1,for(atom(hasDifficulty(1))),7) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasPrep(1))),8) preference(1,(1,4),1,for(atom(hasCategory(3))),8) preference(1,(1,5),1,for(atom(hasDifficulty(3))),8) preference(1,(1,6),1,for(atom(hasPrep(4))),8) preference(1,(1,7),1,for(atom(hasIngredient(12))),8) preference(1,(1,9),1,for(atom(hasIngredient(4))),8) preference(1,(1,11),1,for(atom(hasPrepTime(3))),8) preference(1,(1,12),1,for(atom(hasCost(3))),7) preference(1,(1,13),1,for(atom(hasIngredient(7))),7) preference(1,(1,14),1,for(atom(hasPrep(6))),7) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,100) output(54,better,28) output(54,better,52) output(50,eq,22) output(19,eq,86) output(68,eq,88) output(100,eq,28) output(54,eq,67) output(100,eq,52) output(65,eq,73) output(98,eq,63)
Optimization: 8 12
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(0))),8) preference(1,(1,2),1,for(atom(hasCategory(4))),7) preference(1,(1,3),1,for(atom(hasCategory(3))),8) preference(1,(1,4),1,for(atom(hasPrepTime(3))),8) preference(1,(1,5),1,for(atom(hasPrep(4))),8) preference(1,(1,6),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasIngredient(4))),8) preference(1,(1,11),1,for(atom(hasIngredient(12))),8) preference(1,(1,12),1,for(atom(hasPrep(6))),7) preference(1,(1,13),1,for(atom(hasIngredient(7))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),8) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,100) output(54,better,28) output(54,better,52) output(98,better,63) output(50,eq,22) output(19,eq,86) output(68,eq,88) output(100,eq,28) output(54,eq,67) output(100,eq,52) output(65,eq,73)
Optimization: 7 13
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(1))),7) preference(1,(1,2),1,for(atom(hasPrep(0))),8) preference(1,(1,3),1,for(atom(hasPrepTime(3))),8) preference(1,(1,4),1,for(atom(hasDifficulty(3))),7) preference(1,(1,5),1,for(atom(hasPrep(4))),8) preference(1,(1,6),1,for(atom(hasCategory(4))),7) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,8),1,for(atom(hasIngredient(9))),7) preference(1,(1,9),1,for(atom(hasCost(1))),7) preference(1,(1,10),1,for(atom(hasIngredient(4))),8) preference(1,(1,11),1,for(atom(hasIngredient(12))),8) preference(1,(1,12),1,for(atom(hasPrep(6))),8) preference(1,(1,13),1,for(atom(hasIngredient(7))),7) preference(1,(1,14),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(98,better,63) output(100,better,28) output(100,better,52) output(50,eq,22) output(19,eq,86) output(68,eq,88) output(50,eq,54) output(67,eq,100) output(65,eq,73)
Optimization: 6 14
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(6))),7) preference(1,(1,2),1,for(atom(hasPrep(0))),8) preference(1,(1,3),1,for(atom(hasPrepTime(3))),7) preference(1,(1,4),1,for(atom(hasPrep(4))),7) preference(1,(1,5),1,for(atom(hasDifficulty(1))),7) preference(1,(1,6),1,for(atom(hasCategory(4))),8) preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasCost(1))),7) preference(1,(1,10),1,for(atom(hasIngredient(4))),8) preference(1,(1,11),1,for(atom(hasIngredient(12))),8) preference(1,(1,13),1,for(atom(hasIngredient(9))),7) preference(1,(1,14),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(46,eq,50) output(68,eq,88) output(100,eq,28) output(100,eq,52) output(65,eq,73)
Optimization: 5 13
Answer: 14
preference(1,(1,1),1,for(atom(hasIngredient(9))),7) preference(1,(1,2),1,for(atom(hasPrep(6))),8) preference(1,(1,3),1,for(atom(hasPrepTime(3))),8) preference(1,(1,5),1,for(atom(hasIngredient(12))),8) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCost(3))),8) preference(1,(1,8),1,for(atom(hasPrep(4))),8) preference(1,(1,9),1,for(atom(hasCost(1))),7) preference(1,(1,10),1,for(atom(hasDifficulty(3))),7) preference(1,(1,11),1,for(atom(hasDifficulty(1))),7) preference(1,(1,12),1,for(atom(hasCategory(4))),7) preference(1,(1,13),1,for(atom(hasCategory(3))),8) preference(1,(1,14),1,for(atom(hasPrep(0))),8) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(46,eq,50) output(68,eq,88) output(67,eq,100) output(65,eq,73)
Optimization: 4 13
Answer: 15
preference(1,(1,1),1,for(atom(hasPrep(1))),5) preference(1,(1,2),1,for(atom(hasCost(2))),7) preference(1,(1,3),1,for(atom(hasIngredient(12))),2) preference(1,(1,4),1,for(atom(hasDifficulty(2))),4) preference(1,(1,5),1,for(atom(hasCategory(3))),6) preference(1,(1,6),1,for(atom(hasPrep(5))),1) preference(1,(1,7),1,for(atom(hasPrepTime(2))),8) preference(1,(1,8),1,for(atom(hasCost(3))),3) preference(1,(1,9),1,for(atom(hasPrepTime(1))),1) preference(1,(1,10),1,for(atom(hasCategory(1))),2) preference(1,(1,11),1,for(atom(hasCategory(4))),8) preference(1,(1,13),1,for(atom(hasDifficulty(1))),4) preference(1,(1,14),1,for(atom(hasDifficulty(3))),7) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(100,better,28) output(100,better,52) output(65,better,73) output(98,worse,63) output(68,worse,88) output(46,eq,50)
Optimization: 3 13
Answer: 16
preference(1,(1,1),1,for(atom(hasCategory(1))),3) preference(1,(1,2),1,for(atom(hasPrep(4))),8) preference(1,(1,3),1,for(atom(hasCost(3))),6) preference(1,(1,4),1,for(atom(hasCategory(4))),5) preference(1,(1,5),1,for(atom(hasPrepTime(2))),1) preference(1,(1,6),1,for(atom(hasIngredient(7))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),7) preference(1,(1,8),1,for(atom(hasPrep(6))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),2) preference(1,(1,10),1,for(atom(hasIngredient(3))),3) preference(1,(1,11),1,for(atom(hasCost(2))),2) preference(1,(1,12),1,for(atom(hasIngredient(4))),7) preference(1,(1,13),1,for(atom(hasPrepTime(3))),4) preference(1,(1,14),1,for(atom(hasPrepTime(1))),2) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(65,better,73) output(68,worse,88) output(50,eq,54)
Optimization: 2 14
Answer: 17
preference(1,(1,1),1,for(atom(hasCost(3))),6) preference(1,(1,2),1,for(atom(hasIngredient(7))),5) preference(1,(1,3),1,for(atom(hasPrepTime(3))),5) preference(1,(1,4),1,for(atom(hasPrep(6))),1) preference(1,(1,5),1,for(atom(hasDifficulty(2))),5) preference(1,(1,6),1,for(atom(hasCategory(4))),6) preference(1,(1,7),1,for(atom(hasPrep(5))),5) preference(1,(1,8),1,for(atom(hasPrepTime(2))),2) preference(1,(1,9),1,for(atom(hasCategory(3))),5) preference(1,(1,10),1,for(atom(hasIngredient(3))),3) preference(1,(1,11),1,for(atom(hasDifficulty(1))),2) preference(1,(1,12),1,for(atom(hasCategory(1))),3) preference(1,(1,13),1,for(atom(hasCost(2))),1) preference(1,(1,14),1,for(atom(hasPrep(4))),4) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(65,better,73) output(68,better,88) output(46,eq,50)
Optimization: 1 14
Answer: 18
preference(1,(1,1),1,for(atom(hasPrep(5))),7) preference(1,(1,2),1,for(atom(hasPrep(0))),6) preference(1,(1,3),1,for(atom(hasDifficulty(2))),1) preference(1,(1,4),1,for(atom(hasIngredient(10))),1) preference(1,(1,5),1,for(atom(hasCost(3))),5) preference(1,(1,6),1,for(atom(hasCategory(4))),8) preference(1,(1,7),1,for(atom(hasPrepTime(2))),2) preference(1,(1,8),1,for(atom(hasCategory(1))),1) preference(1,(1,9),1,for(atom(hasDifficulty(1))),8) preference(1,(1,10),1,for(atom(hasPrep(6))),7) preference(1,(1,11),1,for(atom(hasPrepTime(3))),5) preference(1,(1,12),1,for(atom(hasIngredient(12))),8) preference(1,(1,13),1,for(atom(hasPrep(1))),6) preference(1,(1,14),1,for(atom(hasIngredient(7))),7) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(65,better,73) output(68,better,88)
Optimization: 0 14
Answer: 19
preference(1,(1,1),1,for(atom(hasPrep(5))),7) preference(1,(1,3),1,for(atom(hasDifficulty(2))),1) preference(1,(1,4),1,for(atom(hasIngredient(10))),1) preference(1,(1,5),1,for(atom(hasCost(3))),5) preference(1,(1,6),1,for(atom(hasCategory(4))),8) preference(1,(1,7),1,for(atom(hasIngredient(12))),8) preference(1,(1,8),1,for(atom(hasCategory(1))),1) preference(1,(1,9),1,for(atom(hasDifficulty(1))),8) preference(1,(1,10),1,for(atom(hasPrep(6))),7) preference(1,(1,11),1,for(atom(hasPrepTime(3))),5) preference(1,(1,12),1,for(atom(hasPrepTime(2))),2) preference(1,(1,13),1,for(atom(hasPrep(1))),6) preference(1,(1,14),1,for(atom(hasIngredient(7))),7) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(65,better,73) output(68,better,88)
Optimization: 0 13
Progression : 0 [ 1;13] (Error: 12)
Answer: 20
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,2),1,for(atom(hasCost(3))),4) preference(1,(1,3),1,for(atom(hasDifficulty(2))),8) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasPrep(6))),7) preference(1,(1,6),1,for(atom(hasCategory(4))),4) preference(1,(1,7),1,for(atom(hasPrep(1))),6) preference(1,(1,8),1,for(atom(hasDifficulty(3))),7) preference(1,(1,9),1,for(atom(hasPrepTime(3))),3) preference(1,(1,10),1,for(atom(hasCategory(1))),1) preference(1,(1,11),1,for(atom(hasPrepTime(1))),8) preference(1,(1,12),1,for(atom(hasIngredient(7))),4) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(65,better,73) output(68,better,88)
Optimization: 0 12
Progression : 0 [ 2;12] (Error: 5)
Answer: 21
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,2),1,for(atom(hasPrep(1))),4) preference(1,(1,3),1,for(atom(hasPrep(6))),8) preference(1,(1,4),1,for(atom(hasCategory(1))),5) preference(1,(1,5),1,for(atom(hasPrep(4))),8) preference(1,(1,6),1,for(atom(hasCategory(4))),6) preference(1,(1,7),1,for(atom(hasCost(3))),7) preference(1,(1,8),1,for(atom(hasPrepTime(3))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),6) preference(1,(1,11),1,for(atom(hasDifficulty(2))),5) preference(1,(1,13),1,for(atom(hasIngredient(7))),1) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(65,better,73) output(68,better,88)
Optimization: 0 11
Progression : 0 [ 3;11] (Error: 2.66667)
Answer: 22
preference(1,(1,1),1,for(atom(hasPrep(6))),5) preference(1,(1,3),1,for(atom(hasPrep(1))),3) preference(1,(1,5),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasCategory(1))),2) preference(1,(1,8),1,for(atom(hasPrepTime(3))),5) preference(1,(1,9),1,for(atom(hasCost(3))),8) preference(1,(1,11),1,for(atom(hasCost(2))),2) preference(1,(1,12),1,for(atom(hasCategory(4))),8) preference(1,(1,13),1,for(atom(hasPrep(5))),4) preference(1,(1,14),1,for(atom(hasIngredient(7))),1) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(65,better,73) output(68,better,88)
Optimization: 0 10
Answer: 23
preference(1,(1,2),1,for(atom(hasPrep(6))),5) preference(1,(1,4),1,for(atom(hasPrep(1))),3) preference(1,(1,5),1,for(atom(hasDifficulty(2))),2) preference(1,(1,6),1,for(atom(hasCategory(1))),2) preference(1,(1,8),1,for(atom(hasPrepTime(3))),5) preference(1,(1,9),1,for(atom(hasCost(3))),8) preference(1,(1,12),1,for(atom(hasCategory(4))),8) preference(1,(1,13),1,for(atom(hasPrep(5))),4) preference(1,(1,14),1,for(atom(hasIngredient(7))),1) preference(1,less(weight)) output(22,better,19) output(22,better,86) output(46,better,50) output(46,better,54) output(46,better,22) output(46,better,19) output(46,better,86) output(46,better,67) output(46,better,100) output(46,better,52) output(46,better,28) output(50,better,22) output(50,better,54) output(50,better,67) output(50,better,19) output(50,better,86) output(50,better,28) output(50,better,100) output(50,better,52) output(67,better,100) output(67,better,52) output(67,better,28) output(54,better,67) output(54,better,100) output(54,better,28) output(54,better,52) output(19,better,86) output(98,better,63) output(100,better,28) output(100,better,52) output(65,better,73) output(68,better,88)
Optimization: 0 9
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.085 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 23+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 598.599s (Solving: 596.04s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2386.463s
Threads      : 4        (Winner: 4)

Choices      : 12073492 (Domain: 357054)
Conflicts    : 7820046  (Analyzed: 7820043)
Restarts     : 6777     (Average: 1153.91 Last: 428791)
Model-Level  : 74.0    
Problems     : 9        (Average Length: 0.44 Splits: 0)
Lemmas       : 7834526  (Deleted: 7404302)
  Binary     : 1908     (Ratio:   0.02%)
  Ternary    : 2719     (Ratio:   0.03%)
  Conflict   : 7820043  (Average Length:  571.9 Ratio:  99.82%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 14483    (Average Length:   30.0 Ratio:   0.18%) 
  Distributed: 4828     (Ratio:   0.06% Average LBD: 3.35) 
  Integrated : 14484    (Ratio: 300.00% Unit: 16 Average Jumps: 11.69)
Backjumps    : 7820043  (Average:  1.40 Max: 903 Sum: 10924666)
  Executed   : 7820041  (Average:  1.40 Max: 903 Sum: 10924642 Ratio: 100.00%)
  Bounded    : 2        (Average: 12.00 Max:  23 Sum:     24 Ratio:   0.00%)

Rules        : 400158  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 13746   
Bodies       : 18881   
  Sum        : 64      
  Count      : 14      
Equivalences : 6970     (Atom=Atom: 333 Body=Body: 142 Other: 6495)
Tight        : Yes
Variables    : 17055    (Eliminated:    0 Frozen: 7731)
Constraints  : 422284   (Binary:  96.9% Ternary:   2.2% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(4)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(1)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrep(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(1)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(0)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasPrep(6)) ; 
  7 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCategory(3)) ; 
  7 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrep(6)) ; 
  7 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasCategory(3)) ; 
  8 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(1)) ; 
  7 :: atom(hasCost(2)) ; 
  2 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasCategory(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(3)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCategory(4)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  6 :: atom(hasCost(3)) ; 
  5 :: atom(hasCategory(4)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasIngredient(7)) ; 
  7 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrep(5)) ; 
  3 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasCost(2)) ; 
  7 :: atom(hasIngredient(4)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(3)) ; 
  5 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(6)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasCategory(4)) ; 
  5 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCategory(3)) ; 
  3 :: atom(hasIngredient(3)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(0)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasIngredient(10)) ; 
  5 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(4)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasCategory(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(5)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasIngredient(10)) ; 
  5 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasCategory(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(1)) ; 
  7 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(6)) ; 
  4 :: atom(hasCategory(4)) ; 
  6 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  5 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  6 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(5)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(1)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasCategory(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCost(3)) ; 
  2 :: atom(hasCost(2)) ; 
  8 :: atom(hasCategory(4)) ; 
  4 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(1)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasCategory(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(4)) ; 
  4 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(7)) 
}.
