asprin_vL version 1.0
Reading from stdin
-:1232:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1242:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1257:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1338:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1599:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1612:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1789:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1918:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1990:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1994:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1994:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2000:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2099:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2125:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2245:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2279:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2301:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1149:1-16: info: no atoms over signature occur in program:
  output/3

-:1141:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1142:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(33,eq,90) output(90,eq,9) output(9,eq,100) output(79,eq,44) output(44,eq,51) output(67,eq,16) output(58,eq,90) output(90,eq,77) output(92,eq,10) output(10,eq,22) output(84,eq,16) output(16,eq,65) output(65,eq,79) output(16,eq,79) output(67,eq,65) output(84,eq,65) output(92,eq,22) output(33,eq,77) output(58,eq,77) output(79,eq,51) output(65,eq,44) output(90,eq,100) output(33,eq,9) output(58,eq,9) output(33,eq,100) output(58,eq,100) output(16,eq,44) output(67,eq,44) output(84,eq,44) output(65,eq,51) output(16,eq,51) output(67,eq,79) output(84,eq,79) output(67,eq,51) output(84,eq,51)
Optimization: 35 0
Answer: 2
preference(1,(1,1),1,for(atom(hasIngredient(9))),6) preference(1,(1,2),1,for(atom(hasCost(2))),5) preference(1,(1,7),1,for(atom(hasIngredient(10))),7) preference(1,(1,11),1,for(atom(hasDifficulty(2))),4) preference(1,(1,13),1,for(atom(hasIngredient(4))),8) preference(1,(1,14),1,for(atom(hasCategory(3))),3) preference(1,less(weight)) output(84,better,16) output(84,better,65) output(84,better,79) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(10,worse,22) output(67,worse,16) output(67,worse,65) output(67,worse,44) output(67,worse,79) output(67,worse,51) output(84,worse,44) output(84,worse,51) output(9,worse,100) output(79,worse,44) output(79,worse,51) output(92,worse,10) output(92,worse,22) output(16,worse,65) output(16,worse,79) output(16,worse,44) output(16,worse,51) output(58,worse,90) output(58,worse,77) output(58,worse,9) output(58,worse,100) output(65,worse,44) output(65,worse,51) output(90,worse,77) output(90,worse,100) output(90,eq,9) output(65,eq,79)
Optimization: 27 6
Answer: 3
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,2),1,for(atom(hasCategory(2))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),1) preference(1,(1,4),1,for(atom(hasCategory(4))),1) preference(1,(1,5),1,for(atom(hasCategory(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),1) preference(1,(1,7),1,for(atom(hasCost(2))),1) preference(1,(1,8),1,for(atom(hasCost(3))),1) preference(1,(1,9),1,for(atom(hasCost(4))),1) preference(1,(1,10),1,for(atom(hasCost(5))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),1) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasPrep(0))),2) preference(1,less(weight)) output(67,better,16) output(67,better,79) output(84,better,16) output(84,better,79) output(33,better,77) output(33,better,9) output(33,better,100) output(58,better,77) output(58,better,9) output(58,better,100) output(65,better,79) output(90,better,9) output(90,better,77) output(90,better,100) output(10,worse,22) output(79,worse,44) output(79,worse,51) output(92,worse,22) output(16,worse,65) output(16,worse,44) output(16,worse,51) output(33,eq,90) output(9,eq,100) output(44,eq,51) output(58,eq,90) output(92,eq,10) output(16,eq,79) output(67,eq,65) output(84,eq,65) output(65,eq,44) output(67,eq,44) output(84,eq,44) output(65,eq,51) output(67,eq,51) output(84,eq,51)
Optimization: 21 14
Answer: 4
preference(1,(1,13),1,for(atom(hasPrep(4))),4) preference(1,(1,14),1,for(atom(hasPrepTime(3))),4) preference(1,less(weight)) output(67,better,65) output(67,better,44) output(67,better,51) output(84,better,65) output(84,better,44) output(84,better,51) output(9,better,100) output(79,better,44) output(79,better,51) output(92,better,10) output(16,better,65) output(16,better,44) output(16,better,51) output(33,better,100) output(90,better,100) output(10,worse,22) output(58,worse,90) output(58,worse,77) output(58,worse,9) output(65,worse,79) output(33,eq,90) output(90,eq,9) output(44,eq,51) output(67,eq,16) output(90,eq,77) output(84,eq,16) output(16,eq,79) output(92,eq,22) output(33,eq,77) output(65,eq,44) output(33,eq,9) output(58,eq,100) output(65,eq,51) output(67,eq,79) output(84,eq,79)
Optimization: 20 2
Answer: 5
preference(1,(1,13),1,for(atom(hasCategory(3))),4) preference(1,(1,14),1,for(atom(hasPrepTime(3))),4) preference(1,less(weight)) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(33,better,77) output(33,better,9) output(33,better,100) output(90,better,9) output(90,better,77) output(90,better,100) output(10,worse,22) output(92,worse,22) output(58,worse,90) output(33,eq,90) output(9,eq,100) output(79,eq,44) output(44,eq,51) output(67,eq,16) output(92,eq,10) output(84,eq,16) output(65,eq,79) output(58,eq,77) output(79,eq,51) output(65,eq,44) output(58,eq,9) output(58,eq,100) output(65,eq,51)
Optimization: 17 2
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(4))),4) preference(1,(1,3),1,for(atom(hasDifficulty(4))),4) preference(1,(1,4),1,for(atom(hasIngredient(8))),4) preference(1,(1,5),1,for(atom(hasCategory(2))),4) preference(1,(1,6),1,for(atom(hasIngredient(1))),4) preference(1,(1,7),1,for(atom(hasIngredient(2))),4) preference(1,(1,8),1,for(atom(hasDifficulty(3))),4) preference(1,(1,9),1,for(atom(hasPrep(3))),4) preference(1,(1,10),1,for(atom(hasCategory(5))),4) preference(1,(1,11),1,for(atom(hasCost(5))),4) preference(1,(1,12),1,for(atom(hasPrepTime(1))),4) preference(1,less(weight)) output(67,better,16) output(67,better,44) output(67,better,51) output(84,better,16) output(84,better,44) output(84,better,51) output(79,better,44) output(79,better,51) output(92,better,10) output(33,better,77) output(33,better,9) output(33,better,100) output(58,better,77) output(58,better,9) output(58,better,100) output(65,better,44) output(65,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(10,worse,22) output(16,worse,65) output(16,worse,79) output(33,eq,90) output(9,eq,100) output(44,eq,51) output(58,eq,90) output(65,eq,79) output(67,eq,65) output(84,eq,65) output(92,eq,22) output(16,eq,44) output(16,eq,51) output(67,eq,79) output(84,eq,79)
Optimization: 15 11
Answer: 7
preference(1,(1,3),1,for(atom(hasPrep(4))),4) preference(1,(1,5),1,for(atom(hasCategory(2))),4) preference(1,(1,6),1,for(atom(hasIngredient(1))),4) preference(1,(1,7),1,for(atom(hasIngredient(5))),4) preference(1,(1,8),1,for(atom(hasDifficulty(4))),4) preference(1,(1,9),1,for(atom(hasCategory(5))),4) preference(1,(1,10),1,for(atom(hasCost(5))),4) preference(1,(1,11),1,for(atom(hasCategory(3))),4) preference(1,(1,12),1,for(atom(hasDifficulty(3))),4) preference(1,(1,14),1,for(atom(hasCost(3))),4) preference(1,less(weight)) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(33,better,77) output(33,better,9) output(33,better,100) output(58,better,77) output(58,better,9) output(58,better,100) output(90,better,9) output(90,better,77) output(90,better,100) output(10,worse,22) output(92,worse,22) output(33,eq,90) output(9,eq,100) output(79,eq,44) output(44,eq,51) output(67,eq,16) output(58,eq,90) output(92,eq,10) output(84,eq,16) output(65,eq,79) output(79,eq,51) output(65,eq,44) output(65,eq,51)
Optimization: 14 10
Answer: 8
preference(1,(1,1),1,for(atom(hasIngredient(9))),6) preference(1,(1,2),1,for(atom(hasPrep(0))),7) preference(1,(1,3),1,for(atom(hasDifficulty(3))),6) preference(1,(1,4),1,for(atom(hasPrep(5))),1) preference(1,(1,5),1,for(atom(hasCost(1))),5) preference(1,(1,6),1,for(atom(hasCost(3))),5) preference(1,(1,7),1,for(atom(hasPrep(7))),5) preference(1,(1,8),1,for(atom(hasCategory(3))),3) preference(1,(1,9),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasIngredient(3))),4) preference(1,(1,11),1,for(atom(hasDifficulty(2))),4) preference(1,(1,12),1,for(atom(hasPrep(4))),6) preference(1,(1,13),1,for(atom(hasCategory(1))),7) preference(1,(1,14),1,for(atom(hasDifficulty(4))),8) preference(1,less(weight)) output(10,better,22) output(67,better,16) output(67,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(9,better,100) output(79,better,51) output(16,better,51) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(58,better,9) output(58,better,100) output(65,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(67,worse,65) output(67,worse,44) output(67,worse,79) output(92,worse,10) output(92,worse,22) output(16,worse,65) output(16,worse,79) output(16,worse,44) output(58,worse,90) output(79,eq,44) output(65,eq,79) output(58,eq,77) output(65,eq,44)
Optimization: 13 14
Answer: 9
preference(1,(1,1),1,for(atom(hasCategory(3))),8) preference(1,(1,2),1,for(atom(hasPrepTime(1))),4) preference(1,(1,3),1,for(atom(hasPrep(1))),4) preference(1,(1,4),1,for(atom(hasIngredient(3))),4) preference(1,(1,5),1,for(atom(hasCost(3))),8) preference(1,(1,6),1,for(atom(hasDifficulty(4))),8) preference(1,(1,7),1,for(atom(hasPrep(4))),8) preference(1,(1,8),1,for(atom(hasPrep(3))),4) preference(1,(1,9),1,for(atom(hasIngredient(8))),4) preference(1,(1,10),1,for(atom(hasIngredient(4))),8) preference(1,(1,11),1,for(atom(hasCategory(5))),4) preference(1,(1,14),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(10,better,22) output(67,better,44) output(67,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(9,better,100) output(79,better,44) output(79,better,51) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(33,better,77) output(33,better,9) output(33,better,100) output(58,better,77) output(58,better,9) output(58,better,100) output(65,better,44) output(65,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(67,worse,16) output(92,worse,10) output(33,worse,90) output(58,worse,90) output(44,eq,51) output(65,eq,79) output(67,eq,65) output(92,eq,22) output(67,eq,79)
Optimization: 9 12
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(5))),4) preference(1,(1,2),1,for(atom(hasPrepTime(1))),4) preference(1,(1,3),1,for(atom(hasIngredient(3))),4) preference(1,(1,4),1,for(atom(hasDifficulty(4))),8) preference(1,(1,5),1,for(atom(hasIngredient(8))),4) preference(1,(1,6),1,for(atom(hasIngredient(4))),4) preference(1,(1,7),1,for(atom(hasPrep(3))),4) preference(1,(1,8),1,for(atom(hasCategory(2))),4) preference(1,(1,9),1,for(atom(hasIngredient(2))),4) preference(1,(1,10),1,for(atom(hasCost(5))),4) preference(1,(1,11),1,for(atom(hasPrep(4))),4) preference(1,(1,12),1,for(atom(hasCost(3))),8) preference(1,(1,14),1,for(atom(hasCategory(3))),8) preference(1,less(weight)) output(10,better,22) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(9,better,100) output(79,better,44) output(79,better,51) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(33,better,77) output(33,better,9) output(33,better,100) output(58,better,77) output(58,better,9) output(58,better,100) output(65,better,44) output(65,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(92,worse,10) output(92,worse,22) output(58,worse,90) output(33,eq,90) output(44,eq,51) output(67,eq,16) output(65,eq,79)
Optimization: 7 13
Answer: 11
preference(1,(1,1),1,for(atom(hasCost(4))),4) preference(1,(1,2),1,for(atom(hasIngredient(4))),5) preference(1,(1,3),1,for(atom(hasCategory(4))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),8) preference(1,(1,5),1,for(atom(hasPrep(4))),6) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasPrep(5))),6) preference(1,(1,8),1,for(atom(hasCategory(3))),7) preference(1,(1,9),1,for(atom(hasIngredient(3))),4) preference(1,(1,10),1,for(atom(hasIngredient(10))),4) preference(1,(1,11),1,for(atom(hasPrep(2))),6) preference(1,(1,12),1,for(atom(hasPrepTime(3))),5) preference(1,(1,13),1,for(atom(hasPrep(7))),1) preference(1,(1,14),1,for(atom(hasDifficulty(3))),1) preference(1,less(weight)) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(9,better,100) output(92,better,10) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(58,better,77) output(58,better,9) output(58,better,100) output(65,better,79) output(65,better,44) output(65,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(10,worse,22) output(79,worse,44) output(79,worse,51) output(92,worse,22) output(44,worse,51) output(58,worse,90)
Optimization: 6 14
Answer: 12
preference(1,(1,1),1,for(atom(hasCost(4))),4) preference(1,(1,2),1,for(atom(hasIngredient(4))),5) preference(1,(1,3),1,for(atom(hasCategory(4))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),8) preference(1,(1,5),1,for(atom(hasPrep(4))),6) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasDifficulty(3))),3) preference(1,(1,8),1,for(atom(hasCategory(3))),7) preference(1,(1,9),1,for(atom(hasIngredient(3))),4) preference(1,(1,10),1,for(atom(hasIngredient(10))),4) preference(1,(1,11),1,for(atom(hasPrep(2))),6) preference(1,(1,12),1,for(atom(hasPrepTime(3))),5) preference(1,(1,13),1,for(atom(hasIngredient(12))),1) preference(1,(1,14),1,for(atom(hasPrep(1))),4) preference(1,less(weight)) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(9,better,100) output(79,better,44) output(92,better,10) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(58,better,77) output(58,better,9) output(58,better,100) output(65,better,79) output(65,better,44) output(65,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(10,worse,22) output(79,worse,51) output(92,worse,22) output(44,worse,51) output(58,worse,90)
Optimization: 5 14
Answer: 13
preference(1,(1,1),1,for(atom(hasCost(4))),4) preference(1,(1,2),1,for(atom(hasIngredient(4))),5) preference(1,(1,3),1,for(atom(hasCategory(4))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),8) preference(1,(1,5),1,for(atom(hasPrep(4))),6) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasPrep(5))),6) preference(1,(1,8),1,for(atom(hasCategory(3))),7) preference(1,(1,9),1,for(atom(hasIngredient(3))),4) preference(1,(1,10),1,for(atom(hasIngredient(10))),4) preference(1,(1,11),1,for(atom(hasPrep(2))),6) preference(1,(1,12),1,for(atom(hasPrepTime(3))),5) preference(1,(1,13),1,for(atom(hasDifficulty(3))),1) preference(1,(1,14),1,for(atom(hasDifficulty(4))),8) preference(1,less(weight)) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(9,better,100) output(79,better,51) output(92,better,10) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(58,better,77) output(58,better,9) output(58,better,100) output(65,better,79) output(65,better,44) output(65,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(10,worse,22) output(79,worse,44) output(92,worse,22) output(58,worse,90)
Optimization: 4 14
Answer: 14
preference(1,(1,1),1,for(atom(hasCost(4))),4) preference(1,(1,2),1,for(atom(hasDifficulty(3))),1) preference(1,(1,3),1,for(atom(hasCategory(4))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),8) preference(1,(1,5),1,for(atom(hasPrep(4))),6) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasDifficulty(4))),7) preference(1,(1,8),1,for(atom(hasCategory(3))),7) preference(1,(1,9),1,for(atom(hasIngredient(3))),4) preference(1,(1,10),1,for(atom(hasIngredient(10))),4) preference(1,(1,11),1,for(atom(hasPrep(2))),6) preference(1,(1,12),1,for(atom(hasPrepTime(3))),5) preference(1,(1,13),1,for(atom(hasCost(3))),2) preference(1,(1,14),1,for(atom(hasIngredient(4))),5) preference(1,less(weight)) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(9,better,100) output(79,better,44) output(79,better,51) output(92,better,10) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(33,better,90) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(58,better,77) output(58,better,9) output(58,better,100) output(65,better,79) output(65,better,44) output(65,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(10,worse,22) output(92,worse,22) output(58,worse,90)
Optimization: 3 14
Answer: 15
preference(1,(1,1),1,for(atom(hasIngredient(10))),2) preference(1,(1,2),1,for(atom(hasPrepTime(3))),7) preference(1,(1,3),1,for(atom(hasIngredient(3))),6) preference(1,(1,4),1,for(atom(hasDifficulty(4))),8) preference(1,(1,5),1,for(atom(hasCategory(1))),3) preference(1,(1,6),1,for(atom(hasCost(3))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),4) preference(1,(1,8),1,for(atom(hasDifficulty(1))),7) preference(1,(1,9),1,for(atom(hasPrepTime(1))),5) preference(1,(1,10),1,for(atom(hasPrep(5))),8) preference(1,(1,11),1,for(atom(hasPrep(0))),6) preference(1,(1,12),1,for(atom(hasCost(4))),8) preference(1,(1,13),1,for(atom(hasCategory(4))),2) preference(1,(1,14),1,for(atom(hasPrep(4))),7) preference(1,less(weight)) output(10,better,22) output(67,better,16) output(67,better,65) output(67,better,44) output(67,better,79) output(67,better,51) output(84,better,16) output(84,better,65) output(84,better,44) output(84,better,79) output(84,better,51) output(9,better,100) output(79,better,44) output(79,better,51) output(92,better,10) output(92,better,22) output(16,better,65) output(16,better,79) output(16,better,44) output(16,better,51) output(33,better,77) output(33,better,9) output(33,better,100) output(44,better,51) output(58,better,77) output(58,better,9) output(58,better,100) output(65,better,79) output(65,better,44) output(65,better,51) output(90,better,9) output(90,better,77) output(90,better,100) output(33,worse,90) output(58,worse,90)
Optimization: 2 14
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.088 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 15+
  Optimum    : unknown
Optimization : 2 14
Calls        : 1
Time         : 598.625s (Solving: 595.94s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2386.090s
Threads      : 4        (Winner: 4)

Choices      : 19137450 (Domain: 48688)
Conflicts    : 8976956  (Analyzed: 8976956)
Restarts     : 6746     (Average: 1330.71 Last: 474351)
Model-Level  : 393.6   
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 8984429  (Deleted: 8597408)
  Binary     : 916      (Ratio:   0.01%)
  Ternary    : 1731     (Ratio:   0.02%)
  Conflict   : 8976956  (Average Length:  638.3 Ratio:  99.92%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7473     (Average Length:   21.2 Ratio:   0.08%) 
  Distributed: 2494     (Ratio:   0.03% Average LBD: 3.37) 
  Integrated : 7482     (Ratio: 300.00% Unit: 5 Average Jumps: 309.20)
Backjumps    : 8976956  (Average:  1.74 Max: 1238 Sum: 15628795)
  Executed   : 8976955  (Average:  1.74 Max: 1238 Sum: 15628791 Ratio: 100.00%)
  Bounded    : 1        (Average:  4.00 Max:   4 Sum:      4 Ratio:   0.00%)

Rules        : 429541  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14040   
Bodies       : 18914   
  Sum        : 70      
  Count      : 14      
Equivalences : 7075     (Atom=Atom: 363 Body=Body: 154 Other: 6558)
Tight        : Yes
Variables    : 17067    (Eliminated:    0 Frozen: 7743)
Constraints  : 451394   (Binary:  97.1% Ternary:   2.1% Other:   0.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(9)) ; 
  5 :: atom(hasCost(2)) ; 
  7 :: atom(hasIngredient(10)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasIngredient(4)) ; 
  3 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  1 :: atom(hasCategory(2)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCategory(4)) ; 
  1 :: atom(hasCategory(5)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasCost(3)) ; 
  1 :: atom(hasCost(4)) ; 
  1 :: atom(hasCost(5)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(4)) ; 
  4 :: atom(hasDifficulty(4)) ; 
  4 :: atom(hasIngredient(8)) ; 
  4 :: atom(hasCategory(2)) ; 
  4 :: atom(hasIngredient(1)) ; 
  4 :: atom(hasIngredient(2)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasPrep(3)) ; 
  4 :: atom(hasCategory(5)) ; 
  4 :: atom(hasCost(5)) ; 
  4 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(4)) ; 
  4 :: atom(hasCategory(2)) ; 
  4 :: atom(hasIngredient(1)) ; 
  4 :: atom(hasIngredient(5)) ; 
  4 :: atom(hasDifficulty(4)) ; 
  4 :: atom(hasCategory(5)) ; 
  4 :: atom(hasCost(5)) ; 
  4 :: atom(hasCategory(3)) ; 
  4 :: atom(hasDifficulty(3)) ; 
  4 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasIngredient(9)) ; 
  7 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasCost(3)) ; 
  5 :: atom(hasPrep(7)) ; 
  3 :: atom(hasCategory(3)) ; 
  5 :: atom(hasCost(2)) ; 
  4 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(4)) ; 
  7 :: atom(hasCategory(1)) ; 
  8 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCategory(3)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(1)) ; 
  4 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrep(3)) ; 
  4 :: atom(hasIngredient(8)) ; 
  8 :: atom(hasIngredient(4)) ; 
  4 :: atom(hasCategory(5)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  4 :: atom(hasIngredient(8)) ; 
  4 :: atom(hasIngredient(4)) ; 
  4 :: atom(hasPrep(3)) ; 
  4 :: atom(hasCategory(2)) ; 
  4 :: atom(hasIngredient(2)) ; 
  4 :: atom(hasCost(5)) ; 
  4 :: atom(hasPrep(4)) ; 
  8 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(4)) ; 
  5 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCategory(3)) ; 
  4 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(7)) ; 
  1 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(4)) ; 
  5 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasCategory(3)) ; 
  4 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(4)) ; 
  5 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCategory(3)) ; 
  4 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCost(4)) ; 
  1 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasCategory(3)) ; 
  4 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasIngredient(10)) ; 
  6 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasCost(3)) ; 
  5 :: atom(hasIngredient(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasIngredient(10)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasDifficulty(4)) ; 
  3 :: atom(hasCategory(1)) ; 
  8 :: atom(hasCost(3)) ; 
  4 :: atom(hasCategory(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(0)) ; 
  8 :: atom(hasCost(4)) ; 
  2 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrep(4)) 
}.
