asprin_vL version 1.0
Reading from stdin
-:1236:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1246:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1261:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1342:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1603:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1616:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1793:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1922:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1994:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1998:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1998:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:2004:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2103:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2129:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2249:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2283:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2305:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1153:1-16: info: no atoms over signature occur in program:
  output/3

-:1145:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1146:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(20,eq,60) output(60,eq,75) output(75,eq,32) output(38,eq,5) output(26,eq,55) output(55,eq,48) output(73,eq,57) output(57,eq,10) output(10,eq,75) output(75,eq,62) output(62,eq,76) output(25,eq,26) output(26,eq,38) output(25,eq,38) output(75,eq,76) output(60,eq,62) output(10,eq,62) output(57,eq,75) output(73,eq,10) output(26,eq,48) output(25,eq,55) output(26,eq,5) output(60,eq,32) output(10,eq,32) output(20,eq,75) output(57,eq,32) output(73,eq,32) output(20,eq,32) output(25,eq,5) output(25,eq,48) output(73,eq,75) output(57,eq,62) output(73,eq,62) output(20,eq,62) output(60,eq,76) output(10,eq,76) output(57,eq,76) output(20,eq,76) output(73,eq,76)
Optimization: 39 0
Answer: 2
preference(1,(1,13),1,for(atom(hasPrep(2))),2) preference(1,(1,14),1,for(atom(hasCategory(1))),5) preference(1,less(weight)) output(20,better,60) output(25,better,26) output(57,better,10) output(73,better,10) output(10,worse,75) output(10,worse,62) output(10,worse,32) output(10,worse,76) output(26,worse,55) output(26,worse,38) output(26,worse,48) output(26,worse,5) output(60,worse,75) output(60,worse,62) output(60,worse,32) output(60,worse,76) output(25,worse,38) output(25,worse,55) output(25,worse,5) output(25,worse,48) output(75,eq,32) output(38,eq,5) output(55,eq,48) output(73,eq,57) output(75,eq,62) output(62,eq,76) output(75,eq,76) output(57,eq,75) output(20,eq,75) output(57,eq,32) output(73,eq,32) output(20,eq,32) output(73,eq,75) output(57,eq,62) output(73,eq,62) output(20,eq,62) output(57,eq,76) output(20,eq,76) output(73,eq,76)
Optimization: 35 2
Answer: 3
preference(1,(1,14),1,for(atom(hasPrep(1))),2) preference(1,less(weight)) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,62) output(20,better,62) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(75,better,62) output(10,worse,75) output(10,worse,32) output(10,worse,76) output(62,worse,76) output(57,worse,75) output(57,worse,32) output(57,worse,76) output(73,worse,32) output(73,worse,75) output(73,worse,76) output(20,eq,60) output(60,eq,75) output(75,eq,32) output(38,eq,5) output(55,eq,48) output(73,eq,57) output(57,eq,10) output(25,eq,26) output(75,eq,76) output(10,eq,62) output(73,eq,10) output(60,eq,32) output(20,eq,75) output(20,eq,32) output(57,eq,62) output(73,eq,62) output(60,eq,76) output(20,eq,76)
Optimization: 28 1
Answer: 4
preference(1,(1,13),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasCategory(1))),5) preference(1,less(weight)) output(20,better,60) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(57,better,10) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,10) output(73,better,32) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76) output(10,worse,75) output(10,worse,62) output(10,worse,32) output(10,worse,76) output(26,worse,55) output(26,worse,38) output(26,worse,48) output(26,worse,5) output(60,worse,75) output(60,worse,62) output(60,worse,32) output(60,worse,76) output(38,eq,5) output(55,eq,48) output(73,eq,57) output(62,eq,76) output(25,eq,38) output(57,eq,75) output(25,eq,55) output(20,eq,75) output(25,eq,5) output(25,eq,48) output(73,eq,75)
Optimization: 23 2
Answer: 5
preference(1,(1,14),1,for(atom(hasIngredient(9))),2) preference(1,less(weight)) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,75) output(60,better,62) output(20,better,75) output(20,better,62) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,62) output(73,better,10) output(73,better,75) output(73,better,62) output(10,worse,32) output(10,worse,76) output(62,worse,76) output(75,worse,32) output(75,worse,76) output(20,eq,60) output(38,eq,5) output(55,eq,48) output(73,eq,57) output(10,eq,75) output(75,eq,62) output(25,eq,26) output(10,eq,62) output(60,eq,32) output(57,eq,32) output(73,eq,32) output(20,eq,32) output(60,eq,76) output(57,eq,76) output(20,eq,76) output(73,eq,76)
Optimization: 21 1
Answer: 6
preference(1,(1,1),1,for(atom(hasIngredient(4))),2) preference(1,(1,2),1,for(atom(hasCategory(2))),2) preference(1,(1,3),1,for(atom(hasCost(1))),2) preference(1,(1,4),1,for(atom(hasIngredient(12))),2) preference(1,(1,5),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasCost(5))),2) preference(1,(1,7),1,for(atom(hasPrep(4))),2) preference(1,(1,8),1,for(atom(hasPrep(7))),2) preference(1,(1,9),1,for(atom(hasCategory(5))),2) preference(1,(1,10),1,for(atom(hasDifficulty(3))),2) preference(1,(1,11),1,for(atom(hasCost(4))),2) preference(1,(1,12),1,for(atom(hasDifficulty(4))),2) preference(1,less(weight)) output(26,better,55) output(26,better,38) output(26,better,48) output(62,better,76) output(20,better,60) output(20,better,75) output(20,better,32) output(20,better,76) output(25,better,38) output(25,better,55) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,76) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,76) output(10,worse,62) output(60,worse,62) output(38,worse,5) output(75,worse,62) output(60,eq,75) output(75,eq,32) output(55,eq,48) output(73,eq,57) output(10,eq,75) output(25,eq,26) output(75,eq,76) output(26,eq,5) output(60,eq,32) output(10,eq,32) output(25,eq,5) output(57,eq,62) output(73,eq,62) output(20,eq,62) output(60,eq,76) output(10,eq,76)
Optimization: 20 12
Answer: 7
preference(1,(1,1),1,for(atom(hasIngredient(12))),2) preference(1,(1,2),1,for(atom(hasIngredient(4))),2) preference(1,(1,3),1,for(atom(hasCategory(5))),2) preference(1,(1,4),1,for(atom(hasPrep(7))),2) preference(1,(1,5),1,for(atom(hasDifficulty(3))),2) preference(1,(1,6),1,for(atom(hasIngredient(11))),2) preference(1,(1,7),1,for(atom(hasPrep(4))),2) preference(1,(1,9),1,for(atom(hasDifficulty(1))),2) preference(1,(1,10),1,for(atom(hasCategory(2))),2) preference(1,(1,11),1,for(atom(hasCost(4))),2) preference(1,(1,12),1,for(atom(hasIngredient(8))),2) preference(1,less(weight)) output(26,better,55) output(26,better,38) output(26,better,48) output(60,better,75) output(60,better,32) output(60,better,76) output(62,better,76) output(20,better,75) output(20,better,32) output(20,better,76) output(25,better,38) output(25,better,55) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,76) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,76) output(10,worse,62) output(38,worse,5) output(75,worse,62) output(20,eq,60) output(75,eq,32) output(55,eq,48) output(73,eq,57) output(10,eq,75) output(25,eq,26) output(75,eq,76) output(60,eq,62) output(26,eq,5) output(10,eq,32) output(25,eq,5) output(57,eq,62) output(73,eq,62) output(20,eq,62) output(10,eq,76)
Optimization: 18 11
Answer: 8
preference(1,(1,1),1,for(atom(hasPrepTime(2))),2) preference(1,(1,2),1,for(atom(hasCategory(3))),2) preference(1,(1,3),1,for(atom(hasIngredient(4))),2) preference(1,(1,4),1,for(atom(hasDifficulty(1))),2) preference(1,(1,5),1,for(atom(hasPrep(3))),2) preference(1,(1,6),1,for(atom(hasIngredient(6))),2) preference(1,(1,7),1,for(atom(hasCost(4))),2) preference(1,(1,9),1,for(atom(hasCategory(5))),2) preference(1,(1,10),1,for(atom(hasIngredient(2))),2) preference(1,(1,11),1,for(atom(hasIngredient(1))),2) preference(1,(1,12),1,for(atom(hasIngredient(8))),2) preference(1,less(weight)) output(10,better,75) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,5) output(60,better,75) output(60,better,62) output(60,better,32) output(60,better,76) output(20,better,75) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,38) output(25,better,55) output(25,better,5) output(73,better,57) output(73,better,32) output(73,better,75) output(73,better,62) output(73,better,76) output(55,worse,48) output(57,worse,10) output(20,eq,60) output(75,eq,32) output(38,eq,5) output(75,eq,62) output(62,eq,76) output(25,eq,26) output(75,eq,76) output(57,eq,75) output(73,eq,10) output(26,eq,48) output(57,eq,32) output(25,eq,48) output(57,eq,62) output(57,eq,76)
Optimization: 16 11
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(7))),2) preference(1,(1,2),1,for(atom(hasCategory(3))),2) preference(1,(1,3),1,for(atom(hasIngredient(4))),2) preference(1,(1,4),1,for(atom(hasDifficulty(1))),2) preference(1,(1,5),1,for(atom(hasDifficulty(3))),2) preference(1,(1,6),1,for(atom(hasIngredient(5))),2) preference(1,(1,7),1,for(atom(hasIngredient(12))),2) preference(1,(1,9),1,for(atom(hasCategory(5))),2) preference(1,(1,10),1,for(atom(hasDifficulty(4))),2) preference(1,(1,11),1,for(atom(hasIngredient(2))),2) preference(1,(1,12),1,for(atom(hasIngredient(9))),2) preference(1,less(weight)) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,75) output(60,better,62) output(60,better,32) output(60,better,76) output(20,better,75) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,62) output(73,better,76) output(20,eq,60) output(75,eq,32) output(38,eq,5) output(55,eq,48) output(73,eq,57) output(10,eq,75) output(75,eq,62) output(62,eq,76) output(25,eq,26) output(75,eq,76) output(10,eq,62) output(10,eq,32) output(10,eq,76)
Optimization: 13 11
Answer: 10
preference(1,(1,1),1,for(atom(hasCategory(5))),2) preference(1,(1,2),1,for(atom(hasDifficulty(3))),2) preference(1,(1,3),1,for(atom(hasCategory(1))),2) preference(1,(1,4),1,for(atom(hasCategory(2))),2) preference(1,(1,5),1,for(atom(hasPrep(4))),2) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),2) preference(1,(1,10),1,for(atom(hasIngredient(5))),2) preference(1,(1,11),1,for(atom(hasIngredient(1))),2) preference(1,(1,12),1,for(atom(hasCost(1))),8) preference(1,(1,13),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(10,better,75) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(20,better,60) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,32) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76) output(60,worse,75) output(73,worse,57) output(73,worse,10) output(38,eq,5) output(55,eq,48) output(62,eq,76) output(60,eq,62) output(60,eq,32) output(20,eq,75) output(73,eq,75) output(60,eq,76)
Optimization: 11 12
Answer: 11
preference(1,(1,1),1,for(atom(hasIngredient(2))),2) preference(1,(1,2),1,for(atom(hasIngredient(8))),2) preference(1,(1,3),1,for(atom(hasDifficulty(3))),2) preference(1,(1,4),1,for(atom(hasPrep(4))),2) preference(1,(1,5),1,for(atom(hasCost(1))),8) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),2) preference(1,(1,10),1,for(atom(hasIngredient(11))),2) preference(1,(1,11),1,for(atom(hasCost(4))),2) preference(1,(1,12),1,for(atom(hasCategory(5))),2) preference(1,(1,13),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(10,better,75) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,62) output(60,better,32) output(60,better,76) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,32) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76) output(73,worse,57) output(73,worse,10) output(20,eq,60) output(60,eq,75) output(38,eq,5) output(55,eq,48) output(62,eq,76) output(20,eq,75) output(73,eq,75)
Optimization: 9 12
Answer: 12
preference(1,(1,1),1,for(atom(hasIngredient(8))),2) preference(1,(1,2),1,for(atom(hasIngredient(11))),2) preference(1,(1,3),1,for(atom(hasCategory(5))),2) preference(1,(1,4),1,for(atom(hasIngredient(2))),2) preference(1,(1,5),1,for(atom(hasIngredient(5))),2) preference(1,(1,6),1,for(atom(hasIngredient(4))),8) preference(1,(1,7),1,for(atom(hasCategory(3))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),2) preference(1,(1,10),1,for(atom(hasDifficulty(3))),2) preference(1,(1,11),1,for(atom(hasCost(4))),2) preference(1,(1,12),1,for(atom(hasCategory(2))),2) preference(1,(1,13),1,for(atom(hasCost(3))),8) preference(1,less(weight)) output(10,better,75) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,75) output(60,better,62) output(60,better,32) output(60,better,76) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,32) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76) output(20,worse,60) output(73,worse,57) output(73,worse,10) output(38,eq,5) output(55,eq,48) output(62,eq,76) output(20,eq,75) output(73,eq,75)
Optimization: 8 12
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(7))),8) preference(1,(1,2),1,for(atom(hasIngredient(12))),8) preference(1,(1,3),1,for(atom(hasPrepTime(2))),2) preference(1,(1,4),1,for(atom(hasIngredient(9))),8) preference(1,(1,10),1,for(atom(hasIngredient(4))),2) preference(1,(1,11),1,for(atom(hasCategory(5))),8) preference(1,(1,13),1,for(atom(hasCategory(1))),2) preference(1,less(weight)) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,75) output(60,better,62) output(60,better,32) output(60,better,76) output(62,better,76) output(20,better,60) output(20,better,75) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,57) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,76) output(10,worse,75) output(10,worse,62) output(38,eq,5) output(55,eq,48) output(75,eq,62) output(10,eq,32) output(10,eq,76)
Optimization: 7 7
Answer: 14
preference(1,(1,2),1,for(atom(hasIngredient(4))),8) preference(1,(1,3),1,for(atom(hasPrepTime(2))),2) preference(1,(1,4),1,for(atom(hasIngredient(9))),8) preference(1,(1,10),1,for(atom(hasDifficulty(1))),8) preference(1,(1,11),1,for(atom(hasCost(1))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),2) preference(1,(1,13),1,for(atom(hasIngredient(12))),8) preference(1,(1,14),1,for(atom(hasPrep(7))),8) preference(1,less(weight)) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,62) output(60,better,32) output(60,better,76) output(20,better,60) output(20,better,75) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,57) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76) output(60,eq,75) output(38,eq,5) output(55,eq,48) output(10,eq,75) output(62,eq,76)
Optimization: 5 8
Answer: 15
preference(1,(1,1),1,for(atom(hasIngredient(12))),8) preference(1,(1,2),1,for(atom(hasCost(1))),2) preference(1,(1,3),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasIngredient(9))),8) preference(1,(1,10),1,for(atom(hasPrepTime(2))),2) preference(1,(1,11),1,for(atom(hasIngredient(4))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasPrep(7))),8) preference(1,less(weight)) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,75) output(60,better,62) output(60,better,32) output(60,better,76) output(20,better,60) output(20,better,75) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,57) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76) output(38,eq,5) output(55,eq,48) output(10,eq,75) output(62,eq,76)
Optimization: 4 8
Answer: 16
preference(1,(1,1),1,for(atom(hasCategory(1))),1) preference(1,(1,3),1,for(atom(hasCategory(3))),6) preference(1,(1,5),1,for(atom(hasCost(1))),2) preference(1,(1,6),1,for(atom(hasIngredient(1))),4) preference(1,(1,7),1,for(atom(hasIngredient(6))),2) preference(1,(1,9),1,for(atom(hasIngredient(12))),6) preference(1,(1,10),1,for(atom(hasIngredient(4))),6) preference(1,(1,11),1,for(atom(hasCategory(5))),2) preference(1,(1,12),1,for(atom(hasCost(3))),2) preference(1,(1,13),1,for(atom(hasPrepTime(2))),1) preference(1,(1,14),1,for(atom(hasDifficulty(2))),3) preference(1,less(weight)) output(10,better,75) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,75) output(60,better,62) output(60,better,32) output(60,better,76) output(38,better,5) output(55,better,48) output(62,better,76) output(20,better,60) output(20,better,75) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,57) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76)
Optimization: 0 11
Progression : 0 [ 1;11] (Error: 10)
Progression : 0 [ 2;11] (Error: 4.5)
Answer: 17
preference(1,(1,4),1,for(atom(hasCategory(5))),1) preference(1,(1,5),1,for(atom(hasIngredient(12))),7) preference(1,(1,6),1,for(atom(hasIngredient(10))),4) preference(1,(1,7),1,for(atom(hasPrep(5))),1) preference(1,(1,8),1,for(atom(hasIngredient(6))),1) preference(1,(1,10),1,for(atom(hasDifficulty(2))),4) preference(1,(1,11),1,for(atom(hasIngredient(4))),7) preference(1,(1,12),1,for(atom(hasCategory(3))),6) preference(1,(1,13),1,for(atom(hasDifficulty(1))),1) preference(1,(1,14),1,for(atom(hasCost(1))),1) preference(1,less(weight)) output(10,better,75) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,75) output(60,better,62) output(60,better,32) output(60,better,76) output(38,better,5) output(55,better,48) output(62,better,76) output(20,better,60) output(20,better,75) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,57) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76)
Optimization: 0 10
Answer: 18
preference(1,(1,2),1,for(atom(hasPrep(3))),1) preference(1,(1,5),1,for(atom(hasIngredient(12))),7) preference(1,(1,6),1,for(atom(hasIngredient(10))),4) preference(1,(1,7),1,for(atom(hasPrep(5))),1) preference(1,(1,8),1,for(atom(hasIngredient(4))),8) preference(1,(1,10),1,for(atom(hasDifficulty(2))),4) preference(1,(1,12),1,for(atom(hasCategory(3))),6) preference(1,(1,13),1,for(atom(hasDifficulty(1))),1) preference(1,(1,14),1,for(atom(hasCost(1))),1) preference(1,less(weight)) output(10,better,75) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,75) output(60,better,62) output(60,better,32) output(60,better,76) output(38,better,5) output(55,better,48) output(62,better,76) output(20,better,60) output(20,better,75) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,57) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76)
Optimization: 0 9
Progression : 0 [3;9] (Error: 2)
Answer: 19
preference(1,(1,2),1,for(atom(hasCategory(3))),7) preference(1,(1,3),1,for(atom(hasDifficulty(2))),1) preference(1,(1,4),1,for(atom(hasPrepTime(2))),6) preference(1,(1,5),1,for(atom(hasPrep(5))),3) preference(1,(1,6),1,for(atom(hasCategory(5))),8) preference(1,(1,7),1,for(atom(hasIngredient(3))),1) preference(1,(1,10),1,for(atom(hasCost(1))),5) preference(1,(1,11),1,for(atom(hasIngredient(12))),8) preference(1,less(weight)) output(10,better,75) output(10,better,62) output(10,better,32) output(10,better,76) output(26,better,55) output(26,better,38) output(26,better,48) output(26,better,5) output(60,better,75) output(60,better,62) output(60,better,32) output(60,better,76) output(38,better,5) output(55,better,48) output(62,better,76) output(20,better,60) output(20,better,75) output(20,better,32) output(20,better,62) output(20,better,76) output(25,better,26) output(25,better,38) output(25,better,55) output(25,better,5) output(25,better,48) output(57,better,10) output(57,better,75) output(57,better,32) output(57,better,62) output(57,better,76) output(73,better,57) output(73,better,10) output(73,better,32) output(73,better,75) output(73,better,62) output(73,better,76) output(75,better,32) output(75,better,62) output(75,better,76)
Optimization: 0 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.121 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 19+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 598.072s (Solving: 595.26s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2383.221s
Threads      : 4        (Winner: 4)

Choices      : 10826549 (Domain: 345890)
Conflicts    : 7279666  (Analyzed: 7279663)
Restarts     : 6440     (Average: 1130.38 Last: 633289)
Model-Level  : 103.6   
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 7290086  (Deleted: 6888208)
  Binary     : 707      (Ratio:   0.01%)
  Ternary    : 1314     (Ratio:   0.02%)
  Conflict   : 7279663  (Average Length:  550.7 Ratio:  99.86%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 10423    (Average Length:   50.5 Ratio:   0.14%) 
  Distributed: 3477     (Ratio:   0.05% Average LBD: 3.50) 
  Integrated : 10431    (Ratio: 300.00% Unit: 10 Average Jumps: 16.40)
Backjumps    : 7279663  (Average:  1.35 Max: 956 Sum: 9832401)
  Executed   : 7279662  (Average:  1.35 Max: 956 Sum: 9832363 Ratio: 100.00%)
  Bounded    : 1        (Average: 38.00 Max:  38 Sum:     38 Ratio:   0.00%)

Rules        : 466553  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 14424   
Bodies       : 18958   
  Sum        : 78      
  Count      : 14      
Equivalences : 7215     (Atom=Atom: 403 Body=Body: 170 Other: 6642)
Tight        : Yes
Variables    : 17075    (Eliminated:    0 Frozen: 7751)
Constraints  : 488034   (Binary:  97.3% Ternary:   1.9% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(2)) ; 
  5 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(5)) ; 
  5 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasCategory(2)) ; 
  2 :: atom(hasCost(1)) ; 
  2 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCost(5)) ; 
  2 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCategory(5)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCost(4)) ; 
  2 :: atom(hasDifficulty(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasCategory(5)) ; 
  2 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(11)) ; 
  2 :: atom(hasPrep(4)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasCategory(2)) ; 
  2 :: atom(hasCost(4)) ; 
  2 :: atom(hasIngredient(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCategory(3)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrep(3)) ; 
  2 :: atom(hasIngredient(6)) ; 
  2 :: atom(hasCost(4)) ; 
  2 :: atom(hasCategory(5)) ; 
  2 :: atom(hasIngredient(2)) ; 
  2 :: atom(hasIngredient(1)) ; 
  2 :: atom(hasIngredient(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(7)) ; 
  2 :: atom(hasCategory(3)) ; 
  2 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(5)) ; 
  2 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasCategory(5)) ; 
  2 :: atom(hasDifficulty(4)) ; 
  2 :: atom(hasIngredient(2)) ; 
  2 :: atom(hasIngredient(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasCategory(5)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCategory(1)) ; 
  2 :: atom(hasCategory(2)) ; 
  2 :: atom(hasPrep(4)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(5)) ; 
  2 :: atom(hasIngredient(5)) ; 
  2 :: atom(hasIngredient(1)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasIngredient(2)) ; 
  2 :: atom(hasIngredient(8)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasPrep(4)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(5)) ; 
  2 :: atom(hasIngredient(11)) ; 
  2 :: atom(hasCost(4)) ; 
  2 :: atom(hasCategory(5)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasIngredient(8)) ; 
  2 :: atom(hasIngredient(11)) ; 
  2 :: atom(hasCategory(5)) ; 
  2 :: atom(hasIngredient(2)) ; 
  2 :: atom(hasIngredient(5)) ; 
  8 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(3)) ; 
  2 :: atom(hasPrep(5)) ; 
  2 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasCost(4)) ; 
  2 :: atom(hasCategory(2)) ; 
  8 :: atom(hasCost(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasIngredient(4)) ; 
  8 :: atom(hasCategory(5)) ; 
  2 :: atom(hasCategory(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(9)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(12)) ; 
  8 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(12)) ; 
  2 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasIngredient(9)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCategory(3)) ; 
  2 :: atom(hasCost(1)) ; 
  4 :: atom(hasIngredient(1)) ; 
  2 :: atom(hasIngredient(6)) ; 
  6 :: atom(hasIngredient(12)) ; 
  6 :: atom(hasIngredient(4)) ; 
  2 :: atom(hasCategory(5)) ; 
  2 :: atom(hasCost(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCategory(5)) ; 
  7 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(5)) ; 
  1 :: atom(hasIngredient(6)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasIngredient(4)) ; 
  6 :: atom(hasCategory(3)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(3)) ; 
  7 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasIngredient(10)) ; 
  1 :: atom(hasPrep(5)) ; 
  8 :: atom(hasIngredient(4)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasCategory(3)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(3)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCategory(5)) ; 
  1 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasCost(1)) ; 
  8 :: atom(hasIngredient(12)) 
}.
