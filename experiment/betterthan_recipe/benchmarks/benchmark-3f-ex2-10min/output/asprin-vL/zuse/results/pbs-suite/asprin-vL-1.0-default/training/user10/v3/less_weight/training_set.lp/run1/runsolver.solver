asprin_vL version 1.0
Reading from stdin
-:1219:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1229:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1244:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1325:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1586:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1599:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1776:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1905:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1977:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1981:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1981:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1987:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2086:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2112:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2232:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2266:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2288:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1136:1-16: info: no atoms over signature occur in program:
  output/3

-:1128:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1129:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(79,eq,7) output(7,eq,46) output(46,eq,60) output(33,eq,32) output(39,eq,4) output(78,eq,52) output(31,eq,79) output(7,eq,51) output(42,eq,23) output(18,eq,90) output(90,eq,78) output(18,eq,78) output(79,eq,51) output(90,eq,52) output(7,eq,60) output(79,eq,46) output(31,eq,7) output(31,eq,46) output(79,eq,60) output(31,eq,60) output(18,eq,52) output(31,eq,51)
Optimization: 22 0
Answer: 2
preference(1,(1,1),1,for(atom(hasPrep(5))),2) preference(1,(1,2),1,for(atom(hasCost(4))),7) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,4),1,for(atom(hasPrepTime(3))),3) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasIngredient(3))),7) preference(1,(1,8),1,for(atom(hasIngredient(1))),4) preference(1,(1,9),1,for(atom(hasIngredient(9))),8) preference(1,(1,10),1,for(atom(hasIngredient(12))),1) preference(1,(1,11),1,for(atom(hasPrep(6))),1) preference(1,(1,12),1,for(atom(hasCategory(3))),1) preference(1,(1,13),1,for(atom(hasCost(2))),1) preference(1,(1,14),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(46,better,60) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(90,better,78) output(90,better,52) output(18,worse,90) output(18,worse,78) output(18,worse,52) output(39,worse,4) output(42,worse,23) output(7,worse,46) output(7,worse,51) output(7,worse,60) output(33,worse,32) output(78,worse,52) output(31,eq,79)
Optimization: 11 13
Answer: 3
preference(1,(1,2),1,for(atom(hasIngredient(3))),8) preference(1,(1,7),1,for(atom(hasPrep(5))),8) preference(1,(1,13),1,for(atom(hasDifficulty(3))),8) preference(1,less(weight)) output(18,better,78) output(18,better,52) output(31,better,7) output(31,better,46) output(31,better,51) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(33,better,32) output(90,better,78) output(90,better,52) output(46,worse,60) output(39,worse,4) output(7,worse,60) output(7,eq,46) output(78,eq,52) output(31,eq,79) output(7,eq,51) output(18,eq,90) output(79,eq,60) output(31,eq,60)
Optimization: 10 3
Answer: 4
preference(1,(1,1),1,for(atom(hasCost(2))),8) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasPrep(5))),8) preference(1,(1,12),1,for(atom(hasPrep(2))),8) preference(1,(1,13),1,for(atom(hasIngredient(3))),8) preference(1,less(weight)) output(18,better,90) output(18,better,52) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(33,better,32) output(78,better,52) output(90,worse,78) output(7,eq,46) output(46,eq,60) output(39,eq,4) output(31,eq,79) output(7,eq,51) output(18,eq,78) output(90,eq,52) output(7,eq,60)
Optimization: 9 5
Answer: 5
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrepTime(2))),7) preference(1,(1,3),1,for(atom(hasCategory(4))),7) preference(1,(1,4),1,for(atom(hasDifficulty(2))),8) preference(1,(1,5),1,for(atom(hasCost(3))),7) preference(1,(1,6),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasPrep(7))),7) preference(1,(1,8),1,for(atom(hasCost(2))),8) preference(1,(1,9),1,for(atom(hasIngredient(3))),8) preference(1,(1,10),1,for(atom(hasIngredient(12))),8) preference(1,(1,11),1,for(atom(hasDifficulty(4))),7) preference(1,(1,13),1,for(atom(hasDifficulty(3))),7) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(46,better,60) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(79,eq,7) output(33,eq,32) output(78,eq,52) output(31,eq,79) output(42,eq,23) output(90,eq,78) output(90,eq,52) output(31,eq,7)
Optimization: 8 12
Answer: 6
preference(1,(1,1),1,for(atom(hasCategory(4))),7) preference(1,(1,2),1,for(atom(hasPrepTime(2))),7) preference(1,(1,3),1,for(atom(hasCost(1))),7) preference(1,(1,5),1,for(atom(hasCost(3))),7) preference(1,(1,6),1,for(atom(hasDifficulty(1))),7) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,8),1,for(atom(hasCategory(1))),8) preference(1,(1,9),1,for(atom(hasPrep(7))),8) preference(1,(1,10),1,for(atom(hasIngredient(3))),8) preference(1,(1,11),1,for(atom(hasDifficulty(4))),7) preference(1,(1,13),1,for(atom(hasDifficulty(3))),7) preference(1,less(weight)) output(18,better,90) output(18,better,52) output(46,better,60) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(78,better,52) output(18,worse,78) output(90,worse,78) output(79,eq,7) output(33,eq,32) output(31,eq,79) output(90,eq,52) output(31,eq,7)
Optimization: 7 11
Answer: 7
preference(1,(1,1),1,for(atom(hasCost(1))),7) preference(1,(1,2),1,for(atom(hasPrepTime(2))),7) preference(1,(1,3),1,for(atom(hasPrep(7))),8) preference(1,(1,4),1,for(atom(hasCategory(4))),7) preference(1,(1,5),1,for(atom(hasCost(3))),7) preference(1,(1,6),1,for(atom(hasDifficulty(4))),7) preference(1,(1,8),1,for(atom(hasCategory(1))),8) preference(1,(1,9),1,for(atom(hasDifficulty(1))),7) preference(1,(1,10),1,for(atom(hasCategory(2))),7) preference(1,(1,11),1,for(atom(hasIngredient(3))),8) preference(1,(1,12),1,for(atom(hasDifficulty(3))),7) preference(1,(1,13),1,for(atom(hasIngredient(12))),8) preference(1,less(weight)) output(18,better,78) output(18,better,52) output(46,better,60) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(90,better,78) output(90,better,52) output(18,worse,90) output(79,eq,7) output(33,eq,32) output(78,eq,52) output(31,eq,79) output(31,eq,7)
Optimization: 6 12
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(5))),7) preference(1,(1,2),1,for(atom(hasCost(2))),7) preference(1,(1,3),1,for(atom(hasIngredient(3))),7) preference(1,(1,4),1,for(atom(hasDifficulty(3))),7) preference(1,(1,5),1,for(atom(hasCategory(1))),8) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,8),1,for(atom(hasDifficulty(4))),7) preference(1,(1,9),1,for(atom(hasPrep(4))),7) preference(1,(1,10),1,for(atom(hasCategory(2))),7) preference(1,(1,11),1,for(atom(hasIngredient(6))),7) preference(1,(1,13),1,for(atom(hasPrep(2))),7) preference(1,(1,14),1,for(atom(hasPrepTime(2))),8) preference(1,less(weight)) output(18,better,90) output(18,better,52) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(78,better,52) output(18,worse,78) output(79,worse,7) output(90,worse,78) output(46,eq,60) output(90,eq,52)
Optimization: 5 12
Answer: 9
preference(1,(1,1),1,for(atom(hasDifficulty(3))),8) preference(1,(1,2),1,for(atom(hasPrepTime(2))),7) preference(1,(1,3),1,for(atom(hasPrep(5))),8) preference(1,(1,4),1,for(atom(hasCost(4))),7) preference(1,(1,5),1,for(atom(hasIngredient(3))),8) preference(1,(1,6),1,for(atom(hasCost(2))),8) preference(1,(1,8),1,for(atom(hasDifficulty(4))),7) preference(1,(1,9),1,for(atom(hasPrep(4))),7) preference(1,(1,10),1,for(atom(hasCategory(2))),7) preference(1,(1,11),1,for(atom(hasCategory(1))),7) preference(1,(1,13),1,for(atom(hasPrep(7))),7) preference(1,(1,14),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(46,eq,60) output(78,eq,52) output(90,eq,78) output(90,eq,52)
Optimization: 4 12
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(5))),8) preference(1,(1,2),1,for(atom(hasPrepTime(2))),7) preference(1,(1,3),1,for(atom(hasIngredient(3))),8) preference(1,(1,4),1,for(atom(hasPrep(2))),8) preference(1,(1,5),1,for(atom(hasPrep(7))),7) preference(1,(1,6),1,for(atom(hasDifficulty(3))),8) preference(1,(1,8),1,for(atom(hasPrep(4))),7) preference(1,(1,9),1,for(atom(hasIngredient(8))),7) preference(1,(1,10),1,for(atom(hasCategory(2))),7) preference(1,(1,11),1,for(atom(hasCategory(1))),7) preference(1,(1,13),1,for(atom(hasDifficulty(4))),7) preference(1,(1,14),1,for(atom(hasCost(2))),8) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(78,better,52) output(90,worse,78) output(46,eq,60) output(90,eq,52)
Optimization: 3 12
Answer: 11
preference(1,(1,1),1,for(atom(hasCategory(4))),4) preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasIngredient(3))),5) preference(1,(1,4),1,for(atom(hasPrep(0))),6) preference(1,(1,5),1,for(atom(hasIngredient(7))),6) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasPrep(5))),4) preference(1,(1,8),1,for(atom(hasPrepTime(3))),6) preference(1,(1,9),1,for(atom(hasCost(1))),6) preference(1,(1,10),1,for(atom(hasCost(3))),1) preference(1,(1,11),1,for(atom(hasIngredient(12))),5) preference(1,(1,12),1,for(atom(hasPrep(2))),4) preference(1,(1,13),1,for(atom(hasCategory(1))),6) preference(1,(1,14),1,for(atom(hasCost(2))),4) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(33,better,32) output(78,better,52) output(90,better,78) output(90,better,52) output(46,worse,60) output(7,worse,60)
Optimization: 2 14
Answer: 12
preference(1,(1,1),1,for(atom(hasCategory(4))),4) preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasIngredient(3))),7) preference(1,(1,4),1,for(atom(hasPrep(0))),6) preference(1,(1,5),1,for(atom(hasIngredient(7))),6) preference(1,(1,6),1,for(atom(hasDifficulty(3))),5) preference(1,(1,7),1,for(atom(hasPrepTime(2))),1) preference(1,(1,8),1,for(atom(hasPrepTime(3))),6) preference(1,(1,9),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasCost(1))),7) preference(1,(1,12),1,for(atom(hasPrep(2))),4) preference(1,(1,13),1,for(atom(hasCategory(1))),6) preference(1,(1,14),1,for(atom(hasIngredient(12))),7) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(78,better,52) output(90,better,78) output(90,better,52) output(46,worse,60)
Optimization: 1 14
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(0))),5) preference(1,(1,2),1,for(atom(hasPrep(2))),2) preference(1,(1,3),1,for(atom(hasCost(1))),5) preference(1,(1,4),1,for(atom(hasIngredient(7))),5) preference(1,(1,5),1,for(atom(hasPrepTime(2))),8) preference(1,(1,6),1,for(atom(hasCategory(1))),6) preference(1,(1,7),1,for(atom(hasPrepTime(3))),5) preference(1,(1,8),1,for(atom(hasCost(2))),4) preference(1,(1,9),1,for(atom(hasIngredient(12))),7) preference(1,(1,10),1,for(atom(hasCost(3))),1) preference(1,(1,11),1,for(atom(hasDifficulty(3))),8) preference(1,(1,12),1,for(atom(hasPrep(1))),5) preference(1,(1,13),1,for(atom(hasCategory(4))),2) preference(1,(1,14),1,for(atom(hasDifficulty(2))),7) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(46,better,60) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(78,better,52) output(90,better,78) output(90,better,52)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Progression : 0 [ 2;14] (Error: 6)
Answer: 14
preference(1,(1,1),1,for(atom(hasPrepTime(2))),4) preference(1,(1,2),1,for(atom(hasCategory(1))),5) preference(1,(1,4),1,for(atom(hasDifficulty(3))),3) preference(1,(1,5),1,for(atom(hasIngredient(10))),2) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,7),1,for(atom(hasDifficulty(4))),7) preference(1,(1,8),1,for(atom(hasCost(3))),3) preference(1,(1,9),1,for(atom(hasCategory(4))),8) preference(1,(1,10),1,for(atom(hasIngredient(12))),5) preference(1,(1,11),1,for(atom(hasIngredient(3))),5) preference(1,(1,12),1,for(atom(hasCost(4))),5) preference(1,(1,13),1,for(atom(hasCategory(3))),4) preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(46,better,60) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(78,better,52) output(90,better,78) output(90,better,52)
Optimization: 0 13
Answer: 15
preference(1,(1,1),1,for(atom(hasPrepTime(2))),4) preference(1,(1,2),1,for(atom(hasCategory(1))),5) preference(1,(1,3),1,for(atom(hasDifficulty(3))),3) preference(1,(1,5),1,for(atom(hasIngredient(10))),2) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,7),1,for(atom(hasCost(3))),3) preference(1,(1,9),1,for(atom(hasCategory(4))),8) preference(1,(1,10),1,for(atom(hasIngredient(12))),5) preference(1,(1,11),1,for(atom(hasIngredient(3))),5) preference(1,(1,12),1,for(atom(hasDifficulty(4))),6) preference(1,(1,13),1,for(atom(hasCategory(3))),4) preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(46,better,60) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(78,better,52) output(90,better,78) output(90,better,52)
Optimization: 0 12
Answer: 16
preference(1,(1,1),1,for(atom(hasPrepTime(2))),4) preference(1,(1,2),1,for(atom(hasCategory(1))),5) preference(1,(1,5),1,for(atom(hasIngredient(10))),2) preference(1,(1,6),1,for(atom(hasPrep(2))),8) preference(1,(1,8),1,for(atom(hasCost(3))),2) preference(1,(1,9),1,for(atom(hasCategory(4))),8) preference(1,(1,10),1,for(atom(hasIngredient(12))),5) preference(1,(1,11),1,for(atom(hasIngredient(3))),5) preference(1,(1,12),1,for(atom(hasDifficulty(4))),1) preference(1,(1,13),1,for(atom(hasCategory(3))),4) preference(1,(1,14),1,for(atom(hasPrep(0))),3) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(46,better,60) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(78,better,52) output(90,better,78) output(90,better,52)
Optimization: 0 11
Answer: 17
preference(1,(1,1),1,for(atom(hasPrep(2))),5) preference(1,(1,2),1,for(atom(hasCost(2))),8) preference(1,(1,3),1,for(atom(hasCategory(4))),5) preference(1,(1,4),1,for(atom(hasPrep(6))),6) preference(1,(1,6),1,for(atom(hasPrepTime(2))),2) preference(1,(1,7),1,for(atom(hasIngredient(3))),7) preference(1,(1,8),1,for(atom(hasIngredient(7))),8) preference(1,(1,9),1,for(atom(hasPrep(0))),6) preference(1,(1,10),1,for(atom(hasIngredient(12))),7) preference(1,(1,14),1,for(atom(hasDifficulty(2))),7) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(46,better,60) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(78,better,52) output(90,better,78) output(90,better,52)
Optimization: 0 10
Progression : 0 [ 3;10] (Error: 2.33333)
Answer: 18
preference(1,(1,2),1,for(atom(hasCategory(4))),3) preference(1,(1,3),1,for(atom(hasPrepTime(3))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),1) preference(1,(1,7),1,for(atom(hasCost(3))),1) preference(1,(1,8),1,for(atom(hasPrepTime(2))),8) preference(1,(1,10),1,for(atom(hasIngredient(12))),7) preference(1,(1,11),1,for(atom(hasIngredient(3))),7) preference(1,(1,12),1,for(atom(hasCategory(1))),7) preference(1,(1,14),1,for(atom(hasCost(2))),6) preference(1,less(weight)) output(18,better,90) output(18,better,78) output(18,better,52) output(46,better,60) output(31,better,79) output(31,better,7) output(31,better,46) output(31,better,60) output(31,better,51) output(39,better,4) output(42,better,23) output(79,better,7) output(79,better,51) output(79,better,46) output(79,better,60) output(7,better,46) output(7,better,51) output(7,better,60) output(33,better,32) output(78,better,52) output(90,better,78) output(90,better,52)
Optimization: 0 9
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.036 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 18+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 598.521s (Solving: 596.14s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 2386.685s
Threads      : 4        (Winner: 4)

Choices      : 8135905  (Domain: 514378)
Conflicts    : 7779595  (Analyzed: 7779592)
Restarts     : 7427     (Average: 1047.47 Last: 355830)
Model-Level  : 53.8    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 8014441  (Deleted: 7582602)
  Binary     : 2247     (Ratio:   0.03%)
  Ternary    : 2761     (Ratio:   0.03%)
  Conflict   : 7779592  (Average Length:  533.3 Ratio:  97.07%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 234849   (Average Length:  545.8 Ratio:   2.93%) 
  Distributed: 78320    (Ratio:   1.01% Average LBD: 3.87) 
  Integrated : 234960   (Ratio: 300.00% Unit: 0 Average Jumps: 0.00)
Backjumps    : 7779592  (Average:  1.03 Max:  35 Sum: 8048847)
  Executed   : 7779591  (Average:  1.03 Max:  35 Sum: 8048831 Ratio: 100.00%)
  Bounded    : 1        (Average: 16.00 Max:  16 Sum:     16 Ratio:   0.00%)

Rules        : 307292  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 12766   
Bodies       : 18771   
  Sum        : 44      
  Count      : 14      
Equivalences : 6620     (Atom=Atom: 233 Body=Body: 102 Other: 6285)
Tight        : Yes
Variables    : 17015    (Eliminated:    0 Frozen: 7691)
Constraints  : 330328   (Binary:  96.1% Ternary:   2.8% Other:   1.1%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(4)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(3)) ; 
  4 :: atom(hasIngredient(1)) ; 
  8 :: atom(hasIngredient(9)) ; 
  1 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasCategory(3)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasIngredient(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCategory(4)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(2)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  8 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasDifficulty(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasCategory(4)) ; 
  7 :: atom(hasCost(3)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasCategory(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCategory(2)) ; 
  8 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasDifficulty(3)) ; 
  8 :: atom(hasCategory(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasIngredient(6)) ; 
  7 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(4)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasCost(2)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  7 :: atom(hasPrep(4)) ; 
  7 :: atom(hasIngredient(8)) ; 
  7 :: atom(hasCategory(2)) ; 
  7 :: atom(hasCategory(1)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  8 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(4)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasIngredient(7)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(3)) ; 
  5 :: atom(hasIngredient(12)) ; 
  4 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCategory(1)) ; 
  4 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasCategory(4)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasIngredient(7)) ; 
  5 :: atom(hasDifficulty(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(5)) ; 
  7 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrep(2)) ; 
  6 :: atom(hasCategory(1)) ; 
  7 :: atom(hasIngredient(12)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(2)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasIngredient(7)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCategory(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCost(2)) ; 
  7 :: atom(hasIngredient(12)) ; 
  1 :: atom(hasCost(3)) ; 
  8 :: atom(hasDifficulty(3)) ; 
  5 :: atom(hasPrep(1)) ; 
  2 :: atom(hasCategory(4)) ; 
  7 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCategory(1)) ; 
  3 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(4)) ; 
  3 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(4)) ; 
  5 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasIngredient(3)) ; 
  5 :: atom(hasCost(4)) ; 
  4 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCategory(1)) ; 
  3 :: atom(hasDifficulty(3)) ; 
  2 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(2)) ; 
  3 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(4)) ; 
  5 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasIngredient(3)) ; 
  6 :: atom(hasDifficulty(4)) ; 
  4 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCategory(1)) ; 
  2 :: atom(hasIngredient(10)) ; 
  8 :: atom(hasPrep(2)) ; 
  2 :: atom(hasCost(3)) ; 
  8 :: atom(hasCategory(4)) ; 
  5 :: atom(hasIngredient(12)) ; 
  5 :: atom(hasIngredient(3)) ; 
  1 :: atom(hasDifficulty(4)) ; 
  4 :: atom(hasCategory(3)) ; 
  3 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(2)) ; 
  5 :: atom(hasCategory(4)) ; 
  6 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(3)) ; 
  8 :: atom(hasIngredient(7)) ; 
  6 :: atom(hasPrep(0)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCategory(4)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(0)) ; 
  1 :: atom(hasCost(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasIngredient(12)) ; 
  7 :: atom(hasIngredient(3)) ; 
  7 :: atom(hasCategory(1)) ; 
  6 :: atom(hasCost(2)) 
}.
