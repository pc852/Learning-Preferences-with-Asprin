asprin_vL version 1.0
Reading from stdin
-:1223:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1233:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1248:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1329:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1590:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1603:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1780:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1909:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1981:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1985:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1985:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1991:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2090:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2116:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2236:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2270:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2292:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1140:1-16: info: no atoms over signature occur in program:
  output/3

-:1132:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1133:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(64,eq,47) output(47,eq,70) output(29,eq,49) output(49,eq,24) output(24,eq,50) output(50,eq,23) output(64,eq,72) output(72,eq,52) output(52,eq,69) output(42,eq,24) output(24,eq,23) output(23,eq,67) output(50,eq,67) output(24,eq,67) output(49,eq,23) output(42,eq,23) output(72,eq,69) output(64,eq,52) output(49,eq,50) output(42,eq,50) output(29,eq,24) output(64,eq,70) output(29,eq,50) output(64,eq,69) output(29,eq,23) output(49,eq,67) output(42,eq,67) output(29,eq,67)
Optimization: 28 0
Answer: 2
preference(1,(1,3),1,for(atom(hasDifficulty(1))),5) preference(1,less(weight)) output(23,better,67) output(24,better,50) output(24,better,67) output(29,worse,24) output(29,worse,23) output(50,worse,23) output(42,worse,24) output(42,worse,23) output(49,worse,24) output(49,worse,23) output(64,eq,47) output(47,eq,70) output(29,eq,49) output(64,eq,72) output(72,eq,52) output(52,eq,69) output(24,eq,23) output(50,eq,67) output(72,eq,69) output(64,eq,52) output(49,eq,50) output(42,eq,50) output(64,eq,70) output(29,eq,50) output(64,eq,69) output(49,eq,67) output(42,eq,67) output(29,eq,67)
Optimization: 25 1
Answer: 3
preference(1,(1,1),1,for(atom(hasPrep(1))),6) preference(1,(1,2),1,for(atom(hasPrep(0))),6) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,4),1,for(atom(hasPrep(6))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),6) preference(1,(1,8),1,for(atom(hasCost(1))),6) preference(1,(1,9),1,for(atom(hasPrepTime(2))),6) preference(1,(1,13),1,for(atom(hasPrep(5))),4) preference(1,(1,14),1,for(atom(hasDifficulty(2))),5) preference(1,less(weight)) output(29,better,24) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(64,better,72) output(42,better,24) output(42,better,23) output(42,better,67) output(49,better,24) output(49,better,23) output(49,better,67) output(23,worse,67) output(24,worse,50) output(24,worse,23) output(24,worse,67) output(72,worse,52) output(72,worse,69) output(64,eq,47) output(47,eq,70) output(29,eq,49) output(52,eq,69) output(64,eq,52) output(49,eq,50) output(42,eq,50) output(64,eq,70) output(29,eq,50) output(64,eq,69)
Optimization: 16 9
Answer: 4
preference(1,(1,1),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,4),1,for(atom(hasPrep(4))),4) preference(1,(1,5),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasPrep(7))),4) preference(1,(1,8),1,for(atom(hasPrep(3))),4) preference(1,(1,9),1,for(atom(hasCost(2))),6) preference(1,(1,10),1,for(atom(hasPrep(2))),4) preference(1,(1,12),1,for(atom(hasPrep(5))),4) preference(1,(1,14),1,for(atom(hasPrepTime(3))),4) preference(1,less(weight)) output(29,better,49) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,70) output(64,better,69) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(72,worse,52) output(47,eq,70) output(49,eq,24) output(24,eq,50) output(50,eq,23) output(24,eq,23) output(23,eq,67) output(50,eq,67) output(24,eq,67) output(49,eq,23) output(72,eq,69) output(64,eq,52) output(49,eq,50) output(49,eq,67)
Optimization: 14 10
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(7))),4) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,4),1,for(atom(hasPrep(3))),4) preference(1,(1,5),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasPrepTime(3))),4) preference(1,(1,8),1,for(atom(hasPrep(4))),4) preference(1,(1,9),1,for(atom(hasDifficulty(2))),4) preference(1,(1,10),1,for(atom(hasPrep(2))),4) preference(1,(1,12),1,for(atom(hasPrep(5))),4) preference(1,(1,14),1,for(atom(hasPrep(6))),6) preference(1,less(weight)) output(29,better,49) output(29,better,50) output(29,better,23) output(29,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,70) output(64,better,69) output(24,better,50) output(24,better,23) output(24,better,67) output(42,better,23) output(42,better,50) output(42,better,67) output(29,worse,24) output(42,worse,24) output(49,worse,24) output(72,worse,52) output(47,eq,70) output(50,eq,23) output(23,eq,67) output(50,eq,67) output(49,eq,23) output(72,eq,69) output(64,eq,52) output(49,eq,50) output(49,eq,67)
Optimization: 13 10
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(2))),4) preference(1,(1,3),1,for(atom(hasDifficulty(1))),6) preference(1,(1,4),1,for(atom(hasCost(2))),6) preference(1,(1,7),1,for(atom(hasPrep(7))),4) preference(1,(1,8),1,for(atom(hasDifficulty(2))),6) preference(1,(1,9),1,for(atom(hasPrep(4))),4) preference(1,(1,12),1,for(atom(hasPrep(5))),4) preference(1,(1,14),1,for(atom(hasPrepTime(3))),4) preference(1,less(weight)) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,70) output(64,better,69) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,worse,52) output(47,eq,70) output(29,eq,49) output(24,eq,50) output(50,eq,23) output(24,eq,23) output(23,eq,67) output(50,eq,67) output(24,eq,67) output(72,eq,69) output(64,eq,52)
Optimization: 11 8
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(7))),6) preference(1,(1,3),1,for(atom(hasPrep(6))),4) preference(1,(1,4),1,for(atom(hasPrep(3))),4) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasDifficulty(2))),6) preference(1,(1,8),1,for(atom(hasPrep(4))),6) preference(1,(1,14),1,for(atom(hasPrep(2))),6) preference(1,less(weight)) output(29,better,24) output(29,better,50) output(29,better,23) output(52,better,69) output(64,better,47) output(64,better,52) output(64,better,70) output(64,better,69) output(24,better,50) output(24,better,23) output(42,better,24) output(42,better,23) output(42,better,50) output(49,better,24) output(49,better,23) output(49,better,50) output(72,better,52) output(72,better,69) output(29,worse,67) output(50,worse,67) output(23,worse,67) output(24,worse,67) output(49,worse,67) output(47,eq,70) output(29,eq,49) output(50,eq,23) output(64,eq,72) output(42,eq,67)
Optimization: 10 7
Answer: 8
preference(1,(1,2),1,for(atom(hasDifficulty(2))),6) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasPrepTime(3))),6) preference(1,(1,6),1,for(atom(hasPrep(2))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,(1,14),1,for(atom(hasPrep(4))),6) preference(1,less(weight)) output(29,better,24) output(29,better,50) output(29,better,23) output(52,better,69) output(64,better,47) output(64,better,70) output(64,better,69) output(24,better,50) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,52) output(72,better,69) output(29,worse,49) output(50,worse,23) output(50,worse,67) output(64,worse,72) output(23,worse,67) output(24,worse,67) output(24,eq,23) output(64,eq,52) output(29,eq,67)
Optimization: 9 6
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasPrep(6))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),4) preference(1,(1,5),1,for(atom(hasPrep(7))),6) preference(1,(1,7),1,for(atom(hasPrep(3))),4) preference(1,(1,8),1,for(atom(hasDifficulty(2))),6) preference(1,(1,12),1,for(atom(hasPrep(4))),6) preference(1,(1,14),1,for(atom(hasPrep(2))),4) preference(1,less(weight)) output(29,better,24) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(24,better,23) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(49,better,24) output(49,better,23) output(49,better,67) output(72,better,69) output(23,worse,67) output(24,worse,50) output(72,worse,52) output(47,eq,70) output(29,eq,49) output(24,eq,67) output(49,eq,50) output(29,eq,50)
Optimization: 8 8
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasPrep(6))),4) preference(1,(1,5),1,for(atom(hasPrep(4))),6) preference(1,(1,8),1,for(atom(hasDifficulty(2))),6) preference(1,(1,10),1,for(atom(hasPrep(7))),6) preference(1,(1,11),1,for(atom(hasPrep(2))),6) preference(1,(1,14),1,for(atom(hasPrep(3))),4) preference(1,less(weight)) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(24,better,23) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,69) output(23,worse,67) output(72,worse,52) output(47,eq,70) output(29,eq,49) output(24,eq,50) output(50,eq,67) output(24,eq,67)
Optimization: 7 7
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(2))),6) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasPrep(6))),2) preference(1,(1,6),1,for(atom(hasDifficulty(1))),8) preference(1,(1,7),1,for(atom(hasPrep(7))),5) preference(1,(1,8),1,for(atom(hasPrep(5))),4) preference(1,(1,9),1,for(atom(hasPrep(1))),3) preference(1,(1,10),1,for(atom(hasPrepTime(3))),7) preference(1,(1,11),1,for(atom(hasCost(1))),3) preference(1,(1,12),1,for(atom(hasPrep(4))),7) preference(1,(1,13),1,for(atom(hasDifficulty(2))),5) preference(1,(1,14),1,for(atom(hasPrepTime(1))),2) preference(1,less(weight)) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,50) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,69) output(29,worse,49) output(50,worse,23) output(50,worse,67) output(24,worse,23) output(24,worse,67) output(72,worse,52)
Optimization: 6 12
Answer: 12
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,2),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasDifficulty(2))),1) preference(1,(1,4),1,for(atom(hasPrep(4))),8) preference(1,(1,5),1,for(atom(hasPrep(0))),7) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasPrep(1))),7) preference(1,(1,9),1,for(atom(hasPrepTime(3))),6) preference(1,(1,10),1,for(atom(hasPrep(6))),1) preference(1,(1,11),1,for(atom(hasPrep(7))),4) preference(1,(1,12),1,for(atom(hasPrep(2))),5) preference(1,less(weight)) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,69) output(29,worse,49) output(24,worse,50) output(72,worse,52) output(64,eq,47) output(24,eq,23)
Optimization: 5 12
Answer: 13
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,2),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasDifficulty(2))),1) preference(1,(1,4),1,for(atom(hasPrep(4))),8) preference(1,(1,5),1,for(atom(hasPrep(0))),7) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,9),1,for(atom(hasPrepTime(3))),6) preference(1,(1,10),1,for(atom(hasPrep(6))),1) preference(1,(1,11),1,for(atom(hasPrep(7))),4) preference(1,(1,12),1,for(atom(hasPrep(2))),5) preference(1,(1,13),1,for(atom(hasPrep(3))),4) preference(1,less(weight)) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,69) output(29,worse,49) output(24,worse,50) output(72,worse,52) output(24,eq,23)
Optimization: 4 12
Answer: 14
preference(1,(1,1),1,for(atom(hasCost(2))),1) preference(1,(1,2),1,for(atom(hasPrep(5))),6) preference(1,(1,3),1,for(atom(hasDifficulty(2))),1) preference(1,(1,4),1,for(atom(hasPrepTime(2))),2) preference(1,(1,5),1,for(atom(hasPrep(0))),2) preference(1,(1,6),1,for(atom(hasPrep(4))),8) preference(1,(1,7),1,for(atom(hasPrepTime(1))),3) preference(1,(1,8),1,for(atom(hasCost(1))),4) preference(1,(1,9),1,for(atom(hasPrepTime(3))),6) preference(1,(1,10),1,for(atom(hasPrep(6))),1) preference(1,(1,11),1,for(atom(hasPrep(7))),4) preference(1,(1,12),1,for(atom(hasPrep(2))),2) preference(1,(1,13),1,for(atom(hasDifficulty(1))),4) preference(1,less(weight)) output(29,better,49) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,69) output(24,worse,50) output(72,worse,52) output(24,eq,23)
Optimization: 3 13
Answer: 15
preference(1,(1,1),1,for(atom(hasPrepTime(2))),6) preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasPrep(2))),6) preference(1,(1,4),1,for(atom(hasPrepTime(1))),7) preference(1,(1,5),1,for(atom(hasCost(2))),3) preference(1,(1,7),1,for(atom(hasPrepTime(3))),8) preference(1,(1,9),1,for(atom(hasPrep(5))),7) preference(1,(1,10),1,for(atom(hasPrep(6))),1) preference(1,(1,11),1,for(atom(hasPrep(4))),8) preference(1,(1,12),1,for(atom(hasDifficulty(2))),7) preference(1,(1,13),1,for(atom(hasPrep(0))),6) preference(1,(1,14),1,for(atom(hasCost(1))),2) preference(1,less(weight)) output(29,better,49) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,50) output(24,better,23) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,69) output(50,worse,23) output(72,worse,52) output(50,eq,67)
Optimization: 3 12
Answer: 16
preference(1,(1,1),1,for(atom(hasPrepTime(1))),1) preference(1,(1,2),1,for(atom(hasPrep(6))),2) preference(1,(1,3),1,for(atom(hasPrepTime(2))),3) preference(1,(1,6),1,for(atom(hasPrep(2))),5) preference(1,(1,8),1,for(atom(hasPrepTime(3))),8) preference(1,(1,9),1,for(atom(hasPrep(0))),1) preference(1,(1,10),1,for(atom(hasCost(1))),3) preference(1,(1,11),1,for(atom(hasPrep(4))),6) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,(1,14),1,for(atom(hasDifficulty(1))),3) preference(1,less(weight)) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,50) output(24,better,23) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,69) output(72,worse,52) output(29,eq,49)
Optimization: 2 11
Answer: 17
preference(1,(1,1),1,for(atom(hasPrep(5))),8) preference(1,(1,2),1,for(atom(hasCost(2))),4) preference(1,(1,3),1,for(atom(hasPrep(1))),5) preference(1,(1,4),1,for(atom(hasDifficulty(1))),5) preference(1,(1,5),1,for(atom(hasCost(1))),7) preference(1,(1,6),1,for(atom(hasPrep(7))),8) preference(1,(1,7),1,for(atom(hasDifficulty(2))),3) preference(1,(1,8),1,for(atom(hasPrepTime(2))),4) preference(1,(1,9),1,for(atom(hasPrepTime(1))),8) preference(1,(1,10),1,for(atom(hasPrep(0))),4) preference(1,(1,11),1,for(atom(hasPrep(6))),2) preference(1,(1,12),1,for(atom(hasPrep(4))),8) preference(1,(1,13),1,for(atom(hasPrep(2))),2) preference(1,(1,14),1,for(atom(hasPrepTime(3))),6) preference(1,less(weight)) output(29,better,49) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,50) output(24,better,23) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,52) output(72,better,69)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 18
preference(1,(1,1),1,for(atom(hasDifficulty(2))),7) preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasPrep(2))),1) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasPrep(4))),4) preference(1,(1,6),1,for(atom(hasPrep(7))),3) preference(1,(1,7),1,for(atom(hasPrep(6))),2) preference(1,(1,8),1,for(atom(hasCost(2))),3) preference(1,(1,9),1,for(atom(hasPrep(5))),7) preference(1,(1,11),1,for(atom(hasPrepTime(1))),7) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasCost(1))),6) preference(1,less(weight)) output(29,better,49) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,50) output(24,better,23) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,52) output(72,better,69)
Optimization: 0 12
Answer: 19
preference(1,(1,1),1,for(atom(hasDifficulty(2))),7) preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasPrep(2))),1) preference(1,(1,4),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasPrep(4))),7) preference(1,(1,7),1,for(atom(hasPrep(6))),2) preference(1,(1,8),1,for(atom(hasCost(2))),3) preference(1,(1,9),1,for(atom(hasPrep(5))),7) preference(1,(1,11),1,for(atom(hasPrepTime(1))),7) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasCost(1))),6) preference(1,less(weight)) output(29,better,49) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,50) output(24,better,23) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,52) output(72,better,69)
Optimization: 0 11
Answer: 20
preference(1,(1,1),1,for(atom(hasDifficulty(2))),3) preference(1,(1,3),1,for(atom(hasCost(1))),7) preference(1,(1,4),1,for(atom(hasCost(2))),8) preference(1,(1,5),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasPrep(7))),3) preference(1,(1,11),1,for(atom(hasPrep(4))),4) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,(1,14),1,for(atom(hasPrep(6))),2) preference(1,less(weight)) output(29,better,49) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,50) output(24,better,23) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,52) output(72,better,69)
Optimization: 0 9
Answer: 21
preference(1,(1,3),1,for(atom(hasCost(1))),7) preference(1,(1,4),1,for(atom(hasCost(2))),8) preference(1,(1,7),1,for(atom(hasPrep(2))),5) preference(1,(1,9),1,for(atom(hasPrep(7))),3) preference(1,(1,10),1,for(atom(hasPrep(4))),5) preference(1,(1,12),1,for(atom(hasPrepTime(3))),8) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,(1,14),1,for(atom(hasPrep(6))),2) preference(1,less(weight)) output(29,better,49) output(29,better,24) output(29,better,50) output(29,better,23) output(29,better,67) output(50,better,23) output(50,better,67) output(52,better,69) output(64,better,47) output(64,better,72) output(64,better,52) output(64,better,70) output(64,better,69) output(23,better,67) output(24,better,50) output(24,better,23) output(24,better,67) output(42,better,24) output(42,better,23) output(42,better,50) output(42,better,67) output(47,better,70) output(49,better,24) output(49,better,23) output(49,better,50) output(49,better,67) output(72,better,52) output(72,better,69)
Optimization: 0 8
Progression : 0 [2;8] (Error: 3)
Progression : 0 [3;8] (Error: 1.66667)
Progression : 0 [4;8] (Error: 1)
Progression : 0 [5;8] (Error: 0.6)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.052 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 21+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 296.437s (Solving: 294.90s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1180.928s
Threads      : 4        (Winner: 4)

Choices      : 8455373  (Domain: 949931)
Conflicts    : 7932857  (Analyzed: 7932852)
Restarts     : 5828     (Average: 1361.16 Last: 303674)
Model-Level  : 32.1    
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 8049886  (Deleted: 7791722)
  Binary     : 562      (Ratio:   0.01%)
  Ternary    : 5198     (Ratio:   0.06%)
  Conflict   : 7932852  (Average Length:  198.0 Ratio:  98.55%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 117034   (Average Length:   75.4 Ratio:   1.45%) 
  Distributed: 39172    (Ratio:   0.49% Average LBD: 3.73) 
  Integrated : 117516   (Ratio: 300.00% Unit: 1117 Average Jumps: 6.59)
Backjumps    : 7932852  (Average:  1.06 Max:  42 Sum: 8392282)
  Executed   : 7932839  (Average:  1.06 Max:  42 Sum: 8392250 Ratio: 100.00%)
  Bounded    : 13       (Average:  2.46 Max:  20 Sum:     32 Ratio:   0.00%)

Rules        : 86384   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8340    
Bodies       : 5549    
  Sum        : 56      
  Count      : 14      
Equivalences : 3398     (Atom=Atom: 293 Body=Body: 126 Other: 2979)
Tight        : Yes
Variables    : 4753     (Eliminated:    0 Frozen: 3283)
Constraints  : 85928    (Binary:  96.4% Ternary:   1.7% Other:   1.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  5 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(3)) ; 
  6 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(7)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(3)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasPrep(4)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(2)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(7)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(3)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrep(4)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCost(1)) ; 
  7 :: atom(hasPrep(4)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(6)) ; 
  4 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(2)) ; 
  4 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(0)) ; 
  2 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(0)) ; 
  3 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(1)) ; 
  3 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(7)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(4)) ; 
  3 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(6)) ; 
  3 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(4)) ; 
  2 :: atom(hasPrep(6)) ; 
  3 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(6)) 
}.
