asprin_vL version 1.0
Reading from stdin
-:1223:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1233:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1248:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1329:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1590:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1603:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1780:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1909:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1981:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1985:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1985:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1991:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2090:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2116:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2236:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2270:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2292:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1140:1-16: info: no atoms over signature occur in program:
  output/3

-:1132:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1133:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(22,eq,33) output(33,eq,83) output(49,eq,71) output(71,eq,53) output(53,eq,52) output(84,eq,80) output(39,eq,82) output(82,eq,65) output(65,eq,33) output(68,eq,22) output(22,eq,10) output(74,eq,80) output(80,eq,88) output(84,eq,88) output(74,eq,88) output(68,eq,10) output(82,eq,33) output(39,eq,65) output(71,eq,52) output(49,eq,53) output(22,eq,83) output(65,eq,83) output(68,eq,33) output(82,eq,83) output(39,eq,83) output(68,eq,83) output(49,eq,52) output(39,eq,33)
Optimization: 28 0
Answer: 2
preference(1,(1,2),1,for(atom(hasPrepTime(1))),6) preference(1,(1,4),1,for(atom(hasPrep(5))),6) preference(1,(1,14),1,for(atom(hasPrep(6))),3) preference(1,less(weight)) output(22,better,83) output(53,better,52) output(74,better,80) output(74,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(65,better,83) output(68,better,83) output(22,worse,33) output(22,worse,10) output(39,worse,82) output(39,worse,65) output(39,worse,33) output(71,worse,53) output(71,worse,52) output(80,worse,88) output(49,worse,53) output(49,worse,52) output(68,worse,10) output(68,worse,33) output(49,eq,71) output(65,eq,33) output(68,eq,22) output(39,eq,83)
Optimization: 16 3
Answer: 3
preference(1,(1,1),1,for(atom(hasPrep(0))),3) preference(1,(1,3),1,for(atom(hasDifficulty(1))),5) preference(1,(1,4),1,for(atom(hasCost(1))),5) preference(1,(1,5),1,for(atom(hasPrep(1))),5) preference(1,(1,6),1,for(atom(hasPrep(6))),5) preference(1,(1,7),1,for(atom(hasPrepTime(2))),5) preference(1,(1,8),1,for(atom(hasCost(2))),5) preference(1,(1,9),1,for(atom(hasPrepTime(1))),5) preference(1,(1,10),1,for(atom(hasPrepTime(3))),5) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,(1,14),1,for(atom(hasPrep(7))),6) preference(1,less(weight)) output(22,better,10) output(71,better,53) output(74,better,80) output(74,better,88) output(80,better,88) output(82,better,65) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(49,better,53) output(65,better,83) output(68,better,10) output(22,worse,33) output(39,worse,82) output(39,worse,65) output(39,worse,33) output(53,worse,52) output(82,worse,33) output(65,worse,33) output(68,worse,33) output(49,eq,71) output(68,eq,22) output(71,eq,52) output(22,eq,83) output(39,eq,83) output(68,eq,83) output(49,eq,52)
Optimization: 15 11
Answer: 4
preference(1,(1,1),1,for(atom(hasCost(2))),3) preference(1,(1,2),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(1))),3) preference(1,(1,6),1,for(atom(hasPrepTime(3))),1) preference(1,(1,7),1,for(atom(hasPrep(0))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasPrep(1))),3) preference(1,(1,10),1,for(atom(hasPrep(6))),3) preference(1,(1,12),1,for(atom(hasDifficulty(2))),6) preference(1,(1,14),1,for(atom(hasDifficulty(1))),3) preference(1,less(weight)) output(22,better,10) output(39,better,82) output(39,better,83) output(39,better,33) output(71,better,53) output(71,better,52) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(53,worse,52) output(74,worse,88) output(80,worse,88) output(82,worse,65) output(82,worse,33) output(82,worse,83) output(84,worse,80) output(84,worse,88) output(22,eq,33) output(33,eq,83) output(49,eq,71) output(74,eq,80) output(39,eq,65) output(22,eq,83)
Optimization: 14 10
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(5))),8) preference(1,(1,2),1,for(atom(hasCost(1))),6) preference(1,(1,3),1,for(atom(hasDifficulty(1))),7) preference(1,(1,4),1,for(atom(hasPrep(1))),8) preference(1,(1,5),1,for(atom(hasPrep(6))),6) preference(1,(1,6),1,for(atom(hasPrepTime(2))),1) preference(1,(1,7),1,for(atom(hasCost(2))),6) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasPrepTime(3))),6) preference(1,(1,10),1,for(atom(hasPrep(7))),6) preference(1,(1,11),1,for(atom(hasPrepTime(1))),6) preference(1,(1,12),1,for(atom(hasDifficulty(2))),2) preference(1,(1,13),1,for(atom(hasPrep(2))),1) preference(1,less(weight)) output(39,better,82) output(39,better,83) output(39,better,33) output(71,better,53) output(71,better,52) output(84,better,80) output(84,better,88) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,33) output(68,better,83) output(22,worse,10) output(39,worse,65) output(74,worse,80) output(74,worse,88) output(82,worse,65) output(68,worse,10) output(22,eq,33) output(33,eq,83) output(53,eq,52) output(80,eq,88) output(82,eq,33) output(22,eq,83) output(82,eq,83)
Optimization: 13 13
Answer: 6
preference(1,(1,1),1,for(atom(hasCost(2))),3) preference(1,(1,2),1,for(atom(hasPrepTime(2))),4) preference(1,(1,3),1,for(atom(hasPrep(0))),1) preference(1,(1,4),1,for(atom(hasPrepTime(1))),3) preference(1,(1,5),1,for(atom(hasPrepTime(3))),1) preference(1,(1,7),1,for(atom(hasCost(1))),3) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasDifficulty(2))),2) preference(1,(1,10),1,for(atom(hasPrep(2))),2) preference(1,(1,11),1,for(atom(hasPrep(3))),6) preference(1,(1,12),1,for(atom(hasPrep(7))),6) preference(1,(1,13),1,for(atom(hasPrep(1))),8) preference(1,(1,14),1,for(atom(hasDifficulty(1))),3) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,82) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,52) output(84,better,80) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(39,worse,65) output(71,worse,53) output(74,worse,80) output(74,worse,88) output(80,worse,88) output(82,worse,65) output(82,worse,33) output(82,worse,83) output(84,worse,88) output(33,eq,83)
Optimization: 10 13
Answer: 7
preference(1,(1,1),1,for(atom(hasCost(2))),3) preference(1,(1,2),1,for(atom(hasPrepTime(2))),4) preference(1,(1,3),1,for(atom(hasCost(1))),3) preference(1,(1,4),1,for(atom(hasPrepTime(1))),3) preference(1,(1,5),1,for(atom(hasPrep(6))),8) preference(1,(1,6),1,for(atom(hasPrepTime(3))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,10),1,for(atom(hasPrep(0))),1) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,14),1,for(atom(hasDifficulty(1))),3) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,52) output(74,better,80) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(39,worse,82) output(71,worse,53) output(74,worse,88) output(80,worse,88) output(84,worse,88) output(49,worse,53) output(33,eq,83) output(49,eq,71) output(39,eq,65)
Optimization: 9 10
Answer: 8
preference(1,(1,1),1,for(atom(hasCost(2))),3) preference(1,(1,2),1,for(atom(hasPrepTime(2))),4) preference(1,(1,3),1,for(atom(hasDifficulty(2))),5) preference(1,(1,4),1,for(atom(hasPrepTime(1))),3) preference(1,(1,5),1,for(atom(hasPrep(6))),8) preference(1,(1,6),1,for(atom(hasPrep(0))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),3) preference(1,(1,9),1,for(atom(hasPrep(7))),2) preference(1,(1,13),1,for(atom(hasPrepTime(3))),1) preference(1,(1,14),1,for(atom(hasDifficulty(1))),3) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,52) output(74,better,80) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(39,worse,82) output(71,worse,53) output(74,worse,88) output(80,worse,88) output(84,worse,88) output(49,worse,53) output(33,eq,83) output(49,eq,71)
Optimization: 8 10
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(6))),5) preference(1,(1,2),1,for(atom(hasDifficulty(1))),3) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),3) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),2) preference(1,(1,7),1,for(atom(hasPrepTime(1))),5) preference(1,(1,11),1,for(atom(hasCost(2))),4) preference(1,(1,12),1,for(atom(hasPrep(1))),2) preference(1,less(weight)) output(22,better,33) output(22,better,83) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,52) output(74,better,80) output(74,better,88) output(80,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,33) output(68,better,83) output(22,worse,10) output(39,worse,82) output(71,worse,53) output(49,worse,71) output(49,worse,53) output(68,worse,22) output(68,worse,10)
Optimization: 7 9
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(6))),5) preference(1,(1,2),1,for(atom(hasDifficulty(1))),3) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),3) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),2) preference(1,(1,7),1,for(atom(hasPrepTime(1))),5) preference(1,(1,9),1,for(atom(hasDifficulty(2))),8) preference(1,(1,11),1,for(atom(hasCost(2))),4) preference(1,(1,12),1,for(atom(hasPrep(1))),2) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,52) output(74,better,80) output(74,better,88) output(80,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,33) output(68,better,83) output(39,worse,82) output(71,worse,53) output(49,worse,71) output(49,worse,53) output(68,worse,22) output(68,eq,10)
Optimization: 6 10
Answer: 11
preference(1,(1,1),1,for(atom(hasPrep(6))),5) preference(1,(1,2),1,for(atom(hasDifficulty(1))),3) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),2) preference(1,(1,10),1,for(atom(hasDifficulty(2))),8) preference(1,(1,11),1,for(atom(hasCost(2))),4) preference(1,(1,12),1,for(atom(hasPrep(1))),2) preference(1,(1,13),1,for(atom(hasPrep(7))),5) preference(1,(1,14),1,for(atom(hasPrepTime(1))),5) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,52) output(74,better,80) output(74,better,88) output(80,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,10) output(68,better,33) output(68,better,83) output(39,worse,82) output(71,worse,53) output(49,worse,71) output(49,worse,53) output(68,worse,22)
Optimization: 5 10
Answer: 12
preference(1,(1,1),1,for(atom(hasPrep(6))),5) preference(1,(1,2),1,for(atom(hasDifficulty(1))),3) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,6),1,for(atom(hasCost(1))),2) preference(1,(1,8),1,for(atom(hasDifficulty(2))),8) preference(1,(1,10),1,for(atom(hasPrep(7))),4) preference(1,(1,12),1,for(atom(hasPrep(1))),2) preference(1,(1,13),1,for(atom(hasPrepTime(3))),1) preference(1,(1,14),1,for(atom(hasCost(2))),5) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,52) output(74,better,80) output(74,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(39,worse,82) output(71,worse,53) output(80,worse,88) output(84,eq,88)
Optimization: 4 10
Answer: 13
preference(1,(1,2),1,for(atom(hasPrep(0))),4) preference(1,(1,3),1,for(atom(hasDifficulty(1))),1) preference(1,(1,4),1,for(atom(hasCost(1))),3) preference(1,(1,6),1,for(atom(hasCost(2))),7) preference(1,(1,7),1,for(atom(hasPrepTime(1))),3) preference(1,(1,8),1,for(atom(hasPrepTime(3))),6) preference(1,(1,9),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasPrep(7))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),5) preference(1,(1,13),1,for(atom(hasPrepTime(2))),8) preference(1,(1,14),1,for(atom(hasPrep(6))),6) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(80,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(49,better,52) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(49,worse,71) output(49,worse,53) output(65,eq,33)
Optimization: 3 11
Answer: 14
preference(1,(1,2),1,for(atom(hasPrep(0))),4) preference(1,(1,3),1,for(atom(hasDifficulty(1))),1) preference(1,(1,4),1,for(atom(hasCost(1))),3) preference(1,(1,6),1,for(atom(hasCost(2))),7) preference(1,(1,7),1,for(atom(hasPrepTime(1))),3) preference(1,(1,8),1,for(atom(hasPrepTime(3))),3) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasPrep(7))),6) preference(1,(1,12),1,for(atom(hasPrep(5))),5) preference(1,(1,13),1,for(atom(hasPrepTime(2))),8) preference(1,(1,14),1,for(atom(hasPrep(6))),6) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(80,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83) output(49,worse,71) output(49,worse,53)
Optimization: 2 11
Answer: 15
preference(1,(1,1),1,for(atom(hasPrepTime(1))),3) preference(1,(1,2),1,for(atom(hasPrep(1))),1) preference(1,(1,3),1,for(atom(hasPrep(5))),4) preference(1,(1,4),1,for(atom(hasPrepTime(3))),2) preference(1,(1,5),1,for(atom(hasCost(2))),3) preference(1,(1,6),1,for(atom(hasPrepTime(2))),5) preference(1,(1,9),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasPrep(6))),2) preference(1,(1,13),1,for(atom(hasPrep(0))),2) preference(1,(1,14),1,for(atom(hasPrep(7))),4) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(80,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83)
Optimization: 0 10
Progression : 0 [ 1;10] (Error: 9)
Answer: 16
preference(1,(1,1),1,for(atom(hasPrep(5))),6) preference(1,(1,2),1,for(atom(hasDifficulty(2))),3) preference(1,(1,6),1,for(atom(hasPrep(7))),6) preference(1,(1,7),1,for(atom(hasPrepTime(2))),7) preference(1,(1,8),1,for(atom(hasPrep(6))),1) preference(1,(1,10),1,for(atom(hasPrepTime(3))),5) preference(1,(1,11),1,for(atom(hasPrep(1))),5) preference(1,(1,12),1,for(atom(hasCost(2))),3) preference(1,(1,13),1,for(atom(hasPrep(0))),2) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(80,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83)
Optimization: 0 9
Progression : 0 [2;9] (Error: 3.5)
Answer: 17
preference(1,(1,1),1,for(atom(hasPrep(0))),1) preference(1,(1,2),1,for(atom(hasPrepTime(1))),3) preference(1,(1,6),1,for(atom(hasDifficulty(2))),3) preference(1,(1,8),1,for(atom(hasPrep(7))),6) preference(1,(1,9),1,for(atom(hasCost(2))),3) preference(1,(1,10),1,for(atom(hasPrep(5))),4) preference(1,(1,11),1,for(atom(hasPrep(1))),2) preference(1,(1,13),1,for(atom(hasPrepTime(2))),5) preference(1,less(weight)) output(22,better,33) output(22,better,10) output(22,better,83) output(39,better,82) output(39,better,65) output(39,better,83) output(39,better,33) output(53,better,52) output(71,better,53) output(71,better,52) output(74,better,80) output(74,better,88) output(80,better,88) output(82,better,65) output(82,better,33) output(82,better,83) output(84,better,80) output(84,better,88) output(33,better,83) output(49,better,71) output(49,better,53) output(49,better,52) output(65,better,33) output(65,better,83) output(68,better,22) output(68,better,10) output(68,better,33) output(68,better,83)
Optimization: 0 8
Progression : 0 [3;8] (Error: 1.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.030 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 17+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 298.351s (Solving: 296.78s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1188.544s
Threads      : 4        (Winner: 4)

Choices      : 7078474  (Domain: 821969)
Conflicts    : 6587700  (Analyzed: 6587697)
Restarts     : 5317     (Average: 1238.99 Last: 487870)
Model-Level  : 37.5    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 6801147  (Deleted: 6523057)
  Binary     : 601      (Ratio:   0.01%)
  Ternary    : 5664     (Ratio:   0.08%)
  Conflict   : 6587697  (Average Length:  242.4 Ratio:  96.86%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 213450   (Average Length:  201.5 Ratio:   3.14%) 
  Distributed: 71217    (Ratio:   1.08% Average LBD: 3.80) 
  Integrated : 213651   (Ratio: 300.00% Unit: 263 Average Jumps: 4.32)
Backjumps    : 6587697  (Average:  1.07 Max:  34 Sum: 7021957)
  Executed   : 6587696  (Average:  1.07 Max:  34 Sum: 7021940 Ratio: 100.00%)
  Bounded    : 1        (Average: 17.00 Max:  17 Sum:     17 Ratio:   0.00%)

Rules        : 88400   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8364    
Bodies       : 5549    
  Sum        : 56      
  Count      : 14      
Equivalences : 3398     (Atom=Atom: 293 Body=Body: 126 Other: 2979)
Tight        : Yes
Variables    : 4777     (Eliminated:    0 Frozen: 3307)
Constraints  : 87968    (Binary:  96.5% Ternary:   1.7% Other:   1.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(0)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(6)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(5)) ; 
  6 :: atom(hasCost(1)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(5)) ; 
  2 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(3)) ; 
  6 :: atom(hasPrep(7)) ; 
  8 :: atom(hasPrep(1)) ; 
  3 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(7)) ; 
  3 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(0)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(1)) ; 
  7 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(0)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasCost(1)) ; 
  7 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrep(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrepTime(3)) ; 
  3 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(5)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(1)) ; 
  3 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrep(0)) ; 
  3 :: atom(hasPrepTime(1)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  3 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrepTime(2)) 
}.
