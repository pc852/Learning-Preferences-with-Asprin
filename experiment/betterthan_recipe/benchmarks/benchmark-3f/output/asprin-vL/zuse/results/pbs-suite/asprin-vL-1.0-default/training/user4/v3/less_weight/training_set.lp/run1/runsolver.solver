asprin_vL version 1.0
Reading from stdin
-:1220:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1230:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1245:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1326:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1587:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1600:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1777:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1906:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1978:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1982:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1982:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1988:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2087:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2113:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2233:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2267:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2289:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1137:1-16: info: no atoms over signature occur in program:
  output/3

-:1129:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1130:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(52,eq,78) output(78,eq,60) output(79,eq,4) output(46,eq,39) output(39,eq,7) output(7,eq,32) output(72,eq,31) output(18,eq,51) output(51,eq,90) output(90,eq,79) output(42,eq,23) output(23,eq,7) output(42,eq,7) output(51,eq,79) output(18,eq,90) output(39,eq,32) output(23,eq,32) output(46,eq,7) output(90,eq,4) output(52,eq,60) output(51,eq,4) output(18,eq,4) output(42,eq,32) output(46,eq,32) output(18,eq,79)
Optimization: 25 0
Answer: 2
preference(1,(1,4),1,for(atom(hasPrep(7))),8) preference(1,less(weight)) output(42,better,23) output(23,worse,7) output(23,worse,32) output(52,eq,78) output(78,eq,60) output(79,eq,4) output(46,eq,39) output(39,eq,7) output(7,eq,32) output(72,eq,31) output(18,eq,51) output(51,eq,90) output(90,eq,79) output(42,eq,7) output(51,eq,79) output(18,eq,90) output(39,eq,32) output(46,eq,7) output(90,eq,4) output(52,eq,60) output(51,eq,4) output(18,eq,4) output(42,eq,32) output(46,eq,32) output(18,eq,79)
Optimization: 24 1
Answer: 3
preference(1,(1,1),1,for(atom(hasPrepTime(3))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasCost(2))),7) preference(1,(1,5),1,for(atom(hasCost(1))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),3) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,4) output(52,better,78) output(79,better,4) output(90,better,4) output(23,better,7) output(52,worse,60) output(7,worse,32) output(18,worse,51) output(18,worse,90) output(18,worse,4) output(18,worse,79) output(42,worse,23) output(42,worse,32) output(72,worse,31) output(78,worse,60) output(51,eq,90) output(90,eq,79) output(42,eq,7) output(51,eq,79) output(23,eq,32)
Optimization: 15 7
Answer: 4
preference(1,(1,1),1,for(atom(hasPrepTime(3))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasCost(2))),7) preference(1,(1,5),1,for(atom(hasCost(1))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),3) preference(1,(1,14),1,for(atom(hasPrep(5))),3) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,4) output(52,better,78) output(79,better,4) output(90,better,4) output(23,better,7) output(23,better,32) output(52,worse,60) output(18,worse,51) output(18,worse,90) output(18,worse,4) output(18,worse,79) output(42,worse,23) output(72,worse,31) output(78,worse,60) output(7,eq,32) output(51,eq,90) output(90,eq,79) output(42,eq,7) output(51,eq,79) output(42,eq,32)
Optimization: 14 8
Answer: 5
preference(1,(1,1),1,for(atom(hasPrepTime(3))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,3),1,for(atom(hasDifficulty(2))),3) preference(1,(1,4),1,for(atom(hasCost(2))),7) preference(1,(1,5),1,for(atom(hasCost(1))),8) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,11),1,for(atom(hasPrep(1))),3) preference(1,(1,13),1,for(atom(hasPrep(5))),6) preference(1,(1,14),1,for(atom(hasPrep(3))),8) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(52,better,78) output(79,better,4) output(90,better,4) output(23,better,7) output(23,better,32) output(42,better,7) output(42,better,32) output(51,worse,90) output(51,worse,79) output(52,worse,60) output(7,worse,32) output(18,worse,51) output(18,worse,90) output(18,worse,4) output(18,worse,79) output(72,worse,31) output(78,worse,60) output(90,eq,79) output(42,eq,23) output(51,eq,4)
Optimization: 13 10
Answer: 6
preference(1,(1,1),1,for(atom(hasCost(1))),1) preference(1,(1,2),1,for(atom(hasDifficulty(1))),1) preference(1,(1,3),1,for(atom(hasPrepTime(3))),1) preference(1,(1,4),1,for(atom(hasPrepTime(2))),1) preference(1,(1,5),1,for(atom(hasPrep(0))),1) preference(1,(1,6),1,for(atom(hasPrep(1))),1) preference(1,(1,7),1,for(atom(hasPrep(2))),6) preference(1,(1,8),1,for(atom(hasPrep(6))),1) preference(1,(1,11),1,for(atom(hasDifficulty(2))),3) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(39,better,7) output(46,better,39) output(46,better,7) output(46,better,32) output(52,better,78) output(52,better,60) output(18,better,51) output(18,better,90) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(78,better,60) output(51,worse,90) output(51,worse,79) output(51,worse,4) output(90,worse,79) output(90,worse,4) output(7,worse,32) output(72,worse,31) output(79,eq,4) output(39,eq,32) output(18,eq,4) output(18,eq,79)
Optimization: 11 10
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(0))),3) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasPrep(2))),1) preference(1,(1,5),1,for(atom(hasPrep(5))),4) preference(1,(1,6),1,for(atom(hasPrepTime(2))),7) preference(1,(1,7),1,for(atom(hasCost(1))),7) preference(1,(1,8),1,for(atom(hasCost(2))),2) preference(1,(1,9),1,for(atom(hasPrep(6))),3) preference(1,(1,13),1,for(atom(hasPrep(1))),3) preference(1,less(weight)) output(46,better,39) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,60) output(90,better,79) output(90,better,4) output(7,better,32) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,32) output(78,better,60) output(39,worse,7) output(39,worse,32) output(46,worse,7) output(52,worse,78) output(18,worse,51) output(42,worse,23) output(42,worse,7) output(72,worse,31) output(79,eq,4)
Optimization: 9 9
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(0))),3) preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasPrep(2))),7) preference(1,(1,5),1,for(atom(hasPrep(5))),4) preference(1,(1,6),1,for(atom(hasPrepTime(2))),7) preference(1,(1,7),1,for(atom(hasPrepTime(3))),1) preference(1,(1,8),1,for(atom(hasCost(2))),2) preference(1,(1,9),1,for(atom(hasPrep(6))),3) preference(1,(1,13),1,for(atom(hasPrep(1))),3) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,60) output(90,better,79) output(90,better,4) output(7,better,32) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,32) output(78,better,60) output(52,worse,78) output(18,worse,51) output(42,worse,23) output(42,worse,7) output(72,worse,31) output(79,eq,4)
Optimization: 6 9
Answer: 9
preference(1,(1,1),1,for(atom(hasPrep(2))),8) preference(1,(1,2),1,for(atom(hasDifficulty(1))),5) preference(1,(1,3),1,for(atom(hasPrepTime(3))),8) preference(1,(1,4),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasPrep(0))),8) preference(1,(1,6),1,for(atom(hasPrep(5))),6) preference(1,(1,7),1,for(atom(hasCost(2))),8) preference(1,(1,8),1,for(atom(hasPrep(1))),1) preference(1,(1,9),1,for(atom(hasDifficulty(2))),8) preference(1,(1,11),1,for(atom(hasPrep(7))),6) preference(1,(1,12),1,for(atom(hasPrep(6))),3) preference(1,(1,14),1,for(atom(hasPrepTime(2))),2) preference(1,less(weight)) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,60) output(79,better,4) output(90,better,79) output(90,better,4) output(7,better,32) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(78,better,60) output(39,worse,7) output(39,worse,32) output(52,worse,78) output(18,worse,51) output(72,eq,31)
Optimization: 5 12
Answer: 10
preference(1,(1,1),1,for(atom(hasCost(1))),5) preference(1,(1,4),1,for(atom(hasPrep(7))),5) preference(1,(1,5),1,for(atom(hasPrep(2))),4) preference(1,(1,6),1,for(atom(hasPrepTime(1))),4) preference(1,(1,7),1,for(atom(hasPrep(0))),7) preference(1,(1,8),1,for(atom(hasDifficulty(1))),3) preference(1,(1,10),1,for(atom(hasCost(2))),7) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),3) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,60) output(90,better,79) output(90,better,4) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(72,better,31) output(78,better,60) output(52,worse,78) output(7,worse,32) output(18,worse,51) output(79,eq,4)
Optimization: 4 9
Answer: 11
preference(1,(1,1),1,for(atom(hasCost(1))),5) preference(1,(1,2),1,for(atom(hasPrepTime(1))),4) preference(1,(1,3),1,for(atom(hasPrep(7))),5) preference(1,(1,5),1,for(atom(hasPrep(2))),4) preference(1,(1,6),1,for(atom(hasPrep(0))),7) preference(1,(1,7),1,for(atom(hasDifficulty(2))),4) preference(1,(1,8),1,for(atom(hasDifficulty(1))),3) preference(1,(1,10),1,for(atom(hasCost(2))),7) preference(1,(1,13),1,for(atom(hasPrep(5))),8) preference(1,(1,14),1,for(atom(hasPrepTime(2))),3) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,78) output(52,better,60) output(90,better,79) output(90,better,4) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(72,better,31) output(78,better,60) output(7,worse,32) output(18,worse,51) output(79,eq,4)
Optimization: 3 10
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(1))),7) preference(1,(1,2),1,for(atom(hasPrep(5))),8) preference(1,(1,3),1,for(atom(hasCost(1))),4) preference(1,(1,4),1,for(atom(hasPrep(2))),3) preference(1,(1,7),1,for(atom(hasCost(2))),7) preference(1,(1,8),1,for(atom(hasPrepTime(2))),7) preference(1,(1,10),1,for(atom(hasDifficulty(2))),6) preference(1,(1,11),1,for(atom(hasPrep(0))),5) preference(1,(1,12),1,for(atom(hasPrep(7))),1) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(39,better,7) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,78) output(52,better,60) output(79,better,4) output(90,better,79) output(90,better,4) output(18,better,51) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(72,better,31) output(78,better,60) output(39,worse,32) output(7,worse,32)
Optimization: 2 10
Answer: 13
preference(1,(1,1),1,for(atom(hasDifficulty(2))),1) preference(1,(1,2),1,for(atom(hasCost(2))),8) preference(1,(1,3),1,for(atom(hasPrep(5))),7) preference(1,(1,4),1,for(atom(hasCost(1))),3) preference(1,(1,5),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasPrep(0))),8) preference(1,(1,7),1,for(atom(hasPrep(7))),4) preference(1,(1,9),1,for(atom(hasPrepTime(2))),2) preference(1,(1,10),1,for(atom(hasPrepTime(1))),7) preference(1,(1,11),1,for(atom(hasPrep(4))),5) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,78) output(52,better,60) output(79,better,4) output(90,better,79) output(90,better,4) output(7,better,32) output(18,better,51) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(72,better,31) output(78,better,60)
Optimization: 0 12
Progression : 0 [ 1;12] (Error: 11)
Answer: 14
preference(1,(1,1),1,for(atom(hasDifficulty(2))),5) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,5),1,for(atom(hasPrep(7))),5) preference(1,(1,6),1,for(atom(hasCost(2))),8) preference(1,(1,7),1,for(atom(hasPrepTime(2))),2) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),5) preference(1,(1,11),1,for(atom(hasPrep(5))),5) preference(1,(1,12),1,for(atom(hasPrep(1))),1) preference(1,(1,14),1,for(atom(hasPrepTime(1))),5) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,78) output(52,better,60) output(79,better,4) output(90,better,79) output(90,better,4) output(7,better,32) output(18,better,51) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(72,better,31) output(78,better,60)
Optimization: 0 10
Answer: 15
preference(1,(1,1),1,for(atom(hasDifficulty(2))),5) preference(1,(1,2),1,for(atom(hasCost(1))),4) preference(1,(1,6),1,for(atom(hasCost(2))),8) preference(1,(1,7),1,for(atom(hasPrepTime(2))),2) preference(1,(1,8),1,for(atom(hasPrep(0))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),5) preference(1,(1,11),1,for(atom(hasPrep(5))),5) preference(1,(1,12),1,for(atom(hasPrep(1))),1) preference(1,(1,14),1,for(atom(hasPrepTime(1))),5) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,78) output(52,better,60) output(79,better,4) output(90,better,79) output(90,better,4) output(7,better,32) output(18,better,51) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(72,better,31) output(78,better,60)
Optimization: 0 9
Progression : 0 [2;9] (Error: 3.5)
Answer: 16
preference(1,(1,1),1,for(atom(hasCost(2))),5) preference(1,(1,2),1,for(atom(hasDifficulty(1))),2) preference(1,(1,6),1,for(atom(hasPrep(1))),1) preference(1,(1,7),1,for(atom(hasPrepTime(2))),2) preference(1,(1,8),1,for(atom(hasCost(1))),8) preference(1,(1,9),1,for(atom(hasDifficulty(2))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),8) preference(1,(1,13),1,for(atom(hasPrep(0))),5) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,78) output(52,better,60) output(79,better,4) output(90,better,79) output(90,better,4) output(7,better,32) output(18,better,51) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(72,better,31) output(78,better,60)
Optimization: 0 8
Progression : 0 [3;8] (Error: 1.66667)
Answer: 17
preference(1,(1,2),1,for(atom(hasPrep(5))),7) preference(1,(1,3),1,for(atom(hasCost(2))),4) preference(1,(1,6),1,for(atom(hasDifficulty(1))),2) preference(1,(1,7),1,for(atom(hasPrep(0))),4) preference(1,(1,8),1,for(atom(hasDifficulty(2))),7) preference(1,(1,9),1,for(atom(hasCost(1))),7) preference(1,(1,14),1,for(atom(hasPrep(1))),1) preference(1,less(weight)) output(39,better,7) output(39,better,32) output(46,better,39) output(46,better,7) output(46,better,32) output(51,better,90) output(51,better,79) output(51,better,4) output(52,better,78) output(52,better,60) output(79,better,4) output(90,better,79) output(90,better,4) output(7,better,32) output(18,better,51) output(18,better,90) output(18,better,4) output(18,better,79) output(23,better,7) output(23,better,32) output(42,better,23) output(42,better,7) output(42,better,32) output(72,better,31) output(78,better,60)
Optimization: 0 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.048 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 17+
  Optimum    : unknown
Optimization : 0 7
Calls        : 1
Time         : 296.640s (Solving: 295.06s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1181.582s
Threads      : 4        (Winner: 4)

Choices      : 7760250  (Domain: 662360)
Conflicts    : 7036214  (Analyzed: 7036211)
Restarts     : 5502     (Average: 1278.85 Last: 457255)
Model-Level  : 44.1    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 7251036  (Deleted: 6962117)
  Binary     : 604      (Ratio:   0.01%)
  Ternary    : 6682     (Ratio:   0.09%)
  Conflict   : 7036211  (Average Length:  236.7 Ratio:  97.04%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 214825   (Average Length:  171.4 Ratio:   2.96%) 
  Distributed: 71681    (Ratio:   1.02% Average LBD: 3.82) 
  Integrated : 215043   (Ratio: 300.00% Unit: 154 Average Jumps: 4.87)
Backjumps    : 7036211  (Average:  1.09 Max:  44 Sum: 7700498)
  Executed   : 7036210  (Average:  1.09 Max:  44 Sum: 7700483 Ratio: 100.00%)
  Bounded    : 1        (Average: 15.00 Max:  15 Sum:     15 Ratio:   0.00%)

Rules        : 83811   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8070    
Bodies       : 5516    
  Sum        : 50      
  Count      : 14      
Equivalences : 3293     (Atom=Atom: 263 Body=Body: 114 Other: 2916)
Tight        : Yes
Variables    : 4765     (Eliminated:    0 Frozen: 3295)
Constraints  : 83652    (Binary:  96.3% Ternary:   1.8% Other:   1.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  3 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(2)) ; 
  3 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(0)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(1)) ; 
  2 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(0)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(6)) ; 
  3 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  5 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCost(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(7)) ; 
  3 :: atom(hasPrep(6)) ; 
  2 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(0)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(0)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  7 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  3 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(2)) ; 
  7 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(5)) ; 
  3 :: atom(hasCost(1)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(0)) ; 
  4 :: atom(hasPrep(7)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(4)) ; 
  7 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(7)) ; 
  8 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasCost(1)) ; 
  8 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(2)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrep(5)) ; 
  4 :: atom(hasCost(2)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  7 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(1)) 
}.
