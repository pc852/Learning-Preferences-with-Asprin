asprin_vL version 1.0
Reading from stdin
-:1226:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1236:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1251:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1332:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1593:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1606:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1783:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1912:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1984:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1988:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1988:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1994:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2093:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2119:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2239:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2273:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2295:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1143:1-16: info: no atoms over signature occur in program:
  output/3

-:1135:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1136:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(75,eq,25) output(25,eq,55) output(55,eq,17) output(62,eq,94) output(52,eq,78) output(86,eq,8) output(99,eq,57) output(57,eq,91) output(91,eq,51) output(76,eq,55) output(55,eq,52) output(52,eq,8) output(71,eq,67) output(55,eq,8) output(25,eq,52) output(76,eq,52) output(57,eq,51) output(99,eq,91) output(55,eq,78) output(25,eq,17) output(76,eq,17) output(75,eq,55) output(75,eq,17) output(25,eq,78) output(76,eq,78) output(75,eq,78) output(99,eq,51) output(75,eq,52) output(25,eq,8) output(76,eq,8) output(75,eq,8)
Optimization: 31 0
Answer: 2
preference(1,(1,2),1,for(atom(hasPrep(0))),5) preference(1,less(weight)) output(25,better,8) output(52,better,8) output(55,better,8) output(76,better,8) output(86,better,8) output(75,better,8) output(57,worse,51) output(91,worse,51) output(99,worse,51) output(75,eq,25) output(25,eq,55) output(55,eq,17) output(62,eq,94) output(52,eq,78) output(99,eq,57) output(57,eq,91) output(76,eq,55) output(55,eq,52) output(71,eq,67) output(25,eq,52) output(76,eq,52) output(99,eq,91) output(55,eq,78) output(25,eq,17) output(76,eq,17) output(75,eq,55) output(75,eq,17) output(25,eq,78) output(76,eq,78) output(75,eq,78) output(75,eq,52)
Optimization: 25 1
Answer: 3
preference(1,(1,2),1,for(atom(hasCost(1))),5) preference(1,less(weight)) output(75,better,25) output(75,better,55) output(75,better,17) output(75,better,52) output(75,better,8) output(91,better,51) output(99,better,57) output(99,better,51) output(25,worse,78) output(52,worse,78) output(55,worse,78) output(57,worse,91) output(76,worse,78) output(25,eq,55) output(55,eq,17) output(62,eq,94) output(86,eq,8) output(76,eq,55) output(55,eq,52) output(52,eq,8) output(71,eq,67) output(55,eq,8) output(25,eq,52) output(76,eq,52) output(57,eq,51) output(99,eq,91) output(25,eq,17) output(76,eq,17) output(75,eq,78) output(25,eq,8) output(76,eq,8)
Optimization: 23 1
Answer: 4
preference(1,(1,1),1,for(atom(hasDifficulty(1))),5) preference(1,(1,2),1,for(atom(hasCost(1))),5) preference(1,(1,3),1,for(atom(hasPrep(1))),5) preference(1,(1,4),1,for(atom(hasPrepTime(3))),5) preference(1,(1,5),1,for(atom(hasPrep(0))),5) preference(1,(1,6),1,for(atom(hasCost(2))),5) preference(1,(1,7),1,for(atom(hasPrep(3))),5) preference(1,(1,8),1,for(atom(hasPrep(6))),5) preference(1,(1,9),1,for(atom(hasPrepTime(2))),5) preference(1,(1,10),1,for(atom(hasPrep(5))),5) preference(1,(1,11),1,for(atom(hasPrepTime(1))),5) preference(1,(1,12),1,for(atom(hasPrep(2))),5) preference(1,(1,13),1,for(atom(hasPrep(7))),8) preference(1,(1,14),1,for(atom(hasDifficulty(2))),2) preference(1,less(weight)) output(25,better,55) output(25,better,78) output(52,better,78) output(57,better,91) output(57,better,51) output(76,better,55) output(76,better,78) output(75,better,55) output(75,better,78) output(55,worse,17) output(55,worse,52) output(55,worse,8) output(55,worse,78) output(99,worse,57) output(75,eq,25) output(62,eq,94) output(86,eq,8) output(91,eq,51) output(52,eq,8) output(71,eq,67) output(25,eq,52) output(76,eq,52) output(99,eq,91) output(25,eq,17) output(76,eq,17) output(75,eq,17) output(99,eq,51) output(75,eq,52) output(25,eq,8) output(76,eq,8) output(75,eq,8)
Optimization: 22 14
Answer: 5
preference(1,(1,1),1,for(atom(hasDifficulty(2))),5) preference(1,(1,5),1,for(atom(hasPrep(3))),5) preference(1,(1,9),1,for(atom(hasPrep(5))),5) preference(1,(1,10),1,for(atom(hasPrep(4))),5) preference(1,(1,14),1,for(atom(hasPrep(0))),5) preference(1,less(weight)) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(55,better,17) output(55,better,8) output(55,better,78) output(71,better,67) output(75,better,17) output(75,better,78) output(75,better,8) output(76,worse,55) output(76,worse,52) output(75,eq,25) output(25,eq,55) output(62,eq,94) output(86,eq,8) output(99,eq,57) output(57,eq,91) output(91,eq,51) output(55,eq,52) output(25,eq,52) output(57,eq,51) output(99,eq,91) output(76,eq,17) output(75,eq,55) output(76,eq,78) output(99,eq,51) output(75,eq,52) output(76,eq,8)
Optimization: 19 5
Answer: 6
preference(1,(1,3),1,for(atom(hasPrep(4))),5) preference(1,(1,9),1,for(atom(hasPrep(5))),5) preference(1,(1,14),1,for(atom(hasDifficulty(2))),5) preference(1,less(weight)) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(55,better,17) output(55,better,8) output(55,better,78) output(57,better,91) output(57,better,51) output(71,better,67) output(75,better,17) output(75,better,78) output(75,better,8) output(62,worse,94) output(76,worse,55) output(76,worse,52) output(99,worse,57) output(75,eq,25) output(25,eq,55) output(86,eq,8) output(91,eq,51) output(55,eq,52) output(25,eq,52) output(99,eq,91) output(76,eq,17) output(75,eq,55) output(76,eq,78) output(99,eq,51) output(75,eq,52) output(76,eq,8)
Optimization: 17 3
Answer: 7
preference(1,(1,1),1,for(atom(hasCost(1))),6) preference(1,(1,2),1,for(atom(hasDifficulty(1))),6) preference(1,(1,3),1,for(atom(hasPrep(1))),8) preference(1,(1,4),1,for(atom(hasPrepTime(3))),6) preference(1,(1,5),1,for(atom(hasPrep(0))),8) preference(1,(1,6),1,for(atom(hasPrep(3))),8) preference(1,(1,7),1,for(atom(hasCost(2))),6) preference(1,(1,8),1,for(atom(hasPrep(5))),6) preference(1,(1,9),1,for(atom(hasPrep(6))),8) preference(1,(1,12),1,for(atom(hasDifficulty(2))),3) preference(1,(1,13),1,for(atom(hasPrep(7))),1) preference(1,(1,14),1,for(atom(hasPrepTime(2))),7) preference(1,less(weight)) output(25,better,55) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(55,better,52) output(55,better,78) output(57,better,91) output(76,better,55) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8) output(86,better,8) output(75,better,55) output(75,better,78) output(75,better,52) output(99,better,57) output(99,better,91) output(52,worse,78) output(52,worse,8) output(55,worse,17) output(55,worse,8) output(57,worse,51) output(71,worse,67) output(75,worse,25) output(75,worse,17) output(91,worse,51) output(99,worse,51) output(62,eq,94) output(75,eq,8)
Optimization: 12 12
Answer: 8
preference(1,(1,3),1,for(atom(hasPrep(7))),5) preference(1,(1,4),1,for(atom(hasDifficulty(2))),8) preference(1,(1,5),1,for(atom(hasPrep(3))),5) preference(1,(1,8),1,for(atom(hasPrep(6))),5) preference(1,(1,11),1,for(atom(hasPrep(0))),8) preference(1,(1,12),1,for(atom(hasPrepTime(2))),8) preference(1,(1,13),1,for(atom(hasCost(2))),5) preference(1,less(weight)) output(25,better,55) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(55,better,17) output(55,better,52) output(55,better,8) output(55,better,78) output(62,better,94) output(71,better,67) output(76,better,55) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8) output(86,better,8) output(75,better,17) output(75,better,78) output(75,better,52) output(75,better,8) output(52,worse,8) output(57,worse,51) output(75,worse,25) output(91,worse,51) output(99,worse,51) output(52,eq,78) output(99,eq,57) output(57,eq,91) output(99,eq,91) output(75,eq,55)
Optimization: 10 7
Answer: 9
preference(1,(1,2),1,for(atom(hasDifficulty(1))),8) preference(1,(1,4),1,for(atom(hasPrep(0))),4) preference(1,(1,5),1,for(atom(hasCost(1))),3) preference(1,(1,6),1,for(atom(hasPrepTime(2))),4) preference(1,(1,7),1,for(atom(hasPrep(5))),5) preference(1,(1,8),1,for(atom(hasPrep(6))),1) preference(1,(1,9),1,for(atom(hasPrepTime(3))),8) preference(1,(1,10),1,for(atom(hasPrep(1))),5) preference(1,(1,12),1,for(atom(hasDifficulty(2))),7) preference(1,(1,13),1,for(atom(hasCost(2))),6) preference(1,(1,14),1,for(atom(hasPrep(2))),6) preference(1,less(weight)) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(55,better,17) output(55,better,52) output(55,better,8) output(55,better,78) output(57,better,91) output(57,better,51) output(62,better,94) output(71,better,67) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8) output(86,better,8) output(75,better,25) output(75,better,55) output(75,better,17) output(75,better,78) output(75,better,52) output(75,better,8) output(91,better,51) output(25,worse,55) output(52,worse,8) output(99,worse,57) output(99,worse,91) output(99,worse,51) output(76,eq,55)
Optimization: 6 11
Answer: 10
preference(1,(1,1),1,for(atom(hasPrep(7))),4) preference(1,(1,2),1,for(atom(hasPrep(4))),5) preference(1,(1,3),1,for(atom(hasPrep(0))),6) preference(1,(1,4),1,for(atom(hasPrepTime(3))),7) preference(1,(1,5),1,for(atom(hasPrepTime(2))),8) preference(1,(1,6),1,for(atom(hasCost(1))),3) preference(1,(1,7),1,for(atom(hasPrep(1))),3) preference(1,(1,8),1,for(atom(hasPrep(6))),4) preference(1,(1,9),1,for(atom(hasCost(2))),1) preference(1,(1,11),1,for(atom(hasPrep(2))),8) preference(1,(1,12),1,for(atom(hasPrep(5))),7) preference(1,(1,13),1,for(atom(hasPrepTime(1))),2) preference(1,(1,14),1,for(atom(hasDifficulty(2))),6) preference(1,less(weight)) output(25,better,55) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(55,better,17) output(55,better,52) output(55,better,8) output(55,better,78) output(57,better,91) output(57,better,51) output(62,better,94) output(71,better,67) output(76,better,55) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8) output(86,better,8) output(75,better,25) output(75,better,55) output(75,better,17) output(75,better,78) output(75,better,52) output(75,better,8) output(91,better,51) output(99,better,57) output(99,better,91) output(99,better,51)
Optimization: 0 13
Progression : 0 [ 1;13] (Error: 12)
Answer: 11
preference(1,(1,1),1,for(atom(hasDifficulty(2))),4) preference(1,(1,2),1,for(atom(hasPrep(2))),6) preference(1,(1,3),1,for(atom(hasPrep(6))),2) preference(1,(1,4),1,for(atom(hasPrep(5))),5) preference(1,(1,5),1,for(atom(hasPrepTime(2))),6) preference(1,(1,6),1,for(atom(hasPrep(7))),2) preference(1,(1,8),1,for(atom(hasPrep(0))),4) preference(1,(1,10),1,for(atom(hasCost(1))),3) preference(1,(1,12),1,for(atom(hasPrepTime(3))),5) preference(1,(1,13),1,for(atom(hasCost(2))),1) preference(1,(1,14),1,for(atom(hasPrep(1))),3) preference(1,less(weight)) output(25,better,55) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(55,better,17) output(55,better,52) output(55,better,8) output(55,better,78) output(57,better,91) output(57,better,51) output(62,better,94) output(71,better,67) output(76,better,55) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8) output(86,better,8) output(75,better,25) output(75,better,55) output(75,better,17) output(75,better,78) output(75,better,52) output(75,better,8) output(91,better,51) output(99,better,57) output(99,better,91) output(99,better,51)
Optimization: 0 11
Progression : 0 [ 2;11] (Error: 4.5)
Answer: 12
preference(1,(1,1),1,for(atom(hasPrep(2))),8) preference(1,(1,2),1,for(atom(hasDifficulty(2))),7) preference(1,(1,4),1,for(atom(hasPrep(6))),2) preference(1,(1,5),1,for(atom(hasPrepTime(3))),5) preference(1,(1,7),1,for(atom(hasCost(2))),5) preference(1,(1,10),1,for(atom(hasPrepTime(2))),8) preference(1,(1,11),1,for(atom(hasPrep(0))),7) preference(1,(1,12),1,for(atom(hasPrep(5))),5) preference(1,(1,13),1,for(atom(hasPrep(7))),4) preference(1,(1,14),1,for(atom(hasCost(1))),3) preference(1,less(weight)) output(25,better,55) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(55,better,17) output(55,better,52) output(55,better,8) output(55,better,78) output(57,better,91) output(57,better,51) output(62,better,94) output(71,better,67) output(76,better,55) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8) output(86,better,8) output(75,better,25) output(75,better,55) output(75,better,17) output(75,better,78) output(75,better,52) output(75,better,8) output(91,better,51) output(99,better,57) output(99,better,91) output(99,better,51)
Optimization: 0 10
Progression : 0 [ 3;10] (Error: 2.33333)
Answer: 13
preference(1,(1,1),1,for(atom(hasPrep(2))),8) preference(1,(1,2),1,for(atom(hasPrepTime(3))),4) preference(1,(1,4),1,for(atom(hasPrep(0))),7) preference(1,(1,5),1,for(atom(hasDifficulty(2))),7) preference(1,(1,8),1,for(atom(hasPrepTime(2))),8) preference(1,(1,9),1,for(atom(hasPrep(7))),5) preference(1,(1,10),1,for(atom(hasPrep(5))),4) preference(1,(1,12),1,for(atom(hasCost(2))),1) preference(1,(1,14),1,for(atom(hasPrep(6))),2) preference(1,less(weight)) output(25,better,55) output(25,better,52) output(25,better,17) output(25,better,78) output(25,better,8) output(52,better,78) output(52,better,8) output(55,better,17) output(55,better,52) output(55,better,8) output(55,better,78) output(57,better,91) output(57,better,51) output(62,better,94) output(71,better,67) output(76,better,55) output(76,better,52) output(76,better,17) output(76,better,78) output(76,better,8) output(86,better,8) output(75,better,25) output(75,better,55) output(75,better,17) output(75,better,78) output(75,better,52) output(75,better,8) output(91,better,51) output(99,better,57) output(99,better,91) output(99,better,51)
Optimization: 0 9
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.030 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 13+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 297.591s (Solving: 296.02s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1185.497s
Threads      : 4        (Winner: 4)

Choices      : 9376352  (Domain: 887524)
Conflicts    : 8517888  (Analyzed: 8517885)
Restarts     : 6828     (Average: 1247.49 Last: 375029)
Model-Level  : 31.6    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 8851418  (Deleted: 8475480)
  Binary     : 666      (Ratio:   0.01%)
  Ternary    : 7781     (Ratio:   0.09%)
  Conflict   : 8517885  (Average Length:  229.3 Ratio:  96.23%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 333533   (Average Length:  174.5 Ratio:   3.77%) 
  Distributed: 111522   (Ratio:   1.31% Average LBD: 3.83) 
  Integrated : 334566   (Ratio: 300.00% Unit: 191 Average Jumps: 3.98)
Backjumps    : 8517885  (Average:  1.09 Max:  54 Sum: 9301975)
  Executed   : 8517884  (Average:  1.09 Max:  54 Sum: 9301947 Ratio: 100.00%)
  Bounded    : 1        (Average: 28.00 Max:  28 Sum:     28 Ratio:   0.00%)

Rules        : 92989   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 8658    
Bodies       : 5580    
  Sum        : 60      
  Count      : 14      
Equivalences : 3507     (Atom=Atom: 328 Body=Body: 143 Other: 3036)
Tight        : Yes
Variables    : 4786     (Eliminated:    0 Frozen: 3316)
Constraints  : 92279    (Binary:  96.6% Ternary:   1.6% Other:   1.8%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(1)) ; 
  5 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(0)) ; 
  5 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(3)) ; 
  5 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrepTime(1)) ; 
  5 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(7)) ; 
  2 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(3)) ; 
  5 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrep(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(4)) ; 
  5 :: atom(hasPrep(5)) ; 
  5 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(1)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(3)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  8 :: atom(hasPrep(6)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(7)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  5 :: atom(hasPrep(3)) ; 
  5 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasCost(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(0)) ; 
  3 :: atom(hasCost(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(6)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrep(4)) ; 
  6 :: atom(hasPrep(0)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  3 :: atom(hasCost(1)) ; 
  3 :: atom(hasPrep(1)) ; 
  4 :: atom(hasPrep(6)) ; 
  1 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  6 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(0)) ; 
  3 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasCost(2)) ; 
  3 :: atom(hasPrep(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  2 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(2)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrep(0)) ; 
  5 :: atom(hasPrep(5)) ; 
  4 :: atom(hasPrep(7)) ; 
  3 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrep(0)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrepTime(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  4 :: atom(hasPrep(5)) ; 
  1 :: atom(hasCost(2)) ; 
  2 :: atom(hasPrep(6)) 
}.
