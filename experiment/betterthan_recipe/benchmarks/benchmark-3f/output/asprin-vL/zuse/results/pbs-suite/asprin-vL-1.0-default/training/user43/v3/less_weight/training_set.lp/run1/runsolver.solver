asprin_vL version 1.0
Reading from stdin
-:1219:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:1229:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:1244:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:1325:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:1586:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:1599:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:1776:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1905:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1977:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1981:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1981:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1987:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:2086:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:2112:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:2232:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:2266:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:2288:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:1136:1-16: info: no atoms over signature occur in program:
  output/3

-:1128:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:1129:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(16,eq,75) output(90,eq,79) output(79,eq,51) output(44,eq,100) output(9,eq,67) output(67,eq,33) output(16,eq,90) output(58,eq,65) output(65,eq,22) output(92,eq,77) output(77,eq,79) output(79,eq,10) output(90,eq,10) output(77,eq,10) output(92,eq,79) output(58,eq,22) output(9,eq,33) output(90,eq,51) output(77,eq,51) output(16,eq,79) output(92,eq,51) output(16,eq,51) output(92,eq,10) output(16,eq,10)
Optimization: 24 0
Answer: 2
preference(1,(1,4),1,for(atom(hasPrep(2))),8) preference(1,less(weight)) output(16,better,90) output(16,better,51) output(16,better,10) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(92,better,51) output(92,better,10) output(90,worse,79) output(16,eq,75) output(44,eq,100) output(9,eq,67) output(67,eq,33) output(58,eq,65) output(65,eq,22) output(92,eq,77) output(77,eq,79) output(90,eq,10) output(92,eq,79) output(58,eq,22) output(9,eq,33) output(90,eq,51) output(16,eq,79)
Optimization: 15 1
Answer: 3
preference(1,(1,1),1,for(atom(hasDifficulty(1))),1) preference(1,(1,2),1,for(atom(hasCost(1))),1) preference(1,(1,3),1,for(atom(hasPrep(6))),1) preference(1,(1,4),1,for(atom(hasCost(2))),1) preference(1,(1,5),1,for(atom(hasPrepTime(2))),1) preference(1,(1,6),1,for(atom(hasPrepTime(3))),1) preference(1,(1,7),1,for(atom(hasPrep(0))),1) preference(1,(1,8),1,for(atom(hasPrep(1))),8) preference(1,(1,9),1,for(atom(hasDifficulty(2))),1) preference(1,(1,10),1,for(atom(hasPrep(2))),1) preference(1,(1,11),1,for(atom(hasPrep(7))),1) preference(1,(1,12),1,for(atom(hasPrep(5))),7) preference(1,(1,13),1,for(atom(hasPrepTime(1))),2) preference(1,(1,14),1,for(atom(hasPrep(4))),2) preference(1,less(weight)) output(67,better,33) output(77,better,10) output(79,better,10) output(90,better,10) output(92,better,77) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(16,worse,75) output(16,worse,90) output(16,worse,79) output(16,worse,51) output(16,worse,10) output(58,worse,65) output(58,worse,22) output(77,worse,79) output(77,worse,51) output(90,eq,79) output(79,eq,51) output(92,eq,79) output(90,eq,51) output(92,eq,51)
Optimization: 14 14
Answer: 4
preference(1,(1,1),1,for(atom(hasPrep(6))),6) preference(1,(1,2),1,for(atom(hasCost(1))),6) preference(1,(1,3),1,for(atom(hasCost(2))),6) preference(1,(1,4),1,for(atom(hasPrepTime(2))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),6) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),6) preference(1,(1,8),1,for(atom(hasDifficulty(2))),6) preference(1,(1,10),1,for(atom(hasPrepTime(1))),6) preference(1,(1,11),1,for(atom(hasPrep(4))),8) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,13),1,for(atom(hasPrep(7))),5) preference(1,(1,14),1,for(atom(hasDifficulty(1))),5) preference(1,less(weight)) output(16,better,90) output(16,better,51) output(16,better,10) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(90,worse,79) output(90,worse,51) output(16,eq,75) output(67,eq,33) output(58,eq,65) output(65,eq,22) output(92,eq,77) output(77,eq,79) output(90,eq,10) output(92,eq,79) output(58,eq,22) output(16,eq,79)
Optimization: 12 13
Answer: 5
preference(1,(1,1),1,for(atom(hasPrep(7))),5) preference(1,(1,2),1,for(atom(hasPrep(2))),1) preference(1,(1,3),1,for(atom(hasPrepTime(2))),1) preference(1,(1,4),1,for(atom(hasPrep(0))),1) preference(1,(1,5),1,for(atom(hasPrep(3))),2) preference(1,(1,6),1,for(atom(hasPrep(5))),6) preference(1,(1,7),1,for(atom(hasPrep(6))),1) preference(1,(1,8),1,for(atom(hasPrepTime(3))),1) preference(1,(1,9),1,for(atom(hasDifficulty(2))),4) preference(1,(1,10),1,for(atom(hasCost(1))),1) preference(1,(1,11),1,for(atom(hasCost(2))),1) preference(1,(1,12),1,for(atom(hasDifficulty(1))),1) preference(1,(1,13),1,for(atom(hasPrep(1))),1) preference(1,(1,14),1,for(atom(hasPrepTime(1))),1) preference(1,less(weight)) output(16,better,51) output(16,better,10) output(58,better,22) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(65,better,22) output(16,worse,75) output(16,worse,90) output(16,worse,79) output(67,worse,33) output(9,worse,33) output(44,worse,100) output(90,eq,79) output(58,eq,65) output(92,eq,77) output(77,eq,79) output(92,eq,79)
Optimization: 11 14
Answer: 6
preference(1,(1,1),1,for(atom(hasPrep(6))),6) preference(1,(1,2),1,for(atom(hasCost(1))),6) preference(1,(1,3),1,for(atom(hasCost(2))),6) preference(1,(1,4),1,for(atom(hasPrepTime(2))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),6) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),6) preference(1,(1,8),1,for(atom(hasDifficulty(2))),6) preference(1,(1,10),1,for(atom(hasPrepTime(1))),6) preference(1,(1,11),1,for(atom(hasPrep(5))),8) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,13),1,for(atom(hasPrep(7))),5) preference(1,(1,14),1,for(atom(hasDifficulty(1))),5) preference(1,less(weight)) output(16,better,90) output(16,better,51) output(16,better,10) output(58,better,22) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(67,worse,33) output(90,worse,79) output(90,worse,51) output(16,eq,75) output(58,eq,65) output(92,eq,77) output(77,eq,79) output(90,eq,10) output(92,eq,79) output(16,eq,79)
Optimization: 10 13
Answer: 7
preference(1,(1,1),1,for(atom(hasPrep(6))),6) preference(1,(1,2),1,for(atom(hasCost(1))),6) preference(1,(1,3),1,for(atom(hasCost(2))),6) preference(1,(1,4),1,for(atom(hasPrepTime(2))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),6) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),6) preference(1,(1,8),1,for(atom(hasDifficulty(2))),6) preference(1,(1,9),1,for(atom(hasPrepTime(1))),1) preference(1,(1,10),1,for(atom(hasPrep(4))),8) preference(1,(1,11),1,for(atom(hasPrep(5))),8) preference(1,(1,12),1,for(atom(hasPrep(2))),7) preference(1,(1,13),1,for(atom(hasPrep(7))),5) preference(1,(1,14),1,for(atom(hasDifficulty(1))),5) preference(1,less(weight)) output(16,better,90) output(16,better,51) output(16,better,10) output(58,better,22) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(92,better,77) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(16,worse,75) output(16,worse,79) output(67,worse,33) output(77,worse,79) output(90,worse,79) output(90,worse,51) output(58,eq,65) output(90,eq,10) output(92,eq,79)
Optimization: 9 14
Answer: 8
preference(1,(1,1),1,for(atom(hasPrep(6))),6) preference(1,(1,2),1,for(atom(hasCost(1))),6) preference(1,(1,3),1,for(atom(hasCost(2))),6) preference(1,(1,4),1,for(atom(hasPrepTime(2))),6) preference(1,(1,5),1,for(atom(hasPrepTime(3))),6) preference(1,(1,6),1,for(atom(hasPrep(0))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),6) preference(1,(1,8),1,for(atom(hasDifficulty(2))),6) preference(1,(1,9),1,for(atom(hasPrep(2))),8) preference(1,(1,10),1,for(atom(hasPrep(5))),8) preference(1,(1,11),1,for(atom(hasPrepTime(1))),2) preference(1,(1,12),1,for(atom(hasPrep(7))),7) preference(1,(1,14),1,for(atom(hasDifficulty(1))),5) preference(1,less(weight)) output(16,better,90) output(16,better,51) output(16,better,10) output(58,better,22) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,10) output(92,better,77) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(16,worse,75) output(16,worse,79) output(67,worse,33) output(77,worse,79) output(90,worse,79) output(90,worse,51) output(58,eq,65) output(92,eq,79)
Optimization: 8 13
Progression : [2;8] (Error: 3)
Answer: 9
preference(1,(1,1),1,for(atom(hasDifficulty(1))),7) preference(1,(1,2),1,for(atom(hasPrep(2))),4) preference(1,(1,3),1,for(atom(hasPrepTime(2))),4) preference(1,(1,4),1,for(atom(hasPrep(6))),4) preference(1,(1,5),1,for(atom(hasCost(2))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),5) preference(1,(1,8),1,for(atom(hasDifficulty(2))),3) preference(1,(1,9),1,for(atom(hasPrep(5))),6) preference(1,(1,11),1,for(atom(hasPrepTime(1))),2) preference(1,(1,12),1,for(atom(hasPrep(7))),7) preference(1,(1,13),1,for(atom(hasPrepTime(3))),5) preference(1,(1,14),1,for(atom(hasCost(1))),4) preference(1,less(weight)) output(16,better,75) output(16,better,10) output(58,better,65) output(58,better,22) output(67,better,33) output(77,better,10) output(79,better,51) output(79,better,10) output(90,better,10) output(90,better,51) output(92,better,77) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(16,worse,90) output(16,worse,79) output(16,worse,51) output(77,worse,79) output(77,worse,51) output(65,worse,22) output(90,eq,79) output(92,eq,79)
Optimization: 8 12
Answer: 10
preference(1,(1,1),1,for(atom(hasDifficulty(1))),1) preference(1,(1,2),1,for(atom(hasPrepTime(2))),2) preference(1,(1,3),1,for(atom(hasPrep(6))),1) preference(1,(1,4),1,for(atom(hasPrep(0))),1) preference(1,(1,5),1,for(atom(hasPrep(7))),1) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasPrep(1))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),7) preference(1,(1,9),1,for(atom(hasPrep(2))),5) preference(1,(1,10),1,for(atom(hasCost(2))),8) preference(1,(1,11),1,for(atom(hasPrepTime(1))),4) preference(1,(1,12),1,for(atom(hasDifficulty(2))),7) preference(1,(1,13),1,for(atom(hasPrep(4))),6) preference(1,(1,14),1,for(atom(hasCost(1))),1) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(67,better,33) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,10) output(90,better,51) output(92,better,77) output(92,better,51) output(92,better,10) output(44,better,100) output(16,worse,79) output(77,worse,79) output(90,worse,79) output(9,worse,67) output(9,worse,33) output(65,worse,22) output(92,eq,79)
Optimization: 7 14
Answer: 11
preference(1,(1,1),1,for(atom(hasDifficulty(1))),1) preference(1,(1,2),1,for(atom(hasPrepTime(2))),2) preference(1,(1,3),1,for(atom(hasCost(2))),2) preference(1,(1,4),1,for(atom(hasPrep(0))),1) preference(1,(1,5),1,for(atom(hasPrep(7))),1) preference(1,(1,6),1,for(atom(hasPrepTime(3))),7) preference(1,(1,7),1,for(atom(hasPrep(1))),1) preference(1,(1,8),1,for(atom(hasPrep(5))),8) preference(1,(1,9),1,for(atom(hasPrep(2))),5) preference(1,(1,10),1,for(atom(hasPrep(4))),8) preference(1,(1,11),1,for(atom(hasPrepTime(1))),4) preference(1,(1,12),1,for(atom(hasDifficulty(2))),7) preference(1,(1,14),1,for(atom(hasCost(1))),1) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,10) output(90,better,51) output(92,better,77) output(92,better,51) output(92,better,10) output(9,better,67) output(44,better,100) output(65,better,22) output(16,worse,79) output(67,worse,33) output(77,worse,79) output(90,worse,79) output(9,worse,33) output(92,eq,79)
Optimization: 6 13
Answer: 12
preference(1,(1,1),1,for(atom(hasDifficulty(2))),7) preference(1,(1,4),1,for(atom(hasPrep(0))),8) preference(1,(1,5),1,for(atom(hasCost(1))),6) preference(1,(1,7),1,for(atom(hasPrep(1))),6) preference(1,(1,8),1,for(atom(hasPrepTime(3))),5) preference(1,(1,9),1,for(atom(hasPrepTime(2))),7) preference(1,(1,10),1,for(atom(hasCost(2))),7) preference(1,(1,11),1,for(atom(hasDifficulty(1))),3) preference(1,(1,12),1,for(atom(hasPrep(2))),8) preference(1,(1,13),1,for(atom(hasPrep(7))),5) preference(1,(1,14),1,for(atom(hasPrep(5))),6) preference(1,less(weight)) output(16,better,90) output(16,better,79) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(77,better,79) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(16,worse,75) output(92,worse,77) output(90,eq,79) output(67,eq,33) output(92,eq,79)
Optimization: 5 11
Answer: 13
preference(1,(1,2),1,for(atom(hasPrep(2))),3) preference(1,(1,3),1,for(atom(hasCost(2))),4) preference(1,(1,4),1,for(atom(hasDifficulty(1))),8) preference(1,(1,5),1,for(atom(hasPrepTime(2))),4) preference(1,(1,6),1,for(atom(hasCost(1))),2) preference(1,(1,8),1,for(atom(hasPrep(6))),2) preference(1,(1,9),1,for(atom(hasDifficulty(2))),5) preference(1,(1,10),1,for(atom(hasPrepTime(3))),8) preference(1,(1,11),1,for(atom(hasPrep(5))),2) preference(1,(1,14),1,for(atom(hasPrep(4))),6) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,79) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(77,better,79) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(90,worse,79) output(92,worse,77) output(67,eq,33) output(65,eq,22) output(92,eq,79)
Optimization: 5 10
Answer: 14
preference(1,(1,2),1,for(atom(hasPrep(6))),2) preference(1,(1,3),1,for(atom(hasPrep(4))),6) preference(1,(1,5),1,for(atom(hasCost(1))),2) preference(1,(1,6),1,for(atom(hasCost(2))),1) preference(1,(1,7),1,for(atom(hasPrep(5))),7) preference(1,(1,9),1,for(atom(hasPrep(2))),2) preference(1,(1,10),1,for(atom(hasDifficulty(2))),1) preference(1,(1,11),1,for(atom(hasDifficulty(1))),4) preference(1,(1,13),1,for(atom(hasPrepTime(2))),1) preference(1,(1,14),1,for(atom(hasPrepTime(3))),6) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,79) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(77,better,79) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(67,worse,33) output(92,worse,77) output(90,eq,79) output(92,eq,79)
Optimization: 4 10
Answer: 15
preference(1,(1,1),1,for(atom(hasPrepTime(3))),3) preference(1,(1,2),1,for(atom(hasDifficulty(1))),7) preference(1,(1,3),1,for(atom(hasCost(2))),8) preference(1,(1,4),1,for(atom(hasPrep(2))),7) preference(1,(1,10),1,for(atom(hasPrep(0))),1) preference(1,(1,12),1,for(atom(hasCost(1))),3) preference(1,(1,13),1,for(atom(hasPrepTime(2))),5) preference(1,(1,14),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,79) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(67,better,33) output(77,better,79) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,79) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(92,worse,77) output(65,worse,22) output(92,eq,79)
Optimization: 3 8
Answer: 16
preference(1,(1,2),1,for(atom(hasCost(2))),6) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,7),1,for(atom(hasPrepTime(2))),2) preference(1,(1,8),1,for(atom(hasPrep(7))),1) preference(1,(1,9),1,for(atom(hasPrepTime(3))),7) preference(1,(1,11),1,for(atom(hasCost(1))),5) preference(1,(1,12),1,for(atom(hasPrep(6))),1) preference(1,(1,13),1,for(atom(hasPrep(1))),5) preference(1,(1,14),1,for(atom(hasDifficulty(1))),7) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,79) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(67,better,33) output(77,better,79) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,79) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(92,worse,77) output(92,eq,79)
Optimization: 2 10
Answer: 17
preference(1,(1,2),1,for(atom(hasCost(2))),6) preference(1,(1,4),1,for(atom(hasDifficulty(2))),6) preference(1,(1,5),1,for(atom(hasPrep(5))),1) preference(1,(1,7),1,for(atom(hasPrepTime(2))),2) preference(1,(1,9),1,for(atom(hasPrepTime(3))),7) preference(1,(1,11),1,for(atom(hasCost(1))),5) preference(1,(1,12),1,for(atom(hasPrep(6))),1) preference(1,(1,13),1,for(atom(hasPrep(1))),5) preference(1,(1,14),1,for(atom(hasDifficulty(1))),7) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,79) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(67,better,33) output(77,better,79) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,79) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(92,worse,77) output(92,eq,79)
Optimization: 2 9
Progression : 2 [1;9] (Error: 8)
Answer: 18
preference(1,(1,2),1,for(atom(hasPrepTime(2))),3) preference(1,(1,4),1,for(atom(hasPrep(5))),8) preference(1,(1,5),1,for(atom(hasCost(2))),8) preference(1,(1,6),1,for(atom(hasDifficulty(1))),2) preference(1,(1,9),1,for(atom(hasPrep(6))),1) preference(1,(1,10),1,for(atom(hasPrep(1))),1) preference(1,(1,13),1,for(atom(hasCost(1))),2) preference(1,(1,14),1,for(atom(hasDifficulty(2))),8) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,79) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(67,better,33) output(77,better,79) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,79) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(92,worse,77) output(92,eq,79)
Optimization: 2 8
Answer: 19
preference(1,(1,2),1,for(atom(hasPrepTime(2))),3) preference(1,(1,5),1,for(atom(hasCost(2))),8) preference(1,(1,6),1,for(atom(hasDifficulty(1))),2) preference(1,(1,9),1,for(atom(hasPrep(6))),1) preference(1,(1,10),1,for(atom(hasPrep(1))),1) preference(1,(1,12),1,for(atom(hasDifficulty(2))),8) preference(1,(1,14),1,for(atom(hasPrep(5))),8) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,79) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(67,better,33) output(77,better,79) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,79) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(92,worse,77) output(92,eq,79)
Optimization: 2 7
Answer: 20
preference(1,(1,1),1,for(atom(hasDifficulty(2))),8) preference(1,(1,2),1,for(atom(hasPrepTime(2))),3) preference(1,(1,4),1,for(atom(hasPrep(5))),8) preference(1,(1,5),1,for(atom(hasCost(2))),8) preference(1,(1,6),1,for(atom(hasDifficulty(1))),2) preference(1,(1,9),1,for(atom(hasPrep(6))),1) preference(1,less(weight)) output(16,better,75) output(16,better,90) output(16,better,79) output(16,better,51) output(16,better,10) output(58,better,65) output(58,better,22) output(67,better,33) output(77,better,79) output(77,better,10) output(77,better,51) output(79,better,51) output(79,better,10) output(90,better,79) output(90,better,10) output(90,better,51) output(92,better,51) output(92,better,10) output(9,better,67) output(9,better,33) output(44,better,100) output(65,better,22) output(92,worse,77) output(92,eq,79)
Optimization: 2 6
Progression : 2 [2;6] (Error: 2)
Progression : 2 [3;6] (Error: 1)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.047 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 20+
  Optimum    : unknown
Optimization : 2 6
Bounds       : 2 [3;6]
Calls        : 1
Time         : 297.802s (Solving: 296.24s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1186.158s
Threads      : 4        (Winner: 4)

Choices      : 7154268  (Domain: 620715)
Conflicts    : 6752331  (Analyzed: 6752327)
Restarts     : 4983     (Average: 1355.07 Last: 502627)
Model-Level  : 33.5    
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 6894252  (Deleted: 6565435)
  Binary     : 1365     (Ratio:   0.02%)
  Ternary    : 2203     (Ratio:   0.03%)
  Conflict   : 6752327  (Average Length:  276.7 Ratio:  97.94%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 141925   (Average Length:  273.3 Ratio:   2.06%) 
  Distributed: 47458    (Ratio:   0.70% Average LBD: 3.84) 
  Integrated : 142374   (Ratio: 300.00% Unit: 30 Average Jumps: 9.93)
Backjumps    : 6752327  (Average:  1.05 Max: 158 Sum: 7106407)
  Executed   : 6752324  (Average:  1.05 Max: 158 Sum: 7106367 Ratio: 100.00%)
  Bounded    : 3        (Average: 13.33 Max:  18 Sum:     40 Ratio:   0.00%)

Rules        : 81793   
  Choice     : 15      
  Minimize   : 2       
Atoms        : 7964    
Bodies       : 5500    
  Sum        : 43      
  Count      : 14      
Equivalences : 5789     (Atom=Atom: 261 Body=Body: 121 Other: 5407)
Tight        : Yes
Variables    : 4745     (Eliminated:    0 Frozen: 3275)
Constraints  : 81705    (Binary:  96.2% Ternary:   1.8% Other:   1.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrep(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(0)) ; 
  8 :: atom(hasPrep(1)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  2 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  7 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  5 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrep(7)) ; 
  1 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  2 :: atom(hasPrep(3)) ; 
  6 :: atom(hasPrep(5)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  1 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(1)) ; 
  1 :: atom(hasPrepTime(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  5 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrepTime(1)) ; 
  8 :: atom(hasPrep(4)) ; 
  8 :: atom(hasPrep(5)) ; 
  7 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  5 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrepTime(3)) ; 
  6 :: atom(hasPrep(0)) ; 
  6 :: atom(hasPrep(1)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  5 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrep(2)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  4 :: atom(hasPrep(6)) ; 
  6 :: atom(hasCost(2)) ; 
  5 :: atom(hasPrep(1)) ; 
  3 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasPrep(7)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  4 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(1)) ; 
  7 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(2)) ; 
  8 :: atom(hasCost(2)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  6 :: atom(hasPrep(4)) ; 
  1 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasDifficulty(1)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  1 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  1 :: atom(hasPrep(1)) ; 
  8 :: atom(hasPrep(5)) ; 
  5 :: atom(hasPrep(2)) ; 
  8 :: atom(hasPrep(4)) ; 
  4 :: atom(hasPrepTime(1)) ; 
  7 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasCost(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(0)) ; 
  6 :: atom(hasCost(1)) ; 
  6 :: atom(hasPrep(1)) ; 
  5 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasCost(2)) ; 
  3 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasPrep(2)) ; 
  5 :: atom(hasPrep(7)) ; 
  6 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrep(2)) ; 
  4 :: atom(hasCost(2)) ; 
  8 :: atom(hasDifficulty(1)) ; 
  4 :: atom(hasPrepTime(2)) ; 
  2 :: atom(hasCost(1)) ; 
  2 :: atom(hasPrep(6)) ; 
  5 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrepTime(3)) ; 
  2 :: atom(hasPrep(5)) ; 
  6 :: atom(hasPrep(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrep(6)) ; 
  6 :: atom(hasPrep(4)) ; 
  2 :: atom(hasCost(1)) ; 
  1 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrep(2)) ; 
  1 :: atom(hasDifficulty(2)) ; 
  4 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrepTime(2)) ; 
  6 :: atom(hasPrepTime(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(3)) ; 
  7 :: atom(hasDifficulty(1)) ; 
  8 :: atom(hasCost(2)) ; 
  7 :: atom(hasPrep(2)) ; 
  1 :: atom(hasPrep(0)) ; 
  3 :: atom(hasCost(1)) ; 
  5 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  1 :: atom(hasPrep(7)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasCost(2)) ; 
  6 :: atom(hasDifficulty(2)) ; 
  1 :: atom(hasPrep(5)) ; 
  2 :: atom(hasPrepTime(2)) ; 
  7 :: atom(hasPrepTime(3)) ; 
  5 :: atom(hasCost(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  5 :: atom(hasPrep(1)) ; 
  7 :: atom(hasDifficulty(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(2)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(1)) ; 
  2 :: atom(hasCost(1)) ; 
  8 :: atom(hasDifficulty(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasCost(2)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(6)) ; 
  1 :: atom(hasPrep(1)) ; 
  8 :: atom(hasDifficulty(2)) ; 
  8 :: atom(hasPrep(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasDifficulty(2)) ; 
  3 :: atom(hasPrepTime(2)) ; 
  8 :: atom(hasPrep(5)) ; 
  8 :: atom(hasCost(2)) ; 
  2 :: atom(hasDifficulty(1)) ; 
  1 :: atom(hasPrep(6)) 
}.
