
#const statements = 1.
#const maxEle = 12.
_g_type(poset).
_g_st(P) :- P = (1..statements).
_g_el(E) :- E = (1..maxEle).
1 = { preference(P,T): _g_type(T) } :- _g_st(P).
1 >= { preference(P,(P,E),1,for(atom(X)),()): atom(X); preference(P,(P,E),1,for(neg(atom(X))),()): atom(X) } :- _g_el(E); _g_st(P).
1 >= { preference(P,(P,E),2,for(atom(Y)),()): atom(Y); preference(P,(P,E),2,for(neg(atom(Y))),()): atom(Y) } :- _g_el(E); _g_st(P).
#false :- preference(_,(_,E),1,for(X),_); preference(_,(_,E),2,for(X),_).
#false :- preference(_,(_,E),2,_,_); not preference(_,(_,E),1,_,_).
_e_pref(1,9,3,0).
_e_pref(1,7,9,0).
_e_pref(1,9,1,0).
_e_pref(1,9,10,1).
_e_pref(1,7,5,0).
_e_pref(1,8,4,0).
_e_pref(1,5,10,0).
_e_pref(1,7,6,0).
_e_pref(1,2,10,0).
_e_pref(1,9,10,0).
_e_pref(1,5,3,0).
_e_pref(1,8,2,0).
_e_pref(1,7,4,0).
_e_pref(1,7,3,0).
_e_pref(1,7,8,0).
_e_pref(1,10,4,0).
_e_pref(1,3,4,1).
_e_pref(1,2,5,0).
_e_pref(1,7,1,0).
_e_pref(1,6,10,1).
_e_pref(1,7,10,0).
_e_pref(1,8,1,0).
_e_pref(1,2,9,0).
_e_pref(1,6,4,0).
_e_pref(1,9,4,0).
_e_pref(1,6,1,0).
_e_pref(1,8,10,0).
_e_pref(1,3,10,0).
_e_pref(1,6,10,0).
_e_pref(1,8,3,0).
_e_pref(1,1,5,0).
_e_pref(1,9,6,0).
_e_pref(1,8,6,0).
_e_pref(1,9,5,0).
_e_pref(1,6,4,1).
_e_pref(1,6,5,0).
_e_pref(1,7,2,0).
_e_pref(1,3,4,0).
_e_pref(1,3,1,0).
_e_pref(1,2,1,0).
_e_pref(1,2,6,0).
_e_pref(1,2,4,0).
_e_pref(1,8,5,0).
_e_pref(1,1,9,1).
_e_pref(1,2,3,0).
_e_pref(1,5,4,0).
_e_pref(1,6,3,0).
_e_pref(1,8,9,0).
_e_pref(1,1,4,0).
_e_pref(1,1,10,0).
_e_pref(2,3,9,0).
_e_pref(2,7,9,0).
_e_pref(2,1,9,0).
_e_pref(2,10,9,1).
_e_pref(2,5,7,0).
_e_pref(2,4,8,0).
_e_pref(2,10,5,0).
_e_pref(2,6,7,0).
_e_pref(2,10,2,0).
_e_pref(2,10,9,0).
_e_pref(2,5,3,0).
_e_pref(2,2,8,0).
_e_pref(2,4,7,0).
_e_pref(2,3,7,0).
_e_pref(2,8,7,0).
_e_pref(2,10,4,0).
_e_pref(2,4,3,1).
_e_pref(2,5,2,0).
_e_pref(2,7,1,0).
_e_pref(2,6,10,1).
_e_pref(2,10,7,0).
_e_pref(2,8,1,0).
_e_pref(2,2,9,0).
_e_pref(2,6,4,0).
_e_pref(2,4,9,0).
_e_pref(2,6,1,0).
_e_pref(2,10,8,0).
_e_pref(2,10,3,0).
_e_pref(2,10,6,0).
_e_pref(2,8,3,0).
_e_pref(2,5,1,0).
_e_pref(2,6,9,0).
_e_pref(2,6,8,0).
_e_pref(2,5,9,0).
_e_pref(2,6,4,1).
_e_pref(2,6,5,0).
_e_pref(2,2,7,0).
_e_pref(2,4,3,0).
_e_pref(2,1,3,0).
_e_pref(2,1,2,0).
_e_pref(2,6,2,0).
_e_pref(2,2,4,0).
_e_pref(2,5,8,0).
_e_pref(2,1,9,1).
_e_pref(2,2,3,0).
_e_pref(2,5,4,0).
_e_pref(2,6,3,0).
_e_pref(2,8,9,0).
_e_pref(2,4,1,0).
_e_pref(2,10,1,0).
_e_pref(3,9,3,0).
_e_pref(3,9,7,0).
_e_pref(3,9,1,0).
_e_pref(3,10,9,1).
_e_pref(3,5,7,0).
_e_pref(3,4,8,0).
_e_pref(3,10,5,0).
_e_pref(3,6,7,0).
_e_pref(3,10,2,0).
_e_pref(3,10,9,0).
_e_pref(3,5,3,0).
_e_pref(3,8,2,0).
_e_pref(3,4,7,0).
_e_pref(3,3,7,0).
_e_pref(3,8,7,0).
_e_pref(3,10,4,0).
_e_pref(3,4,3,1).
_e_pref(3,5,2,0).
_e_pref(3,1,7,0).
_e_pref(3,10,6,1).
_e_pref(3,10,7,0).
_e_pref(3,1,8,0).
_e_pref(3,9,2,0).
_e_pref(3,4,6,0).
_e_pref(3,9,4,0).
_e_pref(3,1,6,0).
_e_pref(3,10,8,0).
_e_pref(3,10,3,0).
_e_pref(3,10,6,0).
_e_pref(3,3,8,0).
_e_pref(3,5,1,0).
_e_pref(3,9,6,0).
_e_pref(3,6,8,0).
_e_pref(3,5,9,0).
_e_pref(3,4,6,1).
_e_pref(3,5,6,0).
_e_pref(3,2,7,0).
_e_pref(3,4,3,0).
_e_pref(3,1,3,0).
_e_pref(3,1,2,0).
_e_pref(3,6,2,0).
_e_pref(3,4,2,0).
_e_pref(3,5,8,0).
_e_pref(3,1,9,1).
_e_pref(3,3,2,0).
_e_pref(3,5,4,0).
_e_pref(3,3,6,0).
_e_pref(3,9,8,0).
_e_pref(3,1,4,0).
_e_pref(3,10,1,0).
_e_pref(4,9,3,0).
_e_pref(4,7,9,0).
_e_pref(4,9,1,0).
_e_pref(4,10,9,1).
_e_pref(4,7,5,0).
_e_pref(4,8,4,0).
_e_pref(4,10,5,0).
_e_pref(4,6,7,0).
_e_pref(4,10,2,0).
_e_pref(4,10,9,0).
_e_pref(4,5,3,0).
_e_pref(4,8,2,0).
_e_pref(4,7,4,0).
_e_pref(4,7,3,0).
_e_pref(4,8,7,0).
_e_pref(4,10,4,0).
_e_pref(4,3,4,1).
_e_pref(4,2,5,0).
_e_pref(4,7,1,0).
_e_pref(4,6,10,1).
_e_pref(4,7,10,0).
_e_pref(4,8,1,0).
_e_pref(4,2,9,0).
_e_pref(4,6,4,0).
_e_pref(4,9,4,0).
_e_pref(4,6,1,0).
_e_pref(4,8,10,0).
_e_pref(4,10,3,0).
_e_pref(4,6,10,0).
_e_pref(4,8,3,0).
_e_pref(4,5,1,0).
_e_pref(4,6,9,0).
_e_pref(4,8,6,0).
_e_pref(4,9,5,0).
_e_pref(4,6,4,1).
_e_pref(4,6,5,0).
_e_pref(4,7,2,0).
_e_pref(4,3,4,0).
_e_pref(4,1,3,0).
_e_pref(4,2,1,0).
_e_pref(4,6,2,0).
_e_pref(4,2,4,0).
_e_pref(4,8,5,0).
_e_pref(4,9,1,1).
_e_pref(4,2,3,0).
_e_pref(4,5,4,0).
_e_pref(4,6,3,0).
_e_pref(4,8,9,0).
_e_pref(4,1,4,0).
_e_pref(4,10,1,0).
_e_pref(5,9,3,0).
_e_pref(5,7,9,0).
_e_pref(5,9,1,0).
_e_pref(5,9,10,1).
_e_pref(5,7,5,0).
_e_pref(5,4,8,0).
_e_pref(5,10,5,0).
_e_pref(5,7,6,0).
_e_pref(5,2,10,0).
_e_pref(5,10,9,0).
_e_pref(5,3,5,0).
_e_pref(5,2,8,0).
_e_pref(5,7,4,0).
_e_pref(5,7,3,0).
_e_pref(5,7,8,0).
_e_pref(5,4,10,0).
_e_pref(5,3,4,1).
_e_pref(5,2,5,0).
_e_pref(5,7,1,0).
_e_pref(5,10,6,1).
_e_pref(5,10,7,0).
_e_pref(5,8,1,0).
_e_pref(5,2,9,0).
_e_pref(5,6,4,0).
_e_pref(5,9,4,0).
_e_pref(5,6,1,0).
_e_pref(5,10,8,0).
_e_pref(5,10,3,0).
_e_pref(5,10,6,0).
_e_pref(5,3,8,0).
_e_pref(5,1,5,0).
_e_pref(5,6,9,0).
_e_pref(5,6,8,0).
_e_pref(5,5,9,0).
_e_pref(5,4,6,1).
_e_pref(5,5,6,0).
_e_pref(5,2,7,0).
_e_pref(5,4,3,0).
_e_pref(5,3,1,0).
_e_pref(5,1,2,0).
_e_pref(5,2,6,0).
_e_pref(5,4,2,0).
_e_pref(5,8,5,0).
_e_pref(5,9,1,1).
_e_pref(5,3,2,0).
_e_pref(5,4,5,0).
_e_pref(5,6,3,0).
_e_pref(5,9,8,0).
_e_pref(5,4,1,0).
_e_pref(5,10,1,0).
_e_pref(6,9,3,0).
_e_pref(6,7,9,0).
_e_pref(6,9,1,0).
_e_pref(6,10,9,1).
_e_pref(6,7,5,0).
_e_pref(6,8,4,0).
_e_pref(6,5,10,0).
_e_pref(6,7,6,0).
_e_pref(6,2,10,0).
_e_pref(6,9,10,0).
_e_pref(6,3,5,0).
_e_pref(6,2,8,0).
_e_pref(6,7,4,0).
_e_pref(6,7,3,0).
_e_pref(6,7,8,0).
_e_pref(6,4,10,0).
_e_pref(6,3,4,1).
_e_pref(6,2,5,0).
_e_pref(6,7,1,0).
_e_pref(6,6,10,1).
_e_pref(6,7,10,0).
_e_pref(6,8,1,0).
_e_pref(6,2,9,0).
_e_pref(6,6,4,0).
_e_pref(6,9,4,0).
_e_pref(6,6,1,0).
_e_pref(6,8,10,0).
_e_pref(6,10,3,0).
_e_pref(6,6,10,0).
_e_pref(6,8,3,0).
_e_pref(6,1,5,0).
_e_pref(6,6,9,0).
_e_pref(6,8,6,0).
_e_pref(6,9,5,0).
_e_pref(6,6,4,1).
_e_pref(6,5,6,0).
_e_pref(6,7,2,0).
_e_pref(6,3,4,0).
_e_pref(6,1,3,0).
_e_pref(6,2,1,0).
_e_pref(6,2,6,0).
_e_pref(6,2,4,0).
_e_pref(6,8,5,0).
_e_pref(6,9,1,1).
_e_pref(6,2,3,0).
_e_pref(6,5,4,0).
_e_pref(6,6,3,0).
_e_pref(6,8,9,0).
_e_pref(6,4,1,0).
_e_pref(6,10,1,0).
_e_pref(7,9,3,0).
_e_pref(7,7,9,0).
_e_pref(7,9,1,0).
_e_pref(7,10,9,1).
_e_pref(7,7,5,0).
_e_pref(7,8,4,0).
_e_pref(7,10,5,0).
_e_pref(7,6,7,0).
_e_pref(7,10,2,0).
_e_pref(7,10,9,0).
_e_pref(7,5,3,0).
_e_pref(7,8,2,0).
_e_pref(7,7,4,0).
_e_pref(7,7,3,0).
_e_pref(7,8,7,0).
_e_pref(7,10,4,0).
_e_pref(7,3,4,1).
_e_pref(7,2,5,0).
_e_pref(7,7,1,0).
_e_pref(7,6,10,1).
_e_pref(7,10,7,0).
_e_pref(7,8,1,0).
_e_pref(7,2,9,0).
_e_pref(7,6,4,0).
_e_pref(7,9,4,0).
_e_pref(7,6,1,0).
_e_pref(7,8,10,0).
_e_pref(7,10,3,0).
_e_pref(7,6,10,0).
_e_pref(7,8,3,0).
_e_pref(7,1,5,0).
_e_pref(7,6,9,0).
_e_pref(7,8,6,0).
_e_pref(7,9,5,0).
_e_pref(7,6,4,1).
_e_pref(7,6,5,0).
_e_pref(7,7,2,0).
_e_pref(7,3,4,0).
_e_pref(7,1,3,0).
_e_pref(7,2,1,0).
_e_pref(7,6,2,0).
_e_pref(7,2,4,0).
_e_pref(7,8,5,0).
_e_pref(7,9,1,1).
_e_pref(7,2,3,0).
_e_pref(7,5,4,0).
_e_pref(7,6,3,0).
_e_pref(7,8,9,0).
_e_pref(7,1,4,0).
_e_pref(7,10,1,0).
_e_pref(8,9,3,0).
_e_pref(8,9,7,0).
_e_pref(8,9,1,0).
_e_pref(8,9,10,1).
_e_pref(8,7,5,0).
_e_pref(8,4,8,0).
_e_pref(8,5,10,0).
_e_pref(8,7,6,0).
_e_pref(8,2,10,0).
_e_pref(8,9,10,0).
_e_pref(8,3,5,0).
_e_pref(8,2,8,0).
_e_pref(8,7,4,0).
_e_pref(8,7,3,0).
_e_pref(8,7,8,0).
_e_pref(8,4,10,0).
_e_pref(8,3,4,1).
_e_pref(8,2,5,0).
_e_pref(8,7,1,0).
_e_pref(8,6,10,1).
_e_pref(8,7,10,0).
_e_pref(8,8,1,0).
_e_pref(8,9,2,0).
_e_pref(8,4,6,0).
_e_pref(8,9,4,0).
_e_pref(8,6,1,0).
_e_pref(8,10,8,0).
_e_pref(8,3,10,0).
_e_pref(8,10,6,0).
_e_pref(8,3,8,0).
_e_pref(8,1,5,0).
_e_pref(8,9,6,0).
_e_pref(8,6,8,0).
_e_pref(8,9,5,0).
_e_pref(8,4,6,1).
_e_pref(8,6,5,0).
_e_pref(8,2,7,0).
_e_pref(8,3,4,0).
_e_pref(8,3,1,0).
_e_pref(8,2,1,0).
_e_pref(8,2,6,0).
_e_pref(8,2,4,0).
_e_pref(8,8,5,0).
_e_pref(8,9,1,1).
_e_pref(8,2,3,0).
_e_pref(8,4,5,0).
_e_pref(8,3,6,0).
_e_pref(8,9,8,0).
_e_pref(8,4,1,0).
_e_pref(8,10,1,0).
_e_pref(9,3,9,0).
_e_pref(9,7,9,0).
_e_pref(9,1,9,0).
_e_pref(9,9,10,1).
_e_pref(9,7,5,0).
_e_pref(9,8,4,0).
_e_pref(9,5,10,0).
_e_pref(9,2,10,0).
_e_pref(9,10,9,0).
_e_pref(9,5,3,0).
_e_pref(9,8,2,0).
_e_pref(9,7,4,0).
_e_pref(9,7,3,0).
_e_pref(9,8,7,0).
_e_pref(9,4,10,0).
_e_pref(9,3,4,1).
_e_pref(9,2,5,0).
_e_pref(9,7,1,0).
_e_pref(9,6,10,1).
_e_pref(9,7,10,0).
_e_pref(9,8,1,0).
_e_pref(9,2,9,0).
_e_pref(9,6,4,0).
_e_pref(9,4,9,0).
_e_pref(9,6,1,0).
_e_pref(9,8,10,0).
_e_pref(9,10,3,0).
_e_pref(9,6,10,0).
_e_pref(9,8,3,0).
_e_pref(9,1,5,0).
_e_pref(9,6,9,0).
_e_pref(9,8,6,0).
_e_pref(9,5,9,0).
_e_pref(9,4,6,1).
_e_pref(9,5,6,0).
_e_pref(9,7,2,0).
_e_pref(9,3,4,0).
_e_pref(9,3,1,0).
_e_pref(9,1,2,0).
_e_pref(9,2,6,0).
_e_pref(9,2,4,0).
_e_pref(9,8,5,0).
_e_pref(9,1,9,1).
_e_pref(9,2,3,0).
_e_pref(9,5,4,0).
_e_pref(9,6,3,0).
_e_pref(9,8,9,0).
_e_pref(9,1,4,0).
_e_pref(9,1,10,0).
_e_pref(10,3,9,0).
_e_pref(10,9,7,0).
_e_pref(10,9,1,0).
_e_pref(10,9,10,1).
_e_pref(10,5,7,0).
_e_pref(10,4,8,0).
_e_pref(10,5,10,0).
_e_pref(10,7,6,0).
_e_pref(10,10,2,0).
_e_pref(10,9,10,0).
_e_pref(10,3,5,0).
_e_pref(10,2,8,0).
_e_pref(10,4,7,0).
_e_pref(10,3,7,0).
_e_pref(10,7,8,0).
_e_pref(10,4,10,0).
_e_pref(10,4,3,1).
_e_pref(10,5,2,0).
_e_pref(10,1,7,0).
_e_pref(10,10,6,1).
_e_pref(10,10,7,0).
_e_pref(10,1,8,0).
_e_pref(10,9,2,0).
_e_pref(10,4,6,0).
_e_pref(10,4,9,0).
_e_pref(10,1,6,0).
_e_pref(10,10,8,0).
_e_pref(10,3,10,0).
_e_pref(10,10,6,0).
_e_pref(10,3,8,0).
_e_pref(10,5,1,0).
_e_pref(10,9,6,0).
_e_pref(10,6,8,0).
_e_pref(10,5,9,0).
_e_pref(10,4,6,1).
_e_pref(10,6,5,0).
_e_pref(10,7,2,0).
_e_pref(10,4,3,0).
_e_pref(10,1,3,0).
_e_pref(10,1,2,0).
_e_pref(10,2,6,0).
_e_pref(10,4,2,0).
_e_pref(10,5,8,0).
_e_pref(10,1,9,1).
_e_pref(10,3,2,0).
_e_pref(10,4,5,0).
_e_pref(10,3,6,0).
_e_pref(10,9,8,0).
_e_pref(10,4,1,0).
_e_pref(10,1,10,0).
_e_pref(11,9,3,0).
_e_pref(11,9,7,0).
_e_pref(11,9,1,0).
_e_pref(11,9,10,1).
_e_pref(11,5,7,0).
_e_pref(11,4,8,0).
_e_pref(11,10,5,0).
_e_pref(11,7,6,0).
_e_pref(11,10,2,0).
_e_pref(11,9,10,0).
_e_pref(11,3,5,0).
_e_pref(11,2,8,0).
_e_pref(11,4,7,0).
_e_pref(11,3,7,0).
_e_pref(11,7,8,0).
_e_pref(11,10,4,0).
_e_pref(11,4,3,1).
_e_pref(11,5,2,0).
_e_pref(11,1,7,0).
_e_pref(11,10,6,1).
_e_pref(11,10,7,0).
_e_pref(11,1,8,0).
_e_pref(11,9,2,0).
_e_pref(11,4,6,0).
_e_pref(11,9,4,0).
_e_pref(11,1,6,0).
_e_pref(11,10,8,0).
_e_pref(11,10,3,0).
_e_pref(11,10,6,0).
_e_pref(11,3,8,0).
_e_pref(11,5,1,0).
_e_pref(11,9,6,0).
_e_pref(11,6,8,0).
_e_pref(11,9,5,0).
_e_pref(11,4,6,1).
_e_pref(11,5,6,0).
_e_pref(11,2,7,0).
_e_pref(11,4,3,0).
_e_pref(11,3,1,0).
_e_pref(11,2,1,0).
_e_pref(11,2,6,0).
_e_pref(11,4,2,0).
_e_pref(11,5,8,0).
_e_pref(11,9,1,1).
_e_pref(11,3,2,0).
_e_pref(11,4,5,0).
_e_pref(11,3,6,0).
_e_pref(11,9,8,0).
_e_pref(11,4,1,0).
_e_pref(11,10,1,0).
_e_pref(12,3,9,0).
_e_pref(12,7,9,0).
_e_pref(12,9,1,0).
_e_pref(12,10,9,1).
_e_pref(12,5,7,0).
_e_pref(12,4,8,0).
_e_pref(12,5,10,0).
_e_pref(12,6,7,0).
_e_pref(12,10,2,0).
_e_pref(12,10,9,0).
_e_pref(12,3,5,0).
_e_pref(12,2,8,0).
_e_pref(12,7,4,0).
_e_pref(12,3,7,0).
_e_pref(12,8,7,0).
_e_pref(12,10,4,0).
_e_pref(12,3,4,1).
_e_pref(12,5,2,0).
_e_pref(12,1,7,0).
_e_pref(12,6,10,1).
_e_pref(12,7,10,0).
_e_pref(12,8,1,0).
_e_pref(12,9,2,0).
_e_pref(12,4,6,0).
_e_pref(12,4,9,0).
_e_pref(12,1,6,0).
_e_pref(12,8,10,0).
_e_pref(12,10,3,0).
_e_pref(12,6,10,0).
_e_pref(12,8,3,0).
_e_pref(12,1,5,0).
_e_pref(12,9,6,0).
_e_pref(12,6,8,0).
_e_pref(12,5,9,0).
_e_pref(12,6,4,1).
_e_pref(12,5,6,0).
_e_pref(12,2,7,0).
_e_pref(12,4,3,0).
_e_pref(12,1,3,0).
_e_pref(12,2,1,0).
_e_pref(12,2,6,0).
_e_pref(12,4,2,0).
_e_pref(12,5,8,0).
_e_pref(12,9,1,1).
_e_pref(12,3,2,0).
_e_pref(12,5,4,0).
_e_pref(12,6,3,0).
_e_pref(12,9,8,0).
_e_pref(12,4,1,0).
_e_pref(12,1,10,0).
_e_pref(13,9,3,0).
_e_pref(13,7,9,0).
_e_pref(13,9,1,0).
_e_pref(13,10,9,1).
_e_pref(13,5,7,0).
_e_pref(13,8,4,0).
_e_pref(13,10,5,0).
_e_pref(13,6,7,0).
_e_pref(13,10,2,0).
_e_pref(13,10,9,0).
_e_pref(13,5,3,0).
_e_pref(13,8,2,0).
_e_pref(13,7,4,0).
_e_pref(13,7,3,0).
_e_pref(13,8,7,0).
_e_pref(13,10,4,0).
_e_pref(13,3,4,1).
_e_pref(13,2,5,0).
_e_pref(13,7,1,0).
_e_pref(13,6,10,1).
_e_pref(13,10,7,0).
_e_pref(13,8,1,0).
_e_pref(13,2,9,0).
_e_pref(13,6,4,0).
_e_pref(13,9,4,0).
_e_pref(13,6,1,0).
_e_pref(13,8,10,0).
_e_pref(13,10,3,0).
_e_pref(13,6,10,0).
_e_pref(13,8,3,0).
_e_pref(13,1,5,0).
_e_pref(13,6,9,0).
_e_pref(13,8,6,0).
_e_pref(13,9,5,0).
_e_pref(13,6,4,1).
_e_pref(13,6,5,0).
_e_pref(13,7,2,0).
_e_pref(13,3,4,0).
_e_pref(13,1,3,0).
_e_pref(13,1,2,0).
_e_pref(13,6,2,0).
_e_pref(13,2,4,0).
_e_pref(13,8,5,0).
_e_pref(13,9,1,1).
_e_pref(13,2,3,0).
_e_pref(13,5,4,0).
_e_pref(13,6,3,0).
_e_pref(13,8,9,0).
_e_pref(13,1,4,0).
_e_pref(13,10,1,0).
_e_pref(14,3,9,0).
_e_pref(14,7,9,0).
_e_pref(14,1,9,0).
_e_pref(14,10,9,1).
_e_pref(14,5,7,0).
_e_pref(14,8,4,0).
_e_pref(14,10,5,0).
_e_pref(14,6,7,0).
_e_pref(14,10,2,0).
_e_pref(14,10,9,0).
_e_pref(14,5,3,0).
_e_pref(14,8,2,0).
_e_pref(14,7,4,0).
_e_pref(14,7,3,0).
_e_pref(14,8,7,0).
_e_pref(14,10,4,0).
_e_pref(14,4,3,1).
_e_pref(14,5,2,0).
_e_pref(14,1,7,0).
_e_pref(14,6,10,1).
_e_pref(14,10,7,0).
_e_pref(14,8,1,0).
_e_pref(14,6,4,0).
_e_pref(14,4,9,0).
_e_pref(14,6,1,0).
_e_pref(14,8,10,0).
_e_pref(14,10,3,0).
_e_pref(14,6,10,0).
_e_pref(14,8,3,0).
_e_pref(14,5,1,0).
_e_pref(14,6,9,0).
_e_pref(14,6,8,0).
_e_pref(14,5,9,0).
_e_pref(14,6,4,1).
_e_pref(14,2,7,0).
_e_pref(14,4,3,0).
_e_pref(14,1,3,0).
_e_pref(14,1,2,0).
_e_pref(14,6,2,0).
_e_pref(14,2,4,0).
_e_pref(14,8,5,0).
_e_pref(14,1,9,1).
_e_pref(14,3,2,0).
_e_pref(14,5,4,0).
_e_pref(14,6,3,0).
_e_pref(14,8,9,0).
_e_pref(14,1,4,0).
_e_pref(14,10,1,0).
_e_pref(15,9,3,0).
_e_pref(15,7,9,0).
_e_pref(15,9,1,0).
_e_pref(15,9,10,1).
_e_pref(15,7,5,0).
_e_pref(15,8,4,0).
_e_pref(15,10,5,0).
_e_pref(15,7,6,0).
_e_pref(15,2,10,0).
_e_pref(15,9,10,0).
_e_pref(15,3,5,0).
_e_pref(15,2,8,0).
_e_pref(15,7,4,0).
_e_pref(15,7,3,0).
_e_pref(15,7,8,0).
_e_pref(15,10,4,0).
_e_pref(15,3,4,1).
_e_pref(15,2,5,0).
_e_pref(15,7,1,0).
_e_pref(15,6,10,1).
_e_pref(15,7,10,0).
_e_pref(15,8,1,0).
_e_pref(15,2,9,0).
_e_pref(15,6,4,0).
_e_pref(15,9,4,0).
_e_pref(15,6,1,0).
_e_pref(15,8,10,0).
_e_pref(15,10,3,0).
_e_pref(15,6,10,0).
_e_pref(15,8,3,0).
_e_pref(15,5,1,0).
_e_pref(15,9,6,0).
_e_pref(15,6,8,0).
_e_pref(15,9,5,0).
_e_pref(15,6,4,1).
_e_pref(15,6,5,0).
_e_pref(15,2,7,0).
_e_pref(15,3,4,0).
_e_pref(15,3,1,0).
_e_pref(15,2,1,0).
_e_pref(15,2,6,0).
_e_pref(15,2,4,0).
_e_pref(15,8,5,0).
_e_pref(15,9,1,1).
_e_pref(15,2,3,0).
_e_pref(15,4,5,0).
_e_pref(15,6,3,0).
_e_pref(15,9,8,0).
_e_pref(15,4,1,0).
_e_pref(15,10,1,0).
_e_pref(16,9,3,0).
_e_pref(16,9,7,0).
_e_pref(16,9,1,0).
_e_pref(16,9,10,1).
_e_pref(16,7,5,0).
_e_pref(16,8,4,0).
_e_pref(16,10,5,0).
_e_pref(16,7,6,0).
_e_pref(16,2,10,0).
_e_pref(16,9,10,0).
_e_pref(16,3,5,0).
_e_pref(16,2,8,0).
_e_pref(16,7,4,0).
_e_pref(16,7,3,0).
_e_pref(16,7,8,0).
_e_pref(16,10,4,0).
_e_pref(16,4,3,1).
_e_pref(16,2,5,0).
_e_pref(16,7,1,0).
_e_pref(16,10,6,1).
_e_pref(16,10,7,0).
_e_pref(16,8,1,0).
_e_pref(16,9,2,0).
_e_pref(16,6,4,0).
_e_pref(16,9,4,0).
_e_pref(16,6,1,0).
_e_pref(16,10,8,0).
_e_pref(16,10,3,0).
_e_pref(16,10,6,0).
_e_pref(16,8,3,0).
_e_pref(16,5,1,0).
_e_pref(16,9,6,0).
_e_pref(16,6,8,0).
_e_pref(16,9,5,0).
_e_pref(16,6,4,1).
_e_pref(16,6,5,0).
_e_pref(16,2,7,0).
_e_pref(16,3,4,0).
_e_pref(16,3,1,0).
_e_pref(16,1,2,0).
_e_pref(16,2,6,0).
_e_pref(16,2,4,0).
_e_pref(16,8,5,0).
_e_pref(16,9,1,1).
_e_pref(16,3,2,0).
_e_pref(16,4,5,0).
_e_pref(16,6,3,0).
_e_pref(16,9,8,0).
_e_pref(16,4,1,0).
_e_pref(16,10,1,0).
_e_pref(17,9,3,0).
_e_pref(17,7,9,0).
_e_pref(17,9,1,0).
_e_pref(17,9,10,1).
_e_pref(17,7,5,0).
_e_pref(17,8,4,0).
_e_pref(17,10,5,0).
_e_pref(17,6,7,0).
_e_pref(17,2,10,0).
_e_pref(17,9,10,0).
_e_pref(17,5,3,0).
_e_pref(17,8,2,0).
_e_pref(17,7,4,0).
_e_pref(17,7,3,0).
_e_pref(17,8,7,0).
_e_pref(17,10,4,0).
_e_pref(17,3,4,1).
_e_pref(17,2,5,0).
_e_pref(17,7,1,0).
_e_pref(17,6,10,1).
_e_pref(17,7,10,0).
_e_pref(17,8,1,0).
_e_pref(17,2,9,0).
_e_pref(17,6,4,0).
_e_pref(17,9,4,0).
_e_pref(17,6,1,0).
_e_pref(17,8,10,0).
_e_pref(17,10,3,0).
_e_pref(17,6,10,0).
_e_pref(17,8,3,0).
_e_pref(17,1,5,0).
_e_pref(17,6,9,0).
_e_pref(17,8,6,0).
_e_pref(17,9,5,0).
_e_pref(17,6,4,1).
_e_pref(17,6,5,0).
_e_pref(17,7,2,0).
_e_pref(17,3,4,0).
_e_pref(17,1,3,0).
_e_pref(17,2,1,0).
_e_pref(17,6,2,0).
_e_pref(17,2,4,0).
_e_pref(17,8,5,0).
_e_pref(17,9,1,1).
_e_pref(17,2,3,0).
_e_pref(17,5,4,0).
_e_pref(17,6,3,0).
_e_pref(17,8,9,0).
_e_pref(17,1,4,0).
_e_pref(17,10,1,0).
_e_pref(18,9,3,0).
_e_pref(18,7,9,0).
_e_pref(18,1,9,0).
_e_pref(18,9,10,1).
_e_pref(18,7,5,0).
_e_pref(18,8,4,0).
_e_pref(18,5,10,0).
_e_pref(18,6,7,0).
_e_pref(18,2,10,0).
_e_pref(18,10,9,0).
_e_pref(18,5,3,0).
_e_pref(18,8,2,0).
_e_pref(18,7,4,0).
_e_pref(18,7,3,0).
_e_pref(18,8,7,0).
_e_pref(18,10,4,0).
_e_pref(18,3,4,1).
_e_pref(18,2,5,0).
_e_pref(18,7,1,0).
_e_pref(18,6,10,1).
_e_pref(18,10,7,0).
_e_pref(18,8,1,0).
_e_pref(18,2,9,0).
_e_pref(18,6,4,0).
_e_pref(18,9,4,0).
_e_pref(18,6,1,0).
_e_pref(18,8,10,0).
_e_pref(18,10,3,0).
_e_pref(18,6,10,0).
_e_pref(18,8,3,0).
_e_pref(18,1,5,0).
_e_pref(18,6,9,0).
_e_pref(18,8,6,0).
_e_pref(18,5,9,0).
_e_pref(18,6,4,1).
_e_pref(18,6,5,0).
_e_pref(18,7,2,0).
_e_pref(18,3,4,0).
_e_pref(18,1,3,0).
_e_pref(18,1,2,0).
_e_pref(18,6,2,0).
_e_pref(18,2,4,0).
_e_pref(18,8,5,0).
_e_pref(18,1,9,1).
_e_pref(18,2,3,0).
_e_pref(18,5,4,0).
_e_pref(18,6,3,0).
_e_pref(18,8,9,0).
_e_pref(18,1,4,0).
_e_pref(18,1,10,0).
_e_pref(19,9,3,0).
_e_pref(19,7,9,0).
_e_pref(19,9,1,0).
_e_pref(19,10,9,1).
_e_pref(19,7,5,0).
_e_pref(19,8,4,0).
_e_pref(19,10,5,0).
_e_pref(19,6,7,0).
_e_pref(19,10,2,0).
_e_pref(19,10,9,0).
_e_pref(19,5,3,0).
_e_pref(19,8,2,0).
_e_pref(19,7,4,0).
_e_pref(19,7,3,0).
_e_pref(19,8,7,0).
_e_pref(19,10,4,0).
_e_pref(19,3,4,1).
_e_pref(19,2,5,0).
_e_pref(19,7,1,0).
_e_pref(19,6,10,1).
_e_pref(19,10,7,0).
_e_pref(19,8,1,0).
_e_pref(19,2,9,0).
_e_pref(19,6,4,0).
_e_pref(19,9,4,0).
_e_pref(19,6,1,0).
_e_pref(19,8,10,0).
_e_pref(19,10,3,0).
_e_pref(19,6,10,0).
_e_pref(19,8,3,0).
_e_pref(19,1,5,0).
_e_pref(19,6,9,0).
_e_pref(19,6,8,0).
_e_pref(19,9,5,0).
_e_pref(19,6,4,1).
_e_pref(19,6,5,0).
_e_pref(19,2,7,0).
_e_pref(19,3,4,0).
_e_pref(19,1,3,0).
_e_pref(19,2,1,0).
_e_pref(19,6,2,0).
_e_pref(19,2,4,0).
_e_pref(19,8,5,0).
_e_pref(19,9,1,1).
_e_pref(19,2,3,0).
_e_pref(19,5,4,0).
_e_pref(19,6,3,0).
_e_pref(19,8,9,0).
_e_pref(19,1,4,0).
_e_pref(19,10,1,0).
_e_pref(20,9,3,0).
_e_pref(20,9,7,0).
_e_pref(20,9,1,0).
_e_pref(20,9,10,1).
_e_pref(20,7,5,0).
_e_pref(20,8,4,0).
_e_pref(20,10,5,0).
_e_pref(20,7,6,0).
_e_pref(20,2,10,0).
_e_pref(20,9,10,0).
_e_pref(20,3,5,0).
_e_pref(20,2,8,0).
_e_pref(20,4,7,0).
_e_pref(20,7,3,0).
_e_pref(20,7,8,0).
_e_pref(20,4,10,0).
_e_pref(20,4,3,1).
_e_pref(20,2,5,0).
_e_pref(20,7,1,0).
_e_pref(20,10,6,1).
_e_pref(20,10,7,0).
_e_pref(20,8,1,0).
_e_pref(20,9,2,0).
_e_pref(20,4,6,0).
_e_pref(20,9,4,0).
_e_pref(20,6,1,0).
_e_pref(20,10,8,0).
_e_pref(20,10,3,0).
_e_pref(20,10,6,0).
_e_pref(20,3,8,0).
_e_pref(20,5,1,0).
_e_pref(20,9,6,0).
_e_pref(20,6,8,0).
_e_pref(20,9,5,0).
_e_pref(20,4,6,1).
_e_pref(20,6,5,0).
_e_pref(20,2,7,0).
_e_pref(20,4,3,0).
_e_pref(20,3,1,0).
_e_pref(20,2,1,0).
_e_pref(20,2,6,0).
_e_pref(20,2,4,0).
_e_pref(20,8,5,0).
_e_pref(20,9,1,1).
_e_pref(20,2,3,0).
_e_pref(20,4,5,0).
_e_pref(20,6,3,0).
_e_pref(20,9,8,0).
_e_pref(20,4,1,0).
_e_pref(20,10,1,0).
_e_pref(21,9,3,0).
_e_pref(21,9,7,0).
_e_pref(21,9,1,0).
_e_pref(21,10,9,1).
_e_pref(21,5,7,0).
_e_pref(21,4,8,0).
_e_pref(21,10,5,0).
_e_pref(21,7,6,0).
_e_pref(21,10,2,0).
_e_pref(21,9,10,0).
_e_pref(21,3,5,0).
_e_pref(21,2,8,0).
_e_pref(21,4,7,0).
_e_pref(21,3,7,0).
_e_pref(21,7,8,0).
_e_pref(21,10,4,0).
_e_pref(21,3,4,1).
_e_pref(21,5,2,0).
_e_pref(21,1,7,0).
_e_pref(21,10,6,1).
_e_pref(21,10,7,0).
_e_pref(21,1,8,0).
_e_pref(21,9,2,0).
_e_pref(21,4,6,0).
_e_pref(21,9,4,0).
_e_pref(21,1,6,0).
_e_pref(21,10,8,0).
_e_pref(21,10,3,0).
_e_pref(21,10,6,0).
_e_pref(21,3,8,0).
_e_pref(21,5,1,0).
_e_pref(21,9,6,0).
_e_pref(21,6,8,0).
_e_pref(21,9,5,0).
_e_pref(21,4,6,1).
_e_pref(21,5,6,0).
_e_pref(21,2,7,0).
_e_pref(21,3,4,0).
_e_pref(21,3,1,0).
_e_pref(21,1,2,0).
_e_pref(21,2,6,0).
_e_pref(21,4,2,0).
_e_pref(21,5,8,0).
_e_pref(21,9,1,1).
_e_pref(21,3,2,0).
_e_pref(21,4,5,0).
_e_pref(21,3,6,0).
_e_pref(21,9,8,0).
_e_pref(21,4,1,0).
_e_pref(21,10,1,0).
_e_pref(22,9,3,0).
_e_pref(22,7,9,0).
_e_pref(22,1,9,0).
_e_pref(22,9,10,1).
_e_pref(22,7,5,0).
_e_pref(22,8,4,0).
_e_pref(22,5,10,0).
_e_pref(22,6,7,0).
_e_pref(22,10,2,0).
_e_pref(22,9,10,0).
_e_pref(22,5,3,0).
_e_pref(22,8,2,0).
_e_pref(22,7,4,0).
_e_pref(22,7,3,0).
_e_pref(22,8,7,0).
_e_pref(22,10,4,0).
_e_pref(22,3,4,1).
_e_pref(22,2,5,0).
_e_pref(22,7,1,0).
_e_pref(22,6,10,1).
_e_pref(22,7,10,0).
_e_pref(22,8,1,0).
_e_pref(22,2,9,0).
_e_pref(22,6,4,0).
_e_pref(22,9,4,0).
_e_pref(22,6,1,0).
_e_pref(22,8,10,0).
_e_pref(22,10,3,0).
_e_pref(22,6,10,0).
_e_pref(22,8,3,0).
_e_pref(22,1,5,0).
_e_pref(22,6,9,0).
_e_pref(22,8,6,0).
_e_pref(22,5,9,0).
_e_pref(22,6,4,1).
_e_pref(22,5,6,0).
_e_pref(22,7,2,0).
_e_pref(22,3,4,0).
_e_pref(22,1,3,0).
_e_pref(22,1,2,0).
_e_pref(22,6,2,0).
_e_pref(22,2,4,0).
_e_pref(22,8,5,0).
_e_pref(22,9,1,1).
_e_pref(22,2,3,0).
_e_pref(22,5,4,0).
_e_pref(22,6,3,0).
_e_pref(22,8,9,0).
_e_pref(22,1,4,0).
_e_pref(22,10,1,0).
_e_pref(23,9,3,0).
_e_pref(23,9,7,0).
_e_pref(23,9,1,0).
_e_pref(23,9,10,1).
_e_pref(23,7,5,0).
_e_pref(23,4,8,0).
_e_pref(23,10,5,0).
_e_pref(23,7,6,0).
_e_pref(23,2,10,0).
_e_pref(23,9,10,0).
_e_pref(23,3,5,0).
_e_pref(23,2,8,0).
_e_pref(23,7,4,0).
_e_pref(23,7,3,0).
_e_pref(23,7,8,0).
_e_pref(23,4,10,0).
_e_pref(23,4,3,1).
_e_pref(23,2,5,0).
_e_pref(23,7,1,0).
_e_pref(23,10,6,1).
_e_pref(23,7,10,0).
_e_pref(23,8,1,0).
_e_pref(23,9,2,0).
_e_pref(23,4,6,0).
_e_pref(23,9,4,0).
_e_pref(23,6,1,0).
_e_pref(23,10,8,0).
_e_pref(23,3,10,0).
_e_pref(23,10,6,0).
_e_pref(23,3,8,0).
_e_pref(23,5,1,0).
_e_pref(23,9,6,0).
_e_pref(23,6,8,0).
_e_pref(23,9,5,0).
_e_pref(23,4,6,1).
_e_pref(23,6,5,0).
_e_pref(23,7,2,0).
_e_pref(23,3,4,0).
_e_pref(23,3,1,0).
_e_pref(23,2,1,0).
_e_pref(23,2,6,0).
_e_pref(23,2,4,0).
_e_pref(23,8,5,0).
_e_pref(23,9,1,1).
_e_pref(23,2,3,0).
_e_pref(23,4,5,0).
_e_pref(23,3,6,0).
_e_pref(23,9,8,0).
_e_pref(23,4,1,0).
_e_pref(23,10,1,0).
_e_pref(24,9,3,0).
_e_pref(24,7,9,0).
_e_pref(24,9,1,0).
_e_pref(24,10,9,1).
_e_pref(24,7,5,0).
_e_pref(24,8,4,0).
_e_pref(24,10,5,0).
_e_pref(24,6,7,0).
_e_pref(24,10,2,0).
_e_pref(24,10,9,0).
_e_pref(24,5,3,0).
_e_pref(24,8,2,0).
_e_pref(24,7,4,0).
_e_pref(24,7,3,0).
_e_pref(24,8,7,0).
_e_pref(24,10,4,0).
_e_pref(24,3,4,1).
_e_pref(24,2,5,0).
_e_pref(24,7,1,0).
_e_pref(24,6,10,1).
_e_pref(24,10,7,0).
_e_pref(24,8,1,0).
_e_pref(24,2,9,0).
_e_pref(24,6,4,0).
_e_pref(24,9,4,0).
_e_pref(24,6,1,0).
_e_pref(24,8,10,0).
_e_pref(24,10,3,0).
_e_pref(24,6,10,0).
_e_pref(24,8,3,0).
_e_pref(24,1,5,0).
_e_pref(24,6,9,0).
_e_pref(24,8,6,0).
_e_pref(24,9,5,0).
_e_pref(24,6,4,1).
_e_pref(24,6,5,0).
_e_pref(24,7,2,0).
_e_pref(24,3,4,0).
_e_pref(24,1,3,0).
_e_pref(24,2,1,0).
_e_pref(24,2,6,0).
_e_pref(24,2,4,0).
_e_pref(24,8,5,0).
_e_pref(24,9,1,1).
_e_pref(24,2,3,0).
_e_pref(24,5,4,0).
_e_pref(24,6,3,0).
_e_pref(24,8,9,0).
_e_pref(24,1,4,0).
_e_pref(24,10,1,0).
_e_pref(25,9,3,0).
_e_pref(25,7,9,0).
_e_pref(25,9,1,0).
_e_pref(25,10,9,1).
_e_pref(25,7,5,0).
_e_pref(25,8,4,0).
_e_pref(25,10,5,0).
_e_pref(25,6,7,0).
_e_pref(25,10,2,0).
_e_pref(25,10,9,0).
_e_pref(25,5,3,0).
_e_pref(25,2,8,0).
_e_pref(25,7,4,0).
_e_pref(25,7,3,0).
_e_pref(25,7,8,0).
_e_pref(25,10,4,0).
_e_pref(25,3,4,1).
_e_pref(25,2,5,0).
_e_pref(25,7,1,0).
_e_pref(25,6,10,1).
_e_pref(25,7,10,0).
_e_pref(25,8,1,0).
_e_pref(25,9,2,0).
_e_pref(25,6,4,0).
_e_pref(25,9,4,0).
_e_pref(25,6,1,0).
_e_pref(25,8,10,0).
_e_pref(25,10,3,0).
_e_pref(25,6,10,0).
_e_pref(25,8,3,0).
_e_pref(25,5,1,0).
_e_pref(25,6,9,0).
_e_pref(25,8,6,0).
_e_pref(25,9,5,0).
_e_pref(25,6,4,1).
_e_pref(25,6,5,0).
_e_pref(25,2,7,0).
_e_pref(25,3,4,0).
_e_pref(25,3,1,0).
_e_pref(25,2,1,0).
_e_pref(25,6,2,0).
_e_pref(25,2,4,0).
_e_pref(25,8,5,0).
_e_pref(25,9,1,1).
_e_pref(25,2,3,0).
_e_pref(25,5,4,0).
_e_pref(25,6,3,0).
_e_pref(25,8,9,0).
_e_pref(25,1,4,0).
_e_pref(25,10,1,0).
_e_pref(26,9,3,0).
_e_pref(26,7,9,0).
_e_pref(26,9,1,0).
_e_pref(26,10,9,1).
_e_pref(26,7,5,0).
_e_pref(26,8,4,0).
_e_pref(26,10,5,0).
_e_pref(26,6,7,0).
_e_pref(26,10,2,0).
_e_pref(26,10,9,0).
_e_pref(26,5,3,0).
_e_pref(26,8,2,0).
_e_pref(26,7,4,0).
_e_pref(26,7,3,0).
_e_pref(26,8,7,0).
_e_pref(26,10,4,0).
_e_pref(26,4,3,1).
_e_pref(26,2,5,0).
_e_pref(26,7,1,0).
_e_pref(26,6,10,1).
_e_pref(26,10,7,0).
_e_pref(26,8,1,0).
_e_pref(26,2,9,0).
_e_pref(26,6,4,0).
_e_pref(26,9,4,0).
_e_pref(26,6,1,0).
_e_pref(26,10,8,0).
_e_pref(26,10,3,0).
_e_pref(26,10,6,0).
_e_pref(26,8,3,0).
_e_pref(26,5,1,0).
_e_pref(26,6,9,0).
_e_pref(26,6,8,0).
_e_pref(26,9,5,0).
_e_pref(26,6,4,1).
_e_pref(26,6,5,0).
_e_pref(26,2,7,0).
_e_pref(26,4,3,0).
_e_pref(26,1,3,0).
_e_pref(26,2,1,0).
_e_pref(26,6,2,0).
_e_pref(26,2,4,0).
_e_pref(26,8,5,0).
_e_pref(26,9,1,1).
_e_pref(26,2,3,0).
_e_pref(26,5,4,0).
_e_pref(26,6,3,0).
_e_pref(26,8,9,0).
_e_pref(26,1,4,0).
_e_pref(26,10,1,0).
_e_pref(27,3,9,0).
_e_pref(27,7,9,0).
_e_pref(27,9,1,0).
_e_pref(27,9,10,1).
_e_pref(27,7,5,0).
_e_pref(27,4,8,0).
_e_pref(27,5,10,0).
_e_pref(27,7,6,0).
_e_pref(27,2,10,0).
_e_pref(27,9,10,0).
_e_pref(27,3,5,0).
_e_pref(27,2,8,0).
_e_pref(27,4,7,0).
_e_pref(27,7,3,0).
_e_pref(27,7,8,0).
_e_pref(27,4,10,0).
_e_pref(27,4,3,1).
_e_pref(27,2,5,0).
_e_pref(27,7,1,0).
_e_pref(27,6,10,1).
_e_pref(27,7,10,0).
_e_pref(27,8,1,0).
_e_pref(27,2,9,0).
_e_pref(27,6,4,0).
_e_pref(27,4,9,0).
_e_pref(27,6,1,0).
_e_pref(27,10,8,0).
_e_pref(27,3,10,0).
_e_pref(27,10,6,0).
_e_pref(27,3,8,0).
_e_pref(27,5,1,0).
_e_pref(27,9,6,0).
_e_pref(27,6,8,0).
_e_pref(27,9,5,0).
_e_pref(27,4,6,1).
_e_pref(27,5,6,0).
_e_pref(27,2,7,0).
_e_pref(27,4,3,0).
_e_pref(27,3,1,0).
_e_pref(27,2,1,0).
_e_pref(27,2,6,0).
_e_pref(27,2,4,0).
_e_pref(27,5,8,0).
_e_pref(27,9,1,1).
_e_pref(27,3,2,0).
_e_pref(27,4,5,0).
_e_pref(27,3,6,0).
_e_pref(27,9,8,0).
_e_pref(27,4,1,0).
_e_pref(27,1,10,0).
_e_pref(28,3,9,0).
_e_pref(28,7,9,0).
_e_pref(28,1,9,0).
_e_pref(28,10,9,1).
_e_pref(28,5,7,0).
_e_pref(28,8,4,0).
_e_pref(28,5,10,0).
_e_pref(28,6,7,0).
_e_pref(28,10,2,0).
_e_pref(28,10,9,0).
_e_pref(28,5,3,0).
_e_pref(28,8,2,0).
_e_pref(28,7,4,0).
_e_pref(28,3,7,0).
_e_pref(28,8,7,0).
_e_pref(28,10,4,0).
_e_pref(28,4,3,1).
_e_pref(28,5,2,0).
_e_pref(28,1,7,0).
_e_pref(28,6,10,1).
_e_pref(28,10,7,0).
_e_pref(28,1,8,0).
_e_pref(28,2,9,0).
_e_pref(28,6,4,0).
_e_pref(28,4,9,0).
_e_pref(28,1,6,0).
_e_pref(28,8,10,0).
_e_pref(28,10,3,0).
_e_pref(28,6,10,0).
_e_pref(28,8,3,0).
_e_pref(28,5,1,0).
_e_pref(28,6,9,0).
_e_pref(28,6,8,0).
_e_pref(28,5,9,0).
_e_pref(28,6,4,1).
_e_pref(28,5,6,0).
_e_pref(28,2,7,0).
_e_pref(28,4,3,0).
_e_pref(28,1,3,0).
_e_pref(28,1,2,0).
_e_pref(28,6,2,0).
_e_pref(28,4,2,0).
_e_pref(28,5,8,0).
_e_pref(28,1,9,1).
_e_pref(28,3,2,0).
_e_pref(28,5,4,0).
_e_pref(28,6,3,0).
_e_pref(28,8,9,0).
_e_pref(28,1,4,0).
_e_pref(28,1,10,0).
_e_pref(29,9,3,0).
_e_pref(29,7,9,0).
_e_pref(29,1,9,0).
_e_pref(29,9,10,1).
_e_pref(29,7,5,0).
_e_pref(29,8,4,0).
_e_pref(29,5,10,0).
_e_pref(29,6,7,0).
_e_pref(29,10,2,0).
_e_pref(29,9,10,0).
_e_pref(29,5,3,0).
_e_pref(29,8,2,0).
_e_pref(29,7,4,0).
_e_pref(29,7,3,0).
_e_pref(29,8,7,0).
_e_pref(29,10,4,0).
_e_pref(29,3,4,1).
_e_pref(29,5,2,0).
_e_pref(29,1,7,0).
_e_pref(29,6,10,1).
_e_pref(29,7,10,0).
_e_pref(29,8,1,0).
_e_pref(29,9,2,0).
_e_pref(29,6,4,0).
_e_pref(29,4,9,0).
_e_pref(29,1,6,0).
_e_pref(29,8,10,0).
_e_pref(29,3,10,0).
_e_pref(29,6,10,0).
_e_pref(29,8,3,0).
_e_pref(29,1,5,0).
_e_pref(29,6,9,0).
_e_pref(29,8,6,0).
_e_pref(29,5,9,0).
_e_pref(29,6,4,1).
_e_pref(29,5,6,0).
_e_pref(29,7,2,0).
_e_pref(29,3,4,0).
_e_pref(29,1,3,0).
_e_pref(29,1,2,0).
_e_pref(29,6,2,0).
_e_pref(29,2,4,0).
_e_pref(29,8,5,0).
_e_pref(29,1,9,1).
_e_pref(29,3,2,0).
_e_pref(29,5,4,0).
_e_pref(29,6,3,0).
_e_pref(29,8,9,0).
_e_pref(29,1,4,0).
_e_pref(29,1,10,0).
_e_pref(30,9,3,0).
_e_pref(30,9,7,0).
_e_pref(30,1,9,0).
_e_pref(30,9,10,1).
_e_pref(30,5,7,0).
_e_pref(30,4,8,0).
_e_pref(30,5,10,0).
_e_pref(30,7,6,0).
_e_pref(30,10,2,0).
_e_pref(30,10,9,0).
_e_pref(30,3,5,0).
_e_pref(30,2,8,0).
_e_pref(30,7,4,0).
_e_pref(30,3,7,0).
_e_pref(30,7,8,0).
_e_pref(30,4,10,0).
_e_pref(30,4,3,1).
_e_pref(30,2,5,0).
_e_pref(30,7,1,0).
_e_pref(30,10,6,1).
_e_pref(30,10,7,0).
_e_pref(30,1,8,0).
_e_pref(30,9,2,0).
_e_pref(30,6,4,0).
_e_pref(30,6,1,0).
_e_pref(30,10,8,0).
_e_pref(30,10,3,0).
_e_pref(30,10,6,0).
_e_pref(30,8,3,0).
_e_pref(30,1,5,0).
_e_pref(30,6,9,0).
_e_pref(30,6,8,0).
_e_pref(30,5,9,0).
_e_pref(30,6,4,1).
_e_pref(30,6,5,0).
_e_pref(30,2,7,0).
_e_pref(30,4,3,0).
_e_pref(30,3,1,0).
_e_pref(30,2,1,0).
_e_pref(30,2,6,0).
_e_pref(30,4,2,0).
_e_pref(30,8,5,0).
_e_pref(30,1,9,1).
_e_pref(30,2,3,0).
_e_pref(30,4,5,0).
_e_pref(30,3,6,0).
_e_pref(30,8,9,0).
_e_pref(30,1,4,0).
_e_pref(30,1,10,0).
_e_pref(31,9,3,0).
_e_pref(31,7,9,0).
_e_pref(31,1,9,0).
_e_pref(31,9,10,1).
_e_pref(31,5,7,0).
_e_pref(31,4,8,0).
_e_pref(31,10,5,0).
_e_pref(31,7,6,0).
_e_pref(31,2,10,0).
_e_pref(31,9,10,0).
_e_pref(31,3,5,0).
_e_pref(31,2,8,0).
_e_pref(31,7,4,0).
_e_pref(31,7,3,0).
_e_pref(31,7,8,0).
_e_pref(31,10,4,0).
_e_pref(31,4,3,1).
_e_pref(31,2,5,0).
_e_pref(31,7,1,0).
_e_pref(31,6,10,1).
_e_pref(31,7,10,0).
_e_pref(31,8,1,0).
_e_pref(31,2,9,0).
_e_pref(31,6,4,0).
_e_pref(31,4,9,0).
_e_pref(31,6,1,0).
_e_pref(31,10,8,0).
_e_pref(31,10,3,0).
_e_pref(31,6,10,0).
_e_pref(31,8,3,0).
_e_pref(31,5,1,0).
_e_pref(31,6,9,0).
_e_pref(31,6,8,0).
_e_pref(31,9,5,0).
_e_pref(31,6,4,1).
_e_pref(31,6,5,0).
_e_pref(31,2,7,0).
_e_pref(31,4,3,0).
_e_pref(31,3,1,0).
_e_pref(31,2,1,0).
_e_pref(31,2,6,0).
_e_pref(31,2,4,0).
_e_pref(31,8,5,0).
_e_pref(31,9,1,1).
_e_pref(31,2,3,0).
_e_pref(31,4,5,0).
_e_pref(31,6,3,0).
_e_pref(31,8,9,0).
_e_pref(31,4,1,0).
_e_pref(31,10,1,0).
_e_pref(32,9,3,0).
_e_pref(32,7,9,0).
_e_pref(32,9,1,0).
_e_pref(32,9,10,1).
_e_pref(32,7,5,0).
_e_pref(32,8,4,0).
_e_pref(32,10,5,0).
_e_pref(32,6,7,0).
_e_pref(32,2,10,0).
_e_pref(32,9,10,0).
_e_pref(32,5,3,0).
_e_pref(32,8,2,0).
_e_pref(32,7,4,0).
_e_pref(32,7,3,0).
_e_pref(32,8,7,0).
_e_pref(32,10,4,0).
_e_pref(32,3,4,1).
_e_pref(32,2,5,0).
_e_pref(32,7,1,0).
_e_pref(32,6,10,1).
_e_pref(32,7,10,0).
_e_pref(32,8,1,0).
_e_pref(32,9,2,0).
_e_pref(32,6,4,0).
_e_pref(32,9,4,0).
_e_pref(32,6,1,0).
_e_pref(32,8,10,0).
_e_pref(32,10,3,0).
_e_pref(32,6,10,0).
_e_pref(32,8,3,0).
_e_pref(32,1,5,0).
_e_pref(32,6,9,0).
_e_pref(32,8,6,0).
_e_pref(32,9,5,0).
_e_pref(32,6,4,1).
_e_pref(32,6,5,0).
_e_pref(32,7,2,0).
_e_pref(32,3,4,0).
_e_pref(32,1,3,0).
_e_pref(32,2,1,0).
_e_pref(32,6,2,0).
_e_pref(32,2,4,0).
_e_pref(32,8,5,0).
_e_pref(32,9,1,1).
_e_pref(32,2,3,0).
_e_pref(32,5,4,0).
_e_pref(32,8,9,0).
_e_pref(32,1,4,0).
_e_pref(32,10,1,0).
_e_pref(33,3,9,0).
_e_pref(33,9,7,0).
_e_pref(33,1,9,0).
_e_pref(33,10,9,1).
_e_pref(33,5,7,0).
_e_pref(33,8,4,0).
_e_pref(33,10,5,0).
_e_pref(33,6,7,0).
_e_pref(33,10,2,0).
_e_pref(33,10,9,0).
_e_pref(33,5,3,0).
_e_pref(33,8,2,0).
_e_pref(33,4,7,0).
_e_pref(33,3,7,0).
_e_pref(33,8,7,0).
_e_pref(33,10,4,0).
_e_pref(33,4,3,1).
_e_pref(33,5,2,0).
_e_pref(33,1,7,0).
_e_pref(33,10,6,1).
_e_pref(33,10,7,0).
_e_pref(33,1,8,0).
_e_pref(33,9,2,0).
_e_pref(33,6,4,0).
_e_pref(33,4,9,0).
_e_pref(33,6,1,0).
_e_pref(33,10,8,0).
_e_pref(33,10,3,0).
_e_pref(33,10,6,0).
_e_pref(33,8,3,0).
_e_pref(33,5,1,0).
_e_pref(33,6,9,0).
_e_pref(33,6,8,0).
_e_pref(33,5,9,0).
_e_pref(33,4,6,1).
_e_pref(33,5,6,0).
_e_pref(33,2,7,0).
_e_pref(33,4,3,0).
_e_pref(33,1,3,0).
_e_pref(33,1,2,0).
_e_pref(33,6,2,0).
_e_pref(33,4,2,0).
_e_pref(33,5,8,0).
_e_pref(33,1,9,1).
_e_pref(33,2,3,0).
_e_pref(33,5,4,0).
_e_pref(33,6,3,0).
_e_pref(33,8,9,0).
_e_pref(33,1,4,0).
_e_pref(33,10,1,0).
_e_pref(34,9,3,0).
_e_pref(34,9,7,0).
_e_pref(34,9,1,0).
_e_pref(34,10,9,1).
_e_pref(34,7,5,0).
_e_pref(34,8,4,0).
_e_pref(34,10,5,0).
_e_pref(34,6,7,0).
_e_pref(34,10,2,0).
_e_pref(34,10,9,0).
_e_pref(34,5,3,0).
_e_pref(34,8,2,0).
_e_pref(34,4,7,0).
_e_pref(34,7,3,0).
_e_pref(34,8,7,0).
_e_pref(34,10,4,0).
_e_pref(34,4,3,1).
_e_pref(34,7,1,0).
_e_pref(34,10,6,1).
_e_pref(34,10,7,0).
_e_pref(34,8,1,0).
_e_pref(34,2,9,0).
_e_pref(34,6,4,0).
_e_pref(34,6,1,0).
_e_pref(34,10,8,0).
_e_pref(34,10,3,0).
_e_pref(34,10,6,0).
_e_pref(34,8,3,0).
_e_pref(34,1,5,0).
_e_pref(34,9,6,0).
_e_pref(34,6,8,0).
_e_pref(34,9,5,0).
_e_pref(34,6,4,1).
_e_pref(34,6,5,0).
_e_pref(34,2,7,0).
_e_pref(34,4,3,0).
_e_pref(34,1,3,0).
_e_pref(34,1,2,0).
_e_pref(34,6,2,0).
_e_pref(34,2,4,0).
_e_pref(34,8,5,0).
_e_pref(34,9,1,1).
_e_pref(34,2,3,0).
_e_pref(34,4,5,0).
_e_pref(34,6,3,0).
_e_pref(34,8,9,0).
_e_pref(34,1,4,0).
_e_pref(34,10,1,0).
_e_pref(35,9,3,0).
_e_pref(35,9,7,0).
_e_pref(35,9,1,0).
_e_pref(35,9,10,1).
_e_pref(35,7,5,0).
_e_pref(35,10,5,0).
_e_pref(35,7,6,0).
_e_pref(35,2,10,0).
_e_pref(35,9,10,0).
_e_pref(35,3,5,0).
_e_pref(35,2,8,0).
_e_pref(35,7,4,0).
_e_pref(35,7,3,0).
_e_pref(35,7,8,0).
_e_pref(35,10,4,0).
_e_pref(35,4,3,1).
_e_pref(35,2,5,0).
_e_pref(35,7,1,0).
_e_pref(35,10,6,1).
_e_pref(35,10,7,0).
_e_pref(35,8,1,0).
_e_pref(35,9,2,0).
_e_pref(35,6,4,0).
_e_pref(35,9,4,0).
_e_pref(35,6,1,0).
_e_pref(35,10,8,0).
_e_pref(35,10,3,0).
_e_pref(35,10,6,0).
_e_pref(35,8,3,0).
_e_pref(35,5,1,0).
_e_pref(35,9,6,0).
_e_pref(35,6,8,0).
_e_pref(35,9,5,0).
_e_pref(35,6,4,1).
_e_pref(35,2,7,0).
_e_pref(35,4,3,0).
_e_pref(35,3,1,0).
_e_pref(35,2,1,0).
_e_pref(35,2,6,0).
_e_pref(35,2,4,0).
_e_pref(35,8,5,0).
_e_pref(35,9,1,1).
_e_pref(35,2,3,0).
_e_pref(35,4,5,0).
_e_pref(35,6,3,0).
_e_pref(35,9,8,0).
_e_pref(35,4,1,0).
_e_pref(35,10,1,0).
_e_pref(36,9,3,0).
_e_pref(36,7,9,0).
_e_pref(36,9,1,0).
_e_pref(36,10,9,1).
_e_pref(36,7,5,0).
_e_pref(36,8,4,0).
_e_pref(36,10,5,0).
_e_pref(36,6,7,0).
_e_pref(36,10,2,0).
_e_pref(36,10,9,0).
_e_pref(36,5,3,0).
_e_pref(36,8,2,0).
_e_pref(36,7,4,0).
_e_pref(36,7,3,0).
_e_pref(36,8,7,0).
_e_pref(36,10,4,0).
_e_pref(36,3,4,1).
_e_pref(36,2,5,0).
_e_pref(36,7,1,0).
_e_pref(36,6,10,1).
_e_pref(36,7,10,0).
_e_pref(36,8,1,0).
_e_pref(36,2,9,0).
_e_pref(36,6,4,0).
_e_pref(36,9,4,0).
_e_pref(36,6,1,0).
_e_pref(36,8,10,0).
_e_pref(36,10,3,0).
_e_pref(36,6,10,0).
_e_pref(36,8,3,0).
_e_pref(36,1,5,0).
_e_pref(36,6,9,0).
_e_pref(36,6,8,0).
_e_pref(36,9,5,0).
_e_pref(36,6,4,1).
_e_pref(36,6,5,0).
_e_pref(36,7,2,0).
_e_pref(36,3,4,0).
_e_pref(36,3,1,0).
_e_pref(36,2,1,0).
_e_pref(36,6,2,0).
_e_pref(36,2,4,0).
_e_pref(36,8,5,0).
_e_pref(36,9,1,1).
_e_pref(36,2,3,0).
_e_pref(36,5,4,0).
_e_pref(36,6,3,0).
_e_pref(36,8,9,0).
_e_pref(36,1,4,0).
_e_pref(36,10,1,0).
_e_pref(37,9,3,0).
_e_pref(37,9,7,0).
_e_pref(37,9,1,0).
_e_pref(37,10,9,1).
_e_pref(37,5,7,0).
_e_pref(37,4,8,0).
_e_pref(37,10,5,0).
_e_pref(37,6,7,0).
_e_pref(37,10,2,0).
_e_pref(37,9,10,0).
_e_pref(37,3,5,0).
_e_pref(37,2,8,0).
_e_pref(37,4,7,0).
_e_pref(37,3,7,0).
_e_pref(37,8,7,0).
_e_pref(37,4,10,0).
_e_pref(37,3,4,1).
_e_pref(37,5,2,0).
_e_pref(37,1,7,0).
_e_pref(37,10,6,1).
_e_pref(37,10,7,0).
_e_pref(37,1,8,0).
_e_pref(37,9,2,0).
_e_pref(37,4,6,0).
_e_pref(37,4,9,0).
_e_pref(37,1,6,0).
_e_pref(37,10,8,0).
_e_pref(37,3,10,0).
_e_pref(37,10,6,0).
_e_pref(37,3,8,0).
_e_pref(37,5,1,0).
_e_pref(37,9,6,0).
_e_pref(37,6,8,0).
_e_pref(37,9,5,0).
_e_pref(37,4,6,1).
_e_pref(37,5,6,0).
_e_pref(37,2,7,0).
_e_pref(37,4,3,0).
_e_pref(37,3,1,0).
_e_pref(37,1,2,0).
_e_pref(37,6,2,0).
_e_pref(37,4,2,0).
_e_pref(37,5,8,0).
_e_pref(37,9,1,1).
_e_pref(37,3,2,0).
_e_pref(37,5,4,0).
_e_pref(37,3,6,0).
_e_pref(37,9,8,0).
_e_pref(37,4,1,0).
_e_pref(37,10,1,0).
_e_pref(38,9,3,0).
_e_pref(38,7,9,0).
_e_pref(38,9,1,0).
_e_pref(38,10,9,1).
_e_pref(38,7,5,0).
_e_pref(38,8,4,0).
_e_pref(38,10,5,0).
_e_pref(38,6,7,0).
_e_pref(38,2,10,0).
_e_pref(38,10,9,0).
_e_pref(38,5,3,0).
_e_pref(38,8,2,0).
_e_pref(38,7,4,0).
_e_pref(38,7,3,0).
_e_pref(38,8,7,0).
_e_pref(38,10,4,0).
_e_pref(38,3,4,1).
_e_pref(38,2,5,0).
_e_pref(38,7,1,0).
_e_pref(38,6,10,1).
_e_pref(38,7,10,0).
_e_pref(38,8,1,0).
_e_pref(38,2,9,0).
_e_pref(38,6,4,0).
_e_pref(38,9,4,0).
_e_pref(38,6,1,0).
_e_pref(38,8,10,0).
_e_pref(38,10,3,0).
_e_pref(38,6,10,0).
_e_pref(38,8,3,0).
_e_pref(38,5,1,0).
_e_pref(38,6,9,0).
_e_pref(38,6,8,0).
_e_pref(38,9,5,0).
_e_pref(38,6,4,1).
_e_pref(38,6,5,0).
_e_pref(38,7,2,0).
_e_pref(38,3,4,0).
_e_pref(38,1,3,0).
_e_pref(38,2,1,0).
_e_pref(38,6,2,0).
_e_pref(38,2,4,0).
_e_pref(38,8,5,0).
_e_pref(38,9,1,1).
_e_pref(38,2,3,0).
_e_pref(38,5,4,0).
_e_pref(38,6,3,0).
_e_pref(38,8,9,0).
_e_pref(38,1,4,0).
_e_pref(38,10,1,0).
_e_pref(39,9,3,0).
_e_pref(39,7,9,0).
_e_pref(39,9,1,0).
_e_pref(39,10,9,1).
_e_pref(39,7,5,0).
_e_pref(39,8,4,0).
_e_pref(39,10,5,0).
_e_pref(39,6,7,0).
_e_pref(39,2,10,0).
_e_pref(39,10,9,0).
_e_pref(39,5,3,0).
_e_pref(39,8,2,0).
_e_pref(39,7,4,0).
_e_pref(39,7,3,0).
_e_pref(39,8,7,0).
_e_pref(39,10,4,0).
_e_pref(39,4,3,1).
_e_pref(39,2,5,0).
_e_pref(39,7,1,0).
_e_pref(39,6,10,1).
_e_pref(39,7,10,0).
_e_pref(39,8,1,0).
_e_pref(39,2,9,0).
_e_pref(39,6,4,0).
_e_pref(39,9,4,0).
_e_pref(39,6,1,0).
_e_pref(39,8,10,0).
_e_pref(39,10,3,0).
_e_pref(39,6,10,0).
_e_pref(39,8,3,0).
_e_pref(39,5,1,0).
_e_pref(39,6,9,0).
_e_pref(39,6,8,0).
_e_pref(39,9,5,0).
_e_pref(39,6,4,1).
_e_pref(39,6,5,0).
_e_pref(39,2,7,0).
_e_pref(39,4,3,0).
_e_pref(39,1,3,0).
_e_pref(39,2,1,0).
_e_pref(39,6,2,0).
_e_pref(39,2,4,0).
_e_pref(39,8,5,0).
_e_pref(39,9,1,1).
_e_pref(39,2,3,0).
_e_pref(39,5,4,0).
_e_pref(39,6,3,0).
_e_pref(39,8,9,0).
_e_pref(39,1,4,0).
_e_pref(39,10,1,0).
_e_pref(40,9,3,0).
_e_pref(40,7,9,0).
_e_pref(40,9,1,0).
_e_pref(40,10,9,1).
_e_pref(40,7,5,0).
_e_pref(40,8,4,0).
_e_pref(40,10,5,0).
_e_pref(40,6,7,0).
_e_pref(40,2,10,0).
_e_pref(40,10,9,0).
_e_pref(40,3,5,0).
_e_pref(40,8,2,0).
_e_pref(40,7,4,0).
_e_pref(40,7,3,0).
_e_pref(40,7,8,0).
_e_pref(40,10,4,0).
_e_pref(40,4,3,1).
_e_pref(40,2,5,0).
_e_pref(40,7,1,0).
_e_pref(40,6,10,1).
_e_pref(40,7,10,0).
_e_pref(40,8,1,0).
_e_pref(40,2,9,0).
_e_pref(40,6,4,0).
_e_pref(40,9,4,0).
_e_pref(40,6,1,0).
_e_pref(40,8,10,0).
_e_pref(40,10,3,0).
_e_pref(40,6,10,0).
_e_pref(40,8,3,0).
_e_pref(40,5,1,0).
_e_pref(40,6,9,0).
_e_pref(40,6,8,0).
_e_pref(40,9,5,0).
_e_pref(40,6,4,1).
_e_pref(40,6,5,0).
_e_pref(40,2,7,0).
_e_pref(40,4,3,0).
_e_pref(40,1,3,0).
_e_pref(40,2,1,0).
_e_pref(40,2,6,0).
_e_pref(40,2,4,0).
_e_pref(40,8,5,0).
_e_pref(40,9,1,1).
_e_pref(40,2,3,0).
_e_pref(40,5,4,0).
_e_pref(40,6,3,0).
_e_pref(40,8,9,0).
_e_pref(40,4,1,0).
_e_pref(40,10,1,0).
_e_pref(41,9,3,0).
_e_pref(41,7,9,0).
_e_pref(41,9,1,0).
_e_pref(41,9,10,1).
_e_pref(41,7,5,0).
_e_pref(41,8,4,0).
_e_pref(41,5,10,0).
_e_pref(41,7,6,0).
_e_pref(41,10,2,0).
_e_pref(41,9,10,0).
_e_pref(41,5,3,0).
_e_pref(41,8,2,0).
_e_pref(41,7,4,0).
_e_pref(41,7,3,0).
_e_pref(41,8,7,0).
_e_pref(41,10,4,0).
_e_pref(41,3,4,1).
_e_pref(41,5,2,0).
_e_pref(41,7,1,0).
_e_pref(41,6,10,1).
_e_pref(41,7,10,0).
_e_pref(41,8,1,0).
_e_pref(41,9,2,0).
_e_pref(41,6,4,0).
_e_pref(41,9,4,0).
_e_pref(41,6,1,0).
_e_pref(41,8,10,0).
_e_pref(41,10,3,0).
_e_pref(41,6,10,0).
_e_pref(41,8,3,0).
_e_pref(41,1,5,0).
_e_pref(41,6,9,0).
_e_pref(41,8,6,0).
_e_pref(41,9,5,0).
_e_pref(41,6,4,1).
_e_pref(41,6,5,0).
_e_pref(41,7,2,0).
_e_pref(41,3,4,0).
_e_pref(41,3,1,0).
_e_pref(41,2,1,0).
_e_pref(41,6,2,0).
_e_pref(41,2,4,0).
_e_pref(41,8,5,0).
_e_pref(41,9,1,1).
_e_pref(41,2,3,0).
_e_pref(41,5,4,0).
_e_pref(41,6,3,0).
_e_pref(41,9,8,0).
_e_pref(41,1,4,0).
_e_pref(41,10,1,0).
_e_pref(42,9,3,0).
_e_pref(42,7,9,0).
_e_pref(42,1,9,0).
_e_pref(42,10,9,1).
_e_pref(42,5,7,0).
_e_pref(42,8,4,0).
_e_pref(42,10,5,0).
_e_pref(42,6,7,0).
_e_pref(42,10,2,0).
_e_pref(42,10,9,0).
_e_pref(42,5,3,0).
_e_pref(42,8,2,0).
_e_pref(42,7,4,0).
_e_pref(42,7,3,0).
_e_pref(42,8,7,0).
_e_pref(42,10,4,0).
_e_pref(42,3,4,1).
_e_pref(42,5,2,0).
_e_pref(42,1,7,0).
_e_pref(42,6,10,1).
_e_pref(42,10,7,0).
_e_pref(42,8,1,0).
_e_pref(42,9,2,0).
_e_pref(42,6,4,0).
_e_pref(42,9,4,0).
_e_pref(42,6,1,0).
_e_pref(42,8,10,0).
_e_pref(42,10,3,0).
_e_pref(42,6,10,0).
_e_pref(42,8,3,0).
_e_pref(42,5,1,0).
_e_pref(42,6,9,0).
_e_pref(42,6,8,0).
_e_pref(42,5,9,0).
_e_pref(42,6,4,1).
_e_pref(42,6,5,0).
_e_pref(42,7,2,0).
_e_pref(42,3,4,0).
_e_pref(42,1,3,0).
_e_pref(42,1,2,0).
_e_pref(42,6,2,0).
_e_pref(42,2,4,0).
_e_pref(42,8,5,0).
_e_pref(42,1,9,1).
_e_pref(42,2,3,0).
_e_pref(42,5,4,0).
_e_pref(42,6,3,0).
_e_pref(42,8,9,0).
_e_pref(42,1,4,0).
_e_pref(42,10,1,0).
_e_pref(43,9,3,0).
_e_pref(43,7,9,0).
_e_pref(43,9,1,0).
_e_pref(43,9,10,1).
_e_pref(43,7,5,0).
_e_pref(43,8,4,0).
_e_pref(43,10,5,0).
_e_pref(43,7,6,0).
_e_pref(43,2,10,0).
_e_pref(43,9,10,0).
_e_pref(43,3,5,0).
_e_pref(43,2,8,0).
_e_pref(43,7,4,0).
_e_pref(43,7,3,0).
_e_pref(43,7,8,0).
_e_pref(43,10,4,0).
_e_pref(43,4,3,1).
_e_pref(43,2,5,0).
_e_pref(43,7,1,0).
_e_pref(43,6,10,1).
_e_pref(43,7,10,0).
_e_pref(43,8,1,0).
_e_pref(43,2,9,0).
_e_pref(43,6,4,0).
_e_pref(43,9,4,0).
_e_pref(43,6,1,0).
_e_pref(43,8,10,0).
_e_pref(43,10,3,0).
_e_pref(43,6,10,0).
_e_pref(43,8,3,0).
_e_pref(43,5,1,0).
_e_pref(43,6,9,0).
_e_pref(43,6,8,0).
_e_pref(43,9,5,0).
_e_pref(43,6,4,1).
_e_pref(43,6,5,0).
_e_pref(43,2,7,0).
_e_pref(43,4,3,0).
_e_pref(43,3,1,0).
_e_pref(43,2,1,0).
_e_pref(43,2,6,0).
_e_pref(43,2,4,0).
_e_pref(43,8,5,0).
_e_pref(43,9,1,1).
_e_pref(43,2,3,0).
_e_pref(43,4,5,0).
_e_pref(43,6,3,0).
_e_pref(43,8,9,0).
_e_pref(43,4,1,0).
_e_pref(43,10,1,0).
_e_pref(44,3,9,0).
_e_pref(44,9,7,0).
_e_pref(44,9,1,0).
_e_pref(44,10,9,1).
_e_pref(44,5,7,0).
_e_pref(44,4,8,0).
_e_pref(44,10,5,0).
_e_pref(44,7,6,0).
_e_pref(44,10,2,0).
_e_pref(44,10,9,0).
_e_pref(44,3,5,0).
_e_pref(44,2,8,0).
_e_pref(44,4,7,0).
_e_pref(44,3,7,0).
_e_pref(44,7,8,0).
_e_pref(44,4,10,0).
_e_pref(44,4,3,1).
_e_pref(44,5,2,0).
_e_pref(44,1,7,0).
_e_pref(44,10,6,1).
_e_pref(44,10,7,0).
_e_pref(44,1,8,0).
_e_pref(44,9,2,0).
_e_pref(44,4,6,0).
_e_pref(44,4,9,0).
_e_pref(44,1,6,0).
_e_pref(44,10,8,0).
_e_pref(44,3,10,0).
_e_pref(44,10,6,0).
_e_pref(44,3,8,0).
_e_pref(44,5,1,0).
_e_pref(44,9,6,0).
_e_pref(44,6,8,0).
_e_pref(44,9,5,0).
_e_pref(44,4,6,1).
_e_pref(44,5,6,0).
_e_pref(44,2,7,0).
_e_pref(44,3,4,0).
_e_pref(44,3,1,0).
_e_pref(44,2,1,0).
_e_pref(44,2,6,0).
_e_pref(44,4,2,0).
_e_pref(44,5,8,0).
_e_pref(44,9,1,1).
_e_pref(44,3,2,0).
_e_pref(44,4,5,0).
_e_pref(44,3,6,0).
_e_pref(44,9,8,0).
_e_pref(44,4,1,0).
_e_pref(44,10,1,0).
_e_pref(45,3,9,0).
_e_pref(45,9,7,0).
_e_pref(45,1,9,0).
_e_pref(45,10,9,1).
_e_pref(45,5,7,0).
_e_pref(45,8,4,0).
_e_pref(45,10,5,0).
_e_pref(45,10,2,0).
_e_pref(45,10,9,0).
_e_pref(45,5,3,0).
_e_pref(45,8,2,0).
_e_pref(45,4,7,0).
_e_pref(45,3,7,0).
_e_pref(45,8,7,0).
_e_pref(45,10,4,0).
_e_pref(45,4,3,1).
_e_pref(45,5,2,0).
_e_pref(45,1,7,0).
_e_pref(45,10,6,1).
_e_pref(45,1,8,0).
_e_pref(45,2,9,0).
_e_pref(45,6,4,0).
_e_pref(45,4,9,0).
_e_pref(45,6,1,0).
_e_pref(45,10,8,0).
_e_pref(45,10,3,0).
_e_pref(45,10,6,0).
_e_pref(45,5,1,0).
_e_pref(45,6,9,0).
_e_pref(45,6,8,0).
_e_pref(45,5,9,0).
_e_pref(45,6,4,1).
_e_pref(45,6,5,0).
_e_pref(45,2,7,0).
_e_pref(45,4,3,0).
_e_pref(45,1,3,0).
_e_pref(45,1,2,0).
_e_pref(45,6,2,0).
_e_pref(45,5,8,0).
_e_pref(45,1,9,1).
_e_pref(45,3,2,0).
_e_pref(45,5,4,0).
_e_pref(45,6,3,0).
_e_pref(45,8,9,0).
_e_pref(45,1,4,0).
_e_pref(45,10,1,0).
_e_pref(46,3,9,0).
_e_pref(46,7,9,0).
_e_pref(46,9,1,0).
_e_pref(46,10,9,1).
_e_pref(46,7,5,0).
_e_pref(46,4,8,0).
_e_pref(46,10,5,0).
_e_pref(46,7,6,0).
_e_pref(46,2,10,0).
_e_pref(46,10,9,0).
_e_pref(46,3,5,0).
_e_pref(46,2,8,0).
_e_pref(46,7,4,0).
_e_pref(46,7,3,0).
_e_pref(46,7,8,0).
_e_pref(46,4,10,0).
_e_pref(46,4,3,1).
_e_pref(46,2,5,0).
_e_pref(46,7,1,0).
_e_pref(46,6,10,1).
_e_pref(46,7,10,0).
_e_pref(46,8,1,0).
_e_pref(46,2,9,0).
_e_pref(46,4,6,0).
_e_pref(46,4,9,0).
_e_pref(46,6,1,0).
_e_pref(46,10,8,0).
_e_pref(46,3,10,0).
_e_pref(46,10,6,0).
_e_pref(46,3,8,0).
_e_pref(46,5,1,0).
_e_pref(46,6,9,0).
_e_pref(46,6,8,0).
_e_pref(46,5,9,0).
_e_pref(46,6,4,1).
_e_pref(46,6,5,0).
_e_pref(46,2,7,0).
_e_pref(46,4,3,0).
_e_pref(46,3,1,0).
_e_pref(46,2,1,0).
_e_pref(46,2,6,0).
_e_pref(46,2,4,0).
_e_pref(46,8,5,0).
_e_pref(46,9,1,1).
_e_pref(46,2,3,0).
_e_pref(46,4,5,0).
_e_pref(46,6,3,0).
_e_pref(46,8,9,0).
_e_pref(46,4,1,0).
_e_pref(46,10,1,0).
_e_pref(47,3,9,0).
_e_pref(47,9,7,0).
_e_pref(47,9,1,0).
_e_pref(47,9,10,1).
_e_pref(47,7,5,0).
_e_pref(47,4,8,0).
_e_pref(47,10,5,0).
_e_pref(47,7,6,0).
_e_pref(47,2,10,0).
_e_pref(47,9,10,0).
_e_pref(47,3,5,0).
_e_pref(47,2,8,0).
_e_pref(47,7,4,0).
_e_pref(47,7,3,0).
_e_pref(47,7,8,0).
_e_pref(47,4,10,0).
_e_pref(47,3,4,1).
_e_pref(47,2,5,0).
_e_pref(47,7,1,0).
_e_pref(47,6,10,1).
_e_pref(47,7,10,0).
_e_pref(47,8,1,0).
_e_pref(47,2,9,0).
_e_pref(47,4,6,0).
_e_pref(47,9,4,0).
_e_pref(47,6,1,0).
_e_pref(47,8,10,0).
_e_pref(47,10,3,0).
_e_pref(47,6,10,0).
_e_pref(47,3,8,0).
_e_pref(47,5,1,0).
_e_pref(47,9,6,0).
_e_pref(47,6,8,0).
_e_pref(47,9,5,0).
_e_pref(47,6,4,1).
_e_pref(47,6,5,0).
_e_pref(47,7,2,0).
_e_pref(47,3,4,0).
_e_pref(47,3,1,0).
_e_pref(47,2,1,0).
_e_pref(47,2,6,0).
_e_pref(47,2,4,0).
_e_pref(47,8,5,0).
_e_pref(47,9,1,1).
_e_pref(47,2,3,0).
_e_pref(47,4,5,0).
_e_pref(47,6,3,0).
_e_pref(47,9,8,0).
_e_pref(47,4,1,0).
_e_pref(47,10,1,0).
_e_pref(48,3,9,0).
_e_pref(48,7,9,0).
_e_pref(48,9,1,0).
_e_pref(48,10,9,1).
_e_pref(48,5,7,0).
_e_pref(48,8,4,0).
_e_pref(48,10,5,0).
_e_pref(48,6,7,0).
_e_pref(48,2,10,0).
_e_pref(48,10,9,0).
_e_pref(48,5,3,0).
_e_pref(48,8,2,0).
_e_pref(48,7,4,0).
_e_pref(48,7,3,0).
_e_pref(48,8,7,0).
_e_pref(48,10,4,0).
_e_pref(48,4,3,1).
_e_pref(48,2,5,0).
_e_pref(48,7,1,0).
_e_pref(48,6,10,1).
_e_pref(48,7,10,0).
_e_pref(48,8,1,0).
_e_pref(48,2,9,0).
_e_pref(48,6,4,0).
_e_pref(48,9,4,0).
_e_pref(48,6,1,0).
_e_pref(48,8,10,0).
_e_pref(48,10,3,0).
_e_pref(48,6,10,0).
_e_pref(48,8,3,0).
_e_pref(48,6,9,0).
_e_pref(48,6,8,0).
_e_pref(48,5,9,0).
_e_pref(48,6,4,1).
_e_pref(48,2,7,0).
_e_pref(48,4,3,0).
_e_pref(48,1,3,0).
_e_pref(48,2,1,0).
_e_pref(48,6,2,0).
_e_pref(48,2,4,0).
_e_pref(48,8,5,0).
_e_pref(48,9,1,1).
_e_pref(48,2,3,0).
_e_pref(48,5,4,0).
_e_pref(48,6,3,0).
_e_pref(48,8,9,0).
_e_pref(48,1,4,0).
_e_pref(48,10,1,0).
_e_pref(49,3,9,0).
_e_pref(49,9,7,0).
_e_pref(49,1,9,0).
_e_pref(49,10,9,1).
_e_pref(49,5,7,0).
_e_pref(49,4,8,0).
_e_pref(49,5,10,0).
_e_pref(49,6,7,0).
_e_pref(49,2,10,0).
_e_pref(49,10,9,0).
_e_pref(49,3,5,0).
_e_pref(49,2,8,0).
_e_pref(49,4,7,0).
_e_pref(49,3,7,0).
_e_pref(49,7,8,0).
_e_pref(49,4,10,0).
_e_pref(49,3,4,1).
_e_pref(49,5,2,0).
_e_pref(49,7,1,0).
_e_pref(49,10,6,1).
_e_pref(49,10,7,0).
_e_pref(49,1,8,0).
_e_pref(49,2,9,0).
_e_pref(49,4,6,0).
_e_pref(49,4,9,0).
_e_pref(49,1,6,0).
_e_pref(49,10,8,0).
_e_pref(49,3,10,0).
_e_pref(49,10,6,0).
_e_pref(49,3,8,0).
_e_pref(49,5,1,0).
_e_pref(49,6,9,0).
_e_pref(49,6,8,0).
_e_pref(49,5,9,0).
_e_pref(49,4,6,1).
_e_pref(49,5,6,0).
_e_pref(49,2,7,0).
_e_pref(49,4,3,0).
_e_pref(49,3,1,0).
_e_pref(49,1,2,0).
_e_pref(49,2,6,0).
_e_pref(49,4,2,0).
_e_pref(49,5,8,0).
_e_pref(49,1,9,1).
_e_pref(49,3,2,0).
_e_pref(49,4,5,0).
_e_pref(49,3,6,0).
_e_pref(49,9,8,0).
_e_pref(49,4,1,0).
_e_pref(49,1,10,0).
_e_pref(50,9,3,0).
_e_pref(50,7,9,0).
_e_pref(50,9,1,0).
_e_pref(50,10,9,1).
_e_pref(50,7,5,0).
_e_pref(50,8,4,0).
_e_pref(50,6,7,0).
_e_pref(50,10,2,0).
_e_pref(50,10,9,0).
_e_pref(50,5,3,0).
_e_pref(50,8,2,0).
_e_pref(50,7,4,0).
_e_pref(50,7,3,0).
_e_pref(50,8,7,0).
_e_pref(50,10,4,0).
_e_pref(50,2,5,0).
_e_pref(50,7,1,0).
_e_pref(50,6,10,1).
_e_pref(50,10,7,0).
_e_pref(50,8,1,0).
_e_pref(50,2,9,0).
_e_pref(50,6,4,0).
_e_pref(50,9,4,0).
_e_pref(50,6,1,0).
_e_pref(50,8,3,0).
_e_pref(50,5,1,0).
_e_pref(50,6,9,0).
_e_pref(50,6,4,1).
_e_pref(50,6,5,0).
_e_pref(50,7,2,0).
_e_pref(50,3,4,0).
_e_pref(50,1,3,0).
_e_pref(50,1,2,0).
_e_pref(50,6,2,0).
_e_pref(50,2,4,0).
_e_pref(50,8,5,0).
_e_pref(50,9,1,1).
_e_pref(50,2,3,0).
_e_pref(50,5,4,0).
_e_pref(50,6,3,0).
_e_pref(50,8,9,0).
_e_pref(50,1,4,0).
_e_pref(50,10,1,0).
_e_pref(51,9,3,0).
_e_pref(51,7,9,0).
_e_pref(51,9,1,0).
_e_pref(51,10,9,1).
_e_pref(51,7,5,0).
_e_pref(51,4,8,0).
_e_pref(51,10,5,0).
_e_pref(51,6,7,0).
_e_pref(51,2,10,0).
_e_pref(51,10,9,0).
_e_pref(51,5,3,0).
_e_pref(51,2,8,0).
_e_pref(51,4,7,0).
_e_pref(51,7,3,0).
_e_pref(51,7,8,0).
_e_pref(51,4,10,0).
_e_pref(51,4,3,1).
_e_pref(51,2,5,0).
_e_pref(51,7,1,0).
_e_pref(51,10,6,1).
_e_pref(51,10,7,0).
_e_pref(51,8,1,0).
_e_pref(51,2,9,0).
_e_pref(51,4,6,0).
_e_pref(51,4,9,0).
_e_pref(51,6,1,0).
_e_pref(51,10,8,0).
_e_pref(51,10,3,0).
_e_pref(51,10,6,0).
_e_pref(51,8,3,0).
_e_pref(51,5,1,0).
_e_pref(51,6,9,0).
_e_pref(51,6,8,0).
_e_pref(51,5,9,0).
_e_pref(51,4,6,1).
_e_pref(51,6,5,0).
_e_pref(51,2,7,0).
_e_pref(51,4,3,0).
_e_pref(51,3,1,0).
_e_pref(51,2,1,0).
_e_pref(51,2,6,0).
_e_pref(51,2,4,0).
_e_pref(51,5,8,0).
_e_pref(51,9,1,1).
_e_pref(51,2,3,0).
_e_pref(51,4,5,0).
_e_pref(51,6,3,0).
_e_pref(51,9,8,0).
_e_pref(51,4,1,0).
_e_pref(51,10,1,0).
_e_pref(52,9,3,0).
_e_pref(52,9,7,0).
_e_pref(52,9,1,0).
_e_pref(52,9,10,1).
_e_pref(52,7,5,0).
_e_pref(52,8,4,0).
_e_pref(52,10,5,0).
_e_pref(52,7,6,0).
_e_pref(52,2,10,0).
_e_pref(52,9,10,0).
_e_pref(52,3,5,0).
_e_pref(52,2,8,0).
_e_pref(52,7,4,0).
_e_pref(52,7,3,0).
_e_pref(52,7,8,0).
_e_pref(52,10,4,0).
_e_pref(52,4,3,1).
_e_pref(52,2,5,0).
_e_pref(52,7,1,0).
_e_pref(52,10,6,1).
_e_pref(52,7,10,0).
_e_pref(52,8,1,0).
_e_pref(52,9,2,0).
_e_pref(52,6,4,0).
_e_pref(52,9,4,0).
_e_pref(52,6,1,0).
_e_pref(52,10,8,0).
_e_pref(52,10,3,0).
_e_pref(52,10,6,0).
_e_pref(52,8,3,0).
_e_pref(52,5,1,0).
_e_pref(52,9,6,0).
_e_pref(52,6,8,0).
_e_pref(52,9,5,0).
_e_pref(52,6,4,1).
_e_pref(52,6,5,0).
_e_pref(52,2,7,0).
_e_pref(52,4,3,0).
_e_pref(52,3,1,0).
_e_pref(52,2,1,0).
_e_pref(52,2,6,0).
_e_pref(52,2,4,0).
_e_pref(52,8,5,0).
_e_pref(52,9,1,1).
_e_pref(52,2,3,0).
_e_pref(52,4,5,0).
_e_pref(52,6,3,0).
_e_pref(52,9,8,0).
_e_pref(52,4,1,0).
_e_pref(52,10,1,0).
_e_pref(53,3,9,0).
_e_pref(53,7,9,0).
_e_pref(53,1,9,0).
_e_pref(53,10,9,1).
_e_pref(53,7,5,0).
_e_pref(53,8,4,0).
_e_pref(53,5,10,0).
_e_pref(53,6,7,0).
_e_pref(53,2,10,0).
_e_pref(53,10,9,0).
_e_pref(53,5,3,0).
_e_pref(53,2,8,0).
_e_pref(53,7,4,0).
_e_pref(53,7,3,0).
_e_pref(53,7,8,0).
_e_pref(53,10,4,0).
_e_pref(53,3,4,1).
_e_pref(53,2,5,0).
_e_pref(53,7,1,0).
_e_pref(53,6,10,1).
_e_pref(53,7,10,0).
_e_pref(53,8,1,0).
_e_pref(53,2,9,0).
_e_pref(53,6,4,0).
_e_pref(53,9,4,0).
_e_pref(53,6,1,0).
_e_pref(53,8,10,0).
_e_pref(53,10,3,0).
_e_pref(53,6,10,0).
_e_pref(53,8,3,0).
_e_pref(53,5,1,0).
_e_pref(53,6,9,0).
_e_pref(53,6,8,0).
_e_pref(53,5,9,0).
_e_pref(53,6,4,1).
_e_pref(53,6,5,0).
_e_pref(53,2,7,0).
_e_pref(53,4,3,0).
_e_pref(53,1,3,0).
_e_pref(53,2,1,0).
_e_pref(53,2,6,0).
_e_pref(53,2,4,0).
_e_pref(53,8,5,0).
_e_pref(53,1,9,1).
_e_pref(53,2,3,0).
_e_pref(53,5,4,0).
_e_pref(53,6,3,0).
_e_pref(53,8,9,0).
_e_pref(53,1,4,0).
_e_pref(53,10,1,0).
_e_pref(54,9,3,0).
_e_pref(54,7,9,0).
_e_pref(54,9,1,0).
_e_pref(54,9,10,1).
_e_pref(54,7,5,0).
_e_pref(54,8,4,0).
_e_pref(54,10,5,0).
_e_pref(54,7,6,0).
_e_pref(54,2,10,0).
_e_pref(54,9,10,0).
_e_pref(54,5,3,0).
_e_pref(54,8,2,0).
_e_pref(54,7,4,0).
_e_pref(54,7,3,0).
_e_pref(54,7,8,0).
_e_pref(54,10,4,0).
_e_pref(54,2,5,0).
_e_pref(54,7,1,0).
_e_pref(54,6,10,1).
_e_pref(54,7,10,0).
_e_pref(54,8,1,0).
_e_pref(54,2,9,0).
_e_pref(54,6,4,0).
_e_pref(54,4,9,0).
_e_pref(54,1,6,0).
_e_pref(54,8,10,0).
_e_pref(54,3,10,0).
_e_pref(54,6,10,0).
_e_pref(54,8,3,0).
_e_pref(54,1,5,0).
_e_pref(54,6,9,0).
_e_pref(54,6,8,0).
_e_pref(54,5,9,0).
_e_pref(54,6,4,1).
_e_pref(54,6,5,0).
_e_pref(54,2,7,0).
_e_pref(54,4,3,0).
_e_pref(54,1,3,0).
_e_pref(54,2,1,0).
_e_pref(54,6,2,0).
_e_pref(54,2,4,0).
_e_pref(54,8,5,0).
_e_pref(54,9,1,1).
_e_pref(54,3,2,0).
_e_pref(54,5,4,0).
_e_pref(54,6,3,0).
_e_pref(54,8,9,0).
_e_pref(54,1,4,0).
_e_pref(54,1,10,0).
_e_pref(55,9,3,0).
_e_pref(55,7,9,0).
_e_pref(55,9,1,0).
_e_pref(55,10,9,1).
_e_pref(55,7,5,0).
_e_pref(55,8,4,0).
_e_pref(55,10,5,0).
_e_pref(55,6,7,0).
_e_pref(55,10,2,0).
_e_pref(55,10,9,0).
_e_pref(55,5,3,0).
_e_pref(55,8,2,0).
_e_pref(55,7,4,0).
_e_pref(55,7,3,0).
_e_pref(55,8,7,0).
_e_pref(55,10,4,0).
_e_pref(55,3,4,1).
_e_pref(55,2,5,0).
_e_pref(55,7,1,0).
_e_pref(55,6,10,1).
_e_pref(55,10,7,0).
_e_pref(55,8,1,0).
_e_pref(55,2,9,0).
_e_pref(55,6,4,0).
_e_pref(55,9,4,0).
_e_pref(55,6,1,0).
_e_pref(55,8,10,0).
_e_pref(55,10,3,0).
_e_pref(55,6,10,0).
_e_pref(55,8,3,0).
_e_pref(55,1,5,0).
_e_pref(55,6,9,0).
_e_pref(55,8,6,0).
_e_pref(55,9,5,0).
_e_pref(55,6,4,1).
_e_pref(55,6,5,0).
_e_pref(55,7,2,0).
_e_pref(55,3,4,0).
_e_pref(55,1,3,0).
_e_pref(55,2,1,0).
_e_pref(55,6,2,0).
_e_pref(55,2,4,0).
_e_pref(55,8,5,0).
_e_pref(55,9,1,1).
_e_pref(55,2,3,0).
_e_pref(55,5,4,0).
_e_pref(55,6,3,0).
_e_pref(55,8,9,0).
_e_pref(55,1,4,0).
_e_pref(55,10,1,0).
_e_pref(56,9,3,0).
_e_pref(56,7,9,0).
_e_pref(56,1,9,0).
_e_pref(56,10,9,1).
_e_pref(56,7,5,0).
_e_pref(56,8,4,0).
_e_pref(56,5,10,0).
_e_pref(56,7,6,0).
_e_pref(56,2,10,0).
_e_pref(56,10,9,0).
_e_pref(56,5,3,0).
_e_pref(56,8,2,0).
_e_pref(56,7,4,0).
_e_pref(56,7,3,0).
_e_pref(56,8,7,0).
_e_pref(56,10,4,0).
_e_pref(56,3,4,1).
_e_pref(56,2,5,0).
_e_pref(56,7,1,0).
_e_pref(56,6,10,1).
_e_pref(56,7,10,0).
_e_pref(56,8,1,0).
_e_pref(56,2,9,0).
_e_pref(56,6,4,0).
_e_pref(56,9,4,0).
_e_pref(56,6,1,0).
_e_pref(56,8,10,0).
_e_pref(56,10,3,0).
_e_pref(56,6,10,0).
_e_pref(56,8,3,0).
_e_pref(56,1,5,0).
_e_pref(56,6,9,0).
_e_pref(56,8,6,0).
_e_pref(56,5,9,0).
_e_pref(56,6,4,1).
_e_pref(56,6,5,0).
_e_pref(56,2,7,0).
_e_pref(56,3,4,0).
_e_pref(56,1,3,0).
_e_pref(56,1,2,0).
_e_pref(56,6,2,0).
_e_pref(56,2,4,0).
_e_pref(56,8,5,0).
_e_pref(56,1,9,1).
_e_pref(56,2,3,0).
_e_pref(56,5,4,0).
_e_pref(56,6,3,0).
_e_pref(56,8,9,0).
_e_pref(56,1,4,0).
_e_pref(56,1,10,0).
_e_pref(57,3,9,0).
_e_pref(57,9,7,0).
_e_pref(57,1,9,0).
_e_pref(57,10,9,1).
_e_pref(57,5,7,0).
_e_pref(57,4,8,0).
_e_pref(57,5,10,0).
_e_pref(57,6,7,0).
_e_pref(57,10,2,0).
_e_pref(57,10,9,0).
_e_pref(57,5,3,0).
_e_pref(57,8,2,0).
_e_pref(57,4,7,0).
_e_pref(57,3,7,0).
_e_pref(57,8,7,0).
_e_pref(57,10,4,0).
_e_pref(57,4,3,1).
_e_pref(57,5,2,0).
_e_pref(57,1,7,0).
_e_pref(57,10,6,1).
_e_pref(57,10,7,0).
_e_pref(57,1,8,0).
_e_pref(57,9,2,0).
_e_pref(57,4,6,0).
_e_pref(57,9,4,0).
_e_pref(57,1,6,0).
_e_pref(57,10,8,0).
_e_pref(57,10,3,0).
_e_pref(57,10,6,0).
_e_pref(57,3,8,0).
_e_pref(57,5,1,0).
_e_pref(57,9,6,0).
_e_pref(57,6,8,0).
_e_pref(57,5,9,0).
_e_pref(57,4,6,1).
_e_pref(57,5,6,0).
_e_pref(57,2,7,0).
_e_pref(57,4,3,0).
_e_pref(57,1,3,0).
_e_pref(57,1,2,0).
_e_pref(57,4,2,0).
_e_pref(57,5,8,0).
_e_pref(57,1,9,1).
_e_pref(57,3,2,0).
_e_pref(57,5,4,0).
_e_pref(57,3,6,0).
_e_pref(57,9,8,0).
_e_pref(57,1,4,0).
_e_pref(57,10,1,0).
_e_pref(58,3,9,0).
_e_pref(58,9,7,0).
_e_pref(58,9,1,0).
_e_pref(58,10,9,1).
_e_pref(58,7,5,0).
_e_pref(58,4,8,0).
_e_pref(58,10,5,0).
_e_pref(58,6,7,0).
_e_pref(58,10,2,0).
_e_pref(58,10,9,0).
_e_pref(58,3,5,0).
_e_pref(58,2,8,0).
_e_pref(58,7,4,0).
_e_pref(58,7,3,0).
_e_pref(58,7,8,0).
_e_pref(58,10,4,0).
_e_pref(58,4,3,1).
_e_pref(58,2,5,0).
_e_pref(58,7,1,0).
_e_pref(58,10,6,1).
_e_pref(58,7,10,0).
_e_pref(58,8,1,0).
_e_pref(58,9,2,0).
_e_pref(58,4,6,0).
_e_pref(58,9,4,0).
_e_pref(58,1,6,0).
_e_pref(58,10,8,0).
_e_pref(58,10,3,0).
_e_pref(58,10,6,0).
_e_pref(58,8,3,0).
_e_pref(58,1,5,0).
_e_pref(58,9,6,0).
_e_pref(58,8,6,0).
_e_pref(58,9,5,0).
_e_pref(58,6,4,1).
_e_pref(58,6,5,0).
_e_pref(58,7,2,0).
_e_pref(58,3,4,0).
_e_pref(58,3,1,0).
_e_pref(58,1,2,0).
_e_pref(58,6,2,0).
_e_pref(58,2,4,0).
_e_pref(58,8,5,0).
_e_pref(58,9,1,1).
_e_pref(58,3,2,0).
_e_pref(58,5,4,0).
_e_pref(58,3,6,0).
_e_pref(58,4,1,0).
_e_pref(58,10,1,0).
_e_pref(59,3,9,0).
_e_pref(59,7,9,0).
_e_pref(59,10,9,1).
_e_pref(59,7,5,0).
_e_pref(59,4,8,0).
_e_pref(59,10,5,0).
_e_pref(59,6,7,0).
_e_pref(59,2,10,0).
_e_pref(59,10,9,0).
_e_pref(59,3,5,0).
_e_pref(59,2,8,0).
_e_pref(59,4,7,0).
_e_pref(59,3,7,0).
_e_pref(59,7,8,0).
_e_pref(59,4,10,0).
_e_pref(59,4,3,1).
_e_pref(59,2,5,0).
_e_pref(59,7,1,0).
_e_pref(59,10,6,1).
_e_pref(59,10,7,0).
_e_pref(59,1,8,0).
_e_pref(59,2,9,0).
_e_pref(59,4,6,0).
_e_pref(59,4,9,0).
_e_pref(59,6,1,0).
_e_pref(59,10,8,0).
_e_pref(59,10,3,0).
_e_pref(59,10,6,0).
_e_pref(59,3,8,0).
_e_pref(59,5,1,0).
_e_pref(59,9,6,0).
_e_pref(59,6,8,0).
_e_pref(59,5,9,0).
_e_pref(59,4,6,1).
_e_pref(59,6,5,0).
_e_pref(59,2,7,0).
_e_pref(59,4,3,0).
_e_pref(59,3,1,0).
_e_pref(59,1,2,0).
_e_pref(59,2,6,0).
_e_pref(59,4,2,0).
_e_pref(59,5,8,0).
_e_pref(59,9,1,1).
_e_pref(59,2,3,0).
_e_pref(59,4,5,0).
_e_pref(59,3,6,0).
_e_pref(59,9,8,0).
_e_pref(59,4,1,0).
_e_pref(59,10,1,0).
_e_pref(60,3,9,0).
_e_pref(60,7,9,0).
_e_pref(60,1,9,0).
_e_pref(60,10,9,1).
_e_pref(60,5,7,0).
_e_pref(60,8,4,0).
_e_pref(60,10,5,0).
_e_pref(60,6,7,0).
_e_pref(60,10,2,0).
_e_pref(60,10,9,0).
_e_pref(60,5,3,0).
_e_pref(60,8,2,0).
_e_pref(60,4,7,0).
_e_pref(60,8,7,0).
_e_pref(60,10,4,0).
_e_pref(60,4,3,1).
_e_pref(60,5,2,0).
_e_pref(60,1,7,0).
_e_pref(60,10,6,1).
_e_pref(60,10,7,0).
_e_pref(60,1,8,0).
_e_pref(60,2,9,0).
_e_pref(60,6,4,0).
_e_pref(60,4,9,0).
_e_pref(60,6,1,0).
_e_pref(60,8,10,0).
_e_pref(60,10,3,0).
_e_pref(60,6,10,0).
_e_pref(60,8,3,0).
_e_pref(60,5,1,0).
_e_pref(60,6,9,0).
_e_pref(60,6,8,0).
_e_pref(60,5,9,0).
_e_pref(60,6,4,1).
_e_pref(60,5,6,0).
_e_pref(60,2,7,0).
_e_pref(60,4,3,0).
_e_pref(60,1,3,0).
_e_pref(60,1,2,0).
_e_pref(60,6,2,0).
_e_pref(60,4,2,0).
_e_pref(60,5,8,0).
_e_pref(60,1,9,1).
_e_pref(60,2,3,0).
_e_pref(60,5,4,0).
_e_pref(60,6,3,0).
_e_pref(60,8,9,0).
_e_pref(60,1,4,0).
_e_pref(60,1,10,0).
#const user = 11.
_e_activate_user(user).
_e_car(1,2,1,1,2).
_e_car(2,1,2,4,1).
_e_car(3,1,1,3,2).
_e_car(4,1,1,5,2).
_e_car(5,2,1,2,2).
_e_car(6,2,2,2,1).
_e_car(7,1,2,2,1).
_e_car(8,2,2,1,1).
_e_car(9,1,2,2,2).
_e_car(10,2,2,3,2).
in(hasBodyType(X),M) :- _e_car(M,X,_,_,_).
in(hasTransmission(X),M) :- _e_car(M,_,X,_,_).
in(hasEngineCap(X),M) :- _e_car(M,_,_,X,_).
in(hasFuelCons(X),M) :- _e_car(M,_,_,_,X).
input(B,better,C) :- _e_pref(A,B,C,0); _e_activate_user(A).
model((1..10)).
atom(hasBodyType((1..2))).
atom(hasTransmission((1..2))).
atom(hasEngineCap((1..5))).
atom(hasFuelCons((1..2))).
#false :- not better(P,M_,N_); _p_optimize(P,M_,N_); input(M_,R_,N_).
#defined optimize/1.
#defined better/1.
#defined required/2.
#defined error/1.
#defined error_type/2.
_p_error(("preference:",P,": error: preference specification error, type '",T,"' does not allow formulas."),M_,N_) :- preference(P,T); _p_error_type(T,no_formulas,M_,N_); preference(P,_,_,for(X),_); input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires weight tuples."),M_,N_) :- preference(P,T); _p_error_type(T,yes_weights,M_,N_); preference(P,_,_,_,W); W = (); input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' does not allow weights."),M_,N_) :- preference(P,T); _p_error_type(T,no_weights,M_,N_); preference(P,_,_,_,W); W != (); input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' does not allow using '>>'."),M_,N_) :- preference(P,T); _p_error_type(T,no_ordering,M_,N_); preference(P,_,R,_,_); R > 1; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires at least ",(N-1),"'>>'s."),M_,N_) :- preference(P,T); _p_error_type(T,ordering_min_length(N),M_,N_); N > 1; not preference(P,_,N,_,_); input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' allows at most ",(N-1),"'>>'s."),M_,N_) :- preference(P,T); _p_error_type(T,ordering_max_length(N),M_,N_); preference(P,_,R,_,_); R > N; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' does not allow sets."),M_,N_) :- preference(P,T); _p_error_type(T,no_sets,M_,N_); preference(P,E,S,X,_); preference(P,E,S,Y,_); X > Y; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' does not allow sets at position",S,"."),M_,N_) :- preference(P,T); _p_error_type(T,no_sets(S),M_,N_); preference(P,E,S,X,_); preference(P,E,S,Y,_); X > Y; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' does not allow naming atoms."),M_,N_) :- preference(P,T); _p_error_type(T,no_naming,M_,N_); preference(P,_,_,name(X),_); input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' does not allow more than one preference element."),M_,N_) :- preference(P,T); _p_error_type(T,single,M_,N_); 2 <= { preference(P,_,_,_,_) }; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' does not allow using '||'."),M_,N_) :- preference(P,T); _p_error_type(T,no_condition,M_,N_); preference(P,_,0,_,_); input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires a weight tuple of at least ",N," elements."),M_,N_) :- preference(P,T); _p_error_type(T,(min_weight_length,N),M_,N_); preference(P,_,_,_,W); @length(W) < N; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires a weight tuple of at most ",N," elements."),M_,N_) :- preference(P,T); _p_error_type(T,(max_weight_length,N),M_,N_); preference(P,_,_,_,W); @length(W) > N; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires different weights for every named preference statement"),M_,N_) :- preference(P,T); _p_error_type(T,naming_unique_weights,M_,N_); preference(P,_,_,name(P1),W); preference(P,_,_,name(P2),W); P1 != P2; input(M_,R_,N_).
better(P,M_,N_) :- preference(P,and); better(Q,M_,N_): preference(P,_,_,name(Q),_); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,and); 1 <= #sum { 1: better(P,M_,N_); 1: eq(P,M_,N_) }; input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,and); eq(Q,M_,N_): preference(P,_,_,name(Q),_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,and); 1 <= #sum { 1: worse(P,M_,N_); 1: eq(P,M_,N_) }; input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,and); worse(Q,M_,N_): preference(P,_,_,name(Q),_); input(M_,R_,N_).
unc(P,M_,N_) :- preference(P,and); not bettereq(P,M_,N_); not worseeq(P,M_,N_); input(M_,R_,N_).
_p_error_type(and,no_formulas,M_,N_) :- input(M_,R_,N_).
_p_error_type(and,no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(and,no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(and,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(and,no_sets,M_,N_) :- input(M_,R_,N_).
_p_rule(P,Id,L,M_,N_) :- preference(P,aso); preference(P,Id,_,_,_); L = #max { H: preference(P,Id,H,_,_) }; L > 1; input(M_,R_,N_).
_p_index(P,Id,(1..(L-1)),M_,N_) :- preference(P,aso); preference(P,Id,_,_,_); L = #max { H: preference(P,Id,H,_,_) }; input(M_,R_,N_).
_p_nohead(P,Id,M_,N_) :- preference(P,aso); _p_rule(P,Id,_,M_,N_); not holds(X,M_): preference(P,Id,H,for(X),_), H != 0; input(M_,R_,N_).
_p_nohead'(P,Id,M_,N_) :- preference(P,aso); _p_rule(P,Id,_,M_,N_); not holds(X,N_): preference(P,Id,H,for(X),_), H != 0; input(M_,R_,N_).
_p_aso(P,Id,R,M_,N_) :- preference(P,aso); _p_required(P,R,L,U,M_,N_); _p_rule(P,Id,_,M_,N_); L <= #sum { 1,Idx: not holds(X,M_), preference(P,Id,0,for(X),_), _p_index(P,Id,Idx,M_,N_); 1,Idx: _p_nohead(P,Id,M_,N_), _p_index(P,Id,Idx,M_,N_); 1,Idx: holds(X,M_), preference(P,Id,Pos,for(X),_), Pos != 0, _p_index(P,Id,Idx,M_,N_), Idx >= Pos; -1,Idx: not holds(X,N_), preference(P,Id,0,for(X),_), _p_index(P,Id,Idx,M_,N_); -1,Idx: _p_nohead'(P,Id,M_,N_), _p_index(P,Id,Idx,M_,N_); -1,Idx: holds(X,N_), preference(P,Id,Pos,for(X),_), Pos != 0, _p_index(P,Id,Idx,M_,N_), Idx >= Pos } <= U; input(M_,R_,N_).
_p_required(P,better,1,#sup,M_,N_) :- preference(P,aso); _p_required(P,aso,better,M_,N_); input(M_,R_,N_).
_p_required(P,bettereq,0,#sup,M_,N_) :- preference(P,aso); _p_required(P,aso,bettereq,M_,N_); input(M_,R_,N_).
_p_required(P,eq,0,0,M_,N_) :- preference(P,aso); _p_required(P,aso,eq,M_,N_); input(M_,R_,N_).
_p_required(P,worseeq,#inf,0,M_,N_) :- preference(P,aso); _p_required(P,aso,worseeq,M_,N_); input(M_,R_,N_).
_p_required(P,worse,#inf,-1,M_,N_) :- preference(P,aso); _p_required(P,aso,worse,M_,N_); input(M_,R_,N_).
_p_required(P,aso,better,M_,N_) :- preference(P,aso); input(M_,R_,N_).
better(P,M_,N_) :- preference(P,aso); _p_aso(P,Id1,bettereq,M_,N_): _p_rule(P,Id1,_,M_,N_); _p_aso(P,Id2,better,M_,N_); _p_rule(P,Id2,_,M_,N_); input(M_,R_,N_).
_p_required(P,aso,bettereq,M_,N_) :- preference(P,aso); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,aso); _p_aso(P,Id,bettereq,M_,N_): _p_rule(P,Id,_,M_,N_); input(M_,R_,N_).
_p_required(P,aso,eq,M_,N_) :- preference(P,aso); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,aso); _p_aso(P,Id,eq,M_,N_): _p_rule(P,Id,_,M_,N_); input(M_,R_,N_).
_p_required(P,aso,worseeq,M_,N_) :- preference(P,aso); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,aso); _p_aso(P,Id,worseeq,M_,N_): _p_rule(P,Id,_,M_,N_); input(M_,R_,N_).
_p_required(P,aso,worse,M_,N_) :- preference(P,aso); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,aso); _p_aso(P,Id1,worseeq,M_,N_): _p_rule(P,Id1,_,M_,N_); _p_aso(P,Id2,worse,M_,N_); _p_rule(P,Id2,_,M_,N_); input(M_,R_,N_).
_p_error_type(aso,no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(aso,no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(aso,no_sets,M_,N_) :- input(M_,R_,N_).
#defined rule/3.
better(P,M_,N_) :- preference(P,less(cardinality)); 1 <= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,less(cardinality)); 0 <= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,less(cardinality)); 0 <= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) } <= 0; input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,less(cardinality)); 0 >= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,less(cardinality)); -1 >= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
_p_error_type(less(cardinality),no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(less(cardinality),no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(less(cardinality),no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(less(cardinality),no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(less(cardinality),no_sets,M_,N_) :- input(M_,R_,N_).
better(P,M_,N_) :- preference(P,less(weight)); 1 <= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) }; input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,less(weight)); 0 <= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) }; input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,less(weight)); 0 <= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) } <= 0; input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,less(weight)); 0 >= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) }; input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,less(weight)); -1 >= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) }; input(M_,R_,N_).
_p_error_type(less(weight),no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(less(weight),no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(less(weight),no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(less(weight),no_sets,M_,N_) :- input(M_,R_,N_).
_p_error_type(less(weight),yes_weights,M_,N_) :- input(M_,R_,N_).
_p_many(P,M_,N_) :- preference(P,lexico); 2 <= #sum { 1,Q: preference(P,_,_,name(Q),_) }; input(M_,R_,N_).
better(P,M_,N_) :- preference(P,lexico); better(R,M_,N_); preference(P,_,_,name(R),L); eq(Q,M_,N_): preference(P,_,_,name(Q),LL), LL > L, _p_many(P,M_,N_); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,lexico); 1 <= #sum { 1: better(P,M_,N_); 1: eq(P,M_,N_) }; input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,lexico); eq(Q,M_,N_): preference(P,_,_,name(Q),_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,lexico); 1 <= #sum { 1: worse(P,M_,N_); 1: eq(P,M_,N_) }; input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,lexico); worse(R,M_,N_); preference(P,_,_,name(R),L); eq(Q,M_,N_): preference(P,_,_,name(Q),LL), LL > L, _p_many(P,M_,N_); input(M_,R_,N_).
unc(P,M_,N_) :- preference(P,lexico); not bettereq(P,M_,N_); not worseeq(P,M_,N_); input(M_,R_,N_).
_p_error_type(lexico,no_formulas,M_,N_) :- input(M_,R_,N_).
_p_error_type(lexico,no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(lexico,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(lexico,no_sets,M_,N_) :- input(M_,R_,N_).
_p_error_type(lexico,(min_weight_length,1),M_,N_) :- input(M_,R_,N_).
_p_error_type(lexico,(max_weight_length,1),M_,N_) :- input(M_,R_,N_).
_p_error_type(lexico,naming_unique_weights,M_,N_) :- input(M_,R_,N_).
better(P,M_,N_) :- preference(P,more(cardinality)); -1 >= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,more(cardinality)); 0 >= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,more(cardinality)); 0 <= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) } <= 0; input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,more(cardinality)); 0 <= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,more(cardinality)); 1 <= #sum { -1,X: holds(X,M_), preference(P,_,_,for(X),_); 1,X: holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
_p_error_type(more(cardinality),no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(more(cardinality),no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(more(cardinality),no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(more(cardinality),no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(more(cardinality),no_sets,M_,N_) :- input(M_,R_,N_).
better(P,M_,N_) :- preference(P,more(weight)); -1 >= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) }; input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,more(weight)); 0 >= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) }; input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,more(weight)); 0 <= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) } <= 0; input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,more(weight)); 0 <= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) }; input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,more(weight)); 1 <= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0) }; input(M_,R_,N_).
_p_error_type(more(weight),no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(more(weight),no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(more(weight),no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(more(weight),no_sets,M_,N_) :- input(M_,R_,N_).
_p_error_type(more(weight),yes_weights,M_,N_) :- input(M_,R_,N_).
better(P,M_,N_) :- preference(P,neg); worse(Q,M_,N_); preference(P,_,_,name(Q),_); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,neg); 1 <= #sum { 1: better(P,M_,N_); 1: eq(P,M_,N_) }; input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,neg); eq(Q,M_,N_); preference(P,_,_,name(Q),_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,neg); 1 <= #sum { 1: worse(P,M_,N_); 1: eq(P,M_,N_) }; input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,neg); better(Q,M_,N_); preference(P,_,_,name(Q),_); input(M_,R_,N_).
unc(P,M_,N_) :- preference(P,neg); not bettereq(P,M_,N_); not worseeq(P,M_,N_); input(M_,R_,N_).
_p_error_type(neg,no_formulas,M_,N_) :- input(M_,R_,N_).
_p_error_type(neg,no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(neg,no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(neg,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(neg,no_sets,M_,N_) :- input(M_,R_,N_).
_p_error_type(neg,single,M_,N_) :- input(M_,R_,N_).
_p_many(P,M_,N_) :- preference(P,pareto); 2 <= #sum { 1,Q: preference(P,_,_,name(Q),_) }; input(M_,R_,N_).
better(P,M_,N_) :- preference(P,pareto); bettereq(Q,M_,N_): preference(P,_,_,name(Q),_), _p_many(P,M_,N_); better(R,M_,N_); preference(P,_,_,name(R),_); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,pareto); bettereq(Q,M_,N_): preference(P,_,_,name(Q),_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,pareto); eq(Q,M_,N_): preference(P,_,_,name(Q),_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,pareto); worseeq(Q,M_,N_): preference(P,_,_,name(Q),_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,pareto); worseeq(Q,M_,N_): preference(P,_,_,name(Q),_), _p_many(P,M_,N_); worse(R,M_,N_); preference(P,_,_,name(R),_); input(M_,R_,N_).
unc(P,M_,N_) :- preference(P,pareto); not bettereq(P,M_,N_); not worseeq(P,M_,N_); input(M_,R_,N_).
_p_error_type(pareto,no_formulas,M_,N_) :- input(M_,R_,N_).
_p_error_type(pareto,no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(pareto,no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(pareto,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(pareto,no_sets,M_,N_) :- input(M_,R_,N_).
_p_poset(P,X,M_,N_) :- preference(P,poset); preference(P,_,_,for(X),_); input(M_,R_,N_).
_p_poset(P,X,Y,M_,N_) :- preference(P,poset); preference(P,I,1,for(X),_); preference(P,I,2,for(Y),_); input(M_,R_,N_).
#const tc_poset = 1.
_p_poset(P,X,Y,M_,N_) :- preference(P,poset); _p_poset(P,X,Z,M_,N_); _p_poset(P,Z,Y,M_,N_); tc_poset = 1; input(M_,R_,N_).
better(P,X,M_,N_) :- preference(P,poset); _p_poset(P,X,M_,N_); holds(X,M_); not holds(X,N_); input(M_,R_,N_).
_p_notbetter(P,M_,N_) :- preference(P,poset); _p_poset(P,X,M_,N_); not holds(X,M_); holds(X,N_); not better(P,Y,M_,N_): _p_poset(P,Y,X,M_,N_); input(M_,R_,N_).
better(P,M_,N_) :- preference(P,poset); better(P,_,M_,N_); not _p_notbetter(P,M_,N_); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,poset); 1 <= #sum { 1: eq(P,M_,N_); 1: better(P,M_,N_) }; input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,poset); holds(X,M_): _p_poset(P,X,M_,N_), holds(X,N_); not holds(X,M_): _p_poset(P,X,M_,N_), not holds(X,N_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,poset); 1 <= #sum { 1: eq(P,M_,N_); 1: worse(P,M_,N_) }; input(M_,R_,N_).
worse(P,X,M_,N_) :- preference(P,poset); _p_poset(P,X,M_,N_); holds(X,N_); not holds(X,M_); input(M_,R_,N_).
_p_notworse(P,M_,N_) :- preference(P,poset); _p_poset(P,X,M_,N_); not holds(X,N_); holds(X,M_); not worse(P,Y,M_,N_): _p_poset(P,Y,X,M_,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,poset); 1 <= #sum { 1: worse(P,X,M_,N_) }; not _p_notworse(P,M_,N_); input(M_,R_,N_).
unc(P,M_,N_) :- preference(P,poset); not bettereq(P,M_,N_); not worseeq(P,M_,N_); input(M_,R_,N_).
_p_error_type(poset,no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(poset,no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(poset,no_sets,M_,N_) :- input(M_,R_,N_).
_p_error_type(poset,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type 'poset', ","the order relation defined by the preference elements must be acyclic."),M_,N_) :- preference(P,poset); _p_poset(P,X,X,M_,N_); input(M_,R_,N_).
#defined better/2.
better(P,M_,N_) :- preference(P,subset); not holds(X,M_): preference(P,_,_,for(X),_), not holds(X,N_); 1 <= #sum { 1: not holds(X,M_), holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,subset); not holds(X,M_): preference(P,_,_,for(X),_), not holds(X,N_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,subset); bettereq(P,M_,N_); worseeq(P,M_,N_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,subset); holds(X,M_): preference(P,_,_,for(X),_), holds(X,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,subset); holds(X,M_): preference(P,_,_,for(X),_), holds(X,N_); 1 <= #sum { 1: holds(X,M_), not holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
unc(P,M_,N_) :- preference(P,subset); not bettereq(P,M_,N_); not worseeq(P,M_,N_); input(M_,R_,N_).
_p_error_type(subset,no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(subset,no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(subset,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(subset,no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(subset,no_sets,M_,N_) :- input(M_,R_,N_).
better(P,M_,N_) :- preference(P,superset); holds(X,M_): preference(P,_,_,for(X),_), holds(X,N_); 1 <= #sum { 1: holds(X,M_), not holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,superset); holds(X,M_): preference(P,_,_,for(X),_), holds(X,N_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,superset); bettereq(P,M_,N_); worseeq(P,M_,N_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,superset); not holds(X,M_): preference(P,_,_,for(X),_), not holds(X,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,superset); not holds(X,M_): preference(P,_,_,for(X),_), not holds(X,N_); 1 <= #sum { 1: not holds(X,M_), holds(X,N_), preference(P,_,_,for(X),_) }; input(M_,R_,N_).
unc(P,M_,N_) :- preference(P,superset); not bettereq(P,M_,N_); not worseeq(P,M_,N_); input(M_,R_,N_).
_p_error_type(superset,no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(superset,no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(superset,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(superset,no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(superset,no_sets,M_,N_) :- input(M_,R_,N_).
_p_level(P,L,M_,N_) :- preference(P,clingo_minimize); preference(P,_,_,_,T); L = @get(T,1); input(M_,R_,N_).
_p_two_levels(P,M_,N_) :- preference(P,clingo_minimize); _p_level(P,L,M_,N_); _p_level(P,LL,M_,N_); LL > L; input(M_,R_,N_).
_p_required_level(P,better,M_,N_) :- preference(P,clingo_minimize); input(M_,R_,N_).
_p_required_level(P,eq,M_,N_) :- preference(P,clingo_minimize); _p_two_levels(P,M_,N_); input(M_,R_,N_).
better(P,M_,N_) :- preference(P,clingo_minimize); _p_level(P,L,M_,N_); better(P,L,M_,N_); _p_eq(P,LL,M_,N_): _p_level(P,LL,M_,N_), LL > L; input(M_,R_,N_).
_p_required(P,eq,M_,N_) :- preference(P,clingo_minimize); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,clingo_minimize); better(P,M_,N_); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,clingo_minimize); eq(P,M_,N_); input(M_,R_,N_).
_p_required_level(P,eq,M_,N_) :- preference(P,clingo_minimize); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,clingo_minimize); _p_eq(P,L,M_,N_): _p_level(P,L,M_,N_); input(M_,R_,N_).
_p_required(P,eq,M_,N_) :- preference(P,clingo_minimize); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,clingo_minimize); worse(P,M_,N_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,clingo_minimize); eq(P,M_,N_); input(M_,R_,N_).
_p_required_level(P,worse,M_,N_) :- preference(P,clingo_minimize); input(M_,R_,N_).
_p_required_level(P,eq,M_,N_) :- preference(P,clingo_minimize); _p_two_levels(P,M_,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,clingo_minimize); _p_level(P,L,M_,N_); worse(P,L,M_,N_); _p_eq(P,LL,M_,N_): _p_level(P,LL,M_,N_), LL > L; input(M_,R_,N_).
better(P,L,M_,N_) :- preference(P,clingo_minimize); _p_required_level(P,better,M_,N_); _p_level(P,L,M_,N_); 1 <= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0), L = @get(T,1); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0), L = @get(T,1) }; input(M_,R_,N_).
_p_eq(P,L,M_,N_) :- preference(P,clingo_minimize); _p_required_level(P,eq,M_,N_); _p_level(P,L,M_,N_); 0 <= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0), L = @get(T,1); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0), L = @get(T,1) } <= 0; input(M_,R_,N_).
worse(P,L,M_,N_) :- preference(P,clingo_minimize); _p_required_level(P,worse,M_,N_); _p_level(P,L,M_,N_); -1 >= #sum { -W,T: holds(X,M_), preference(P,_,_,for(X),T), W = @get(T,0), L = @get(T,1); W,T: holds(X,N_), preference(P,_,_,for(X),T), W = @get(T,0), L = @get(T,1) }; input(M_,R_,N_).
_p_error_type(clingo_minimize,no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(clingo_minimize,no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(clingo_minimize,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(clingo_minimize,no_sets,M_,N_) :- input(M_,R_,N_).
_p_error_type(clingo_minimize,yes_weights,M_,N_) :- input(M_,R_,N_).
_p_group(P,@get(T,0),M_,N_) :- preference(P,maxmin); preference(P,_,_,_,T); input(M_,R_,N_).
_p_value_h'(P,V,M_,N_) :- preference(P,maxmin); V = #min { VV: _p_value_h'(P,G,VV,M_,N_) }; input(M_,R_,N_).
_p_value_h'(P,G,V,M_,N_) :- preference(P,maxmin); _p_group(P,G,M_,N_); V = #sum { W,T: holds(X,N_), preference(P,_,_,for(X),T), G = @get(T,0), W = @get(T,1) }; input(M_,R_,N_).
_p_bettereq(P,G,M_,N_) :- preference(P,maxmin); _p_group(P,G,M_,N_); _p_value_h'(P,V,M_,N_); V <= #sum { W,T: holds(X,M_), preference(P,_,_,for(X),T), G = @get(T,0), W = @get(T,1) }; input(M_,R_,N_).
_p_worseeq(P,G,M_,N_) :- preference(P,maxmin); _p_group(P,G,M_,N_); _p_value_h'(P,V,M_,N_); V >= #sum { W,T: holds(X,M_), preference(P,_,_,for(X),T), G = @get(T,0), W = @get(T,1) }; input(M_,R_,N_).
better(P,M_,N_) :- preference(P,maxmin); _p_group(P,_,M_,N_); not _p_worseeq(P,G,M_,N_): _p_group(P,G,M_,N_); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,maxmin); _p_bettereq(P,G,M_,N_): _p_group(P,G,M_,N_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,maxmin); bettereq(P,M_,N_); worseeq(P,M_,N_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,maxmin); _p_worseeq(P,G,M_,N_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,maxmin); not _p_group(P,_,M_,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,maxmin); _p_worseeq(P,G,M_,N_); not _p_bettereq(P,G,M_,N_); input(M_,R_,N_).
_p_error_type(maxmin,no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(maxmin,no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(maxmin,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(maxmin,no_sets,M_,N_) :- input(M_,R_,N_).
_p_error_type(maxmin,(min_weight_length,2),M_,N_) :- input(M_,R_,N_).
#defined group/2.
_p_group(P,@get(T,0),M_,N_) :- preference(P,minmax); preference(P,_,_,_,T); input(M_,R_,N_).
_p_value_h'(P,V,M_,N_) :- preference(P,minmax); V = #max { VV: _p_value_h'(P,G,VV,M_,N_) }; input(M_,R_,N_).
_p_value_h'(P,G,V,M_,N_) :- preference(P,minmax); _p_group(P,G,M_,N_); V = #sum { W,T: holds(X,N_), preference(P,_,_,for(X),T), G = @get(T,0), W = @get(T,1) }; input(M_,R_,N_).
_p_bettereq(P,G,M_,N_) :- preference(P,minmax); _p_group(P,G,M_,N_); _p_value_h'(P,V,M_,N_); V >= #sum { W,T: holds(X,M_), preference(P,_,_,for(X),T), G = @get(T,0), W = @get(T,1) }; input(M_,R_,N_).
_p_worseeq(P,G,M_,N_) :- preference(P,minmax); _p_group(P,G,M_,N_); _p_value_h'(P,V,M_,N_); V <= #sum { W,T: holds(X,M_), preference(P,_,_,for(X),T), G = @get(T,0), W = @get(T,1) }; input(M_,R_,N_).
better(P,M_,N_) :- preference(P,minmax); _p_group(P,_,M_,N_); not _p_worseeq(P,G,M_,N_): _p_group(P,G,M_,N_); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,minmax); _p_bettereq(P,G,M_,N_): _p_group(P,G,M_,N_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,minmax); bettereq(P,M_,N_); worseeq(P,M_,N_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,minmax); _p_worseeq(P,G,M_,N_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,minmax); not _p_group(P,_,M_,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,minmax); _p_worseeq(P,G,M_,N_); not _p_bettereq(P,G,M_,N_); input(M_,R_,N_).
_p_error_type(minmax,no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(minmax,no_ordering,M_,N_) :- input(M_,R_,N_).
_p_error_type(minmax,no_condition,M_,N_) :- input(M_,R_,N_).
_p_error_type(minmax,no_sets,M_,N_) :- input(M_,R_,N_).
_p_error_type(minmax,(min_weight_length,2),M_,N_) :- input(M_,R_,N_).
#defined group/2.
#const cp_tree = 0.
#const cp_nontree_diameter = 0.
#const cp_nontree_parallel = 0.
#const cp_tree_encoding = 2.
_p_parallel(P,M_,N_) :- preference(P,cp); cp_tree = 0; cp_nontree_parallel = 1; input(M_,R_,N_).
_p_tree(P,M_,N_) :- preference(P,cp); cp_tree = 1; input(M_,R_,N_).
_p_flips(P,M_,N_) :- preference(P,cp); cp_tree = 1; cp_tree_encoding = 0; input(M_,R_,N_).
_p_loops(P,M_,N_) :- preference(P,cp); cp_tree = 1; cp_tree_encoding = (1..2); input(M_,R_,N_).
_p_fills(P,M_,N_) :- preference(P,cp); cp_tree = 1; cp_tree_encoding = 2; input(M_,R_,N_).
_p_h(P,A,M_,N_) :- preference(P,cp); preference(P,_,_,for(atom(A)),_); holds(atom(A),M_); input(M_,R_,N_).
_p_h(P,A,M_,N_) :- preference(P,cp); preference(P,_,_,for(neg(atom(A))),_); not holds(neg(atom(A)),M_); not preference(P,_,_,for(atom(A)),_); input(M_,R_,N_).
_p_h'(P,A,M_,N_) :- preference(P,cp); preference(P,_,_,for(atom(A)),_); holds(atom(A),N_); input(M_,R_,N_).
_p_h'(P,A,M_,N_) :- preference(P,cp); preference(P,_,_,for(neg(atom(A))),_); not holds(neg(atom(A)),N_); not preference(P,_,_,for(atom(A)),_); input(M_,R_,N_).
_p_atom(P,A,M_,N_) :- preference(P,cp); preference(P,_,_,for(atom(A)),_); input(M_,R_,N_).
_p_atom(P,A,M_,N_) :- preference(P,cp); preference(P,_,_,for(neg(atom(A))),_); input(M_,R_,N_).
_p_lits(P,atom(A),A,true,M_,N_) :- preference(P,cp); _p_atom(P,A,M_,N_); input(M_,R_,N_).
_p_lits(P,neg(atom(A)),A,false,M_,N_) :- preference(P,cp); _p_atom(P,A,M_,N_); input(M_,R_,N_).
_p_post(P,Id,A,VA,M_,N_) :- preference(P,cp); preference(P,Id,1,for(L),_); _p_lits(P,L,A,VA,M_,N_); input(M_,R_,N_).
_p_pre(P,Id,A,VA,M_,N_) :- preference(P,cp); preference(P,Id,0,for(L),_); _p_lits(P,L,A,VA,M_,N_); input(M_,R_,N_).
_p_required(P,eq,M_,N_) :- preference(P,cp); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,cp); better(P,M_,N_); input(M_,R_,N_).
bettereq(P,M_,N_) :- preference(P,cp); eq(P,M_,N_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,cp); _p_h(P,A,M_,N_): _p_h'(P,A,M_,N_); _p_h'(P,A,M_,N_): _p_h(P,A,M_,N_); input(M_,R_,N_).
_p_required(P,eq,M_,N_) :- preference(P,cp); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,cp); worse(P,M_,N_); input(M_,R_,N_).
worseeq(P,M_,N_) :- preference(P,cp); eq(P,M_,N_); input(M_,R_,N_).
_p_rel(P,better,M_,N_) :- preference(P,cp); input(M_,R_,N_).
_p_rel(P,worse,M_,N_) :- preference(P,cp); _p_required(P,worse,M_,N_); input(M_,R_,N_).
_p_diameter(P,((2**N)-1),M_,N_) :- preference(P,cp); not _p_tree(P,M_,N_); N = { _p_atom(P,A,M_,N_) }; cp_nontree_diameter = 0; input(M_,R_,N_).
_p_diameter(P,(N**2),M_,N_) :- preference(P,cp); not _p_tree(P,M_,N_); N = { _p_atom(P,A,M_,N_) }; cp_nontree_diameter = tree; input(M_,R_,N_).
_p_diameter(P,cp_nontree_diameter,M_,N_) :- preference(P,cp); not _p_tree(P,M_,N_); cp_nontree_diameter != 0; cp_nontree_diameter != tree; input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_rel(P,R,M_,N_); _p_diameter(P,0,M_,N_); input(M_,R_,N_).
better(P,M_,N_) :- preference(P,cp); not _p_tree(P,M_,N_); not _p_unsat(P,better,M_,N_); not eq(P,M_,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,cp); not _p_tree(P,M_,N_); not _p_unsat(P,worse,M_,N_); not eq(P,M_,N_); input(M_,R_,N_).
_p_time(P,(1..D),M_,N_) :- preference(P,cp); _p_diameter(P,D,M_,N_); _p_rel(P,_,M_,N_); input(M_,R_,N_).
_p_tr(P,A,B,M_,N_) :- preference(P,cp); _p_parallel(P,M_,N_); _p_pre(P,Id,A,_,M_,N_); _p_post(P,Id,B,_,M_,N_); input(M_,R_,N_).
_p_tr(P,A,C,M_,N_) :- preference(P,cp); _p_parallel(P,M_,N_); _p_pre(P,Id,A,_,M_,N_); _p_post(P,Id,B,_,M_,N_); _p_tr(P,B,C,M_,N_); input(M_,R_,N_).
_p_forall(P,M_,N_) :- preference(P,cp); _p_parallel(P,M_,N_); _p_tr(P,A,A,M_,N_); input(M_,R_,N_).
1 <= { _p_occ(P,R,Id,T,M_,N_): _p_post(P,Id,_,_,M_,N_); _p_occ(P,R,wait,T,M_,N_): T > 1 } <= 1 :- preference(P,cp); _p_time(P,T,M_,N_); _p_rel(P,R,M_,N_); not _p_parallel(P,M_,N_); input(M_,R_,N_).
1 <= { _p_occ(P,R,Id,T,M_,N_): _p_post(P,Id,_,_,M_,N_); _p_occ(P,R,wait,T,M_,N_): T > 1 } :- preference(P,cp); _p_time(P,T,M_,N_); _p_rel(P,R,M_,N_); _p_parallel(P,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- _p_occ(P,R,wait,T,M_,N_); _p_occ(P,R,A,T,M_,N_); A != wait; _p_parallel(P,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); not _p_occ(P,R,wait,T,M_,N_); _p_occ(P,R,wait,(T-1),M_,N_); _p_time(P,T,M_,N_); input(M_,R_,N_).
_p_holds(P,R,A,0,M_,N_) :- preference(P,cp); _p_rel(P,R,M_,N_); R = better; not _p_tree(P,M_,N_); _p_atom(P,A,M_,N_); _p_h'(P,A,M_,N_); input(M_,R_,N_).
_p_holds(P,R,A,0,M_,N_) :- preference(P,cp); _p_rel(P,R,M_,N_); R = worse; not _p_tree(P,M_,N_); _p_atom(P,A,M_,N_); _p_h(P,A,M_,N_); input(M_,R_,N_).
_p_holds(P,R,A,T,M_,N_) :- preference(P,cp); _p_occ(P,R,Id,T,M_,N_); _p_post(P,Id,A,true,M_,N_); input(M_,R_,N_).
_p_holds(P,R,A,T,M_,N_) :- preference(P,cp); _p_holds(P,R,A,(T-1),M_,N_); _p_time(P,T,M_,N_); not _p_occ(P,R,Id,T,M_,N_): _p_post(P,Id,A,false,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_occ(P,R,Id,T,M_,N_); _p_post(P,Id,A,true,M_,N_); _p_holds(P,R,A,(T-1),M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_occ(P,R,Id,T,M_,N_); _p_post(P,Id,A,false,M_,N_); not _p_holds(P,R,A,(T-1),M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_occ(P,R,Id,T,M_,N_); _p_pre(P,Id,A,true,M_,N_); not _p_holds(P,R,A,(T-1),M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_occ(P,R,Id,T,M_,N_); _p_pre(P,Id,A,false,M_,N_); _p_holds(P,R,A,(T-1),M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_occ(P,R,Id,T,M_,N_); _p_pre(P,Id,A,true,M_,N_); not _p_holds(P,R,A,T,M_,N_); _p_forall(P,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_occ(P,R,Id,T,M_,N_); _p_pre(P,Id,A,false,M_,N_); _p_holds(P,R,A,T,M_,N_); _p_forall(P,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_rel(P,R,M_,N_); R = better; _p_time(P,T,M_,N_); not _p_time(P,(T+1),M_,N_); _p_holds(P,R,A,T,M_,N_); not _p_h(P,A,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_rel(P,R,M_,N_); R = better; _p_time(P,T,M_,N_); not _p_time(P,(T+1),M_,N_); not _p_holds(P,R,A,T,M_,N_); _p_h(P,A,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_rel(P,R,M_,N_); R = worse; _p_time(P,T,M_,N_); not _p_time(P,(T+1),M_,N_); _p_holds(P,R,A,T,M_,N_); not _p_h'(P,A,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_rel(P,R,M_,N_); R = worse; _p_time(P,T,M_,N_); not _p_time(P,(T+1),M_,N_); not _p_holds(P,R,A,T,M_,N_); _p_h'(P,A,M_,N_); input(M_,R_,N_).
better(P,M_,N_) :- preference(P,cp); _p_tree(P,M_,N_); not _p_unsat(P,better,M_,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,cp); _p_required(P,worse,M_,N_); _p_tree(P,M_,N_); not _p_unsat(P,worse,M_,N_); input(M_,R_,N_).
_p_edge(P,A,AA,M_,N_) :- preference(P,cp); _p_tree(P,M_,N_); _p_pre(P,Id1,A,_,M_,N_); _p_post(P,Id1,AA,V1,M_,N_); _p_post(P,Id2,AA,V2,M_,N_); Id1 != Id2; V1 != V2; input(M_,R_,N_).
_p_eq(P,A,M_,N_) :- preference(P,cp); _p_tree(P,M_,N_); _p_atom(P,A,M_,N_); not _p_h(P,A,M_,N_); not _p_h'(P,A,M_,N_); input(M_,R_,N_).
_p_eq(P,A,M_,N_) :- preference(P,cp); _p_tree(P,M_,N_); _p_atom(P,A,M_,N_); _p_h(P,A,M_,N_); _p_h'(P,A,M_,N_); input(M_,R_,N_).
_p_eqchange(P,A,AA,M_,N_) :- preference(P,cp); _p_flips(P,M_,N_); _p_edge(P,A,AA,M_,N_); not _p_eq(P,A,M_,N_); _p_eq(P,AA,M_,N_); input(M_,R_,N_).
_p_eqchange(P,A,AA,M_,N_) :- preference(P,cp); _p_flips(P,M_,N_); _p_edge(P,A,AA,M_,N_); _p_eq(P,A,M_,N_); not _p_eq(P,AA,M_,N_); input(M_,R_,N_).
_p_freeflip(P,R,A,AA,M_,N_) :- preference(P,cp); _p_tree(P,M_,N_); _p_rel(P,R,M_,N_); _p_edge(P,A,AA,M_,N_); _p_pre(P,Id,A,VA,M_,N_); _p_post(P,Id,AA,VAA,M_,N_); 1 != #sum { 1,0: VA = true; 1,1: _p_h'(P,A,M_,N_), R = better; 1,1: _p_h(P,A,M_,N_), R = worse }; 1 = #sum { 1,0: VAA = true; 1,1: _p_h'(P,AA,M_,N_), R = better; 1,1: _p_h(P,AA,M_,N_), R = worse }; input(M_,R_,N_).
_p_flips(P,R,A,F,M_,N_) :- preference(P,cp); _p_flips(P,M_,N_); _p_rel(P,R,M_,N_); _p_atom(P,A,M_,N_); not _p_edge(P,A,_,M_,N_); F = { not _p_eq(P,A,M_,N_) }; input(M_,R_,N_).
_p_flips(P,R,A,F,M_,N_) :- preference(P,cp); _p_edge(P,A,AA,M_,N_); _p_flips(P,R,AA,F,M_,N_); _p_maxflips(P,AA,MF,M_,N_); F <= MF; not _p_eqchange(P,A,AA,M_,N_); input(M_,R_,N_).
_p_flips(P,R,A,(F-1),M_,N_) :- preference(P,cp); _p_edge(P,A,AA,M_,N_); _p_flips(P,R,AA,F,M_,N_); _p_maxflips(P,AA,MF,M_,N_); F <= MF; _p_eqchange(P,A,AA,M_,N_); F > 0; _p_freeflip(P,R,A,AA,M_,N_); input(M_,R_,N_).
_p_flips(P,R,A,(F+1),M_,N_) :- preference(P,cp); _p_edge(P,A,AA,M_,N_); _p_flips(P,R,AA,F,M_,N_); _p_maxflips(P,AA,MF,M_,N_); F <= MF; _p_eqchange(P,A,AA,M_,N_); F = 0; input(M_,R_,N_).
_p_flips(P,R,A,(F+1),M_,N_) :- preference(P,cp); _p_edge(P,A,AA,M_,N_); _p_flips(P,R,AA,F,M_,N_); _p_maxflips(P,AA,MF,M_,N_); F <= MF; _p_eqchange(P,A,AA,M_,N_); not _p_freeflip(P,R,A,AA,M_,N_); input(M_,R_,N_).
_p_maxflips(P,A,F,M_,N_) :- preference(P,cp); _p_tree(P,M_,N_); _p_atom(P,A,M_,N_); not _p_edge(P,_,A,M_,N_); F = { not _p_eq(P,A,M_,N_) }; input(M_,R_,N_).
_p_maxflips(P,A,(F+1),M_,N_) :- preference(P,cp); _p_edge(P,AA,A,M_,N_); _p_maxflips(P,AA,F,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_flips(P,R,A,F,M_,N_); _p_maxflips(P,A,MF,M_,N_); F > MF; input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_tree(P,M_,N_); _p_rel(P,R,M_,N_); _p_eq(P,A,M_,N_): _p_atom(P,A,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_tree(P,M_,N_); _p_rel(P,R,M_,N_); _p_atom(P,A,M_,N_); not _p_edge(P,_,A,M_,N_); not _p_eq(P,A,M_,N_); 1 != #sum { 1,0: _p_post(P,Id,A,true,M_,N_); 1,1: _p_h'(P,A,M_,N_), R = better; 1,1: _p_h(P,A,M_,N_), R = worse }; input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_atom(P,A,M_,N_); not _p_edge(P,_,A,M_,N_); _p_flips(P,R,A,F,M_,N_); _p_eq(P,A,M_,N_); F != 0; input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_atom(P,A,M_,N_); not _p_edge(P,_,A,M_,N_); _p_flips(P,R,A,F,M_,N_); not _p_eq(P,A,M_,N_); F != 1; input(M_,R_,N_).
_p_loops(P,R,A,0,M_,N_) :- preference(P,cp); _p_loops(P,M_,N_); _p_rel(P,R,M_,N_); _p_atom(P,A,M_,N_); not _p_edge(P,A,_,M_,N_); input(M_,R_,N_).
_p_loops(P,R,A,(L-1),M_,N_) :- preference(P,cp); _p_edge(P,A,AA,M_,N_); _p_loops(P,R,AA,L,M_,N_); _p_maxloops(P,AA,ML,M_,N_); L <= ML; L > 0; input(M_,R_,N_).
_p_loops(P,R,A,L,M_,N_) :- preference(P,cp); _p_edge(P,A,AA,M_,N_); _p_loops(P,R,AA,L,M_,N_); _p_maxloops(P,AA,ML,M_,N_); L <= ML; #false: _p_freeflip(P,R,A,AA,M_,N_), not _p_eq(P,A,M_,N_), _p_eq(P,AA,M_,N_), L > 0; input(M_,R_,N_).
_p_loops(P,R,A,(L+1),M_,N_) :- preference(P,cp); _p_edge(P,A,AA,M_,N_); _p_loops(P,R,AA,L,M_,N_); _p_maxloops(P,AA,ML,M_,N_); L <= ML; not _p_freeflip(P,R,A,AA,M_,N_); _p_eq(P,A,M_,N_); not _p_eq(P,AA,M_,N_); input(M_,R_,N_).
_p_loops(P,R,A,(L-1),M_,N_) :- preference(P,cp); _p_fills(P,M_,N_); _p_loops(P,R,A,L,M_,N_); L > 0; input(M_,R_,N_).
_p_maxloops(P,A,(F/2),M_,N_) :- preference(P,cp); _p_loops(P,M_,N_); _p_maxflips(P,A,F,M_,N_); input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_loops(P,R,A,L,M_,N_); _p_maxloops(P,A,ML,M_,N_); L > ML; input(M_,R_,N_).
_p_unsat(P,R,M_,N_) :- preference(P,cp); _p_atom(P,A,M_,N_); not _p_edge(P,_,A,M_,N_); _p_loops(P,R,A,L,M_,N_); L > 0; input(M_,R_,N_).
_p_error_type(cp,no_weights,M_,N_) :- input(M_,R_,N_).
_p_error_type(cp,no_naming,M_,N_) :- input(M_,R_,N_).
_p_error_type(cp,ordering_max_length(2),M_,N_) :- input(M_,R_,N_).
_p_error_type(cp,no_sets((1..2)),M_,N_) :- input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires constant cp_tree to have a value between 0 and 1."),M_,N_) :- preference(P,T); T = cp; cp_tree != 0; cp_tree != 1; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires constant cp_nontree_parallel to have a value between 0 and 1."),M_,N_) :- preference(P,T); T = cp; cp_nontree_parallel != 0; cp_nontree_parallel != 1; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires constant cp_tree_encoding to have a value between 0 and 2."),M_,N_) :- preference(P,T); T = cp; cp_tree_encoding != 0; cp_tree_encoding != 1; cp_tree_encoding != 2; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires literals."),M_,N_) :- preference(P,T); T = cp; preference(P,_,_,for(X),_); not _p_lits(P,X,_,_,M_,N_); input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires literals at positions 1 and 2 to be contrary. Position 2 may be left empty. "),M_,N_) :- preference(P,T); T = cp; preference(P,E,1,for(X),_); _p_lits(P,X,AX,VX,M_,N_); preference(P,E,2,for(Y),_); _p_lits(P,Y,AY,VY,M_,N_); 1 <= { AX != AY; VX = VY }; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' does not allow atoms in the first position of an element to appear in its condition."),M_,N_) :- preference(P,T); T = cp; preference(P,E,1,for(X),_); _p_lits(P,X,A,VX,M_,N_); preference(P,E,0,for(Y),_); _p_lits(P,Y,A,VY,M_,N_); input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, type '",T,"' requires the cp net to be consistent."),M_,N_) :- preference(P,T); T = cp; _p_post(P,Id1,A,VA1,M_,N_); _p_post(P,Id2,A,VA2,M_,N_); Id1 > Id2; VA1 != VA2; #false: _p_pre(P,Id1,B,VB1,M_,N_), _p_pre(P,Id2,B,VB2,M_,N_), VB1 != VB2; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, tree cp nets do not allow sets in the condition."),M_,N_) :- preference(P,T); T = cp; _p_tree(P,M_,N_); preference(P,E,S,X,_); preference(P,E,S,Y,_); S = 0; X > Y; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, tree cp nets require that every atom either appears in exactly one head without condition, or in exactly two heads with conditions that are contrary literals."),M_,N_) :- preference(P,T); T = cp; _p_tree(P,M_,N_); _p_post(P,Id1,A,VA,M_,N_); not _p_pre(P,Id1,_,_,M_,N_); not 1 = { _p_post(P,I,A,V,M_,N_) }; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, tree cp nets require that every atom either appears in exactly one head without condition, or in exactly two heads with conditions that are contrary literals."),M_,N_) :- preference(P,T); T = cp; _p_tree(P,M_,N_); _p_post(P,Id1,A,VA,M_,N_); _p_pre(P,Id1,_,_,M_,N_); not 2 = { _p_post(P,I,A,V,M_,N_) }; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, tree cp nets require that every atom either appears in exactly one head without condition, or in exactly two heads with conditions that are contrary literals."),M_,N_) :- preference(P,T); T = cp; _p_tree(P,M_,N_); _p_post(P,Id1,A,VA1,M_,N_); _p_pre(P,Id1,B1,VB1,M_,N_); _p_post(P,Id2,A,VA2,M_,N_); _p_pre(P,Id2,B2,VB2,M_,N_); Id1 > Id2; 1 <= { B1 != B2; VB1 = VB2 }; input(M_,R_,N_).
_p_error(("preference:",P,": error: preference specification error, tree cp nets require that every atom has at most one parent in the corresponding graph."),M_,N_) :- preference(P,T); T = cp; _p_tree(P,M_,N_); _p_edge(P,A1,A,M_,N_); _p_edge(P,A2,A,M_,N_); A1 > A2; input(M_,R_,N_).
_p_acyclic(P,M,M_,N_) :- preference(P,cp); _p_tree(P,M_,N_); M = ("preference:",P,": error: preference specification error, tree cp nets require that the corresponding graph is acyclic."); input(M_,R_,N_).
_p_tr(P,A,B,M_,N_) :- preference(P,cp); _p_acyclic(P,_,M_,N_); _p_pre(P,Id,A,_,M_,N_); _p_post(P,Id,B,_,M_,N_); input(M_,R_,N_).
_p_tr(P,A,C,M_,N_) :- preference(P,cp); _p_acyclic(P,_,M_,N_); _p_pre(P,Id,A,_,M_,N_); _p_post(P,Id,B,_,M_,N_); _p_tr(P,B,C,M_,N_); input(M_,R_,N_).
_p_error(M,M_,N_) :- preference(P,T); T = cp; _p_acyclic(P,M,M_,N_); _p_tr(P,A,A,M_,N_); input(M_,R_,N_).
#defined rel/2.
#defined pre/4.
#defined post/4.
#defined edge/3.
#defined lits/4.
#defined acyclic/2.

for(X) :- for(and(X,Y)).
for(Y) :- for(and(X,Y)).
for(X) :- for(or(X,Y)).
for(Y) :- for(or(X,Y)).
for(X) :- for(neg(X)).
holds(atom(A),M) :- for(atom(A)); in(A,M).
holds(neg(X),M) :- for(neg(X)); not holds(X,M); model(M).
holds(and(X,Y),M) :- for(and(X,Y)); holds(X,M); holds(Y,M).
holds(or(X,Y),M) :- for(or(X,Y)); holds(X,M).
holds(or(X,Y),M) :- for(or(X,Y)); holds(Y,M).
output(M,better,N) :- better(P,M,N).
output(M,worse,N) :- worse(P,M,N).
output(M,eq,N) :- eq(P,M,N).
output(M,unc,N) :- unc(P,M,N).
:~ input(M,R,N); not output(M,R,N). [1@1,M,N]
#false :- output(M,worse,N); forbid_worse.
#false :- output(M,eq,N); forbid_equal.
#false :- output(M,unc,N); forbid_unc.
#false :- output(M,R1,N); forbid_diff; output(M,R2,N); R1 != R2.
:~ preference(_,(_,K),_,_,_); min_element. [1@0,K]
#show preference/2.
#show preference/5.
#show output/3.
forbid_diff.
for(X) :- preference(_,_,_,for(X),_).