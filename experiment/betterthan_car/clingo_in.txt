
better(P,M_,N_) :- preference(P,betterthan); preference(P,(P,K),1,for(X),_); preference(P,(P,K),2,for(Y),_); holds(X,M_); holds(Y,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,betterthan); preference(P,(P,K),1,for(X),_); preference(P,(P,K),2,for(Y),_); holds(Y,M_); holds(X,N_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,betterthan); preference(P,(P,K),1,for(X),_); preference(P,(P,K),2,for(Y),_); holds(X,M_); holds(Y,M_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,betterthan); preference(P,(P,K),1,for(X),_); preference(P,(P,K),2,for(Y),_); holds(X,N_); holds(Y,N_); input(M_,R_,N_).
#show better/3.
#show worse/3.
#show.

for(X) :- for(and(X,Y)).
for(Y) :- for(and(X,Y)).
for(X) :- for(or(X,Y)).
for(Y) :- for(or(X,Y)).
for(X) :- for(neg(X)).
holds(atom(A),M) :- for(atom(A)); in(A,M).
holds(neg(X),M) :- for(neg(X)); not holds(X,M); model(M).
holds(and(X,Y),M) :- for(and(X,Y)); holds(X,M); holds(Y,M).
holds(or(X,Y),M) :- for(or(X,Y)); holds(X,M).
holds(or(X,Y),M) :- for(or(X,Y)); holds(Y,M).
output(M,better,N) :- better(P,M,N).
output(M,worse,N) :- worse(P,M,N).
output(M,eq,N) :- eq(P,M,N).
output(M,unc,N) :- unc(P,M,N).
:~ input(M,R,N); not output(M,R,N). [1@1,M,N]
#const maxEle = 15.
#const maxLen = 2.
_g_st(1).
preference(P,betterthan) :- _g_st(P).
_g_el(X) :- X = (1..maxEle).
1 >= { preference(P,(P,EL),1,for(X),()): _g_possfor(X) } :- _g_el(EL); _g_st(P).
1 <= { preference(P,(P,EL),2,for(Y),()): _g_possfor(Y) } <= 1 :- preference(P,(P,EL),1,for(X),()).
_g_clauseLen((1..maxLen)).
_g_possfor_aux(1,atom(X)) :- atom(X).
_g_possfor_aux(L,and(X,Y)) :- _g_possfor_aux(L1,X); _g_possfor_aux(L2,Y); _g_clauseLen(L); X != Y; (L1+L2) = L.
_g_possfor(X) :- _g_possfor_aux(L,X).
#show preference/2.
#show preference/5.
#show.
_e_pref(7,9,3,0).
_e_pref(7,7,9,0).
_e_pref(7,9,1,0).
_e_pref(7,10,9,1).
_e_pref(7,7,5,0).
_e_pref(7,8,4,0).
_e_pref(7,10,5,0).
_e_pref(7,6,7,0).
_e_pref(7,10,2,0).
_e_pref(7,10,9,0).
_e_pref(7,5,3,0).
_e_pref(7,8,2,0).
_e_pref(7,7,4,0).
_e_pref(7,7,3,0).
_e_pref(7,8,7,0).
_e_pref(7,10,4,0).
_e_pref(7,3,4,1).
_e_pref(7,2,5,0).
_e_pref(7,7,1,0).
_e_pref(7,6,10,1).
_e_pref(7,10,7,0).
_e_pref(7,8,1,0).
_e_pref(7,2,9,0).
_e_pref(7,6,4,0).
_e_pref(7,9,4,0).
_e_pref(7,6,1,0).
_e_pref(7,8,10,0).
_e_pref(7,10,3,0).
_e_pref(7,6,10,0).
_e_pref(7,8,3,0).
_e_pref(7,1,5,0).
_e_pref(7,6,9,0).
_e_pref(7,8,6,0).
_e_pref(7,9,5,0).
_e_pref(7,6,4,1).
_e_pref(7,6,5,0).
_e_pref(7,7,2,0).
_e_pref(7,3,4,0).
_e_pref(7,1,3,0).
_e_pref(7,2,1,0).
_e_pref(7,6,2,0).
_e_pref(7,2,4,0).
_e_pref(7,8,5,0).
_e_pref(7,9,1,1).
_e_pref(7,2,3,0).
_e_pref(7,5,4,0).
_e_pref(7,6,3,0).
_e_pref(7,8,9,0).
_e_pref(7,1,4,0).
_e_pref(7,10,1,0).
_e_activate_user(7).
_e_car(1,2,1,1,2).
_e_car(2,1,2,4,1).
_e_car(3,1,1,3,2).
_e_car(4,1,1,5,2).
_e_car(5,2,1,2,2).
_e_car(6,2,2,2,1).
_e_car(7,1,2,2,1).
_e_car(8,2,2,1,1).
_e_car(9,1,2,2,2).
_e_car(10,2,2,3,2).
in(hasBodyType(X),M) :- _e_car(M,X,_,_,_).
in(hasTransmission(X),M) :- _e_car(M,_,X,_,_).
in(hasEngineCap(X),M) :- _e_car(M,_,_,X,_).
in(hasFuelCons(X),M) :- _e_car(M,_,_,_,X).
input(B,better,C) :- _e_pref(A,B,C,0).
#show.
model((1..10)).
atom(hasBodyType((1..2))).
atom(hasTransmission((1..2))).
atom(hasEngineCap((1..5))).
atom(hasFuelCons((1..2))).
for(X) :- preference(_,_,_,for(X),_).