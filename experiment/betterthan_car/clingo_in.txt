

#program base.

#program domain.
model((1..10)).
atom(hasBodyType((1..2))).
atom(hasTransmission((1..2))).
atom(hasEngineCap((1..5))).
atom(hasFuelCons((1..2))).

#program base.

#program backend.
for(@formula).
for(X) :- for(and(X,Y)).
for(Y) :- for(and(X,Y)).
for(X) :- for(or(X,Y)).
for(Y) :- for(or(X,Y)).
for(X) :- for(neg(X)).
holds(atom(A),M) :- for(atom(A)); in(A,M).
holds(neg(X),M) :- for(neg(X)); not holds(X,M); model(M).
holds(and(X,Y),M) :- for(and(X,Y)); holds(X,M); holds(Y,M).
holds(or(X,Y),M) :- for(or(X,Y)); holds(X,M).
holds(or(X,Y),M) :- for(or(X,Y)); holds(Y,M).
#false :- worse(_,_,_).
#false :- eq(_,_,_).
:~ better(P,M,N). [-1@3,M,N]
#show output/3.

#program base.

#program generation.
#const maxEle = 8.
#const maxLen = 2.
_g_st(1).
preference(P,betterthan) :- _g_st(P).
_g_el(X) :- X = (1..maxEle).
1 >= { preference(P,(P,EL),1,for(X),()): _g_possfor(L,X) } :- _g_el(EL); _g_st(P).
1 <= { preference(P,(P,EL),2,for(Y),()): _g_possfor(L,Y) } <= 1 :- preference(P,(P,EL),1,for(X),()); _g_el(EL).
_g_clauseLen(1).
{ _g_clauseLen((2..maxLen)) }.
#false :- _g_clauseLen(X); not _g_clauseLen((X-1)); X > 1.
_g_possfor(1,atom(X)) :- atom(X).
1 <= { _g_possfor(L,and(X,Y)); _g_possfor(L,and(Y,X)) } <= 1 :- _g_possfor((L-1),X); _g_possfor((L-1),Y); _g_clauseLen(L); X != Y.
#false :- preference(P,(P,K),1,X,_); preference(P,(P,K),2,X,_).
#false :- preference(P,(P,K),1,X,_); preference(P,(P,K),2,Y,_); preference(P,(P,J),1,X,_); preference(P,(P,J),2,Y,_); J != K.
#show preference/2.
#show preference/5.
#show /0.

#program base.

#program examples.
_e_pref(3,9,3,0).
_e_pref(3,9,7,0).
_e_pref(3,9,1,0).
_e_pref(3,10,9,1).
_e_pref(3,5,7,0).
_e_pref(3,4,8,0).
_e_pref(3,10,5,0).
_e_pref(3,6,7,0).
_e_pref(3,10,2,0).
_e_pref(3,10,9,0).
_e_pref(3,5,3,0).
_e_pref(3,8,2,0).
_e_pref(3,4,7,0).
_e_pref(3,3,7,0).
_e_pref(3,8,7,0).
_e_pref(3,10,4,0).
_e_pref(3,4,3,1).
_e_pref(3,5,2,0).
_e_pref(3,1,7,0).
_e_pref(3,10,6,1).
_e_pref(3,10,7,0).
_e_pref(3,1,8,0).
_e_pref(3,9,2,0).
_e_pref(3,4,6,0).
_e_pref(3,9,4,0).
_e_pref(3,1,6,0).
_e_pref(3,10,8,0).
_e_pref(3,10,3,0).
_e_pref(3,10,6,0).
_e_pref(3,3,8,0).
_e_pref(3,5,1,0).
_e_pref(3,9,6,0).
_e_pref(3,6,8,0).
_e_pref(3,5,9,0).
_e_pref(3,4,6,1).
_e_pref(3,5,6,0).
_e_pref(3,2,7,0).
_e_pref(3,4,3,0).
_e_pref(3,1,3,0).
_e_pref(3,1,2,0).
_e_pref(3,6,2,0).
_e_pref(3,4,2,0).
_e_pref(3,5,8,0).
_e_pref(3,1,9,1).
_e_pref(3,3,2,0).
_e_pref(3,5,4,0).
_e_pref(3,3,6,0).
_e_pref(3,9,8,0).
_e_pref(3,1,4,0).
_e_pref(3,10,1,0).

#program base.

#program preference(betterthan).
better(P,M_,N_) :- preference(P,betterthan); preference(P,(P,K),1,for(X),_); preference(P,(P,K),2,for(Y),_); holds(X,M_); holds(Y,N_); input(M_,R_,N_).
worse(P,M_,N_) :- preference(P,betterthan); preference(P,(P,K),1,for(X),_); preference(P,(P,K),2,for(Y),_); holds(Y,M_); holds(X,N_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,betterthan); preference(P,(P,K),1,for(X),_); preference(P,(P,K),2,for(Y),_); holds(X,M_); holds(Y,M_); input(M_,R_,N_).
eq(P,M_,N_) :- preference(P,betterthan); preference(P,(P,K),1,for(X),_); preference(P,(P,K),2,for(Y),_); holds(X,N_); holds(Y,N_); input(M_,R_,N_).
#show better/3.
#show worse/3.
#show /0.

#program base.

#program examples.
_e_activate_user(3).
_e_car(1,2,1,1,2).
_e_car(2,1,2,4,1).
_e_car(3,1,1,3,2).
_e_car(4,1,1,5,2).
_e_car(5,2,1,2,2).
_e_car(6,2,2,2,1).
_e_car(7,1,2,2,1).
_e_car(8,2,2,1,1).
_e_car(9,1,2,2,2).
_e_car(10,2,2,3,2).
in(hasBodyType(X),M) :- _e_car(M,X,_,_,_).
in(hasTransmission(X),M) :- _e_car(M,_,X,_,_).
in(hasEngineCap(X),M) :- _e_car(M,_,_,X,_).
in(hasFuelCons(X),M) :- _e_car(M,_,_,_,X).
_e_only_ct(A,B,C) :- _e_pref(A,B,C,1); not _e_pref(A,B,C,0); not _e_pref(A,C,B,0).
_e_mismatch(A,B,C) :- _e_pref(A,C,B,1); _e_pref(A,B,C,0).
_e_pref_true(A,B,C) :- _e_pref(A,B,C,0); not _e_only_ct(A,B,C); not _e_mismatch(A,B,C).
_e_transitivePref(A,B,D) :- _e_pref_true(A,B,C); _e_pref_true(A,C,D).
input(B,better,D) :- _e_transitivePref(A,B,D); not _e_pref_true(A,D,B).
input(B,better,C) :- _e_pref_true(A,B,C); not _e_transitivePref(A,C,B).
#show input/3.
#show /0.