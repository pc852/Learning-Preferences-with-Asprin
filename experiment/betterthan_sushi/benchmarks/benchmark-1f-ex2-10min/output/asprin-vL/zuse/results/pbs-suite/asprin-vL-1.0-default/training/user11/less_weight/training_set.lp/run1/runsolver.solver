asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(13,eq,15) output(13,eq,19) output(13,eq,53) output(13,eq,32) output(13,eq,42) output(13,eq,9) output(13,eq,23) output(13,eq,17) output(13,eq,7) output(15,eq,19) output(15,eq,53) output(15,eq,32) output(15,eq,42) output(15,eq,9) output(15,eq,23) output(15,eq,17) output(15,eq,7) output(19,eq,53) output(19,eq,32) output(19,eq,42) output(19,eq,9) output(19,eq,23) output(19,eq,17) output(19,eq,7) output(53,eq,32) output(53,eq,42) output(53,eq,9) output(53,eq,23) output(53,eq,17) output(53,eq,7) output(32,eq,42) output(32,eq,9) output(32,eq,23) output(32,eq,17) output(32,eq,7) output(42,eq,9) output(42,eq,23) output(42,eq,17) output(42,eq,7) output(9,eq,23) output(9,eq,17) output(9,eq,7) output(23,eq,17) output(23,eq,7) output(17,eq,7)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(9,better,23) output(15,better,32) output(15,better,23) output(19,better,32) output(19,better,23) output(42,better,23) output(53,better,32) output(53,better,23) output(13,worse,15) output(13,worse,19) output(13,worse,53) output(13,worse,42) output(13,worse,9) output(13,worse,17) output(13,worse,7) output(23,worse,17) output(23,worse,7) output(32,worse,42) output(32,worse,9) output(32,worse,17) output(32,worse,7) output(13,eq,32) output(13,eq,23) output(15,eq,19) output(15,eq,53) output(15,eq,42) output(15,eq,9) output(15,eq,17) output(15,eq,7) output(19,eq,53) output(19,eq,42) output(19,eq,9) output(19,eq,17) output(19,eq,7) output(53,eq,42) output(53,eq,9) output(53,eq,17) output(53,eq,7) output(32,eq,23) output(42,eq,9) output(42,eq,17) output(42,eq,7) output(9,eq,17) output(9,eq,7) output(17,eq,7)
Optimization: 37 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(9,better,23) output(9,better,7) output(15,better,32) output(15,better,23) output(15,better,7) output(17,better,7) output(19,better,32) output(19,better,23) output(19,better,7) output(42,better,23) output(42,better,7) output(53,better,32) output(53,better,23) output(53,better,7) output(13,worse,15) output(13,worse,19) output(13,worse,53) output(13,worse,42) output(13,worse,9) output(13,worse,17) output(23,worse,17) output(32,worse,42) output(32,worse,9) output(32,worse,17) output(13,eq,32) output(13,eq,23) output(13,eq,7) output(15,eq,19) output(15,eq,53) output(15,eq,42) output(15,eq,9) output(15,eq,17) output(19,eq,53) output(19,eq,42) output(19,eq,9) output(19,eq,17) output(53,eq,42) output(53,eq,9) output(53,eq,17) output(32,eq,23) output(32,eq,7) output(42,eq,9) output(42,eq,17) output(9,eq,17) output(23,eq,7)
Optimization: 31 2
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(9,better,23) output(9,better,7) output(15,better,32) output(15,better,42) output(15,better,23) output(15,better,7) output(17,better,7) output(19,better,32) output(19,better,42) output(19,better,23) output(19,better,7) output(53,better,32) output(53,better,42) output(53,better,23) output(53,better,7) output(13,worse,15) output(13,worse,19) output(13,worse,53) output(13,worse,9) output(13,worse,17) output(23,worse,17) output(32,worse,9) output(32,worse,17) output(42,worse,9) output(42,worse,17) output(13,eq,32) output(13,eq,42) output(13,eq,23) output(13,eq,7) output(15,eq,19) output(15,eq,53) output(15,eq,9) output(15,eq,17) output(19,eq,53) output(19,eq,9) output(19,eq,17) output(53,eq,9) output(53,eq,17) output(32,eq,42) output(32,eq,23) output(32,eq,7) output(42,eq,23) output(42,eq,7) output(9,eq,17) output(23,eq,7)
Optimization: 30 3
Answer: 5
preference(1,(1,13),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(13,better,9) output(13,better,17) output(13,better,7) output(15,better,9) output(15,better,17) output(15,better,7) output(19,better,9) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,9) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,17) output(42,better,7) output(53,better,9) output(53,better,17) output(53,better,7) output(9,worse,23) output(13,eq,15) output(13,eq,19) output(13,eq,53) output(13,eq,32) output(13,eq,42) output(13,eq,23) output(15,eq,19) output(15,eq,53) output(15,eq,32) output(15,eq,42) output(15,eq,23) output(19,eq,53) output(19,eq,32) output(19,eq,42) output(19,eq,23) output(53,eq,32) output(53,eq,42) output(53,eq,23) output(32,eq,42) output(32,eq,23) output(42,eq,23) output(9,eq,17) output(9,eq,7) output(17,eq,7)
Optimization: 25 2
Answer: 6
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(13,better,42) output(13,better,9) output(13,better,17) output(13,better,7) output(15,better,42) output(15,better,9) output(15,better,17) output(15,better,7) output(19,better,42) output(19,better,9) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,17) output(32,better,7) output(53,better,42) output(53,better,9) output(53,better,17) output(53,better,7) output(9,worse,23) output(42,worse,23) output(13,eq,15) output(13,eq,19) output(13,eq,53) output(13,eq,32) output(13,eq,23) output(15,eq,19) output(15,eq,53) output(15,eq,32) output(15,eq,23) output(19,eq,53) output(19,eq,32) output(19,eq,23) output(53,eq,32) output(53,eq,23) output(32,eq,23) output(42,eq,9) output(42,eq,17) output(42,eq,7) output(9,eq,17) output(9,eq,7) output(17,eq,7)
Optimization: 23 5
Answer: 7
preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,2),1,for(atom(hasOftenSold(1))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,7),1,for(atom(hasOftenSold(2))),2) preference(1,(1,11),1,for(atom(hasOiliness(0))),2) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),8) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,17) output(13,better,7) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,17) output(15,better,7) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,17) output(53,better,7) output(9,worse,23) output(32,worse,9) output(32,worse,23) output(42,worse,9) output(42,worse,23) output(13,eq,15) output(13,eq,19) output(13,eq,53) output(13,eq,23) output(15,eq,19) output(15,eq,53) output(15,eq,23) output(19,eq,53) output(19,eq,23) output(53,eq,23) output(32,eq,42) output(32,eq,17) output(32,eq,7) output(42,eq,17) output(42,eq,7) output(17,eq,7)
Optimization: 21 8
Answer: 8
preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,2),1,for(atom(hasOftenSold(1))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,7),1,for(atom(hasOftenSold(2))),2) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),8) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,17) output(13,better,7) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,17) output(15,better,7) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7) output(9,worse,23) output(13,worse,53) output(15,worse,53) output(19,worse,53) output(32,worse,9) output(32,worse,23) output(42,worse,9) output(42,worse,23) output(13,eq,15) output(13,eq,19) output(13,eq,23) output(15,eq,19) output(15,eq,23) output(19,eq,23) output(32,eq,42) output(32,eq,17) output(32,eq,7) output(42,eq,17) output(42,eq,7) output(17,eq,7)
Optimization: 20 7
Answer: 9
preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasPrice(3))),7) preference(1,(1,2),1,for(atom(hasOftenSold(1))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,7),1,for(atom(hasOftenSold(2))),2) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),8) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,17) output(15,better,7) output(19,better,32) output(19,better,42) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,17) output(53,better,7) output(9,worse,23) output(19,worse,53) output(19,worse,9) output(19,worse,23) output(32,worse,9) output(32,worse,23) output(42,worse,9) output(42,worse,23) output(53,worse,23) output(13,eq,15) output(13,eq,23) output(15,eq,23) output(32,eq,42) output(32,eq,17) output(32,eq,7) output(42,eq,17) output(42,eq,7) output(17,eq,7)
Optimization: 18 8
Answer: 10
preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,2),1,for(atom(hasOftenSold(1))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,6),1,for(atom(hasPrice(3))),5) preference(1,(1,7),1,for(atom(hasOftenSold(2))),2) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),8) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,17) output(15,better,7) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,17) output(53,better,7) output(9,worse,23) output(19,worse,53) output(19,worse,23) output(32,worse,9) output(32,worse,23) output(42,worse,9) output(42,worse,23) output(53,worse,23) output(13,eq,15) output(13,eq,23) output(15,eq,23) output(32,eq,42) output(32,eq,17) output(32,eq,7) output(42,eq,17) output(42,eq,7) output(17,eq,7)
Optimization: 17 8
Answer: 11
preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,2),1,for(atom(hasOftenSold(1))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,7),1,for(atom(hasOftenSold(2))),2) preference(1,(1,9),1,for(atom(hasPrice(3))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),8) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,17) output(15,better,7) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,17) output(53,better,7) output(9,worse,23) output(15,worse,23) output(19,worse,53) output(19,worse,23) output(32,worse,9) output(32,worse,23) output(42,worse,9) output(42,worse,23) output(53,worse,23) output(13,eq,23) output(32,eq,42) output(32,eq,17) output(32,eq,7) output(42,eq,17) output(42,eq,7) output(17,eq,7)
Optimization: 16 9
Answer: 12
preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,2),1,for(atom(hasOiliness(2))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,7),1,for(atom(hasPrice(2))),2) preference(1,(1,9),1,for(atom(hasOiliness(0))),2) preference(1,(1,11),1,for(atom(hasOftenSold(1))),10) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),2) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,32) output(19,better,42) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,17) output(53,better,7) output(9,worse,23) output(19,worse,23) output(32,worse,42) output(32,worse,9) output(32,worse,23) output(32,worse,17) output(42,worse,9) output(42,worse,23) output(42,worse,17) output(53,worse,23) output(13,eq,15) output(19,eq,53) output(19,eq,9) output(53,eq,9) output(32,eq,7)
Optimization: 15 9
Answer: 13
preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,9),1,for(neg(atom(hasOftenSold(2)))),1) preference(1,(1,1),1,for(atom(hasOiliness(2))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,4),1,for(atom(hasOiliness(1))),2) preference(1,(1,5),1,for(atom(hasOftenSold(3))),10) preference(1,(1,6),1,for(atom(hasOftenSold(0))),4) preference(1,(1,7),1,for(atom(hasPrice(2))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,13),1,for(atom(hasOiliness(0))),4) preference(1,(1,14),1,for(atom(hasPrice(3))),6) preference(1,less(weight)) output(9,better,7) output(13,better,19) output(13,better,53) output(13,better,42) output(13,better,9) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,42) output(19,better,9) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,7) output(53,better,42) output(53,better,9) output(53,better,7) output(9,worse,23) output(9,worse,17) output(13,worse,15) output(19,worse,32) output(19,worse,23) output(19,worse,17) output(42,worse,23) output(42,worse,17) output(53,worse,32) output(53,worse,23) output(53,worse,17) output(13,eq,32) output(13,eq,23) output(32,eq,23)
Optimization: 14 14
Answer: 14
preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,1),1,for(atom(hasOiliness(2))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,4),1,for(atom(hasOftenSold(1))),3) preference(1,(1,5),1,for(atom(hasOftenSold(3))),10) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasOftenSold(0))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),5) preference(1,(1,13),1,for(atom(hasOiliness(0))),2) preference(1,(1,14),1,for(atom(hasPrice(3))),6) preference(1,less(weight)) output(9,better,7) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,42) output(19,better,9) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,7) output(53,better,42) output(53,better,9) output(53,better,7) output(9,worse,23) output(9,worse,17) output(13,worse,15) output(19,worse,32) output(19,worse,23) output(19,worse,17) output(32,worse,23) output(42,worse,23) output(42,worse,17) output(53,worse,32) output(53,worse,23) output(53,worse,17) output(13,eq,23)
Optimization: 13 14
Answer: 15
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,1),1,for(atom(hasOiliness(2))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,4),1,for(atom(hasOftenSold(1))),3) preference(1,(1,5),1,for(atom(hasOftenSold(3))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasOftenSold(0))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,11),1,for(atom(hasPrice(3))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),5) preference(1,(1,13),1,for(atom(hasOiliness(0))),2) preference(1,(1,14),1,for(atom(hasPrice(0))),5) preference(1,less(weight)) output(9,better,7) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,7) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,7) output(42,better,9) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,7) output(9,worse,23) output(9,worse,17) output(13,worse,15) output(19,worse,17) output(23,worse,17) output(32,worse,23) output(32,worse,17) output(42,worse,23) output(42,worse,17) output(53,worse,23) output(53,worse,17) output(19,eq,23)
Optimization: 12 14
Answer: 16
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasOiliness(2))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,4),1,for(atom(hasOftenSold(1))),3) preference(1,(1,5),1,for(atom(hasOftenSold(3))),10) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasOftenSold(0))),4) preference(1,(1,11),1,for(atom(hasPrice(3))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),5) preference(1,(1,13),1,for(atom(hasOiliness(0))),2) preference(1,(1,14),1,for(atom(hasPrice(0))),5) preference(1,less(weight)) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,7) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,7) output(42,better,9) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,7) output(9,worse,23) output(9,worse,17) output(19,worse,17) output(23,worse,17) output(32,worse,23) output(32,worse,17) output(42,worse,23) output(42,worse,17) output(53,worse,23) output(53,worse,17) output(19,eq,23)
Optimization: 11 14
Answer: 17
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(1))),3) preference(1,(1,3),1,for(atom(hasOftenSold(0))),6) preference(1,(1,5),1,for(atom(hasOftenSold(3))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(8))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,11),1,for(atom(hasPrice(3))),1) preference(1,(1,12),1,for(atom(hasOiliness(2))),2) preference(1,(1,13),1,for(atom(hasOiliness(0))),4) preference(1,(1,14),1,for(atom(hasPrice(0))),5) preference(1,less(weight)) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,7) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,7) output(42,better,9) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,7) output(9,worse,23) output(9,worse,17) output(23,worse,17) output(32,worse,23) output(32,worse,17) output(42,worse,23) output(42,worse,17) output(53,worse,23) output(53,worse,17) output(19,eq,17)
Optimization: 10 14
Answer: 18
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(1))),3) preference(1,(1,3),1,for(atom(hasOftenSold(0))),6) preference(1,(1,5),1,for(atom(hasOftenSold(3))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(8))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,11),1,for(atom(hasPrice(3))),1) preference(1,(1,12),1,for(atom(hasOiliness(2))),2) preference(1,(1,13),1,for(atom(hasOiliness(0))),2) preference(1,(1,14),1,for(atom(hasPrice(0))),5) preference(1,less(weight)) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,7) output(42,better,9) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,7) output(9,worse,23) output(9,worse,17) output(23,worse,17) output(32,worse,23) output(32,worse,17) output(42,worse,23) output(42,worse,17) output(53,worse,23) output(53,worse,17)
Optimization: 9 14
Answer: 19
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,3),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasOiliness(2))),2) preference(1,(1,4),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,5),1,for(atom(hasOftenSold(3))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,11),1,for(atom(hasPrice(3))),1) preference(1,(1,12),1,for(atom(hasOftenSold(1))),3) preference(1,(1,13),1,for(atom(hasOiliness(0))),2) preference(1,(1,14),1,for(atom(hasPrice(0))),5) preference(1,less(weight)) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,7) output(42,better,9) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,7) output(9,worse,23) output(9,worse,17) output(23,worse,17) output(32,worse,23) output(32,worse,17) output(42,worse,23) output(42,worse,17) output(53,eq,17)
Optimization: 8 14
Answer: 20
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,4),1,for(neg(atom(hasOftenSold(0)))),5) preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,1),1,for(atom(hasPrice(3))),5) preference(1,(1,5),1,for(atom(hasOftenSold(0))),1) preference(1,(1,7),1,for(atom(hasOiliness(0))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,12),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasOiliness(2))),10) preference(1,(1,14),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,17) output(32,better,7) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,17) output(53,better,7) output(9,worse,23) output(19,worse,23) output(32,worse,23) output(42,worse,9) output(42,worse,23) output(53,worse,23) output(15,eq,23)
Optimization: 7 14
Answer: 21
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,4),1,for(neg(atom(hasOftenSold(0)))),5) preference(1,(1,5),1,for(atom(hasPrice(3))),2) preference(1,(1,6),1,for(atom(hasOftenSold(0))),1) preference(1,(1,7),1,for(atom(hasOiliness(3))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasOiliness(0))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,12),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasOiliness(2))),10) preference(1,(1,14),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,17) output(32,better,7) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7) output(9,worse,23) output(19,worse,53) output(19,worse,23) output(32,worse,23) output(42,worse,9) output(42,worse,23)
Optimization: 6 14
Answer: 22
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,4),1,for(neg(atom(hasOftenSold(0)))),5) preference(1,(1,1),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,5),1,for(atom(hasOftenSold(0))),2) preference(1,(1,6),1,for(atom(hasPrice(3))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,8),1,for(atom(hasOiliness(0))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,12),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasOiliness(2))),10) preference(1,(1,14),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,17) output(32,better,7) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,17) output(53,better,7) output(9,worse,23) output(32,worse,23) output(42,worse,9) output(42,worse,23) output(53,worse,23)
Optimization: 5 14
Answer: 23
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,4),1,for(neg(atom(hasOftenSold(0)))),5) preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,1),1,for(atom(hasOiliness(0))),8) preference(1,(1,5),1,for(atom(hasPrice(3))),3) preference(1,(1,7),1,for(atom(hasOftenSold(0))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,12),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasOiliness(2))),10) preference(1,(1,14),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,17) output(32,better,7) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7) output(9,worse,23) output(32,worse,23) output(42,worse,9) output(42,worse,23)
Optimization: 4 14
Answer: 24
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,4),1,for(neg(atom(hasOiliness(2)))),4) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),4) preference(1,(1,14),1,for(neg(atom(hasOftenSold(0)))),5) preference(1,(1,1),1,for(atom(hasPrice(0))),1) preference(1,(1,2),1,for(atom(hasOiliness(1))),1) preference(1,(1,6),1,for(atom(hasOftenSold(0))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,12),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasOiliness(2))),10) preference(1,less(weight)) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,9) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,23) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7) output(9,worse,23) output(32,worse,42) output(32,eq,23)
Optimization: 3 14
Answer: 25
preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,1),1,for(atom(hasOiliness(2))),2) preference(1,(1,2),1,for(atom(hasPrice(3))),6) preference(1,(1,3),1,for(atom(hasOftenSold(3))),6) preference(1,(1,4),1,for(atom(hasPrice(1))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,6),1,for(atom(hasPrice(0))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,8),1,for(atom(hasOftenSold(2))),6) preference(1,(1,9),1,for(atom(hasOftenSold(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,11),1,for(atom(hasOiliness(0))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),5) preference(1,less(weight)) output(9,better,23) output(9,better,17) output(9,better,7) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,23) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,23) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7) output(13,eq,15) output(19,eq,53)
Optimization: 2 14
Answer: 26
preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,1),1,for(atom(hasOiliness(2))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,3),1,for(atom(hasOftenSold(3))),5) preference(1,(1,4),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasOftenSold(1))),3) preference(1,(1,6),1,for(atom(hasPrice(0))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(9))),8) preference(1,(1,8),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,9),1,for(atom(hasOiliness(0))),6) preference(1,(1,10),1,for(atom(hasPrice(3))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),7) preference(1,less(weight)) output(9,better,23) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,23) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,23) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7) output(19,eq,53)
Optimization: 1 14
Answer: 27
preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,3),1,for(atom(hasOftenSold(3))),8) preference(1,(1,4),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasOiliness(2))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(9))),5) preference(1,(1,7),1,for(atom(hasOftenSold(0))),4) preference(1,(1,8),1,for(atom(hasOftenSold(1))),2) preference(1,(1,9),1,for(atom(hasOiliness(0))),6) preference(1,(1,10),1,for(atom(hasPrice(3))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,14),1,for(atom(hasPrice(0))),7) preference(1,less(weight)) output(9,better,23) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,23) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,23) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7)
Optimization: 0 14
Answer: 28
preference(1,(1,1),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,3),1,for(atom(hasOftenSold(3))),8) preference(1,(1,4),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasOiliness(2))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(9))),5) preference(1,(1,7),1,for(atom(hasOftenSold(0))),4) preference(1,(1,8),1,for(atom(hasOftenSold(1))),2) preference(1,(1,9),1,for(atom(hasOiliness(0))),6) preference(1,(1,10),1,for(atom(hasPrice(3))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,14),1,for(atom(hasPrice(0))),7) preference(1,less(weight)) output(9,better,23) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,23) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,23) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7)
Optimization: 0 13
Progression : 0 [ 1;13] (Error: 12)
Answer: 29
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,4),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,6),1,for(neg(atom(hasOftenSold(2)))),10) preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),4) preference(1,(1,13),1,for(neg(atom(hasOftenSold(0)))),2) preference(1,(1,1),1,for(atom(hasOiliness(1))),8) preference(1,(1,7),1,for(atom(hasOftenSold(0))),3) preference(1,(1,8),1,for(atom(hasOiliness(2))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,11),1,for(atom(hasPrice(0))),10) preference(1,(1,12),1,for(atom(hasOftenSold(3))),9) preference(1,(1,14),1,for(atom(hasOftenSold(2))),8) preference(1,less(weight)) output(9,better,23) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,23) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,23) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7)
Optimization: 0 12
Answer: 30
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(1)))),2) preference(1,(1,2),1,for(atom(hasOiliness(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,7),1,for(atom(hasOiliness(0))),3) preference(1,(1,8),1,for(atom(hasOftenSold(0))),9) preference(1,(1,9),1,for(atom(hasPrice(0))),3) preference(1,(1,11),1,for(atom(hasOftenSold(3))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,13),1,for(atom(hasOiliness(2))),9) preference(1,(1,14),1,for(atom(hasOftenSold(2))),7) preference(1,less(weight)) output(9,better,23) output(9,better,17) output(9,better,7) output(13,better,15) output(13,better,19) output(13,better,53) output(13,better,32) output(13,better,42) output(13,better,9) output(13,better,23) output(13,better,17) output(13,better,7) output(15,better,19) output(15,better,53) output(15,better,32) output(15,better,42) output(15,better,9) output(15,better,23) output(15,better,17) output(15,better,7) output(17,better,7) output(19,better,53) output(19,better,32) output(19,better,42) output(19,better,9) output(19,better,23) output(19,better,17) output(19,better,7) output(23,better,17) output(23,better,7) output(32,better,42) output(32,better,9) output(32,better,23) output(32,better,17) output(32,better,7) output(42,better,9) output(42,better,23) output(42,better,17) output(42,better,7) output(53,better,32) output(53,better,42) output(53,better,9) output(53,better,23) output(53,better,17) output(53,better,7)
Optimization: 0 11
Progression : 0 [ 2;11] (Error: 4.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.132 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 30+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 597.931s (Solving: 585.78s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 2354.627s
Threads      : 4        (Winner: 4)

Choices      : 9698810  (Domain: 2358)
Conflicts    : 1919590  (Analyzed: 1919588)
Restarts     : 1992     (Average: 963.65 Last: 21191)
Model-Level  : 1442.5  
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 1927097  (Deleted: 1795018)
  Binary     : 740      (Ratio:   0.04%)
  Ternary    : 409      (Ratio:   0.02%)
  Conflict   : 1919588  (Average Length: 1749.1 Ratio:  99.61%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7509     (Average Length:  241.2 Ratio:   0.39%) 
  Distributed: 2503     (Ratio:   0.13% Average LBD: 3.39) 
  Integrated : 7509     (Ratio: 300.00% Unit: 10 Average Jumps: 51.40)
Backjumps    : 1919588  (Average:  3.25 Max: 4180 Sum: 6246129)
  Executed   : 1919587  (Average:  3.25 Max: 4180 Sum: 6246089 Ratio: 100.00%)
  Bounded    : 1        (Average: 40.00 Max:  40 Sum:     40 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(3)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  5 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(2)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  10 :: not atom(hasStyle(1))  ; 
  2 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasPrice(2)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: not atom(hasOftenSold(2))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  10 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasOftenSold(3)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  5 :: atom(hasMinorGrp(10)) ; 
  2 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(2)) ; 
  4 :: not atom(hasOftenSold(2))  ; 
  8 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasOftenSold(3)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(10)) ; 
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(2)) ; 
  4 :: not atom(hasOftenSold(2))  ; 
  9 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasOftenSold(3)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  6 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(10)) ; 
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOftenSold(1)) ; 
  4 :: not atom(hasOftenSold(2))  ; 
  6 :: atom(hasOftenSold(0)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(8)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  1 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOftenSold(1)) ; 
  4 :: not atom(hasOftenSold(2))  ; 
  6 :: atom(hasOftenSold(0)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(8)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  1 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(2)) ; 
  4 :: not atom(hasOftenSold(2))  ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  1 :: atom(hasPrice(3)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrice(3)) ; 
  4 :: not atom(hasOftenSold(2))  ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  5 :: not atom(hasOftenSold(0))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasMajorGrp(0))  ; 
  4 :: not atom(hasOftenSold(2))  ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  5 :: not atom(hasOftenSold(0))  ; 
  2 :: atom(hasPrice(3)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasOiliness(3)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(7)) ; 
  4 :: not atom(hasOftenSold(2))  ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  5 :: not atom(hasOftenSold(0))  ; 
  2 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasOiliness(0)) ; 
  4 :: not atom(hasOftenSold(2))  ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  5 :: not atom(hasOftenSold(0))  ; 
  3 :: atom(hasPrice(3)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  4 :: not atom(hasOiliness(2))  ; 
  5 :: not atom(hasPrice(0))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  2 :: not atom(hasPrice(1))  ; 
  4 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  4 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasOiliness(2)) ; 
  5 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasPrice(3)) ; 
  6 :: atom(hasOftenSold(3)) ; 
  1 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  5 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasPrice(0)) ; 
  8 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  7 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(9)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasPrice(3)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  7 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(9)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasPrice(3)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasMinorGrp(0))  ; 
  2 :: not atom(hasOiliness(2))  ; 
  10 :: not atom(hasOftenSold(2))  ; 
  3 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasOiliness(2)) ; 
  4 :: not atom(hasOiliness(1))  ; 
  10 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOftenSold(3)) ; 
  2 :: not atom(hasOftenSold(0))  ; 
  8 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasMinorGrp(0))  ; 
  5 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasOiliness(0)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasMinorGrp(1))  ; 
  9 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  9 :: atom(hasOiliness(2)) ; 
  7 :: atom(hasOftenSold(2)) 
}.
