asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(1,eq,22) output(1,eq,32) output(1,eq,21) output(1,eq,8) output(1,eq,41) output(1,eq,7) output(1,eq,26) output(1,eq,59) output(1,eq,51) output(22,eq,32) output(22,eq,21) output(22,eq,8) output(22,eq,41) output(22,eq,7) output(22,eq,26) output(22,eq,59) output(22,eq,51) output(32,eq,21) output(32,eq,8) output(32,eq,41) output(32,eq,7) output(32,eq,26) output(32,eq,59) output(32,eq,51) output(21,eq,8) output(21,eq,41) output(21,eq,7) output(21,eq,26) output(21,eq,59) output(21,eq,51) output(8,eq,41) output(8,eq,7) output(8,eq,26) output(8,eq,59) output(8,eq,51) output(41,eq,7) output(41,eq,26) output(41,eq,59) output(41,eq,51) output(7,eq,26) output(7,eq,59) output(7,eq,51) output(26,eq,59) output(26,eq,51) output(59,eq,51)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(26,better,59) output(1,better,59) output(7,better,59) output(8,better,59) output(21,better,59) output(22,better,59) output(32,better,59) output(41,better,59) output(59,worse,51) output(1,eq,22) output(1,eq,32) output(1,eq,21) output(1,eq,8) output(1,eq,41) output(1,eq,7) output(1,eq,26) output(1,eq,51) output(22,eq,32) output(22,eq,21) output(22,eq,8) output(22,eq,41) output(22,eq,7) output(22,eq,26) output(22,eq,51) output(32,eq,21) output(32,eq,8) output(32,eq,41) output(32,eq,7) output(32,eq,26) output(32,eq,51) output(21,eq,8) output(21,eq,41) output(21,eq,7) output(21,eq,26) output(21,eq,51) output(8,eq,41) output(8,eq,7) output(8,eq,26) output(8,eq,51) output(41,eq,7) output(41,eq,26) output(41,eq,51) output(7,eq,26) output(7,eq,51) output(26,eq,51)
Optimization: 37 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(26,better,59) output(1,better,7) output(1,better,59) output(8,better,7) output(8,better,59) output(21,better,7) output(21,better,59) output(22,better,7) output(22,better,59) output(32,better,7) output(32,better,59) output(41,better,7) output(41,better,59) output(7,worse,26) output(7,worse,51) output(59,worse,51) output(1,eq,22) output(1,eq,32) output(1,eq,21) output(1,eq,8) output(1,eq,41) output(1,eq,26) output(1,eq,51) output(22,eq,32) output(22,eq,21) output(22,eq,8) output(22,eq,41) output(22,eq,26) output(22,eq,51) output(32,eq,21) output(32,eq,8) output(32,eq,41) output(32,eq,26) output(32,eq,51) output(21,eq,8) output(21,eq,41) output(21,eq,26) output(21,eq,51) output(8,eq,41) output(8,eq,26) output(8,eq,51) output(41,eq,26) output(41,eq,51) output(7,eq,59) output(26,eq,51)
Optimization: 32 2
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOiliness(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(26,better,59) output(1,better,41) output(1,better,7) output(1,better,59) output(8,better,41) output(8,better,7) output(8,better,59) output(21,better,41) output(21,better,7) output(21,better,59) output(22,better,41) output(22,better,7) output(22,better,59) output(32,better,41) output(32,better,7) output(32,better,59) output(7,worse,26) output(7,worse,51) output(41,worse,26) output(41,worse,51) output(59,worse,51) output(1,eq,22) output(1,eq,32) output(1,eq,21) output(1,eq,8) output(1,eq,26) output(1,eq,51) output(22,eq,32) output(22,eq,21) output(22,eq,8) output(22,eq,26) output(22,eq,51) output(32,eq,21) output(32,eq,8) output(32,eq,26) output(32,eq,51) output(21,eq,8) output(21,eq,26) output(21,eq,51) output(8,eq,26) output(8,eq,51) output(41,eq,7) output(41,eq,59) output(7,eq,59) output(26,eq,51)
Optimization: 29 3
Answer: 5
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(26,better,59) output(26,better,51) output(1,better,7) output(1,better,59) output(1,better,51) output(8,better,7) output(8,better,59) output(8,better,51) output(21,better,7) output(21,better,59) output(21,better,51) output(22,better,7) output(22,better,59) output(22,better,51) output(32,better,7) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,59) output(41,better,51) output(7,worse,26) output(1,eq,22) output(1,eq,32) output(1,eq,21) output(1,eq,8) output(1,eq,41) output(1,eq,26) output(22,eq,32) output(22,eq,21) output(22,eq,8) output(22,eq,41) output(22,eq,26) output(32,eq,21) output(32,eq,8) output(32,eq,41) output(32,eq,26) output(21,eq,8) output(21,eq,41) output(21,eq,26) output(8,eq,41) output(8,eq,26) output(41,eq,26) output(7,eq,59) output(7,eq,51) output(59,eq,51)
Optimization: 25 3
Answer: 6
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,11),1,for(atom(hasOiliness(1))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(26,better,59) output(26,better,51) output(1,better,41) output(1,better,7) output(1,better,59) output(1,better,51) output(8,better,41) output(8,better,7) output(8,better,59) output(8,better,51) output(21,better,41) output(21,better,7) output(21,better,59) output(21,better,51) output(22,better,41) output(22,better,7) output(22,better,59) output(22,better,51) output(32,better,41) output(32,better,7) output(32,better,59) output(32,better,51) output(7,worse,26) output(41,worse,26) output(1,eq,22) output(1,eq,32) output(1,eq,21) output(1,eq,8) output(1,eq,26) output(22,eq,32) output(22,eq,21) output(22,eq,8) output(22,eq,26) output(32,eq,21) output(32,eq,8) output(32,eq,26) output(21,eq,8) output(21,eq,26) output(8,eq,26) output(41,eq,7) output(41,eq,59) output(41,eq,51) output(7,eq,59) output(7,eq,51) output(59,eq,51)
Optimization: 23 4
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(1,better,7) output(1,better,26) output(1,better,59) output(1,better,51) output(8,better,7) output(8,better,26) output(8,better,59) output(8,better,51) output(21,better,7) output(21,better,26) output(21,better,59) output(21,better,51) output(22,better,7) output(22,better,26) output(22,better,59) output(22,better,51) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,59) output(41,better,51) output(1,eq,22) output(1,eq,32) output(1,eq,21) output(1,eq,8) output(1,eq,41) output(22,eq,32) output(22,eq,21) output(22,eq,8) output(22,eq,41) output(32,eq,21) output(32,eq,8) output(32,eq,41) output(21,eq,8) output(21,eq,41) output(8,eq,41) output(7,eq,26) output(7,eq,59) output(7,eq,51) output(26,eq,59) output(26,eq,51) output(59,eq,51)
Optimization: 21 4
Answer: 8
preference(1,(1,13),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,12),1,for(atom(hasStyle(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(1,better,7) output(1,better,26) output(1,better,59) output(1,better,51) output(7,better,26) output(7,better,59) output(7,better,51) output(8,better,7) output(8,better,26) output(8,better,59) output(8,better,51) output(21,better,7) output(21,better,26) output(21,better,59) output(21,better,51) output(22,better,7) output(22,better,26) output(22,better,59) output(22,better,51) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,59) output(41,better,51) output(1,eq,22) output(1,eq,32) output(1,eq,21) output(1,eq,8) output(1,eq,41) output(22,eq,32) output(22,eq,21) output(22,eq,8) output(22,eq,41) output(32,eq,21) output(32,eq,8) output(32,eq,41) output(21,eq,8) output(21,eq,41) output(8,eq,41) output(26,eq,59) output(26,eq,51) output(59,eq,51)
Optimization: 18 5
Answer: 9
preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,1),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,2),1,for(atom(hasPrice(1))),5) preference(1,(1,3),1,for(atom(hasOftenSold(2))),6) preference(1,(1,4),1,for(atom(hasOftenSold(1))),10) preference(1,(1,5),1,for(atom(hasOftenSold(0))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,7),1,for(atom(hasPrice(0))),1) preference(1,(1,8),1,for(atom(hasOiliness(1))),2) preference(1,(1,9),1,for(atom(hasOftenSold(3))),4) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,12),1,for(atom(hasPrice(2))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),9) preference(1,less(weight)) output(26,better,51) output(1,better,51) output(7,better,26) output(7,better,59) output(7,better,51) output(8,better,26) output(8,better,51) output(21,better,8) output(21,better,41) output(21,better,7) output(21,better,26) output(21,better,59) output(21,better,51) output(22,better,8) output(22,better,7) output(22,better,26) output(22,better,59) output(22,better,51) output(32,better,8) output(32,better,41) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,59) output(41,better,51) output(59,better,51) output(26,worse,59) output(1,worse,22) output(1,worse,32) output(1,worse,21) output(1,worse,8) output(1,worse,41) output(1,worse,7) output(1,worse,26) output(1,worse,59) output(8,worse,41) output(8,worse,7) output(22,worse,32) output(22,worse,21) output(22,eq,41) output(32,eq,21) output(8,eq,59)
Optimization: 16 14
Answer: 10
preference(1,(1,9),1,for(neg(atom(hasOiliness(0)))),5) preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,1),1,for(atom(hasOftenSold(0))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),9) preference(1,(1,3),1,for(atom(hasOftenSold(2))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,5),1,for(atom(hasPrice(0))),3) preference(1,(1,6),1,for(atom(hasOiliness(1))),9) preference(1,(1,7),1,for(atom(hasPrice(3))),5) preference(1,(1,8),1,for(atom(hasOftenSold(1))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,12),1,for(atom(hasStyle(0))),1) preference(1,less(weight)) output(1,better,22) output(1,better,32) output(1,better,21) output(1,better,41) output(1,better,7) output(1,better,26) output(1,better,59) output(1,better,51) output(7,better,26) output(8,better,41) output(8,better,7) output(8,better,26) output(8,better,59) output(8,better,51) output(21,better,41) output(21,better,7) output(21,better,26) output(21,better,51) output(22,better,7) output(22,better,26) output(22,better,51) output(32,better,21) output(32,better,41) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,51) output(59,better,51) output(26,worse,59) output(26,worse,51) output(1,worse,8) output(7,worse,59) output(21,worse,8) output(22,worse,32) output(22,worse,21) output(22,worse,8) output(22,worse,59) output(32,worse,8) output(41,worse,59) output(22,eq,41) output(21,eq,59) output(7,eq,51)
Optimization: 14 14
Answer: 11
preference(1,(1,9),1,for(neg(atom(hasOiliness(0)))),5) preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,1),1,for(atom(hasStyle(0))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,3),1,for(atom(hasOftenSold(2))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,5),1,for(atom(hasPrice(0))),3) preference(1,(1,6),1,for(atom(hasOiliness(1))),9) preference(1,(1,7),1,for(atom(hasPrice(3))),5) preference(1,(1,8),1,for(atom(hasOftenSold(1))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,12),1,for(atom(hasOftenSold(0))),5) preference(1,less(weight)) output(1,better,22) output(1,better,32) output(1,better,21) output(1,better,41) output(1,better,7) output(1,better,26) output(1,better,59) output(1,better,51) output(7,better,26) output(8,better,41) output(8,better,7) output(8,better,26) output(8,better,59) output(8,better,51) output(21,better,41) output(21,better,7) output(21,better,26) output(21,better,59) output(21,better,51) output(22,better,7) output(22,better,26) output(22,better,51) output(32,better,21) output(32,better,41) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,51) output(59,better,51) output(26,worse,59) output(26,worse,51) output(1,worse,8) output(7,worse,59) output(21,worse,8) output(22,worse,32) output(22,worse,21) output(22,worse,8) output(22,worse,59) output(32,worse,8) output(41,worse,59) output(22,eq,41) output(7,eq,51)
Optimization: 13 14
Answer: 12
preference(1,(1,5),1,for(neg(atom(hasMajorGrp(0)))),6) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,3),1,for(atom(hasOftenSold(2))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,6),1,for(atom(hasOiliness(3))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,9),1,for(atom(hasOftenSold(1))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,12),1,for(atom(hasOftenSold(0))),9) preference(1,(1,13),1,for(atom(hasPrice(2))),1) preference(1,(1,14),1,for(atom(hasPrice(3))),1) preference(1,less(weight)) output(26,better,59) output(26,better,51) output(1,better,22) output(1,better,32) output(1,better,21) output(1,better,8) output(1,better,41) output(1,better,7) output(1,better,26) output(1,better,59) output(1,better,51) output(7,better,26) output(7,better,59) output(7,better,51) output(8,better,41) output(8,better,7) output(8,better,26) output(8,better,59) output(8,better,51) output(21,better,8) output(21,better,41) output(21,better,7) output(21,better,26) output(21,better,59) output(21,better,51) output(22,better,32) output(22,better,21) output(22,better,8) output(22,better,41) output(22,better,7) output(22,better,26) output(22,better,59) output(22,better,51) output(32,better,21) output(32,better,8) output(32,better,41) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,59) output(41,better,51) output(59,better,51)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 13
preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,1),1,for(atom(hasPrice(3))),1) preference(1,(1,2),1,for(atom(hasOftenSold(0))),9) preference(1,(1,3),1,for(atom(hasStyle(0))),7) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),3) preference(1,(1,5),1,for(atom(hasOftenSold(1))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(8))),4) preference(1,(1,8),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,11),1,for(atom(hasPrice(0))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),3) preference(1,less(weight)) output(26,better,59) output(26,better,51) output(1,better,22) output(1,better,32) output(1,better,21) output(1,better,8) output(1,better,41) output(1,better,7) output(1,better,26) output(1,better,59) output(1,better,51) output(7,better,26) output(7,better,59) output(7,better,51) output(8,better,41) output(8,better,7) output(8,better,26) output(8,better,59) output(8,better,51) output(21,better,8) output(21,better,41) output(21,better,7) output(21,better,26) output(21,better,59) output(21,better,51) output(22,better,32) output(22,better,21) output(22,better,8) output(22,better,41) output(22,better,7) output(22,better,26) output(22,better,59) output(22,better,51) output(32,better,21) output(32,better,8) output(32,better,41) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,59) output(41,better,51) output(59,better,51)
Optimization: 0 13
Answer: 14
preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),1) preference(1,(1,1),1,for(atom(hasOftenSold(0))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,3),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,4),1,for(atom(hasPrice(0))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(8))),4) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,11),1,for(atom(hasStyle(0))),4) preference(1,(1,12),1,for(atom(hasPrice(3))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),3) preference(1,less(weight)) output(26,better,59) output(26,better,51) output(1,better,22) output(1,better,32) output(1,better,21) output(1,better,8) output(1,better,41) output(1,better,7) output(1,better,26) output(1,better,59) output(1,better,51) output(7,better,26) output(7,better,59) output(7,better,51) output(8,better,41) output(8,better,7) output(8,better,26) output(8,better,59) output(8,better,51) output(21,better,8) output(21,better,41) output(21,better,7) output(21,better,26) output(21,better,59) output(21,better,51) output(22,better,32) output(22,better,21) output(22,better,8) output(22,better,41) output(22,better,7) output(22,better,26) output(22,better,59) output(22,better,51) output(32,better,21) output(32,better,8) output(32,better,41) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,59) output(41,better,51) output(59,better,51)
Optimization: 0 12
Progression : 0 [ 2;12] (Error: 5)
Answer: 15
preference(1,(1,5),1,for(neg(atom(hasStyle(1)))),3) preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(9))),3) preference(1,(1,3),1,for(atom(hasOftenSold(1))),2) preference(1,(1,4),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,11),1,for(atom(hasOftenSold(0))),8) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),4) preference(1,(1,14),1,for(atom(hasPrice(2))),1) preference(1,less(weight)) output(26,better,59) output(26,better,51) output(1,better,22) output(1,better,32) output(1,better,21) output(1,better,8) output(1,better,41) output(1,better,7) output(1,better,26) output(1,better,59) output(1,better,51) output(7,better,26) output(7,better,59) output(7,better,51) output(8,better,41) output(8,better,7) output(8,better,26) output(8,better,59) output(8,better,51) output(21,better,8) output(21,better,41) output(21,better,7) output(21,better,26) output(21,better,59) output(21,better,51) output(22,better,32) output(22,better,21) output(22,better,8) output(22,better,41) output(22,better,7) output(22,better,26) output(22,better,59) output(22,better,51) output(32,better,21) output(32,better,8) output(32,better,41) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,59) output(41,better,51) output(59,better,51)
Optimization: 0 11
Answer: 16
preference(1,(1,3),1,for(neg(atom(hasMajorGrp(0)))),4) preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,6),1,for(atom(hasOftenSold(0))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(8))),8) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,12),1,for(atom(hasPrice(3))),4) preference(1,(1,13),1,for(atom(hasOftenSold(2))),1) preference(1,(1,14),1,for(atom(hasStyle(0))),3) preference(1,less(weight)) output(26,better,59) output(26,better,51) output(1,better,22) output(1,better,32) output(1,better,21) output(1,better,8) output(1,better,41) output(1,better,7) output(1,better,26) output(1,better,59) output(1,better,51) output(7,better,26) output(7,better,59) output(7,better,51) output(8,better,41) output(8,better,7) output(8,better,26) output(8,better,59) output(8,better,51) output(21,better,8) output(21,better,41) output(21,better,7) output(21,better,26) output(21,better,59) output(21,better,51) output(22,better,32) output(22,better,21) output(22,better,8) output(22,better,41) output(22,better,7) output(22,better,26) output(22,better,59) output(22,better,51) output(32,better,21) output(32,better,8) output(32,better,41) output(32,better,7) output(32,better,26) output(32,better,59) output(32,better,51) output(41,better,7) output(41,better,26) output(41,better,59) output(41,better,51) output(59,better,51)
Optimization: 0 10
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.170 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 16+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 598.229s (Solving: 583.34s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 2347.216s
Threads      : 4        (Winner: 4)

Choices      : 9925393  (Domain: 8953)
Conflicts    : 1802210  (Analyzed: 1802208)
Restarts     : 2167     (Average: 831.66 Last: 175989)
Model-Level  : 1445.5  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1805943  (Deleted: 1673208)
  Binary     : 548      (Ratio:   0.03%)
  Ternary    : 196      (Ratio:   0.01%)
  Conflict   : 1802208  (Average Length: 1986.2 Ratio:  99.79%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 3735     (Average Length:  195.4 Ratio:   0.21%) 
  Distributed: 1245     (Ratio:   0.07% Average LBD: 3.31) 
  Integrated : 3735     (Ratio: 300.00% Unit: 20 Average Jumps: 12.25)
Backjumps    : 1802208  (Average:  3.11 Max: 3565 Sum: 5607450)
  Executed   : 1802207  (Average:  3.11 Max: 3565 Sum: 5607441 Ratio: 100.00%)
  Bounded    : 1        (Average:  9.00 Max:   9 Sum:      9 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(8)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  10 :: atom(hasStyle(0)) ; 
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasPrice(1)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasPrice(0)) ; 
  2 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasOftenSold(3)) ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPrice(3)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  5 :: not atom(hasOiliness(0))  ; 
  10 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasStyle(0)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  10 :: not atom(hasStyle(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasStyle(0)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPrice(3)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  5 :: not atom(hasOiliness(0))  ; 
  10 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  10 :: not atom(hasStyle(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  6 :: not atom(hasMajorGrp(0))  ; 
  4 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasPrice(2)) ; 
  1 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(3)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasStyle(0)) ; 
  3 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  5 :: not atom(hasMajorGrp(0))  ; 
  4 :: atom(hasMinorGrp(8)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasPrice(0)) ; 
  4 :: atom(hasMinorGrp(8)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  1 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasStyle(0)) ; 
  1 :: atom(hasPrice(3)) ; 
  3 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  3 :: not atom(hasStyle(1))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasMinorGrp(8)) ; 
  5 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(0)) ; 
  4 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  4 :: not atom(hasStyle(1))  ; 
  8 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasPrice(3)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasStyle(0)) 
}.
