asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(11,eq,41) output(11,eq,3) output(11,eq,0) output(11,eq,1) output(11,eq,14) output(11,eq,43) output(11,eq,6) output(11,eq,12) output(11,eq,33) output(41,eq,3) output(41,eq,0) output(41,eq,1) output(41,eq,14) output(41,eq,43) output(41,eq,6) output(41,eq,12) output(41,eq,33) output(3,eq,0) output(3,eq,1) output(3,eq,14) output(3,eq,43) output(3,eq,6) output(3,eq,12) output(3,eq,33) output(0,eq,1) output(0,eq,14) output(0,eq,43) output(0,eq,6) output(0,eq,12) output(0,eq,33) output(1,eq,14) output(1,eq,43) output(1,eq,6) output(1,eq,12) output(1,eq,33) output(14,eq,43) output(14,eq,6) output(14,eq,12) output(14,eq,33) output(43,eq,6) output(43,eq,12) output(43,eq,33) output(6,eq,12) output(6,eq,33) output(12,eq,33)
Optimization: 45 0
Answer: 2
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,less(weight)) output(0,better,43) output(1,better,43) output(3,better,43) output(11,better,43) output(14,better,43) output(41,better,43) output(43,worse,6) output(43,worse,12) output(43,worse,33) output(11,eq,41) output(11,eq,3) output(11,eq,0) output(11,eq,1) output(11,eq,14) output(11,eq,6) output(11,eq,12) output(11,eq,33) output(41,eq,3) output(41,eq,0) output(41,eq,1) output(41,eq,14) output(41,eq,6) output(41,eq,12) output(41,eq,33) output(3,eq,0) output(3,eq,1) output(3,eq,14) output(3,eq,6) output(3,eq,12) output(3,eq,33) output(0,eq,1) output(0,eq,14) output(0,eq,6) output(0,eq,12) output(0,eq,33) output(1,eq,14) output(1,eq,6) output(1,eq,12) output(1,eq,33) output(14,eq,6) output(14,eq,12) output(14,eq,33) output(6,eq,12) output(6,eq,33) output(12,eq,33)
Optimization: 39 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(3))),10) preference(1,less(weight)) output(0,better,1) output(0,better,43) output(3,better,1) output(3,better,43) output(11,better,1) output(11,better,43) output(14,better,43) output(41,better,1) output(41,better,43) output(1,worse,14) output(1,worse,6) output(1,worse,12) output(1,worse,33) output(43,worse,6) output(43,worse,12) output(43,worse,33) output(11,eq,41) output(11,eq,3) output(11,eq,0) output(11,eq,14) output(11,eq,6) output(11,eq,12) output(11,eq,33) output(41,eq,3) output(41,eq,0) output(41,eq,14) output(41,eq,6) output(41,eq,12) output(41,eq,33) output(3,eq,0) output(3,eq,14) output(3,eq,6) output(3,eq,12) output(3,eq,33) output(0,eq,14) output(0,eq,6) output(0,eq,12) output(0,eq,33) output(1,eq,43) output(14,eq,6) output(14,eq,12) output(14,eq,33) output(6,eq,12) output(6,eq,33) output(12,eq,33)
Optimization: 36 2
Answer: 4
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(0,better,43) output(0,better,33) output(1,better,43) output(1,better,33) output(3,better,43) output(3,better,33) output(6,better,33) output(11,better,43) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,33) output(41,better,43) output(41,better,33) output(43,worse,6) output(43,worse,12) output(11,eq,41) output(11,eq,3) output(11,eq,0) output(11,eq,1) output(11,eq,14) output(11,eq,6) output(11,eq,12) output(41,eq,3) output(41,eq,0) output(41,eq,1) output(41,eq,14) output(41,eq,6) output(41,eq,12) output(3,eq,0) output(3,eq,1) output(3,eq,14) output(3,eq,6) output(3,eq,12) output(0,eq,1) output(0,eq,14) output(0,eq,6) output(0,eq,12) output(1,eq,14) output(1,eq,6) output(1,eq,12) output(14,eq,6) output(14,eq,12) output(43,eq,33) output(6,eq,12)
Optimization: 31 2
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(3))),10) preference(1,less(weight)) output(0,better,1) output(0,better,43) output(0,better,33) output(3,better,1) output(3,better,43) output(3,better,33) output(6,better,33) output(11,better,1) output(11,better,43) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,33) output(41,better,1) output(41,better,43) output(41,better,33) output(1,worse,14) output(1,worse,6) output(1,worse,12) output(43,worse,6) output(43,worse,12) output(11,eq,41) output(11,eq,3) output(11,eq,0) output(11,eq,14) output(11,eq,6) output(11,eq,12) output(41,eq,3) output(41,eq,0) output(41,eq,14) output(41,eq,6) output(41,eq,12) output(3,eq,0) output(3,eq,14) output(3,eq,6) output(3,eq,12) output(0,eq,14) output(0,eq,6) output(0,eq,12) output(1,eq,43) output(1,eq,33) output(14,eq,6) output(14,eq,12) output(43,eq,33) output(6,eq,12)
Optimization: 29 3
Answer: 6
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,43) output(0,better,6) output(0,better,33) output(1,better,43) output(1,better,6) output(1,better,33) output(3,better,43) output(3,better,6) output(3,better,33) output(11,better,43) output(11,better,6) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,43) output(41,better,6) output(41,better,33) output(6,worse,12) output(43,worse,12) output(11,eq,41) output(11,eq,3) output(11,eq,0) output(11,eq,1) output(11,eq,14) output(11,eq,12) output(41,eq,3) output(41,eq,0) output(41,eq,1) output(41,eq,14) output(41,eq,12) output(3,eq,0) output(3,eq,1) output(3,eq,14) output(3,eq,12) output(0,eq,1) output(0,eq,14) output(0,eq,12) output(1,eq,14) output(1,eq,12) output(14,eq,12) output(43,eq,6) output(43,eq,33) output(6,eq,33)
Optimization: 26 3
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,1) output(0,better,43) output(0,better,6) output(0,better,33) output(3,better,1) output(3,better,43) output(3,better,6) output(3,better,33) output(11,better,1) output(11,better,43) output(11,better,6) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,1) output(41,better,43) output(41,better,6) output(41,better,33) output(1,worse,14) output(1,worse,12) output(6,worse,12) output(43,worse,12) output(11,eq,41) output(11,eq,3) output(11,eq,0) output(11,eq,14) output(11,eq,12) output(41,eq,3) output(41,eq,0) output(41,eq,14) output(41,eq,12) output(3,eq,0) output(3,eq,14) output(3,eq,12) output(0,eq,14) output(0,eq,12) output(1,eq,43) output(1,eq,6) output(1,eq,33) output(14,eq,12) output(43,eq,6) output(43,eq,33) output(6,eq,33)
Optimization: 25 4
Answer: 8
preference(1,(1,2),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,4),1,for(atom(hasOftenSold(1))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),7) preference(1,(1,11),1,for(atom(hasPrice(2))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,1) output(0,better,6) output(0,better,33) output(1,better,6) output(1,better,33) output(3,better,1) output(3,better,6) output(3,better,33) output(6,better,33) output(11,better,1) output(11,better,6) output(11,better,33) output(12,better,33) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,1) output(41,better,6) output(41,better,33) output(43,better,6) output(43,better,33) output(1,worse,14) output(1,worse,43) output(1,worse,12) output(3,worse,0) output(3,worse,14) output(3,worse,43) output(3,worse,12) output(6,worse,12) output(11,worse,41) output(11,worse,3) output(11,worse,0) output(11,worse,14) output(11,worse,43) output(11,worse,12) output(41,eq,0) output(41,eq,14) output(41,eq,43) output(41,eq,12) output(0,eq,14) output(0,eq,43) output(0,eq,12) output(14,eq,43) output(14,eq,12) output(43,eq,12)
Optimization: 24 5
Answer: 9
preference(1,(1,4),1,for(atom(hasOftenSold(1))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,11),1,for(atom(hasPrice(2))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,1) output(0,better,6) output(0,better,33) output(1,better,6) output(1,better,33) output(3,better,1) output(3,better,6) output(3,better,33) output(6,better,33) output(11,better,3) output(11,better,1) output(11,better,6) output(11,better,33) output(12,better,33) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,1) output(41,better,6) output(41,better,33) output(43,better,6) output(43,better,33) output(1,worse,14) output(1,worse,43) output(1,worse,12) output(3,worse,0) output(3,worse,14) output(3,worse,43) output(3,worse,12) output(6,worse,12) output(11,worse,41) output(11,worse,0) output(11,worse,14) output(11,worse,43) output(11,worse,12) output(41,eq,0) output(41,eq,14) output(41,eq,43) output(41,eq,12) output(0,eq,14) output(0,eq,43) output(0,eq,12) output(14,eq,43) output(14,eq,12) output(43,eq,12)
Optimization: 23 5
Answer: 10
preference(1,(1,12),1,for(neg(atom(hasMajorGrp(0)))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,4),1,for(atom(hasOftenSold(1))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,11),1,for(atom(hasPrice(2))),3) preference(1,less(weight)) output(0,better,1) output(0,better,6) output(0,better,33) output(1,better,6) output(1,better,33) output(3,better,1) output(3,better,6) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,43) output(11,better,6) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,1) output(41,better,6) output(41,better,33) output(43,better,6) output(43,better,33) output(0,worse,14) output(0,worse,12) output(1,worse,14) output(1,worse,43) output(1,worse,12) output(3,worse,14) output(3,worse,12) output(6,worse,12) output(11,worse,14) output(11,worse,12) output(41,worse,14) output(41,worse,12) output(43,worse,12) output(41,eq,3) output(41,eq,0) output(41,eq,43) output(3,eq,0) output(3,eq,43) output(0,eq,43) output(14,eq,12)
Optimization: 20 8
Answer: 11
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,4),1,for(atom(hasOftenSold(1))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,11),1,for(atom(hasPrice(2))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(9))),1) preference(1,less(weight)) output(0,better,1) output(0,better,43) output(0,better,6) output(0,better,33) output(1,better,43) output(1,better,6) output(1,better,33) output(3,better,1) output(3,better,43) output(3,better,6) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,43) output(11,better,6) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,1) output(41,better,43) output(41,better,6) output(41,better,33) output(0,worse,14) output(0,worse,12) output(1,worse,14) output(1,worse,12) output(3,worse,14) output(3,worse,12) output(6,worse,12) output(11,worse,14) output(11,worse,12) output(41,worse,14) output(41,worse,12) output(43,worse,6) output(43,worse,12) output(43,worse,33) output(41,eq,3) output(41,eq,0) output(3,eq,0) output(14,eq,12)
Optimization: 18 10
Answer: 12
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),9) preference(1,(1,2),1,for(atom(hasOftenSold(2))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,5),1,for(atom(hasStyle(0))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,8),1,for(atom(hasOftenSold(0))),2) preference(1,(1,9),1,for(atom(hasPrice(0))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(10))),9) preference(1,(1,12),1,for(atom(hasOftenSold(1))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),1) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(11,better,41) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(6,worse,12) output(6,worse,33) output(11,worse,3) output(11,worse,0) output(41,worse,3) output(41,worse,0) output(41,worse,1) output(43,worse,6) output(43,worse,12) output(43,worse,33) output(11,eq,1) output(3,eq,0) output(14,eq,12)
Optimization: 13 13
Answer: 13
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),9) preference(1,(1,2),1,for(atom(hasOftenSold(2))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,5),1,for(atom(hasStyle(0))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,8),1,for(atom(hasOftenSold(0))),2) preference(1,(1,9),1,for(atom(hasPrice(0))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(10))),9) preference(1,(1,12),1,for(atom(hasOftenSold(1))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),1) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(6,worse,12) output(11,worse,3) output(11,worse,0) output(41,worse,3) output(41,worse,0) output(41,worse,1) output(43,worse,6) output(43,worse,12) output(43,worse,33) output(11,eq,1) output(3,eq,0) output(14,eq,12)
Optimization: 12 13
Progression : [ 1;12] (Error: 11)
Answer: 14
preference(1,(1,12),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,3),1,for(atom(hasOftenSold(1))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,5),1,for(atom(hasOiliness(2))),7) preference(1,(1,6),1,for(atom(hasPrice(3))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,9),1,for(atom(hasOiliness(0))),3) preference(1,(1,10),1,for(atom(hasOiliness(1))),5) preference(1,(1,11),1,for(atom(hasOftenSold(0))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),2) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,0) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,43) output(11,better,6) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,33) output(6,worse,12) output(11,worse,41) output(11,worse,3) output(11,worse,0) output(11,worse,1) output(11,worse,14) output(11,worse,12) output(41,worse,3) output(43,worse,12) output(41,eq,0) output(14,eq,12)
Optimization: 11 14
Answer: 15
preference(1,(1,13),1,for(neg(atom(hasMinorGrp(6)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,3),1,for(atom(hasOftenSold(1))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,5),1,for(atom(hasOftenSold(2))),7) preference(1,(1,6),1,for(atom(hasPrice(3))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,9),1,for(atom(hasOiliness(0))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),5) preference(1,(1,11),1,for(atom(hasPrice(0))),6) preference(1,(1,12),1,for(atom(hasPrice(2))),7) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),2) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,33) output(3,worse,0) output(6,worse,12) output(11,worse,41) output(11,worse,3) output(11,worse,0) output(11,worse,1) output(41,worse,0) output(43,worse,6) output(43,worse,12) output(14,eq,12)
Optimization: 10 14
Answer: 16
preference(1,(1,5),1,for(neg(atom(hasMajorGrp(0)))),6) preference(1,(1,11),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,1),1,for(atom(hasMinorGrp(10))),9) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,3),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,4),1,for(atom(hasOftenSold(2))),7) preference(1,(1,6),1,for(atom(hasPrice(3))),2) preference(1,(1,7),1,for(atom(hasOftenSold(0))),1) preference(1,(1,8),1,for(atom(hasOftenSold(3))),1) preference(1,(1,9),1,for(atom(hasOiliness(0))),6) preference(1,(1,10),1,for(atom(hasPrice(0))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,13),1,for(atom(hasPrice(2))),7) preference(1,(1,14),1,for(atom(hasOftenSold(1))),5) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,12) output(6,better,33) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,33) output(41,better,3) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,33) output(3,worse,0) output(11,worse,41) output(11,worse,0) output(14,worse,6) output(41,worse,0) output(43,worse,6) output(43,worse,12) output(11,eq,3) output(14,eq,12)
Optimization: 9 14
Answer: 17
preference(1,(1,5),1,for(neg(atom(hasMajorGrp(0)))),6) preference(1,(1,11),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,1),1,for(atom(hasMinorGrp(11))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,3),1,for(atom(hasOftenSold(3))),1) preference(1,(1,4),1,for(atom(hasOftenSold(2))),7) preference(1,(1,6),1,for(atom(hasPrice(3))),2) preference(1,(1,7),1,for(atom(hasOftenSold(0))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,10),1,for(atom(hasPrice(1))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,13),1,for(atom(hasPrice(2))),7) preference(1,(1,14),1,for(atom(hasOftenSold(1))),5) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,12) output(6,better,33) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,33) output(3,worse,0) output(11,worse,41) output(11,worse,3) output(11,worse,0) output(14,worse,6) output(43,worse,6) output(43,worse,12) output(14,eq,12)
Optimization: 8 14
Answer: 18
preference(1,(1,10),1,for(neg(atom(hasMinorGrp(6)))),1) preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasOiliness(2))),4) preference(1,(1,2),1,for(atom(hasPrice(0))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,4),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasOftenSold(1))),7) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,8),1,for(atom(hasOftenSold(3))),1) preference(1,(1,9),1,for(atom(hasOiliness(1))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,12),1,for(atom(hasPrice(1))),2) preference(1,(1,14),1,for(atom(hasOiliness(0))),6) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,12) output(1,better,33) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,12) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,12) output(43,better,33) output(1,worse,6) output(14,worse,43) output(14,worse,6) output(43,worse,6) output(3,eq,0) output(14,eq,12)
Optimization: 6 14
Answer: 19
preference(1,(1,10),1,for(neg(atom(hasMinorGrp(6)))),1) preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasOiliness(2))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,3),1,for(atom(hasStyle(0))),8) preference(1,(1,4),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasOftenSold(1))),7) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,8),1,for(atom(hasOftenSold(3))),1) preference(1,(1,9),1,for(atom(hasOiliness(1))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,12),1,for(atom(hasPrice(1))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),3) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,12) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,12) output(43,better,33) output(14,worse,43) output(14,worse,6) output(43,worse,6) output(3,eq,0) output(14,eq,12)
Optimization: 5 14
Progression : [2;5] (Error: 1.5)
Answer: 20
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(6)))),4) preference(1,(1,2),1,for(neg(atom(hasOiliness(2)))),3) preference(1,(1,3),1,for(atom(hasOiliness(2))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,9),1,for(atom(hasOftenSold(1))),10) preference(1,(1,10),1,for(atom(hasOiliness(1))),5) preference(1,(1,11),1,for(atom(hasOftenSold(2))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,14),1,for(atom(hasOiliness(0))),1) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,33) output(6,worse,12) output(43,worse,12) output(3,eq,0) output(14,eq,12)
Optimization: 4 14
Progression : [3;4] (Error: 0.333333)
Answer: 21
preference(1,(1,11),1,for(neg(atom(hasOftenSold(3)))),6) preference(1,(1,1),1,for(atom(hasPrice(3))),6) preference(1,(1,2),1,for(atom(hasOiliness(0))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(11))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasPrice(0))),1) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,12),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasOftenSold(1))),8) preference(1,(1,14),1,for(atom(hasPrice(1))),2) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,0) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,33) output(6,worse,12) output(43,worse,12) output(14,eq,12)
Optimization: 3 14
Progression : 3 [ 1;14] (Error: 13)
Answer: 22
preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),3) preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,2),1,for(atom(hasPrice(1))),7) preference(1,(1,3),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,8),1,for(atom(hasOftenSold(2))),6) preference(1,(1,9),1,for(atom(hasOftenSold(1))),10) preference(1,(1,10),1,for(atom(hasOiliness(1))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,0) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,12) output(43,better,33) output(6,worse,12) output(14,worse,43) output(14,eq,12)
Optimization: 3 13
Answer: 23
preference(1,(1,2),1,for(neg(atom(hasStyle(1)))),5) preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),4) preference(1,(1,1),1,for(atom(hasPrice(3))),1) preference(1,(1,3),1,for(atom(hasOftenSold(1))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,8),1,for(atom(hasOiliness(1))),2) preference(1,(1,9),1,for(atom(hasOiliness(0))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,13),1,for(atom(hasPrice(1))),4) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,0) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,12) output(43,better,33) output(6,worse,12) output(14,worse,43) output(14,eq,12)
Optimization: 3 12
Answer: 24
preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),4) preference(1,(1,1),1,for(atom(hasPrice(3))),1) preference(1,(1,2),1,for(atom(hasPrice(0))),3) preference(1,(1,3),1,for(atom(hasOftenSold(1))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,8),1,for(atom(hasOiliness(1))),2) preference(1,(1,9),1,for(atom(hasOiliness(0))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,13),1,for(atom(hasPrice(1))),4) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,0) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,12) output(43,better,33) output(6,worse,12) output(14,worse,43) output(14,eq,12)
Optimization: 3 11
Answer: 25
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),3) preference(1,(1,13),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(4))),7) preference(1,(1,4),1,for(atom(hasOftenSold(1))),5) preference(1,(1,5),1,for(atom(hasPrice(1))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,10),1,for(atom(hasOiliness(1))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),1) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,0) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,43) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,33) output(6,worse,12) output(43,worse,12) output(14,eq,12)
Optimization: 3 10
Progression : 3 [ 2;10] (Error: 4)
Answer: 26
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,5),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,6),1,for(atom(hasOftenSold(2))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,8),1,for(atom(hasOiliness(0))),5) preference(1,(1,9),1,for(atom(hasPrice(1))),2) preference(1,(1,10),1,for(atom(hasOftenSold(1))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,0) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,12) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,12) output(43,better,33) output(14,worse,43) output(14,worse,6) output(14,eq,12)
Optimization: 3 9
Answer: 27
preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,14),1,for(neg(atom(hasOftenSold(3)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,9),1,for(atom(hasPrice(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,12),1,for(atom(hasOftenSold(1))),7) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,0) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,6) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,12) output(43,better,33) output(6,worse,12) output(14,worse,43) output(14,eq,12)
Optimization: 3 8
Answer: 28
preference(1,(1,1),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,5),1,for(atom(hasPrice(0))),7) preference(1,(1,7),1,for(atom(hasPrice(1))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,13),1,for(atom(hasOftenSold(1))),5) preference(1,less(weight)) output(0,better,1) output(0,better,14) output(0,better,43) output(0,better,6) output(0,better,12) output(0,better,33) output(1,better,14) output(1,better,43) output(1,better,6) output(1,better,12) output(1,better,33) output(3,better,0) output(3,better,1) output(3,better,14) output(3,better,43) output(3,better,6) output(3,better,12) output(3,better,33) output(6,better,12) output(6,better,33) output(11,better,41) output(11,better,3) output(11,better,0) output(11,better,1) output(11,better,14) output(11,better,43) output(11,better,6) output(11,better,12) output(11,better,33) output(12,better,33) output(14,better,33) output(41,better,3) output(41,better,0) output(41,better,1) output(41,better,14) output(41,better,43) output(41,better,6) output(41,better,12) output(41,better,33) output(43,better,6) output(43,better,12) output(43,better,33) output(14,worse,43) output(14,worse,6) output(14,eq,12)
Optimization: 3 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.216 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 28+
  Optimum    : unknown
Optimization : 3 7
Bounds       : 3 [2;7]
Calls        : 1
Time         : 597.610s (Solving: 584.18s 1st Model: 0.08s Unsat: 0.00s)
CPU Time     : 2348.707s
Threads      : 4        (Winner: 4)

Choices      : 8821502  (Domain: 2770)
Conflicts    : 1934994  (Analyzed: 1934989)
Restarts     : 1689     (Average: 1145.64 Last: 202066)
Model-Level  : 1532.8  
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 1941778  (Deleted: 1766777)
  Binary     : 783      (Ratio:   0.04%)
  Ternary    : 408      (Ratio:   0.02%)
  Conflict   : 1934986  (Average Length: 1741.4 Ratio:  99.65%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 6792     (Average Length:  131.0 Ratio:   0.35%) 
  Distributed: 2265     (Ratio:   0.12% Average LBD: 3.44) 
  Integrated : 6795     (Ratio: 300.00% Unit: 75 Average Jumps: 89.15)
Backjumps    : 1934989  (Average:  3.05 Max: 3482 Sum: 5908479)
  Executed   : 1934961  (Average:  3.05 Max: 3482 Sum: 5908188 Ratio: 100.00%)
  Bounded    : 28       (Average: 10.39 Max:  43 Sum:    291 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(5)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasPrice(2)) ; 
  6 :: not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  7 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasPrice(2)) ; 
  1 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasStyle(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasPrice(0)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasMinorGrp(10)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasStyle(0)) ; 
  4 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasPrice(0)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasMinorGrp(10)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasPrice(3)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  10 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasPrice(3)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  6 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasPrice(0)) ; 
  7 :: atom(hasPrice(2)) ; 
  1 :: not atom(hasMinorGrp(6))  ; 
  2 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(10)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  6 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasPrice(3)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  4 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasPrice(2)) ; 
  5 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(11)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  6 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasPrice(3)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  4 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasPrice(2)) ; 
  5 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(2)) ; 
  3 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasMinorGrp(6))  ; 
  10 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasPrice(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasStyle(0)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasMinorGrp(6))  ; 
  10 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasPrice(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasMinorGrp(6))  ; 
  3 :: not atom(hasOiliness(2))  ; 
  4 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(3)) ; 
  5 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMinorGrp(11)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  6 :: not atom(hasOftenSold(3))  ; 
  2 :: atom(hasOftenSold(3)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  7 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  3 :: not atom(hasMajorGrp(0))  ; 
  4 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(3)) ; 
  5 :: not atom(hasStyle(1))  ; 
  4 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  4 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(3)) ; 
  3 :: atom(hasPrice(0)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  4 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasPrice(1)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  5 :: not atom(hasMajorGrp(0))  ; 
  3 :: not atom(hasOiliness(1))  ; 
  3 :: atom(hasOiliness(1)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  1 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasPrice(1)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(6)) ; 
  5 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  1 :: not atom(hasOftenSold(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasPrice(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasOftenSold(1)) 
}.
