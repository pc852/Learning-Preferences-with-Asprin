asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(25,eq,0) output(25,eq,6) output(25,eq,8) output(25,eq,5) output(25,eq,3) output(25,eq,19) output(25,eq,47) output(25,eq,81) output(25,eq,84) output(0,eq,6) output(0,eq,8) output(0,eq,5) output(0,eq,3) output(0,eq,19) output(0,eq,47) output(0,eq,81) output(0,eq,84) output(6,eq,8) output(6,eq,5) output(6,eq,3) output(6,eq,19) output(6,eq,47) output(6,eq,81) output(6,eq,84) output(8,eq,5) output(8,eq,3) output(8,eq,19) output(8,eq,47) output(8,eq,81) output(8,eq,84) output(5,eq,3) output(5,eq,19) output(5,eq,47) output(5,eq,81) output(5,eq,84) output(3,eq,19) output(3,eq,47) output(3,eq,81) output(3,eq,84) output(19,eq,47) output(19,eq,81) output(19,eq,84) output(47,eq,81) output(47,eq,84) output(81,eq,84)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,6) output(25,better,6) output(6,worse,8) output(6,worse,5) output(6,worse,3) output(6,worse,19) output(6,worse,47) output(6,worse,81) output(6,worse,84) output(25,eq,0) output(25,eq,8) output(25,eq,5) output(25,eq,3) output(25,eq,19) output(25,eq,47) output(25,eq,81) output(25,eq,84) output(0,eq,8) output(0,eq,5) output(0,eq,3) output(0,eq,19) output(0,eq,47) output(0,eq,81) output(0,eq,84) output(8,eq,5) output(8,eq,3) output(8,eq,19) output(8,eq,47) output(8,eq,81) output(8,eq,84) output(5,eq,3) output(5,eq,19) output(5,eq,47) output(5,eq,81) output(5,eq,84) output(3,eq,19) output(3,eq,47) output(3,eq,81) output(3,eq,84) output(19,eq,47) output(19,eq,81) output(19,eq,84) output(47,eq,81) output(47,eq,84) output(81,eq,84)
Optimization: 43 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,6) output(0,better,84) output(3,better,84) output(5,better,84) output(8,better,84) output(19,better,84) output(25,better,6) output(25,better,84) output(47,better,84) output(81,better,84) output(6,worse,8) output(6,worse,5) output(6,worse,3) output(6,worse,19) output(6,worse,47) output(6,worse,81) output(25,eq,0) output(25,eq,8) output(25,eq,5) output(25,eq,3) output(25,eq,19) output(25,eq,47) output(25,eq,81) output(0,eq,8) output(0,eq,5) output(0,eq,3) output(0,eq,19) output(0,eq,47) output(0,eq,81) output(6,eq,84) output(8,eq,5) output(8,eq,3) output(8,eq,19) output(8,eq,47) output(8,eq,81) output(5,eq,3) output(5,eq,19) output(5,eq,47) output(5,eq,81) output(3,eq,19) output(3,eq,47) output(3,eq,81) output(19,eq,47) output(19,eq,81) output(47,eq,81)
Optimization: 35 2
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,6) output(0,better,19) output(0,better,84) output(3,better,19) output(3,better,84) output(5,better,19) output(5,better,84) output(8,better,19) output(8,better,84) output(25,better,6) output(25,better,19) output(25,better,84) output(47,better,84) output(81,better,84) output(6,worse,8) output(6,worse,5) output(6,worse,3) output(6,worse,47) output(6,worse,81) output(19,worse,47) output(19,worse,81) output(25,eq,0) output(25,eq,8) output(25,eq,5) output(25,eq,3) output(25,eq,47) output(25,eq,81) output(0,eq,8) output(0,eq,5) output(0,eq,3) output(0,eq,47) output(0,eq,81) output(6,eq,19) output(6,eq,84) output(8,eq,5) output(8,eq,3) output(8,eq,47) output(8,eq,81) output(5,eq,3) output(5,eq,47) output(5,eq,81) output(3,eq,47) output(3,eq,81) output(19,eq,84) output(47,eq,81)
Optimization: 31 3
Answer: 5
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,6) output(0,better,81) output(0,better,84) output(3,better,81) output(3,better,84) output(5,better,81) output(5,better,84) output(8,better,81) output(8,better,84) output(19,better,81) output(19,better,84) output(25,better,6) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(6,worse,8) output(6,worse,5) output(6,worse,3) output(6,worse,19) output(6,worse,47) output(25,eq,0) output(25,eq,8) output(25,eq,5) output(25,eq,3) output(25,eq,19) output(25,eq,47) output(0,eq,8) output(0,eq,5) output(0,eq,3) output(0,eq,19) output(0,eq,47) output(6,eq,81) output(6,eq,84) output(8,eq,5) output(8,eq,3) output(8,eq,19) output(8,eq,47) output(5,eq,3) output(5,eq,19) output(5,eq,47) output(3,eq,19) output(3,eq,47) output(19,eq,47) output(81,eq,84)
Optimization: 29 3
Answer: 6
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,11),1,for(atom(hasOiliness(3))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(0,better,6) output(0,better,5) output(0,better,81) output(0,better,84) output(3,better,81) output(3,better,84) output(8,better,5) output(8,better,81) output(8,better,84) output(19,better,81) output(19,better,84) output(25,better,6) output(25,better,5) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(5,worse,3) output(5,worse,19) output(5,worse,47) output(6,worse,8) output(6,worse,3) output(6,worse,19) output(6,worse,47) output(25,eq,0) output(25,eq,8) output(25,eq,3) output(25,eq,19) output(25,eq,47) output(0,eq,8) output(0,eq,3) output(0,eq,19) output(0,eq,47) output(6,eq,5) output(6,eq,81) output(6,eq,84) output(8,eq,3) output(8,eq,19) output(8,eq,47) output(5,eq,81) output(5,eq,84) output(3,eq,19) output(3,eq,47) output(19,eq,47) output(81,eq,84)
Optimization: 28 4
Answer: 7
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(10))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,13),1,for(atom(hasOftenSold(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(0,better,6) output(0,better,19) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,81) output(3,better,84) output(5,better,19) output(5,better,81) output(5,better,84) output(8,better,19) output(8,better,81) output(8,better,84) output(25,better,6) output(25,better,19) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(6,worse,8) output(6,worse,5) output(6,worse,3) output(6,worse,47) output(19,worse,47) output(25,eq,0) output(25,eq,8) output(25,eq,5) output(25,eq,3) output(25,eq,47) output(0,eq,8) output(0,eq,5) output(0,eq,3) output(0,eq,47) output(6,eq,19) output(6,eq,81) output(6,eq,84) output(8,eq,5) output(8,eq,3) output(8,eq,47) output(5,eq,3) output(5,eq,47) output(3,eq,47) output(19,eq,81) output(19,eq,84) output(81,eq,84)
Optimization: 26 5
Answer: 8
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,12),1,for(atom(hasOftenSold(2))),10) preference(1,(1,13),1,for(atom(hasPrice(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(0,better,5) output(0,better,19) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,81) output(3,better,84) output(6,better,5) output(6,better,19) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,19) output(8,better,81) output(8,better,84) output(25,better,5) output(25,better,19) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(5,worse,3) output(5,worse,47) output(19,worse,47) output(25,eq,0) output(25,eq,6) output(25,eq,8) output(25,eq,3) output(25,eq,47) output(0,eq,6) output(0,eq,8) output(0,eq,3) output(0,eq,47) output(6,eq,8) output(6,eq,3) output(6,eq,47) output(8,eq,3) output(8,eq,47) output(5,eq,19) output(5,eq,81) output(5,eq,84) output(3,eq,47) output(19,eq,81) output(19,eq,84) output(81,eq,84)
Optimization: 24 4
Answer: 9
preference(1,(1,11),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,7),1,for(atom(hasOiliness(3))),1) preference(1,(1,8),1,for(atom(hasOftenSold(2))),6) preference(1,(1,10),1,for(atom(hasMajorGrp(0))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),8) preference(1,(1,13),1,for(atom(hasOftenSold(1))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(10))),10) preference(1,less(weight)) output(0,better,6) output(0,better,5) output(0,better,19) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,81) output(3,better,84) output(5,better,19) output(5,better,84) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,84) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84) output(0,worse,8) output(5,worse,3) output(5,worse,47) output(6,worse,8) output(6,worse,5) output(6,worse,3) output(6,worse,19) output(6,worse,47) output(6,worse,81) output(19,worse,47) output(19,worse,81) output(25,worse,0) output(25,worse,8) output(25,worse,5) output(25,worse,3) output(25,worse,19) output(25,worse,47) output(25,worse,81) output(25,eq,6) output(0,eq,3) output(0,eq,47) output(5,eq,81) output(3,eq,47)
Optimization: 23 12
Answer: 10
preference(1,(1,11),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,5),1,for(atom(hasPrice(2))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,7),1,for(atom(hasOiliness(3))),1) preference(1,(1,8),1,for(atom(hasOftenSold(2))),6) preference(1,(1,9),1,for(atom(hasOiliness(1))),9) preference(1,(1,10),1,for(atom(hasMajorGrp(0))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),8) preference(1,(1,13),1,for(atom(hasOftenSold(1))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(10))),10) preference(1,less(weight)) output(0,better,6) output(0,better,5) output(0,better,19) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,81) output(3,better,84) output(5,better,19) output(5,better,81) output(5,better,84) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,81) output(19,better,84) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84) output(0,worse,8) output(5,worse,3) output(5,worse,47) output(6,worse,8) output(6,worse,5) output(6,worse,3) output(6,worse,19) output(6,worse,47) output(6,worse,81) output(19,worse,47) output(25,worse,0) output(25,worse,6) output(25,worse,8) output(25,worse,5) output(25,worse,3) output(25,worse,19) output(25,worse,47) output(25,worse,81) output(0,eq,3) output(0,eq,47) output(3,eq,47)
Optimization: 21 14
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),1) preference(1,(1,9),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,12),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,2),1,for(atom(hasOftenSold(2))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,5),1,for(atom(hasPrice(0))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,7),1,for(atom(hasOiliness(3))),2) preference(1,(1,8),1,for(atom(hasOiliness(2))),1) preference(1,(1,10),1,for(atom(hasMajorGrp(0))),7) preference(1,(1,11),1,for(atom(hasOiliness(1))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,14),1,for(atom(hasPrice(1))),4) preference(1,less(weight)) output(0,better,19) output(0,better,81) output(3,better,19) output(3,better,81) output(5,better,3) output(5,better,19) output(5,better,81) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,81) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,81) output(25,better,0) output(25,better,6) output(25,better,5) output(25,better,3) output(25,better,19) output(25,better,47) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(0,worse,6) output(0,worse,8) output(0,worse,5) output(0,worse,47) output(0,worse,84) output(3,worse,47) output(3,worse,84) output(5,worse,47) output(5,worse,84) output(6,worse,8) output(6,worse,47) output(6,worse,84) output(19,worse,47) output(19,worse,84) output(25,worse,8) output(81,worse,84) output(0,eq,3)
Optimization: 17 14
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),7) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,2),1,for(atom(hasOftenSold(2))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,4),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,7),1,for(atom(hasPrice(2))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,12),1,for(atom(hasPrice(0))),4) preference(1,(1,13),1,for(atom(hasOftenSold(0))),2) preference(1,(1,14),1,for(atom(hasPrice(1))),7) preference(1,less(weight)) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,47) output(19,better,81) output(19,better,84) output(25,better,84) output(47,better,84) output(81,better,84) output(0,worse,6) output(0,worse,8) output(3,worse,19) output(3,worse,47) output(3,worse,81) output(6,worse,8) output(25,worse,0) output(25,worse,6) output(25,worse,8) output(25,worse,5) output(25,worse,3) output(25,worse,19) output(25,worse,47) output(25,worse,81) output(0,eq,5) output(47,eq,81)
Optimization: 16 14
Answer: 13
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),7) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,2),1,for(atom(hasOftenSold(2))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,4),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,7),1,for(atom(hasPrice(2))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),8) preference(1,(1,10),1,for(atom(hasStyle(0))),1) preference(1,(1,12),1,for(atom(hasPrice(0))),4) preference(1,(1,13),1,for(atom(hasOftenSold(0))),2) preference(1,(1,14),1,for(atom(hasPrice(1))),7) preference(1,less(weight)) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,8) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,47) output(19,better,81) output(19,better,84) output(25,better,84) output(47,better,84) output(81,better,84) output(0,worse,6) output(0,worse,8) output(3,worse,19) output(3,worse,47) output(3,worse,81) output(25,worse,0) output(25,worse,6) output(25,worse,8) output(25,worse,5) output(25,worse,3) output(25,worse,19) output(25,worse,47) output(25,worse,81) output(0,eq,5) output(47,eq,81)
Optimization: 15 14
Answer: 14
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),7) preference(1,(1,2),1,for(atom(hasOftenSold(2))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,4),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,7),1,for(atom(hasPrice(2))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),8) preference(1,(1,10),1,for(atom(hasStyle(0))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),2) preference(1,(1,12),1,for(atom(hasPrice(0))),4) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,14),1,for(atom(hasPrice(1))),7) preference(1,less(weight)) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,8) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,47) output(19,better,81) output(19,better,84) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84) output(0,worse,6) output(0,worse,8) output(3,worse,19) output(3,worse,47) output(25,worse,0) output(25,worse,6) output(25,worse,8) output(25,worse,5) output(25,worse,3) output(25,worse,19) output(25,worse,47) output(25,worse,81) output(0,eq,5) output(3,eq,81)
Optimization: 14 14
Answer: 15
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),7) preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,2),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,4),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,8),1,for(atom(hasOftenSold(0))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),8) preference(1,(1,10),1,for(atom(hasStyle(0))),1) preference(1,(1,11),1,for(atom(hasOftenSold(2))),2) preference(1,(1,12),1,for(atom(hasPrice(0))),4) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,14),1,for(atom(hasPrice(1))),7) preference(1,less(weight)) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,8) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,84) output(25,better,3) output(25,better,19) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84) output(0,worse,6) output(0,worse,8) output(3,worse,47) output(19,worse,47) output(25,worse,0) output(25,worse,6) output(25,worse,8) output(25,worse,5) output(25,worse,47) output(0,eq,5) output(3,eq,19) output(3,eq,81) output(19,eq,81)
Optimization: 13 14
Answer: 16
preference(1,(1,8),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasPrice(3)))),3) preference(1,(1,1),1,for(atom(hasPrice(1))),7) preference(1,(1,2),1,for(atom(hasOftenSold(2))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,6),1,for(atom(hasPrice(3))),2) preference(1,(1,7),1,for(atom(hasPrice(0))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,10),1,for(atom(hasOiliness(3))),5) preference(1,(1,12),1,for(atom(hasOftenSold(1))),6) preference(1,(1,13),1,for(atom(hasOiliness(1))),7) preference(1,less(weight)) output(0,better,6) output(0,better,5) output(0,better,3) output(0,better,19) output(0,better,81) output(0,better,84) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,81) output(5,better,84) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,81) output(8,better,84) output(19,better,81) output(19,better,84) output(25,better,0) output(25,better,6) output(25,better,5) output(25,better,3) output(25,better,19) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84) output(0,worse,8) output(0,worse,47) output(3,worse,19) output(3,worse,47) output(5,worse,47) output(6,worse,8) output(6,worse,47) output(8,worse,47) output(19,worse,47) output(25,worse,8) output(25,worse,47) output(3,eq,81)
Optimization: 12 14
Answer: 17
preference(1,(1,6),1,for(neg(atom(hasMinorGrp(5)))),2) preference(1,(1,8),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasPrice(3)))),3) preference(1,(1,1),1,for(atom(hasPrice(1))),7) preference(1,(1,2),1,for(atom(hasOftenSold(2))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,7),1,for(atom(hasPrice(0))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,10),1,for(atom(hasOiliness(3))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,13),1,for(atom(hasOiliness(1))),7) preference(1,less(weight)) output(0,better,6) output(0,better,5) output(0,better,3) output(0,better,19) output(0,better,81) output(0,better,84) output(3,better,81) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,81) output(5,better,84) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,81) output(8,better,84) output(19,better,81) output(19,better,84) output(25,better,0) output(25,better,6) output(25,better,5) output(25,better,3) output(25,better,19) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84) output(0,worse,8) output(0,worse,47) output(3,worse,19) output(3,worse,47) output(5,worse,47) output(6,worse,8) output(6,worse,47) output(8,worse,47) output(19,worse,47) output(25,worse,8) output(25,worse,47)
Optimization: 11 14
Answer: 18
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),2) preference(1,(1,14),1,for(neg(atom(hasPrice(2)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,3),1,for(atom(hasOiliness(1))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(10))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,7),1,for(atom(hasOiliness(3))),4) preference(1,(1,8),1,for(atom(hasOftenSold(2))),9) preference(1,(1,9),1,for(atom(hasOiliness(2))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,11),1,for(atom(hasPrice(1))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(5))),10) preference(1,(1,13),1,for(atom(hasOftenSold(0))),10) preference(1,less(weight)) output(0,better,6) output(0,better,8) output(0,better,5) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,47) output(3,better,81) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,8) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,47) output(19,better,81) output(19,better,84) output(25,better,0) output(25,better,6) output(25,better,8) output(25,better,5) output(25,better,3) output(25,better,19) output(25,better,47) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 19
preference(1,(1,2),1,for(neg(atom(hasOftenSold(3)))),2) preference(1,(1,3),1,for(atom(hasOiliness(3))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,5),1,for(atom(hasOftenSold(0))),7) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,8),1,for(atom(hasOiliness(1))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),9) preference(1,(1,10),1,for(atom(hasOiliness(2))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,12),1,for(atom(hasOiliness(0))),2) preference(1,(1,13),1,for(atom(hasOftenSold(2))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),1) preference(1,less(weight)) output(0,better,6) output(0,better,8) output(0,better,5) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,47) output(3,better,81) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,8) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,47) output(19,better,81) output(19,better,84) output(25,better,0) output(25,better,6) output(25,better,8) output(25,better,5) output(25,better,3) output(25,better,19) output(25,better,47) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84)
Optimization: 0 13
Answer: 20
preference(1,(1,8),1,for(neg(atom(hasOftenSold(3)))),3) preference(1,(1,10),1,for(neg(atom(hasPrice(2)))),6) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),4) preference(1,(1,1),1,for(atom(hasMinorGrp(10))),9) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,3),1,for(atom(hasOiliness(2))),1) preference(1,(1,4),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,5),1,for(atom(hasPrice(3))),4) preference(1,(1,7),1,for(atom(hasOftenSold(0))),8) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(5))),8) preference(1,less(weight)) output(0,better,6) output(0,better,8) output(0,better,5) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,47) output(3,better,81) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,8) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,47) output(19,better,81) output(19,better,84) output(25,better,0) output(25,better,6) output(25,better,8) output(25,better,5) output(25,better,3) output(25,better,19) output(25,better,47) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84)
Optimization: 0 12
Progression : 0 [ 2;12] (Error: 5)
Answer: 21
preference(1,(1,1),1,for(atom(hasOftenSold(0))),9) preference(1,(1,2),1,for(atom(hasPrice(3))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,6),1,for(atom(hasOftenSold(2))),5) preference(1,(1,7),1,for(atom(hasPrice(1))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),9) preference(1,(1,12),1,for(atom(hasPrice(0))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(10))),10) preference(1,less(weight)) output(0,better,6) output(0,better,8) output(0,better,5) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,47) output(3,better,81) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,8) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,47) output(19,better,81) output(19,better,84) output(25,better,0) output(25,better,6) output(25,better,8) output(25,better,5) output(25,better,3) output(25,better,19) output(25,better,47) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84)
Optimization: 0 11
Answer: 22
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),2) preference(1,(1,2),1,for(atom(hasOftenSold(0))),9) preference(1,(1,3),1,for(atom(hasOiliness(2))),4) preference(1,(1,4),1,for(atom(hasOiliness(0))),2) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(5))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,12),1,for(atom(hasOftenSold(2))),7) preference(1,(1,14),1,for(atom(hasOiliness(1))),7) preference(1,less(weight)) output(0,better,6) output(0,better,8) output(0,better,5) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,47) output(3,better,81) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,8) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,47) output(19,better,81) output(19,better,84) output(25,better,0) output(25,better,6) output(25,better,8) output(25,better,5) output(25,better,3) output(25,better,19) output(25,better,47) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84)
Optimization: 0 10
Answer: 23
preference(1,(1,10),1,for(neg(atom(hasOftenSold(3)))),6) preference(1,(1,13),1,for(neg(atom(hasPrice(2)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(10))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,3),1,for(atom(hasOftenSold(0))),7) preference(1,(1,4),1,for(atom(hasOiliness(1))),5) preference(1,(1,6),1,for(atom(hasOiliness(0))),4) preference(1,(1,7),1,for(atom(hasOiliness(2))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),3) preference(1,less(weight)) output(0,better,6) output(0,better,8) output(0,better,5) output(0,better,3) output(0,better,19) output(0,better,47) output(0,better,81) output(0,better,84) output(3,better,19) output(3,better,47) output(3,better,81) output(3,better,84) output(5,better,3) output(5,better,19) output(5,better,47) output(5,better,81) output(5,better,84) output(6,better,8) output(6,better,5) output(6,better,3) output(6,better,19) output(6,better,47) output(6,better,81) output(6,better,84) output(8,better,5) output(8,better,3) output(8,better,19) output(8,better,47) output(8,better,81) output(8,better,84) output(19,better,47) output(19,better,81) output(19,better,84) output(25,better,0) output(25,better,6) output(25,better,8) output(25,better,5) output(25,better,3) output(25,better,19) output(25,better,47) output(25,better,81) output(25,better,84) output(47,better,81) output(47,better,84) output(81,better,84)
Optimization: 0 9
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.129 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 23+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 598.261s (Solving: 582.79s 1st Model: 0.08s Unsat: 0.00s)
CPU Time     : 2345.034s
Threads      : 4        (Winner: 4)

Choices      : 10583712 (Domain: 2444)
Conflicts    : 1933333  (Analyzed: 1933331)
Restarts     : 2099     (Average: 921.07 Last: 200378)
Model-Level  : 1127.8  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1937564  (Deleted: 1780048)
  Binary     : 460      (Ratio:   0.02%)
  Ternary    : 162      (Ratio:   0.01%)
  Conflict   : 1933331  (Average Length: 1945.9 Ratio:  99.78%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 4233     (Average Length:  239.6 Ratio:   0.22%) 
  Distributed: 1411     (Ratio:   0.07% Average LBD: 3.41) 
  Integrated : 4233     (Ratio: 300.00% Unit: 18 Average Jumps: 287.28)
Backjumps    : 1933331  (Average:  3.37 Max: 3617 Sum: 6506691)
  Executed   : 1933330  (Average:  3.37 Max: 3617 Sum: 6506660 Ratio: 100.00%)
  Bounded    : 1        (Average: 31.00 Max:  31 Sum:     31 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(10)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasOiliness(3)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMajorGrp(0)) ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  8 :: atom(hasMinorGrp(8)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasPrice(2)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasOiliness(3)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMajorGrp(0)) ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  8 :: atom(hasMinorGrp(8)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOftenSold(3))  ; 
  10 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasOiliness(3)) ; 
  1 :: atom(hasOiliness(2)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  7 :: atom(hasMajorGrp(0)) ; 
  2 :: atom(hasOiliness(1)) ; 
  2 :: not atom(hasPrice(3))  ; 
  9 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasOftenSold(3))  ; 
  7 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  8 :: atom(hasMinorGrp(10)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  4 :: atom(hasPrice(0)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasOftenSold(3))  ; 
  7 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  8 :: atom(hasMinorGrp(10)) ; 
  1 :: atom(hasStyle(0)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  4 :: atom(hasPrice(0)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasOftenSold(3))  ; 
  7 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasPrice(2)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasMinorGrp(10)) ; 
  1 :: atom(hasStyle(0)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasOftenSold(3))  ; 
  10 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMinorGrp(10)) ; 
  1 :: atom(hasStyle(0)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(1)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasPrice(3)) ; 
  4 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasOiliness(1))  ; 
  4 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasOiliness(3)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasOiliness(1)) ; 
  3 :: not atom(hasPrice(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(1)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasMinorGrp(5))  ; 
  4 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasOiliness(1))  ; 
  4 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasOiliness(3)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasOiliness(1)) ; 
  3 :: not atom(hasPrice(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(7)) ; 
  2 :: not atom(hasOftenSold(2))  ; 
  6 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasMinorGrp(10)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOiliness(3)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasOiliness(2)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasPrice(1)) ; 
  10 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  1 :: not atom(hasPrice(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasOftenSold(3))  ; 
  2 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasOiliness(1)) ; 
  9 :: atom(hasMinorGrp(10)) ; 
  3 :: atom(hasOiliness(2)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(10)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasPrice(3)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  3 :: not atom(hasOftenSold(3))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  6 :: not atom(hasPrice(2))  ; 
  4 :: not atom(hasMajorGrp(0))  ; 
  7 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(3)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasPrice(1)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasMinorGrp(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasOftenSold(3))  ; 
  9 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasMinorGrp(5)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(10)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasOiliness(2)) ; 
  6 :: not atom(hasOftenSold(3))  ; 
  9 :: not atom(hasPrice(2))  ; 
  3 :: atom(hasMinorGrp(1)) 
}.
