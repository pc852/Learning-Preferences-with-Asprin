asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,45) output(42,eq,35) output(42,eq,12) output(42,eq,28) output(42,eq,34) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,45) output(10,eq,35) output(10,eq,12) output(10,eq,28) output(10,eq,34) output(44,eq,2) output(44,eq,50) output(44,eq,45) output(44,eq,35) output(44,eq,12) output(44,eq,28) output(44,eq,34) output(2,eq,50) output(2,eq,45) output(2,eq,35) output(2,eq,12) output(2,eq,28) output(2,eq,34) output(50,eq,45) output(50,eq,35) output(50,eq,12) output(50,eq,28) output(50,eq,34) output(45,eq,35) output(45,eq,12) output(45,eq,28) output(45,eq,34) output(35,eq,12) output(35,eq,28) output(35,eq,34) output(12,eq,28) output(12,eq,34) output(28,eq,34)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(10,better,44) output(10,better,50) output(42,worse,10) output(42,worse,2) output(42,worse,45) output(42,worse,35) output(42,worse,12) output(42,worse,28) output(42,worse,34) output(44,worse,2) output(44,worse,45) output(44,worse,35) output(44,worse,12) output(44,worse,28) output(44,worse,34) output(50,worse,45) output(50,worse,35) output(50,worse,12) output(50,worse,28) output(50,worse,34) output(42,eq,44) output(42,eq,50) output(10,eq,2) output(10,eq,45) output(10,eq,35) output(10,eq,12) output(10,eq,28) output(10,eq,34) output(44,eq,50) output(2,eq,45) output(2,eq,35) output(2,eq,12) output(2,eq,28) output(2,eq,34) output(45,eq,35) output(45,eq,12) output(45,eq,28) output(45,eq,34) output(35,eq,12) output(35,eq,28) output(35,eq,34) output(12,eq,28) output(12,eq,34) output(28,eq,34)
Optimization: 42 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(2,better,45) output(10,better,44) output(10,better,50) output(10,better,45) output(42,worse,10) output(42,worse,2) output(42,worse,35) output(42,worse,12) output(42,worse,28) output(42,worse,34) output(44,worse,2) output(44,worse,35) output(44,worse,12) output(44,worse,28) output(44,worse,34) output(45,worse,35) output(45,worse,12) output(45,worse,28) output(45,worse,34) output(50,worse,35) output(50,worse,12) output(50,worse,28) output(50,worse,34) output(42,eq,44) output(42,eq,50) output(42,eq,45) output(10,eq,2) output(10,eq,35) output(10,eq,12) output(10,eq,28) output(10,eq,34) output(44,eq,50) output(44,eq,45) output(2,eq,35) output(2,eq,12) output(2,eq,28) output(2,eq,34) output(50,eq,45) output(35,eq,12) output(35,eq,28) output(35,eq,34) output(12,eq,28) output(12,eq,34) output(28,eq,34)
Optimization: 40 2
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(2,better,45) output(2,better,12) output(10,better,44) output(10,better,50) output(10,better,45) output(10,better,12) output(35,better,12) output(12,worse,28) output(12,worse,34) output(42,worse,10) output(42,worse,2) output(42,worse,35) output(42,worse,28) output(42,worse,34) output(44,worse,2) output(44,worse,35) output(44,worse,28) output(44,worse,34) output(45,worse,35) output(45,worse,28) output(45,worse,34) output(50,worse,35) output(50,worse,28) output(50,worse,34) output(42,eq,44) output(42,eq,50) output(42,eq,45) output(42,eq,12) output(10,eq,2) output(10,eq,35) output(10,eq,28) output(10,eq,34) output(44,eq,50) output(44,eq,45) output(44,eq,12) output(2,eq,35) output(2,eq,28) output(2,eq,34) output(50,eq,45) output(50,eq,12) output(45,eq,12) output(35,eq,28) output(35,eq,34) output(28,eq,34)
Optimization: 37 3
Answer: 5
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(2,better,45) output(2,better,28) output(10,better,44) output(10,better,50) output(10,better,45) output(10,better,28) output(12,better,28) output(35,better,28) output(28,worse,34) output(42,worse,10) output(42,worse,2) output(42,worse,35) output(42,worse,12) output(42,worse,34) output(44,worse,2) output(44,worse,35) output(44,worse,12) output(44,worse,34) output(45,worse,35) output(45,worse,12) output(45,worse,34) output(50,worse,35) output(50,worse,12) output(50,worse,34) output(42,eq,44) output(42,eq,50) output(42,eq,45) output(42,eq,28) output(10,eq,2) output(10,eq,35) output(10,eq,12) output(10,eq,34) output(44,eq,50) output(44,eq,45) output(44,eq,28) output(2,eq,35) output(2,eq,12) output(2,eq,34) output(50,eq,45) output(50,eq,28) output(45,eq,28) output(35,eq,12) output(35,eq,34) output(12,eq,34)
Optimization: 36 3
Answer: 6
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasOftenSold(2))),10) preference(1,less(weight)) output(2,better,45) output(2,better,12) output(10,better,45) output(10,better,12) output(35,better,12) output(42,better,45) output(42,better,12) output(44,better,45) output(44,better,12) output(50,better,45) output(50,better,12) output(12,worse,28) output(12,worse,34) output(45,worse,35) output(45,worse,28) output(45,worse,34) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,35) output(42,eq,28) output(42,eq,34) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,35) output(10,eq,28) output(10,eq,34) output(44,eq,2) output(44,eq,50) output(44,eq,35) output(44,eq,28) output(44,eq,34) output(2,eq,50) output(2,eq,35) output(2,eq,28) output(2,eq,34) output(50,eq,35) output(50,eq,28) output(50,eq,34) output(45,eq,12) output(35,eq,28) output(35,eq,34) output(28,eq,34)
Optimization: 34 2
Answer: 7
preference(1,(1,12),1,for(atom(hasPrice(2))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,50) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(35,better,28) output(35,better,34) output(45,better,28) output(45,better,34) output(42,worse,10) output(42,worse,2) output(42,worse,45) output(42,worse,35) output(42,worse,12) output(44,worse,2) output(44,worse,45) output(44,worse,35) output(44,worse,12) output(50,worse,45) output(50,worse,35) output(50,worse,12) output(42,eq,44) output(42,eq,50) output(42,eq,28) output(42,eq,34) output(10,eq,2) output(10,eq,45) output(10,eq,35) output(10,eq,12) output(44,eq,50) output(44,eq,28) output(44,eq,34) output(2,eq,45) output(2,eq,35) output(2,eq,12) output(50,eq,28) output(50,eq,34) output(45,eq,35) output(45,eq,12) output(35,eq,12) output(28,eq,34)
Optimization: 32 3
Answer: 8
preference(1,(1,11),1,for(atom(hasPrice(2))),10) preference(1,(1,12),1,for(atom(hasOftenSold(2))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,50) output(10,better,12) output(10,better,28) output(10,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(45,better,12) output(45,better,28) output(45,better,34) output(42,worse,10) output(42,worse,2) output(42,worse,45) output(42,worse,35) output(44,worse,2) output(44,worse,45) output(44,worse,35) output(50,worse,45) output(50,worse,35) output(42,eq,44) output(42,eq,50) output(42,eq,12) output(42,eq,28) output(42,eq,34) output(10,eq,2) output(10,eq,45) output(10,eq,35) output(44,eq,50) output(44,eq,12) output(44,eq,28) output(44,eq,34) output(2,eq,45) output(2,eq,35) output(50,eq,12) output(50,eq,28) output(50,eq,34) output(45,eq,35) output(12,eq,28) output(12,eq,34) output(28,eq,34)
Optimization: 30 4
Answer: 9
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(2,better,45) output(2,better,12) output(2,better,34) output(10,better,45) output(10,better,12) output(10,better,34) output(28,better,34) output(35,better,12) output(35,better,34) output(42,better,45) output(42,better,12) output(42,better,34) output(44,better,45) output(44,better,12) output(44,better,34) output(50,better,45) output(50,better,12) output(50,better,34) output(12,worse,28) output(45,worse,35) output(45,worse,28) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,35) output(42,eq,28) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,35) output(10,eq,28) output(44,eq,2) output(44,eq,50) output(44,eq,35) output(44,eq,28) output(2,eq,50) output(2,eq,35) output(2,eq,28) output(50,eq,35) output(50,eq,28) output(45,eq,12) output(45,eq,34) output(35,eq,28) output(12,eq,34)
Optimization: 27 3
Answer: 10
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(2,better,45) output(2,better,28) output(2,better,34) output(10,better,45) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(35,better,28) output(35,better,34) output(42,better,45) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,28) output(44,better,34) output(50,better,45) output(50,better,28) output(50,better,34) output(45,worse,35) output(45,worse,12) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,35) output(42,eq,12) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,35) output(10,eq,12) output(44,eq,2) output(44,eq,50) output(44,eq,35) output(44,eq,12) output(2,eq,50) output(2,eq,35) output(2,eq,12) output(50,eq,35) output(50,eq,12) output(45,eq,28) output(45,eq,34) output(35,eq,12) output(28,eq,34)
Optimization: 26 3
Answer: 11
preference(1,(1,4),1,for(atom(hasPrice(3))),9) preference(1,(1,10),1,for(atom(hasOftenSold(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,less(weight)) output(2,better,35) output(2,better,12) output(2,better,34) output(10,better,35) output(10,better,12) output(10,better,34) output(28,better,34) output(35,better,12) output(35,better,34) output(42,better,35) output(42,better,12) output(42,better,34) output(44,better,35) output(44,better,12) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,34) output(50,better,35) output(50,better,12) output(50,better,34) output(12,worse,28) output(12,worse,34) output(35,worse,28) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,45) output(42,eq,28) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,45) output(10,eq,28) output(44,eq,2) output(44,eq,50) output(44,eq,45) output(44,eq,28) output(2,eq,50) output(2,eq,45) output(2,eq,28) output(50,eq,45) output(50,eq,28) output(45,eq,28)
Optimization: 24 4
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,4),1,for(atom(hasPrice(3))),9) preference(1,(1,10),1,for(atom(hasOftenSold(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,34) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,34) output(28,better,34) output(35,better,12) output(35,better,34) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,34) output(12,worse,28) output(12,worse,34) output(35,worse,28) output(45,worse,28) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,28) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,28) output(44,eq,2) output(44,eq,50) output(44,eq,28) output(2,eq,50) output(2,eq,28) output(50,eq,28)
Optimization: 19 5
Answer: 13
preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,1),1,for(atom(hasPrice(2))),1) preference(1,(1,4),1,for(atom(hasPrice(3))),9) preference(1,(1,10),1,for(atom(hasOftenSold(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(28,better,34) output(35,better,12) output(35,better,34) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(12,worse,28) output(12,worse,34) output(35,worse,28) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(44,eq,2) output(44,eq,50) output(2,eq,50) output(45,eq,28)
Optimization: 14 6
Answer: 14
preference(1,(1,5),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(4)))),6) preference(1,(1,1),1,for(atom(hasPrice(3))),6) preference(1,(1,2),1,for(atom(hasPrice(2))),10) preference(1,(1,3),1,for(atom(hasOftenSold(1))),6) preference(1,(1,4),1,for(atom(hasOftenSold(2))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,7),1,for(atom(hasOftenSold(3))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(8))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),5) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(35,better,12) output(35,better,28) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(12,worse,34) output(28,worse,34) output(35,worse,34) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(44,eq,2) output(44,eq,50) output(2,eq,50)
Optimization: 13 14
Answer: 15
preference(1,(1,11),1,for(neg(atom(hasMinorGrp(4)))),6) preference(1,(1,1),1,for(atom(hasPrice(3))),6) preference(1,(1,2),1,for(atom(hasPrice(2))),10) preference(1,(1,3),1,for(atom(hasOiliness(1))),5) preference(1,(1,4),1,for(atom(hasOftenSold(2))),7) preference(1,(1,5),1,for(atom(hasOftenSold(1))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,7),1,for(atom(hasOftenSold(3))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(8))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),7) preference(1,less(weight)) output(2,better,35) output(2,better,12) output(2,better,28) output(10,better,2) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(35,better,12) output(35,better,28) output(42,better,2) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(2,worse,45) output(2,worse,34) output(12,worse,34) output(28,worse,34) output(35,worse,34) output(42,eq,10) output(42,eq,44) output(42,eq,50) output(10,eq,44) output(10,eq,50) output(44,eq,50)
Optimization: 12 14
Answer: 16
preference(1,(1,3),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(4)))),6) preference(1,(1,1),1,for(atom(hasPrice(3))),6) preference(1,(1,2),1,for(atom(hasPrice(2))),10) preference(1,(1,4),1,for(atom(hasOftenSold(2))),3) preference(1,(1,5),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,7),1,for(atom(hasOftenSold(3))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,10),1,for(atom(hasOiliness(3))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),6) preference(1,less(weight)) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,2) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(35,better,12) output(35,better,28) output(42,better,2) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(12,worse,34) output(28,worse,34) output(35,worse,34) output(42,eq,10) output(42,eq,44) output(42,eq,50) output(10,eq,44) output(10,eq,50) output(44,eq,50) output(2,eq,45)
Optimization: 11 14
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(4)))),8) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,2),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,4),1,for(atom(hasOftenSold(2))),9) preference(1,(1,5),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,6),1,for(atom(hasPrice(3))),6) preference(1,(1,7),1,for(atom(hasPrice(2))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,9),1,for(atom(hasOiliness(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,12),1,for(atom(hasOftenSold(1))),6) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),8) preference(1,less(weight)) output(2,better,50) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(28,better,34) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(12,worse,28) output(35,worse,12) output(35,worse,28) output(35,worse,34) output(42,worse,10) output(44,worse,2) output(45,worse,28) output(44,eq,50) output(12,eq,34)
Optimization: 9 14
Progression : [1;9] (Error: 8)
Progression : [2;9] (Error: 3.5)
Answer: 18
preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,2),1,for(atom(hasPrice(2))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,5),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,6),1,for(atom(hasOftenSold(2))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(8))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,9),1,for(atom(hasOftenSold(1))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,12),1,for(atom(hasOiliness(1))),2) preference(1,(1,13),1,for(atom(hasOiliness(0))),1) preference(1,(1,14),1,for(atom(hasPrice(3))),9) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 13
Progression : 2 [ 1;13] (Error: 12)
Answer: 19
preference(1,(1,2),1,for(neg(atom(hasStyle(1)))),1) preference(1,(1,1),1,for(atom(hasPrice(3))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),8) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,5),1,for(atom(hasOftenSold(3))),1) preference(1,(1,6),1,for(atom(hasOftenSold(2))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,9),1,for(atom(hasOftenSold(1))),3) preference(1,(1,10),1,for(atom(hasPrice(2))),10) preference(1,(1,11),1,for(atom(hasOiliness(1))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),7) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 12
Answer: 20
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),8) preference(1,(1,1),1,for(atom(hasPrice(3))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,5),1,for(atom(hasOftenSold(3))),1) preference(1,(1,6),1,for(atom(hasOftenSold(2))),4) preference(1,(1,9),1,for(atom(hasOftenSold(1))),3) preference(1,(1,10),1,for(atom(hasPrice(2))),10) preference(1,(1,11),1,for(atom(hasOiliness(1))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),7) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 11
Answer: 21
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),8) preference(1,(1,1),1,for(atom(hasPrice(3))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,5),1,for(atom(hasOftenSold(3))),1) preference(1,(1,6),1,for(atom(hasOftenSold(2))),4) preference(1,(1,9),1,for(atom(hasOftenSold(1))),3) preference(1,(1,10),1,for(atom(hasPrice(2))),10) preference(1,(1,11),1,for(atom(hasOiliness(1))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),7) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 10
Answer: 22
preference(1,(1,3),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,5),1,for(atom(hasOftenSold(3))),1) preference(1,(1,6),1,for(atom(hasOftenSold(2))),4) preference(1,(1,7),1,for(atom(hasPrice(3))),6) preference(1,(1,9),1,for(atom(hasOftenSold(1))),3) preference(1,(1,10),1,for(atom(hasPrice(2))),10) preference(1,(1,11),1,for(atom(hasOiliness(1))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),7) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 9
Progression : 2 [2;9] (Error: 3.5)
Answer: 23
preference(1,(1,4),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(3))),1) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,3),1,for(atom(hasOiliness(1))),3) preference(1,(1,5),1,for(atom(hasPrice(2))),2) preference(1,(1,7),1,for(atom(hasOftenSold(2))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,12),1,for(atom(hasOftenSold(1))),9) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.172 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 23+
  Optimum    : unknown
Optimization : 2 8
Bounds       : 2 [2;8]
Calls        : 1
Time         : 598.080s (Solving: 585.21s 1st Model: 0.11s Unsat: 0.00s)
CPU Time     : 2352.792s
Threads      : 4        (Winner: 4)

Choices      : 9156756  (Domain: 3319)
Conflicts    : 1612692  (Analyzed: 1612688)
Restarts     : 1728     (Average: 933.27 Last: 71106)
Model-Level  : 1228.1  
Problems     : 9        (Average Length: 0.44 Splits: 0)
Lemmas       : 1617507  (Deleted: 1471841)
  Binary     : 475      (Ratio:   0.03%)
  Ternary    : 387      (Ratio:   0.02%)
  Conflict   : 1612687  (Average Length: 1875.0 Ratio:  99.70%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 4820     (Average Length:  165.9 Ratio:   0.30%) 
  Distributed: 1607     (Ratio:   0.10% Average LBD: 3.49) 
  Integrated : 4821     (Ratio: 300.00% Unit: 22 Average Jumps: 169.23)
Backjumps    : 1612688  (Average:  3.55 Max: 4716 Sum: 5728235)
  Executed   : 1612682  (Average:  3.55 Max: 4716 Sum: 5728201 Ratio: 100.00%)
  Bounded    : 6        (Average:  5.67 Max:  15 Sum:     34 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasPrice(3)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasPrice(3)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(2)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasPrice(3)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(3)) ; 
  10 :: atom(hasPrice(2)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(8)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  6 :: not atom(hasMinorGrp(4))  ; 
  9 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(3)) ; 
  10 :: atom(hasPrice(2)) ; 
  5 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(8)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  6 :: not atom(hasMinorGrp(4))  ; 
  9 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(3)) ; 
  10 :: atom(hasPrice(2)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasOiliness(3)) ; 
  6 :: not atom(hasMinorGrp(4))  ; 
  9 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: not atom(hasMinorGrp(4))  ; 
  1 :: atom(hasMajorGrp(0)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasPrice(3)) ; 
  4 :: atom(hasPrice(2)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrice(2)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(8)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOiliness(0)) ; 
  9 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(3)) ; 
  1 :: not atom(hasStyle(1))  ; 
  8 :: atom(hasMinorGrp(9)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  7 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  8 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  7 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(3)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  8 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  7 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasPrice(3)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  7 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasOiliness(1)) ; 
  2 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPrice(2)) ; 
  8 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasOftenSold(1)) 
}.
