asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,3),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,4),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,4),4,for(atom(isCreamy(1))),()) preference(1,aso) output(8,better,9) output(8,better,3) output(9,worse,3) output(5,eq,1) output(5,eq,0) output(1,eq,0)
Optimization: 34 8
Answer: 2
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isTamago(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isTamago(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,7),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),3,for(atom(hasPrice(0))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),4,for(atom(hasPrice(1))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,5) output(7,better,1) output(7,better,0) output(5,better,1) output(1,worse,0) output(6,worse,9) output(6,worse,3) output(5,eq,0) output(9,eq,3)
Optimization: 32 7
Answer: 3
preference(1,(1,3),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,2),3,for(atom(isUnique(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,4),4,for(atom(isUrchin(1))),()) preference(1,aso) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(9,better,3) output(5,eq,1) output(5,eq,0) output(1,eq,0)
Optimization: 31 6
Answer: 4
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(atom(isMaguro(1))),()) preference(1,(1,7),0,for(atom(isMaguro(1))),()) preference(1,(1,8),0,for(atom(isRaw(0))),()) preference(1,(1,4),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,3),1,for(atom(isShrimp(1))),()) preference(1,(1,8),1,for(atom(isRaw(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,2),4,for(atom(isRaw(1))),()) preference(1,(1,4),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,7) output(4,better,1) output(4,better,8) output(4,better,3) output(7,better,1) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,3) output(0,better,6) output(0,better,8) output(0,better,3) output(6,better,8) output(6,better,3) output(8,better,3) output(9,better,3) output(4,worse,5) output(4,worse,0) output(4,worse,6) output(4,worse,9) output(7,worse,5) output(7,worse,0) output(7,worse,6) output(7,worse,9) output(1,worse,0) output(1,worse,6) output(1,worse,8) output(1,worse,9) output(6,worse,9) output(8,worse,9) output(5,eq,0) output(5,eq,9) output(0,eq,9)
Optimization: 20 7
Answer: 5
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),0,for(atom(isMaguro(1))),()) preference(1,(1,7),0,for(atom(isMaguro(1))),()) preference(1,(1,8),0,for(atom(isRaw(0))),()) preference(1,(1,4),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,8),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,1) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(0,better,9) output(6,better,9) output(8,better,9) output(1,worse,3) output(0,worse,3) output(6,worse,3) output(8,worse,3) output(9,worse,3) output(5,eq,3) output(6,eq,8)
Optimization: 19 7
Answer: 6
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),0,for(atom(isMaguro(1))),()) preference(1,(1,7),0,for(atom(isMaguro(1))),()) preference(1,(1,8),0,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,8),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,1) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(0,better,9) output(6,better,9) output(8,better,9) output(9,worse,3) output(6,eq,8) output(6,eq,3) output(8,eq,3)
Optimization: 18 7
Answer: 7
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),0,for(atom(isMaguro(1))),()) preference(1,(1,7),0,for(atom(isMaguro(1))),()) preference(1,(1,8),0,for(atom(isRaw(0))),()) preference(1,(1,4),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,2),1,for(atom(isButtery(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,8),1,for(atom(isRaw(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,1) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(0,better,9) output(6,better,9) output(8,better,9) output(8,better,3) output(1,worse,8) output(0,worse,8) output(6,worse,8) output(9,worse,3) output(6,eq,3)
Optimization: 17 7
Answer: 8
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),0,for(atom(isRaw(1))),()) preference(1,(1,3),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),0,for(atom(isMaguro(1))),()) preference(1,(1,7),0,for(atom(isMaguro(1))),()) preference(1,(1,8),0,for(atom(isRaw(0))),()) preference(1,(1,4),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,2),1,for(atom(isSweet(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,8),1,for(atom(isRaw(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,1) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(0,better,9) output(0,better,3) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(6,eq,8) output(9,eq,3)
Optimization: 15 7
Answer: 9
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),0,for(atom(isMaguro(1))),()) preference(1,(1,7),0,for(atom(isMaguro(1))),()) preference(1,(1,8),0,for(atom(isRaw(0))),()) preference(1,(1,4),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isSweet(1))),()) preference(1,(1,8),1,for(atom(isRaw(1))),()) preference(1,(1,3),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,3) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(6,eq,8) output(9,eq,3)
Optimization: 14 7
Answer: 10
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),0,for(atom(isMaguro(1))),()) preference(1,(1,7),0,for(atom(isMaguro(1))),()) preference(1,(1,8),0,for(atom(isRaw(0))),()) preference(1,(1,4),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,8),1,for(atom(isRaw(1))),()) preference(1,(1,3),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,1) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,3) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(6,eq,8) output(9,eq,3)
Optimization: 13 7
Answer: 11
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(atom(isRaw(0))),()) preference(1,(1,6),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),2,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,3),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isCreamy(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),1,for(atom(isSweet(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(isRaw(0))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isTamago(1))),()) preference(1,(1,2),3,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isRaw(0))),()) preference(1,(1,5),3,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(isMaguro(1))),()) preference(1,(1,7),3,for(atom(isRaw(0))),()) preference(1,(1,8),3,for(atom(isMaguro(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,5) output(7,better,1) output(7,better,0) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,3) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,3) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,3) output(6,better,8) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(9,better,3)
Optimization: 0 8
Progression : 0 [1;8] (Error: 7)
Answer: 12
preference(1,(1,2),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,4),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,5),1,for(atom(isSweet(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,2),3,for(atom(isUnique(1))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isTamago(1))),()) preference(1,(1,5),4,for(atom(isOctopus(1))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,5) output(7,better,1) output(7,better,0) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,3) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,3) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,3) output(6,better,8) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(9,better,3)
Optimization: 0 7
Progression : 0 [2;7] (Error: 2.5)
Answer: 13
preference(1,(1,3),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),2,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,2),3,for(atom(isUnique(1))),()) preference(1,(1,6),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isTamago(1))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,5) output(7,better,1) output(7,better,0) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,3) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,3) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,3) output(6,better,8) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(9,better,3)
Optimization: 0 6
Answer: 14
preference(1,(1,3),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,7),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,2),3,for(atom(isUnique(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),3,for(atom(isTamago(1))),()) preference(1,(1,6),4,for(atom(isRaw(0))),()) preference(1,(1,7),4,for(atom(isTamago(1))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,5) output(7,better,1) output(7,better,0) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,3) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,3) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,3) output(6,better,8) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(9,better,3)
Optimization: 0 5
Answer: 15
preference(1,(1,2),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,8),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),1,for(atom(isSweet(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,2),2,for(atom(isRaw(0))),()) preference(1,(1,3),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),3,for(atom(isTamago(1))),()) preference(1,(1,6),4,for(atom(isRaw(0))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,5) output(7,better,1) output(7,better,0) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,3) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,3) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,3) output(6,better,8) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(9,better,3)
Optimization: 0 4
Answer: 16
preference(1,(1,3),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,8),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isSweet(1))),()) preference(1,aso) output(4,better,7) output(4,better,5) output(4,better,1) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,3) output(7,better,5) output(7,better,1) output(7,better,0) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,3) output(5,better,1) output(5,better,0) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,3) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,3) output(6,better,8) output(6,better,9) output(6,better,3) output(8,better,9) output(8,better,3) output(9,better,3)
Optimization: 0 3
OPTIMUM FOUND

Models       : 16
  Optimum    : yes
Optimization : 0 3
Calls        : 1
Time         : 17.037s (Solving: 10.76s 1st Model: 0.27s Unsat: 9.42s)
CPU Time     : 49.162s
Threads      : 4        (Winner: 1)

Choices      : 177593   (Domain: 435)
Conflicts    : 29626    (Analyzed: 29622)
Restarts     : 50       (Average: 592.44 Last: 4426)
Model-Level  : 413.2   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 63764    (Deleted: 16574)
  Binary     : 2684     (Ratio:   4.21%)
  Ternary    : 5504     (Ratio:   8.63%)
  Conflict   : 29618    (Average Length:  100.2 Ratio:  46.45%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 34146    (Average Length:   36.6 Ratio:  53.55%) 
  Distributed: 11397    (Ratio:  38.48% Average LBD: 3.14) 
  Integrated : 34190    (Ratio: 299.99% Unit: 339 Average Jumps: 66.45)
Backjumps    : 29622    (Average:  4.97 Max: 958 Sum: 147355)
  Executed   : 29614    (Average:  4.97 Max: 958 Sum: 147250 Ratio:  99.93%)
  Bounded    : 8        (Average: 13.12 Max:  35 Sum:    105 Ratio:   0.07%)

Rules        : 2316003 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 657522  
Bodies       : 779023  
  Count      : 1768    
Equivalences : 2014126  (Atom=Atom: 577366 Body=Body: 624743 Other: 812017)
Tight        : Yes
Variables    : 87143    (Eliminated:    0 Frozen: 58447)
Constraints  : 1781009  (Binary:  95.2% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isUnique(1))  >> not atom(isShrimp(1))  || atom(hasMinorGrp(2)) ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(hasPrice(1)) >> not atom(isChewy(1))  || not atom(isFattyFish(1))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> not atom(isRaw(0))  >> not atom(hasMinorGrp(2))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isRaw(0))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> not atom(hasPrice(1))  >> atom(isCreamy(1)) ; 
  atom(isRoe(1)) >> atom(isMaguro(1)) >> not atom(isRaw(0))  >> not atom(isRaw(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(2)) >> not atom(hasMinorGrp(2))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isUrchin(1))  >> not atom(isShrimp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isMaguro(1)) >> not atom(isTamago(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isTamago(1))  >> atom(isRaw(1)) >> not atom(isRaw(1))  ; 
  not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> not atom(isRaw(1))  >> not atom(isRaw(0))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> not atom(isRaw(1))  >> atom(hasPrice(1)) ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> atom(hasMinorGrp(1)) >> not atom(isUrchin(1))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> atom(hasPrice(0)) >> atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isUnique(1))  >> not atom(hasPrice(0))  || atom(hasMinorGrp(2)) ; 
  atom(isMaguro(1)) >> not atom(hasPrice(0))  >> atom(isUnique(1)) >> not atom(isRaw(0))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> not atom(isRaw(1))  >> atom(isUrchin(1)) ; 
  atom(isRoe(1)) >> atom(isMaguro(1)) >> not atom(isRaw(0))  >> not atom(isRaw(1))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> atom(isUrchin(1)) >> not atom(isCreamy(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isUrchin(1))  >> not atom(isShrimp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) >> not atom(isChewy(1))  || not atom(isRaw(1))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isChewy(1))  >> atom(isRaw(1)) || not atom(isShrimp(1))  ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(2)) >> not atom(isShrimp(1))  || not atom(isOctopus(1))  ; 
  not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> atom(isRaw(0)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isOctopus(1)) || atom(isMaguro(1)) ; 
  atom(isRaw(1)) >> atom(isMaguro(1)) || atom(isRaw(0)) ; 
  not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) >> not atom(isChewy(1))  || not atom(isRaw(1))  ; 
  atom(isChewy(1)) >> not atom(isTamago(1))  || not atom(isSweet(1))  ; 
  atom(isCreamy(1)) >> not atom(isShrimp(1))  >> not atom(isSweet(1))  || not atom(isCreamy(1))  ; 
  not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> atom(isRaw(0)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isOctopus(1)) || atom(isMaguro(1)) ; 
  atom(isRaw(1)) >> atom(isMaguro(1)) || atom(isRaw(0)) ; 
  not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) >> not atom(isChewy(1))  || not atom(isRaw(1))  ; 
  not atom(isRaw(1))  >> not atom(isTamago(1))  || not atom(isSweet(1))  ; 
  atom(isCreamy(1)) >> not atom(isShrimp(1))  >> not atom(isSweet(1))  || not atom(isCreamy(1))  ; 
  not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> atom(isRaw(0)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isTamago(1)) || atom(isMaguro(1)) ; 
  atom(isRaw(1)) >> atom(isMaguro(1)) || atom(isRaw(0)) ; 
  not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) >> not atom(isChewy(1))  || not atom(isRaw(1))  ; 
  atom(isButtery(1)) >> not atom(isTamago(1))  || not atom(isRaw(0))  ; 
  atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> not atom(isSweet(1))  || not atom(isCreamy(1))  ; 
  not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> atom(isRaw(0)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isRoe(1)) || atom(isMaguro(1)) ; 
  atom(isRaw(1)) >> atom(isMaguro(1)) || atom(isRaw(0)) ; 
  not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) >> not atom(isChewy(1))  || not atom(isRaw(1))  ; 
  atom(isSweet(1)) >> not atom(isTamago(1))  || atom(isRaw(1)) ; 
  atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(hasMinorGrp(1))  >> not atom(isSweet(1))  || not atom(isCreamy(1))  ; 
  not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> atom(isRaw(0)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isUrchin(1)) || atom(isMaguro(1)) ; 
  atom(isRaw(1)) >> atom(isMaguro(1)) || atom(isRaw(0)) ; 
  not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) >> not atom(isChewy(1))  || not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> not atom(isTamago(1))  || not atom(isCreamy(1))  ; 
  atom(isSweet(1)) >> atom(isRaw(0)) >> not atom(hasMinorGrp(1))  >> not atom(isTamago(1))  || not atom(isSweet(1))  ; 
  not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> atom(isRaw(0)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isRoe(1)) || atom(isMaguro(1)) ; 
  atom(isRaw(1)) >> atom(isMaguro(1)) || atom(isRaw(0)) ; 
  not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) >> not atom(isChewy(1))  || not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> not atom(isTamago(1))  || not atom(isSweet(1))  ; 
  atom(isCreamy(1)) >> atom(isRaw(0)) >> not atom(hasMinorGrp(1))  >> not atom(isTamago(1))  || not atom(isCreamy(1))  ; 
  not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> atom(isRaw(0)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isTamago(1)) || atom(isMaguro(1)) ; 
  atom(isRaw(1)) >> atom(isMaguro(1)) || atom(isRaw(0)) ; 
  not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isCreamy(1)) >> atom(isRaw(0)) >> not atom(isChewy(1))  >> not atom(isCreamy(1))  || not atom(isOctopus(1))  ; 
  atom(hasMinorGrp(0)) >> not atom(hasMinorGrp(2))  >> atom(isMaguro(1)) >> atom(isOctopus(1)) || not atom(hasMinorGrp(1))  ; 
  atom(isSweet(1)) >> not atom(isRaw(1))  >> atom(hasMinorGrp(2)) >> atom(isRaw(1)) || not atom(isOctopus(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> atom(isRaw(1)) || atom(isRaw(0)) ; 
  not atom(isRaw(1))  >> not atom(hasPrice(0))  >> atom(isMaguro(1)) >> atom(hasMinorGrp(1)) || not atom(isUrchin(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(isRaw(0)) >> not atom(isTamago(1))  || not atom(isCreamy(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isRaw(0))  ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  || atom(hasMinorGrp(1)) ; 
  atom(isCreamy(1)) >> atom(isMaguro(1)) >> not atom(isUnique(1))  >> not atom(hasPrice(0))  || atom(hasMinorGrp(2)) ; 
  atom(isSweet(1)) >> atom(isRaw(0)) >> not atom(isRaw(0))  >> atom(isOctopus(1)) || not atom(isOctopus(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(2))  || atom(hasMinorGrp(2)) ; 
  atom(isOctopus(1)) >> not atom(isRaw(0))  >> atom(isTamago(1)) >> atom(isRoe(1)) || not atom(hasMinorGrp(2))  ; 
  not atom(isUrchin(1))  >> not atom(isRaw(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> not atom(isMaguro(1))  >> not atom(isUnique(1))  >> not atom(hasPrice(0))  || not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> not atom(isSweet(1))  || not atom(isCreamy(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(2))  || atom(hasMinorGrp(2)) ; 
  atom(isOctopus(1)) >> not atom(isRaw(0))  >> atom(isTamago(1)) >> atom(isRoe(1)) || not atom(hasMinorGrp(2))  ; 
  not atom(hasMinorGrp(1))  >> atom(isTamago(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  ; 
  atom(isCreamy(1)) >> atom(isOctopus(1)) >> atom(isRaw(0)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isRaw(0)) >> atom(hasMinorGrp(2)) >> not atom(isMaguro(1))  || not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> not atom(isCreamy(1))  >> not atom(hasMinorGrp(2))  >> atom(isTamago(1)) || not atom(isSweet(1))  ; 
  atom(isOctopus(1)) >> not atom(isRaw(0))  >> atom(isTamago(1)) >> atom(isRoe(1)) || not atom(hasMinorGrp(2))  ; 
  not atom(hasMinorGrp(1))  >> atom(isTamago(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  ; 
  atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isOctopus(1))  >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSweet(1)) >> atom(isRaw(0)) >> not atom(isChewy(1))  >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> atom(isRaw(0)) >> atom(hasMinorGrp(2)) >> not atom(isMaguro(1))  || not atom(isUrchin(1))  ; 
  atom(hasPrice(1)) >> not atom(isRaw(0))  >> atom(isTamago(1)) >> atom(isRoe(1)) || not atom(hasMinorGrp(2))  ; 
  atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isOctopus(1))  >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isRaw(0)) >> atom(hasMinorGrp(2)) >> not atom(isMaguro(1))  || not atom(isUrchin(1))  ; 
  atom(hasPrice(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  || not atom(hasMinorGrp(2))  ; 
  atom(isCreamy(1)) >> atom(isOctopus(1)) >> atom(isSweet(1)) >> not atom(isOctopus(1))  
}.
