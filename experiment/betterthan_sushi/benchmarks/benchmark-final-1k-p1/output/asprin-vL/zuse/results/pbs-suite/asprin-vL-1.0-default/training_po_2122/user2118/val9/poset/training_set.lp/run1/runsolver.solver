asprin_vL version 1.0
Reading from stdin
-:250:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:260:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:275:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:356:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:630:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:807:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:936:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1008:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1012:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1012:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1018:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1117:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1143:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1263:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1297:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1319:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:167:1-16: info: no atoms over signature occur in program:
  output/3

-:159:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:160:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:161:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(4,eq,7) output(4,eq,1) output(4,eq,2) output(4,eq,5) output(4,eq,8) output(4,eq,0) output(4,eq,3) output(4,eq,6) output(7,eq,1) output(7,eq,2) output(7,eq,5) output(7,eq,8) output(7,eq,0) output(7,eq,3) output(7,eq,6) output(1,eq,2) output(1,eq,5) output(1,eq,8) output(1,eq,0) output(1,eq,3) output(1,eq,6) output(2,eq,5) output(2,eq,8) output(2,eq,0) output(2,eq,3) output(2,eq,6) output(5,eq,8) output(5,eq,0) output(5,eq,3) output(5,eq,6) output(8,eq,0) output(8,eq,3) output(8,eq,6) output(0,eq,3) output(0,eq,6) output(3,eq,6)
Optimization: 36 0
Answer: 2
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isUnique(1))),()) preference(1,poset) output(4,better,7) output(4,better,1) output(4,better,5) output(4,better,0) output(2,better,5) output(2,better,0) output(8,better,0) output(7,worse,2) output(1,worse,2) output(4,worse,6) output(7,worse,6) output(1,worse,6) output(2,worse,6) output(5,worse,6) output(8,worse,6) output(0,worse,6) output(3,worse,6) output(7,worse,8) output(5,worse,8) output(7,worse,3) output(1,worse,3) output(1,worse,8) output(5,worse,3) output(0,worse,3) output(4,eq,2) output(4,eq,8) output(4,eq,3) output(7,eq,1) output(7,eq,5) output(7,eq,0) output(1,eq,5) output(1,eq,0) output(2,eq,8) output(2,eq,3) output(5,eq,0) output(8,eq,3)
Optimization: 29 1
Answer: 3
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(4,better,7) output(4,better,1) output(4,better,2) output(4,better,5) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,6) output(2,better,5) output(2,better,0) output(8,better,0) output(7,worse,2) output(1,worse,2) output(7,worse,6) output(1,worse,6) output(5,worse,6) output(0,worse,6) output(7,worse,8) output(5,worse,8) output(7,worse,3) output(1,worse,3) output(1,worse,8) output(5,worse,3) output(0,worse,3) output(7,eq,1) output(7,eq,5) output(7,eq,0) output(1,eq,5) output(1,eq,0) output(2,eq,8) output(2,eq,3) output(2,eq,6) output(5,eq,0) output(8,eq,3) output(8,eq,6) output(3,eq,6)
Optimization: 25 1
Answer: 4
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(4,better,7) output(4,better,1) output(4,better,2) output(4,better,5) output(4,better,8) output(4,better,0) output(4,better,3) output(2,better,5) output(2,better,0) output(7,better,1) output(7,better,5) output(7,better,0) output(8,better,0) output(7,worse,2) output(1,worse,2) output(7,worse,6) output(1,worse,6) output(2,worse,6) output(5,worse,6) output(8,worse,6) output(0,worse,6) output(3,worse,6) output(7,worse,8) output(5,worse,8) output(7,worse,3) output(1,worse,3) output(1,worse,8) output(5,worse,3) output(0,worse,3) output(4,eq,6) output(1,eq,5) output(1,eq,0) output(2,eq,8) output(2,eq,3) output(5,eq,0) output(8,eq,3)
Optimization: 23 1
Answer: 5
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,7) output(4,better,1) output(4,better,2) output(4,better,5) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,6) output(2,better,5) output(2,better,0) output(7,better,5) output(7,better,0) output(1,better,5) output(1,better,0) output(8,better,0) output(7,worse,2) output(1,worse,2) output(7,worse,6) output(1,worse,6) output(5,worse,6) output(0,worse,6) output(7,worse,8) output(5,worse,8) output(7,worse,3) output(1,worse,3) output(1,worse,8) output(5,worse,3) output(0,worse,3) output(7,eq,1) output(2,eq,8) output(2,eq,3) output(2,eq,6) output(5,eq,0) output(8,eq,3) output(8,eq,6) output(3,eq,6)
Optimization: 21 1
Answer: 6
preference(1,(1,12),1,for(atom(isRaw(0))),()) preference(1,(1,12),2,for(atom(hasPrice(1))),()) preference(1,poset) output(4,better,2) output(4,better,3) output(4,better,6) output(5,better,8) output(5,better,3) output(5,better,6) output(7,better,2) output(7,better,8) output(7,better,3) output(7,better,6) output(0,better,3) output(0,better,6) output(1,better,2) output(1,better,3) output(1,better,6) output(8,better,3) output(8,better,6) output(1,better,8) output(4,worse,5) output(2,worse,5) output(4,worse,7) output(4,worse,0) output(2,worse,0) output(8,worse,0) output(4,worse,1) output(2,worse,8) output(4,eq,8) output(7,eq,1) output(7,eq,5) output(7,eq,0) output(1,eq,5) output(1,eq,0) output(2,eq,3) output(2,eq,6) output(5,eq,0) output(3,eq,6)
Optimization: 18 1
Answer: 7
preference(1,(1,12),1,for(atom(isRaw(0))),()) preference(1,(1,12),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,2) output(4,better,8) output(4,better,3) output(4,better,6) output(5,better,8) output(5,better,3) output(5,better,6) output(7,better,2) output(7,better,5) output(7,better,8) output(7,better,0) output(7,better,3) output(7,better,6) output(0,better,3) output(0,better,6) output(1,better,2) output(1,better,5) output(1,better,0) output(1,better,3) output(1,better,6) output(1,better,8) output(4,worse,5) output(2,worse,5) output(4,worse,7) output(4,worse,0) output(2,worse,0) output(8,worse,0) output(4,worse,1) output(7,eq,1) output(2,eq,8) output(2,eq,3) output(2,eq,6) output(5,eq,0) output(8,eq,3) output(8,eq,6) output(3,eq,6)
Optimization: 15 1
Answer: 8
preference(1,(1,12),1,for(atom(isCreamy(1))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(4,better,1) output(4,better,2) output(4,better,5) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,6) output(2,better,5) output(2,better,0) output(2,better,3) output(2,better,6) output(7,better,1) output(7,better,2) output(7,better,5) output(7,better,8) output(7,better,0) output(7,better,3) output(7,better,6) output(1,better,5) output(1,better,0) output(1,better,3) output(1,better,6) output(8,better,0) output(8,better,3) output(8,better,6) output(5,worse,8) output(4,eq,7) output(1,eq,2) output(1,eq,8) output(2,eq,8) output(5,eq,0) output(5,eq,3) output(5,eq,6) output(0,eq,3) output(0,eq,6) output(3,eq,6)
Optimization: 11 1
Answer: 9
preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isCreamy(1))),()) preference(1,(1,12),1,for(atom(hasPrice(0))),()) preference(1,(1,1),2,for(atom(isRaw(0))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(hasPrice(0))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(4,better,1) output(4,better,2) output(4,better,5) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,6) output(5,better,8) output(5,better,0) output(5,better,3) output(5,better,6) output(2,better,8) output(2,better,6) output(7,better,1) output(7,better,2) output(7,better,5) output(7,better,8) output(7,better,0) output(7,better,3) output(7,better,6) output(0,better,3) output(0,better,6) output(1,better,2) output(1,better,6) output(3,better,6) output(1,better,8) output(1,worse,5) output(2,worse,5) output(8,worse,6) output(4,worse,7) output(1,worse,0) output(2,worse,0) output(8,worse,0) output(1,worse,3) output(2,worse,3) output(8,worse,3)
Optimization: 10 6
Answer: 10
preference(1,(1,1),1,for(atom(isCreamy(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(isCreamy(1))),()) preference(1,(1,11),1,for(atom(isMaguro(1))),()) preference(1,(1,12),1,for(atom(isShrimp(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),2,for(atom(isTamago(1))),()) preference(1,(1,10),2,for(atom(isShrimp(1))),()) preference(1,(1,11),2,for(atom(isShrimp(1))),()) preference(1,(1,12),2,for(atom(isFattyFish(1))),()) preference(1,poset) output(4,better,7) output(4,better,1) output(4,better,2) output(4,better,5) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,6) output(5,better,3) output(5,better,6) output(2,better,5) output(2,better,0) output(2,better,3) output(2,better,6) output(7,better,1) output(7,better,5) output(7,better,0) output(7,better,3) output(7,better,6) output(0,better,3) output(0,better,6) output(1,better,3) output(1,better,6) output(8,better,0) output(8,better,3) output(8,better,6) output(3,better,6) output(1,worse,2) output(1,worse,0) output(5,worse,0) output(2,worse,8) output(5,worse,8) output(1,worse,8) output(7,unc,2) output(7,unc,8) output(1,unc,5)
Optimization: 9 9
Answer: 11
preference(1,(1,1),1,for(atom(isSweet(1))),()) preference(1,(1,2),1,for(atom(isButtery(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,9),1,for(atom(isOctopus(1))),()) preference(1,(1,10),1,for(atom(isUrchin(1))),()) preference(1,(1,11),1,for(atom(isFattyFish(1))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isRaw(0))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(isRaw(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isSweet(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,9),2,for(atom(isChewy(1))),()) preference(1,(1,10),2,for(atom(isFattyFish(1))),()) preference(1,(1,11),2,for(atom(isMaguro(1))),()) preference(1,(1,12),2,for(atom(isRaw(1))),()) preference(1,poset) output(4,better,7) output(4,better,1) output(4,better,2) output(4,better,5) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,6) output(5,better,0) output(5,better,3) output(5,better,6) output(2,better,3) output(2,better,6) output(7,better,1) output(7,better,2) output(7,better,0) output(7,better,3) output(7,better,6) output(0,better,3) output(0,better,6) output(1,better,2) output(1,better,0) output(1,better,3) output(1,better,6) output(8,better,0) output(8,better,3) output(8,better,6) output(3,better,6) output(7,worse,8) output(2,worse,8) output(5,worse,8) output(1,worse,8) output(7,unc,5) output(1,unc,5) output(2,unc,5) output(2,unc,0)
Optimization: 8 12
Answer: 12
preference(1,(1,1),1,for(atom(isSweet(1))),()) preference(1,(1,2),1,for(atom(isButtery(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,9),1,for(atom(isOctopus(1))),()) preference(1,(1,10),1,for(atom(isMaguro(1))),()) preference(1,(1,11),1,for(atom(isUrchin(1))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isSweet(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,9),2,for(atom(isChewy(1))),()) preference(1,(1,10),2,for(atom(isShrimp(1))),()) preference(1,(1,11),2,for(atom(isFattyFish(1))),()) preference(1,(1,12),2,for(atom(isChewy(1))),()) preference(1,poset) output(4,better,7) output(4,better,1) output(4,better,2) output(4,better,5) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,6) output(5,better,0) output(5,better,3) output(5,better,6) output(2,better,0) output(2,better,3) output(2,better,6) output(7,better,1) output(7,better,2) output(7,better,0) output(7,better,3) output(7,better,6) output(0,better,3) output(0,better,6) output(1,better,2) output(1,better,0) output(1,better,3) output(1,better,6) output(8,better,0) output(8,better,3) output(8,better,6) output(3,better,6) output(7,worse,8) output(2,worse,8) output(5,worse,8) output(1,worse,8) output(7,unc,5) output(1,unc,5) output(2,unc,5)
Optimization: 7 12
Answer: 13
preference(1,(1,1),1,for(atom(isSweet(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isSweet(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,5),1,for(atom(isSweet(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isShrimp(1))),()) preference(1,(1,8),1,for(atom(isCreamy(1))),()) preference(1,(1,9),1,for(atom(isSweet(1))),()) preference(1,(1,10),1,for(atom(isCreamy(1))),()) preference(1,(1,11),1,for(atom(isSweet(1))),()) preference(1,(1,12),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isCreamy(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,9),2,for(atom(isMaguro(1))),()) preference(1,(1,10),2,for(atom(isUrchin(1))),()) preference(1,(1,11),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,12),2,for(atom(isOctopus(1))),()) preference(1,poset) output(4,better,7) output(4,better,1) output(4,better,2) output(4,better,5) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,6) output(5,better,8) output(5,better,3) output(5,better,6) output(2,better,3) output(2,better,6) output(7,better,1) output(7,better,2) output(7,better,5) output(7,better,8) output(7,better,0) output(7,better,3) output(7,better,6) output(0,better,3) output(0,better,6) output(1,better,2) output(1,better,5) output(1,better,0) output(1,better,3) output(1,better,6) output(8,better,3) output(8,better,6) output(1,better,8) output(5,worse,0) output(8,worse,0) output(3,eq,6) output(2,unc,5) output(2,unc,8) output(2,unc,0)
Optimization: 6 12
SATISFIABLE

Models       : 13+
  Optimum    : unknown
Optimization : 6 12
Calls        : 1
Time         : 905.425s (Solving: 897.35s 1st Model: 1.43s Unsat: 0.00s)
CPU Time     : 3595.773s
Threads      : 4        (Winner: 0)

Choices      : 8359578  (Domain: 2687)
Conflicts    : 297049   (Analyzed: 297049)
Restarts     : 299      (Average: 993.47 Last: 12520)
Model-Level  : 14946.6 
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 26723064 (Deleted: 26534262)
  Binary     : 3570     (Ratio:   0.01%)
  Ternary    : 93209    (Ratio:   0.35%)
  Conflict   : 297049   (Average Length: 1228.8 Ratio:   1.11%) 
  Loop       : 26326758 (Average Length:  261.4 Ratio:  98.52%) 
  Other      : 99257    (Average Length:    3.4 Ratio:   0.37%) 
  Distributed: 33101    (Ratio:   0.12% Average LBD: 2.85) 
  Integrated : 99303    (Ratio: 300.00% Unit: 287 Average Jumps: 1702.78)
Backjumps    : 297049   (Average: 21.51 Max: 213546 Sum: 6388436)
  Executed   : 296992   (Average: 21.50 Max: 213546 Sum: 6387494 Ratio:  99.99%)
  Bounded    : 57       (Average: 16.53 Max:  38 Sum:    942 Ratio:   0.01%)

Rules        : 1508240 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 28698   
Bodies       : 1146309 
  Count      : 48      
Equivalences : 32354    (Atom=Atom: 5226 Body=Body: 7909 Other: 19219)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 1089612 Gammas: 0)
Variables    : 1103181  (Eliminated:    0 Frozen: 1092669)
Constraints  : 6431824  (Binary:  82.5% Ternary:   3.6% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isChewy(1)) >> atom(isRaw(0)) ; 
  atom(hasMinorGrp(0)) >> atom(isRoe(1)) ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) ; 
  atom(isChewy(1)) >> atom(hasPrice(0)) ; 
  atom(isCreamy(1)) >> atom(isChewy(1)) ; 
  atom(hasPrice(0)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isCreamy(1)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(1)) >> atom(isMaguro(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(0)) ; 
  atom(isTamago(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasPrice(1)) >> atom(isTamago(1)) ; 
  atom(isCreamy(1)) >> atom(isShrimp(1)) ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) ; 
  atom(isShrimp(1)) >> atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isSweet(1)) >> atom(isChewy(1)) ; 
  atom(isButtery(1)) >> atom(isTamago(1)) ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) ; 
  atom(isTamago(1)) >> atom(isFattyFish(1)) ; 
  atom(isRaw(0)) >> atom(isRaw(1)) ; 
  atom(isButtery(1)) >> atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isOctopus(1)) >> atom(hasPrice(1)) ; 
  atom(isOctopus(1)) >> atom(isChewy(1)) ; 
  atom(isUrchin(1)) >> atom(isFattyFish(1)) ; 
  atom(isFattyFish(1)) >> atom(isMaguro(1)) ; 
  atom(hasPrice(1)) >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isSweet(1)) >> atom(isChewy(1)) ; 
  atom(isButtery(1)) >> atom(isOctopus(1)) ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) ; 
  atom(isTamago(1)) >> atom(isFattyFish(1)) ; 
  atom(isFattyFish(1)) >> atom(isMaguro(1)) ; 
  atom(isButtery(1)) >> atom(isTamago(1)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isOctopus(1)) >> atom(hasPrice(1)) ; 
  atom(isOctopus(1)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) ; 
  atom(isUrchin(1)) >> atom(isFattyFish(1)) ; 
  atom(hasPrice(1)) >> atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isSweet(1)) >> atom(isCreamy(1)) ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) ; 
  atom(isSweet(1)) >> atom(isShrimp(1)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(isSweet(1)) >> atom(hasPrice(1)) ; 
  atom(isShrimp(1)) >> atom(isOctopus(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(1)) ; 
  atom(isSweet(1)) >> atom(isMaguro(1)) ; 
  atom(isCreamy(1)) >> atom(isUrchin(1)) ; 
  atom(isSweet(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isSweet(1)) >> atom(isOctopus(1)) 
}.
Time limit reached
