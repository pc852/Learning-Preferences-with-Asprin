asprin_vL version 1.0
Reading from stdin
-:242:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:252:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:267:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:348:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:609:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:622:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:799:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:928:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1000:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1004:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1004:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1010:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1109:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1135:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1255:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1289:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1311:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:159:1-16: info: no atoms over signature occur in program:
  output/3

-:151:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:152:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(2,eq,8) output(2,eq,0) output(2,eq,3) output(2,eq,9) output(2,eq,1) output(2,eq,6) output(2,eq,4) output(2,eq,5) output(8,eq,0) output(8,eq,3) output(8,eq,9) output(8,eq,1) output(8,eq,6) output(8,eq,4) output(8,eq,5) output(0,eq,3) output(0,eq,9) output(0,eq,1) output(0,eq,6) output(0,eq,4) output(0,eq,5) output(3,eq,9) output(3,eq,1) output(3,eq,6) output(3,eq,4) output(3,eq,5) output(9,eq,1) output(9,eq,6) output(9,eq,4) output(9,eq,5) output(1,eq,6) output(1,eq,4) output(1,eq,5) output(6,eq,4) output(6,eq,5) output(4,eq,5)
Optimization: 36 0
Answer: 2
preference(1,(1,10),1,for(atom(isOctopus(1))),15) preference(1,less(weight)) output(4,better,5) output(2,better,5) output(6,better,5) output(0,better,5) output(9,better,5) output(1,better,5) output(8,better,5) output(3,better,5) output(2,eq,8) output(2,eq,0) output(2,eq,3) output(2,eq,9) output(2,eq,1) output(2,eq,6) output(2,eq,4) output(8,eq,0) output(8,eq,3) output(8,eq,9) output(8,eq,1) output(8,eq,6) output(8,eq,4) output(0,eq,3) output(0,eq,9) output(0,eq,1) output(0,eq,6) output(0,eq,4) output(3,eq,9) output(3,eq,1) output(3,eq,6) output(3,eq,4) output(9,eq,1) output(9,eq,6) output(9,eq,4) output(1,eq,6) output(1,eq,4) output(6,eq,4)
Optimization: 28 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),1) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),1) preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),1) preference(1,(1,4),1,for(neg(atom(isRoe(1)))),1) preference(1,(1,5),1,for(neg(atom(isTamago(1)))),1) preference(1,(1,6),1,for(neg(atom(isShrimp(1)))),1) preference(1,(1,7),1,for(neg(atom(isFattyFish(1)))),1) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),1) preference(1,(1,9),1,for(neg(atom(isButtery(1)))),1) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,less(weight)) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,6) output(2,better,4) output(2,better,5) output(1,better,6) output(1,better,4) output(1,better,5) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,6) output(8,better,4) output(8,better,5) output(0,worse,1) output(9,worse,1) output(3,worse,1) output(2,eq,8) output(2,eq,1) output(8,eq,1) output(0,eq,3) output(0,eq,9) output(0,eq,6) output(0,eq,4) output(0,eq,5) output(3,eq,9) output(3,eq,6) output(3,eq,4) output(3,eq,5) output(9,eq,6) output(9,eq,4) output(9,eq,5) output(6,eq,4) output(6,eq,5) output(4,eq,5)
Optimization: 21 10
Answer: 4
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),15) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),13) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),14) preference(1,(1,2),1,for(atom(isRoe(1))),7) preference(1,(1,3),1,for(atom(isRaw(0))),8) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,6),1,for(atom(isUnique(1))),12) preference(1,(1,8),1,for(atom(isShrimp(1))),15) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight)) output(2,better,8) output(2,better,0) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(0,better,1) output(9,better,1) output(9,better,6) output(9,better,4) output(8,better,1) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(4,worse,5) output(2,worse,3) output(2,worse,5) output(6,worse,4) output(6,worse,5) output(0,worse,3) output(0,worse,9) output(0,worse,6) output(0,worse,4) output(0,worse,5) output(9,worse,5) output(1,worse,6) output(1,worse,4) output(1,worse,5) output(8,worse,0) output(8,worse,3) output(8,worse,9) output(8,worse,6) output(8,worse,4) output(8,worse,5)
Optimization: 20 10
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),15) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),13) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),14) preference(1,(1,2),1,for(atom(isRoe(1))),7) preference(1,(1,3),1,for(atom(isUnique(1))),12) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,6),1,for(atom(isRaw(0))),8) preference(1,(1,8),1,for(atom(isShrimp(1))),15) preference(1,(1,9),1,for(atom(isFattyFish(1))),11) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight)) output(2,better,8) output(2,better,0) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(0,better,1) output(9,better,1) output(9,better,6) output(9,better,4) output(8,better,1) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(4,worse,5) output(2,worse,3) output(6,worse,4) output(6,worse,5) output(0,worse,3) output(0,worse,9) output(0,worse,6) output(0,worse,4) output(0,worse,5) output(9,worse,5) output(1,worse,6) output(1,worse,4) output(1,worse,5) output(8,worse,0) output(8,worse,3) output(8,worse,9) output(8,worse,6) output(8,worse,4) output(8,worse,5)
Optimization: 19 10
Answer: 6
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),15) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),13) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),14) preference(1,(1,2),1,for(atom(isRoe(1))),12) preference(1,(1,3),1,for(atom(isChewy(1))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,6),1,for(atom(isShrimp(1))),15) preference(1,(1,8),1,for(atom(isRaw(0))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,10),1,for(atom(isUnique(1))),7) preference(1,less(weight)) output(2,better,8) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(0,better,1) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(8,better,0) output(8,better,1) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(4,worse,5) output(2,worse,3) output(2,worse,9) output(6,worse,4) output(6,worse,5) output(0,worse,3) output(0,worse,9) output(0,worse,6) output(0,worse,4) output(0,worse,5) output(1,worse,6) output(1,worse,4) output(1,worse,5) output(8,worse,3) output(8,worse,9) output(8,worse,6) output(8,worse,4) output(8,worse,5)
Optimization: 18 10
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),15) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),13) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),14) preference(1,(1,2),1,for(atom(isRoe(1))),12) preference(1,(1,3),1,for(atom(isOctopus(1))),15) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,6),1,for(atom(isShrimp(1))),15) preference(1,(1,8),1,for(atom(isRaw(0))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,10),1,for(atom(isUnique(1))),7) preference(1,less(weight)) output(4,better,5) output(2,better,8) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,5) output(0,better,1) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(8,better,1) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(2,worse,3) output(2,worse,9) output(6,worse,4) output(0,worse,3) output(0,worse,9) output(0,worse,6) output(0,worse,4) output(1,worse,6) output(1,worse,4) output(1,worse,5) output(8,worse,0) output(8,worse,3) output(8,worse,9) output(8,worse,6) output(8,worse,4) output(8,worse,5) output(0,eq,5)
Optimization: 17 10
Answer: 8
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),15) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),13) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),14) preference(1,(1,2),1,for(atom(isRoe(1))),12) preference(1,(1,3),1,for(atom(isUnique(1))),7) preference(1,(1,4),1,for(atom(isFattyFish(1))),6) preference(1,(1,6),1,for(atom(isShrimp(1))),15) preference(1,(1,8),1,for(atom(isRaw(0))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,10),1,for(atom(isChewy(1))),11) preference(1,less(weight)) output(4,better,5) output(2,better,8) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,5) output(0,better,1) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(8,better,0) output(8,better,1) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(2,worse,3) output(2,worse,9) output(6,worse,4) output(0,worse,3) output(0,worse,9) output(0,worse,6) output(0,worse,4) output(0,worse,5) output(1,worse,6) output(1,worse,4) output(1,worse,5) output(8,worse,3) output(8,worse,9) output(8,worse,6) output(8,worse,4) output(8,worse,5)
Optimization: 16 10
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),15) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),13) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),14) preference(1,(1,2),1,for(atom(isRoe(1))),12) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,5),1,for(atom(isUnique(1))),7) preference(1,(1,6),1,for(atom(isShrimp(1))),15) preference(1,(1,8),1,for(atom(isRaw(0))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,10),1,for(atom(isOctopus(1))),11) preference(1,less(weight)) output(4,better,5) output(2,better,8) output(2,better,0) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,5) output(0,better,1) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(8,better,0) output(8,better,1) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(2,worse,3) output(6,worse,4) output(0,worse,3) output(0,worse,9) output(0,worse,6) output(0,worse,4) output(0,worse,5) output(1,worse,6) output(1,worse,4) output(1,worse,5) output(8,worse,3) output(8,worse,9) output(8,worse,6) output(8,worse,4) output(8,worse,5)
Optimization: 15 10
Answer: 10
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),15) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),13) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),14) preference(1,(1,2),1,for(atom(isRoe(1))),12) preference(1,(1,3),1,for(atom(isChewy(1))),15) preference(1,(1,5),1,for(atom(isUnique(1))),7) preference(1,(1,6),1,for(atom(isShrimp(1))),15) preference(1,(1,8),1,for(atom(isRaw(0))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,10),1,for(atom(isOctopus(1))),11) preference(1,less(weight)) output(4,better,5) output(2,better,8) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,5) output(0,better,1) output(0,better,5) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,5) output(8,better,1) output(8,better,5) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(2,worse,3) output(2,worse,9) output(6,worse,4) output(0,worse,3) output(0,worse,9) output(0,worse,6) output(0,worse,4) output(1,worse,6) output(1,worse,4) output(8,worse,0) output(8,worse,3) output(8,worse,9) output(8,worse,6) output(8,worse,4)
Optimization: 14 10
Answer: 11
preference(1,(1,1),1,for(neg(atom(isSweet(1)))),3) preference(1,(1,2),1,for(neg(atom(isRaw(1)))),6) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(2)))),8) preference(1,(1,6),1,for(neg(atom(isFattyFish(1)))),15) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,7),1,for(atom(isRoe(1))),12) preference(1,(1,8),1,for(atom(isSweet(1))),13) preference(1,(1,9),1,for(atom(isRaw(0))),2) preference(1,(1,10),1,for(atom(isUnique(1))),2) preference(1,less(weight)) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(0,better,1) output(0,better,6) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(2,worse,8) output(2,worse,3) output(2,worse,9) output(6,worse,4) output(6,worse,5) output(0,worse,3) output(0,worse,9) output(1,worse,4) output(1,worse,5) output(0,eq,4) output(0,eq,5) output(4,eq,5)
Optimization: 12 10
Answer: 12
preference(1,(1,1),1,for(neg(atom(isSweet(1)))),3) preference(1,(1,2),1,for(neg(atom(isRaw(1)))),6) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(2)))),8) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),15) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,7),1,for(atom(isRoe(1))),12) preference(1,(1,8),1,for(atom(isSweet(1))),13) preference(1,(1,9),1,for(atom(isRaw(0))),2) preference(1,(1,10),1,for(atom(isUnique(1))),2) preference(1,less(weight)) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(0,better,1) output(0,better,6) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(6,worse,4) output(6,worse,5) output(0,worse,3) output(0,worse,9) output(1,worse,4) output(1,worse,5) output(2,eq,8) output(0,eq,4) output(0,eq,5) output(4,eq,5)
Optimization: 10 10
Answer: 13
preference(1,(1,1),1,for(neg(atom(isRaw(0)))),1) preference(1,(1,5),1,for(neg(atom(isShrimp(1)))),3) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,2),1,for(atom(isRoe(1))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),15) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,8),1,for(atom(isFattyFish(1))),2) preference(1,(1,9),1,for(atom(isUnique(1))),4) preference(1,(1,10),1,for(atom(isRaw(0))),15) preference(1,less(weight)) output(4,better,5) output(2,better,8) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(0,better,3) output(0,better,9) output(0,better,1) output(0,better,6) output(0,better,5) output(9,better,1) output(9,better,6) output(1,better,6) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,9) output(3,better,1) output(3,better,6) output(6,worse,4) output(6,worse,5) output(0,worse,4) output(9,worse,4) output(9,worse,5) output(1,worse,4) output(1,worse,5) output(3,worse,4) output(3,worse,5)
Optimization: 9 10
Answer: 14
preference(1,(1,10),1,for(neg(atom(isMaguro(1)))),5) preference(1,(1,1),1,for(atom(hasPrice(1))),2) preference(1,(1,2),1,for(atom(isChewy(1))),9) preference(1,(1,3),1,for(atom(isOctopus(1))),8) preference(1,(1,4),1,for(atom(isShrimp(1))),2) preference(1,(1,5),1,for(atom(isFattyFish(1))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(isSweet(1))),8) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,9),1,for(atom(isRoe(1))),14) preference(1,less(weight)) output(2,better,8) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(0,better,1) output(0,better,6) output(0,better,4) output(0,better,5) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(1,better,4) output(1,better,5) output(8,better,0) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(6,worse,4) output(6,worse,5) output(0,worse,3) output(0,worse,9) output(8,worse,3) output(8,worse,9) output(3,worse,9) output(4,eq,5)
Optimization: 8 10
Answer: 15
preference(1,(1,1),1,for(neg(atom(isRaw(1)))),4) preference(1,(1,3),1,for(neg(atom(hasPrice(1)))),5) preference(1,(1,9),1,for(neg(atom(isChewy(1)))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),14) preference(1,(1,4),1,for(atom(hasPrice(1))),8) preference(1,(1,5),1,for(atom(isChewy(1))),8) preference(1,(1,6),1,for(atom(isSweet(1))),5) preference(1,(1,7),1,for(atom(isFattyFish(1))),7) preference(1,(1,8),1,for(atom(isOctopus(1))),6) preference(1,(1,10),1,for(atom(isShrimp(1))),2) preference(1,less(weight)) output(2,better,8) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,4) output(6,better,5) output(0,better,6) output(0,better,4) output(0,better,5) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(1,better,4) output(1,better,5) output(8,better,0) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(4,worse,5) output(0,worse,3) output(0,worse,9) output(0,worse,1) output(8,worse,3) output(8,worse,9) output(3,worse,9)
Optimization: 7 10
Answer: 16
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,4),1,for(neg(atom(isRaw(1)))),5) preference(1,(1,9),1,for(neg(atom(isChewy(1)))),1) preference(1,(1,1),1,for(atom(isRaw(0))),4) preference(1,(1,2),1,for(atom(isShrimp(1))),4) preference(1,(1,5),1,for(atom(isChewy(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,7),1,for(atom(isOctopus(1))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),14) preference(1,(1,10),1,for(atom(isCreamy(1))),8) preference(1,less(weight)) output(4,better,5) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,4) output(6,better,5) output(0,better,6) output(0,better,4) output(0,better,5) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(1,better,4) output(1,better,5) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,6) output(3,better,4) output(3,better,5) output(0,worse,3) output(0,worse,9) output(0,worse,1) output(3,worse,9) output(2,eq,8) output(3,eq,1)
Optimization: 6 10
Answer: 17
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,4),1,for(neg(atom(isUnique(1)))),5) preference(1,(1,9),1,for(neg(atom(isChewy(1)))),1) preference(1,(1,1),1,for(atom(isRaw(0))),4) preference(1,(1,2),1,for(atom(isShrimp(1))),4) preference(1,(1,5),1,for(atom(isChewy(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,7),1,for(atom(isOctopus(1))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),14) preference(1,(1,10),1,for(atom(isSweet(1))),8) preference(1,less(weight)) output(4,better,5) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,4) output(6,better,5) output(0,better,6) output(0,better,4) output(0,better,5) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(1,better,4) output(1,better,5) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(0,worse,3) output(0,worse,9) output(0,worse,1) output(3,worse,9) output(2,eq,8)
Optimization: 5 10
Answer: 18
preference(1,(1,6),1,for(neg(atom(isRaw(1)))),3) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,1),1,for(atom(isUrchin(1))),6) preference(1,(1,2),1,for(atom(isSweet(1))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,4),1,for(atom(isRaw(0))),8) preference(1,(1,5),1,for(atom(isUnique(1))),3) preference(1,(1,8),1,for(atom(isRoe(1))),6) preference(1,(1,9),1,for(atom(isOctopus(1))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),1) preference(1,less(weight)) output(4,better,5) output(2,better,8) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,5) output(0,better,1) output(0,better,6) output(0,better,4) output(0,better,5) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(1,better,4) output(1,better,5) output(8,better,0) output(8,better,9) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5) output(0,worse,3) output(0,worse,9) output(8,eq,3) output(6,eq,4)
Optimization: 4 10
Answer: 19
preference(1,(1,1),1,for(neg(atom(isMaguro(1)))),6) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),2) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(0)))),12) preference(1,(1,2),1,for(atom(isUnique(1))),2) preference(1,(1,3),1,for(atom(isSweet(1))),7) preference(1,(1,4),1,for(atom(isFattyFish(1))),4) preference(1,(1,6),1,for(atom(isMaguro(1))),7) preference(1,(1,8),1,for(atom(isShrimp(1))),1) preference(1,(1,10),1,for(atom(isOctopus(1))),14) preference(1,less(weight)) output(4,better,5) output(2,better,8) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,4) output(6,better,5) output(0,better,3) output(0,better,9) output(0,better,1) output(0,better,6) output(0,better,4) output(0,better,5) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(1,better,4) output(1,better,5) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5)
Optimization: 0 10
Progression : 0 [ 1;10] (Error: 9)
Progression : 0 [ 2;10] (Error: 4)
Answer: 20
preference(1,(1,2),1,for(neg(atom(isShrimp(1)))),4) preference(1,(1,1),1,for(atom(isSweet(1))),6) preference(1,(1,4),1,for(atom(isFattyFish(1))),7) preference(1,(1,5),1,for(atom(isUnique(1))),15) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(isShrimp(1))),2) preference(1,(1,8),1,for(atom(isChewy(1))),12) preference(1,(1,9),1,for(atom(isCreamy(1))),13) preference(1,(1,10),1,for(atom(isOctopus(1))),10) preference(1,less(weight)) output(4,better,5) output(2,better,8) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,4) output(6,better,5) output(0,better,3) output(0,better,9) output(0,better,1) output(0,better,6) output(0,better,4) output(0,better,5) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(1,better,4) output(1,better,5) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5)
Optimization: 0 9
Answer: 21
preference(1,(1,4),1,for(neg(atom(isChewy(1)))),7) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),3) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,1),1,for(atom(isSweet(1))),15) preference(1,(1,3),1,for(atom(isOctopus(1))),14) preference(1,(1,5),1,for(atom(hasPrice(1))),1) preference(1,(1,8),1,for(atom(isUnique(1))),9) preference(1,(1,10),1,for(atom(isChewy(1))),10) preference(1,less(weight)) output(4,better,5) output(2,better,8) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,1) output(2,better,6) output(2,better,4) output(2,better,5) output(6,better,4) output(6,better,5) output(0,better,3) output(0,better,9) output(0,better,1) output(0,better,6) output(0,better,4) output(0,better,5) output(9,better,1) output(9,better,6) output(9,better,4) output(9,better,5) output(1,better,6) output(1,better,4) output(1,better,5) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,1) output(8,better,6) output(8,better,4) output(8,better,5) output(3,better,9) output(3,better,1) output(3,better,6) output(3,better,4) output(3,better,5)
Optimization: 0 8
SATISFIABLE

Models       : 21+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 1093.451s (Solving: 1085.38s 1st Model: 0.06s Unsat: 0.00s)
CPU Time     : 4349.096s
Threads      : 4        (Winner: 0)

Choices      : 22553648 (Domain: 3329)
Conflicts    : 3973109  (Analyzed: 3973107)
Restarts     : 6792     (Average: 584.97 Last: 62201)
Model-Level  : 1567.0  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 3984747  (Deleted: 3699454)
  Binary     : 1396     (Ratio:   0.04%)
  Ternary    : 545      (Ratio:   0.01%)
  Conflict   : 3973107  (Average Length: 1292.4 Ratio:  99.71%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 11640    (Average Length:  125.4 Ratio:   0.29%) 
  Distributed: 3880     (Ratio:   0.10% Average LBD: 3.41) 
  Integrated : 11640    (Ratio: 300.00% Unit: 10 Average Jumps: 172.40)
Backjumps    : 3973107  (Average:  3.69 Max: 3910 Sum: 14651084)
  Executed   : 3973106  (Average:  3.69 Max: 3910 Sum: 14651053 Ratio: 100.00%)
  Bounded    : 1        (Average: 31.00 Max:  31 Sum:     31 Ratio:   0.00%)

Rules        : 2146283 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 773687  
Bodies       : 791292  
  Sum        : 216     
  Count      : 10      
Equivalences : 2340702  (Atom=Atom: 756364 Body=Body: 775193 Other: 809145)
Tight        : Yes
Variables    : 20923    (Eliminated:    0 Frozen: 13893)
Constraints  : 1414006  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(isUrchin(1))  ; 
  1 :: not atom(isOctopus(1))  ; 
  1 :: not atom(isMaguro(1))  ; 
  1 :: not atom(isRoe(1))  ; 
  1 :: not atom(isTamago(1))  ; 
  1 :: not atom(isShrimp(1))  ; 
  1 :: not atom(isFattyFish(1))  ; 
  1 :: not atom(isChewy(1))  ; 
  1 :: not atom(isButtery(1))  ; 
  2 :: not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: not atom(hasPrice(0))  ; 
  7 :: atom(isRoe(1)) ; 
  8 :: atom(isRaw(0)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  13 :: not atom(hasMinorGrp(1))  ; 
  12 :: atom(isUnique(1)) ; 
  14 :: not atom(isRaw(1))  ; 
  15 :: atom(isShrimp(1)) ; 
  11 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: not atom(hasPrice(0))  ; 
  7 :: atom(isRoe(1)) ; 
  12 :: atom(isUnique(1)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  13 :: not atom(hasMinorGrp(1))  ; 
  8 :: atom(isRaw(0)) ; 
  14 :: not atom(isRaw(1))  ; 
  15 :: atom(isShrimp(1)) ; 
  11 :: atom(isFattyFish(1)) ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: not atom(hasPrice(0))  ; 
  12 :: atom(isRoe(1)) ; 
  5 :: atom(isChewy(1)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  13 :: not atom(hasMinorGrp(1))  ; 
  15 :: atom(isShrimp(1)) ; 
  14 :: not atom(isRaw(1))  ; 
  8 :: atom(isRaw(0)) ; 
  11 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: not atom(hasPrice(0))  ; 
  12 :: atom(isRoe(1)) ; 
  15 :: atom(isOctopus(1)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  13 :: not atom(hasMinorGrp(1))  ; 
  15 :: atom(isShrimp(1)) ; 
  14 :: not atom(isRaw(1))  ; 
  8 :: atom(isRaw(0)) ; 
  11 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: not atom(hasPrice(0))  ; 
  12 :: atom(isRoe(1)) ; 
  7 :: atom(isUnique(1)) ; 
  6 :: atom(isFattyFish(1)) ; 
  13 :: not atom(hasMinorGrp(1))  ; 
  15 :: atom(isShrimp(1)) ; 
  14 :: not atom(isRaw(1))  ; 
  8 :: atom(isRaw(0)) ; 
  11 :: atom(hasMinorGrp(0)) ; 
  11 :: atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: not atom(hasPrice(0))  ; 
  12 :: atom(isRoe(1)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  13 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(isUnique(1)) ; 
  15 :: atom(isShrimp(1)) ; 
  14 :: not atom(isRaw(1))  ; 
  8 :: atom(isRaw(0)) ; 
  11 :: atom(hasMinorGrp(0)) ; 
  11 :: atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: not atom(hasPrice(0))  ; 
  12 :: atom(isRoe(1)) ; 
  15 :: atom(isChewy(1)) ; 
  13 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(isUnique(1)) ; 
  15 :: atom(isShrimp(1)) ; 
  14 :: not atom(isRaw(1))  ; 
  8 :: atom(isRaw(0)) ; 
  11 :: atom(hasMinorGrp(0)) ; 
  11 :: atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: not atom(isSweet(1))  ; 
  6 :: not atom(isRaw(1))  ; 
  8 :: not atom(hasMinorGrp(2))  ; 
  7 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  15 :: not atom(isFattyFish(1))  ; 
  12 :: atom(isRoe(1)) ; 
  13 :: atom(isSweet(1)) ; 
  2 :: atom(isRaw(0)) ; 
  2 :: atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: not atom(isSweet(1))  ; 
  6 :: not atom(isRaw(1))  ; 
  8 :: not atom(hasMinorGrp(2))  ; 
  7 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  15 :: not atom(hasMinorGrp(0))  ; 
  12 :: atom(isRoe(1)) ; 
  13 :: atom(isSweet(1)) ; 
  2 :: atom(isRaw(0)) ; 
  2 :: atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(isRaw(0))  ; 
  10 :: atom(isRoe(1)) ; 
  9 :: atom(hasMinorGrp(2)) ; 
  15 :: atom(hasMinorGrp(1)) ; 
  3 :: not atom(isShrimp(1))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(isFattyFish(1)) ; 
  4 :: atom(isUnique(1)) ; 
  15 :: atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(1)) ; 
  9 :: atom(isChewy(1)) ; 
  8 :: atom(isOctopus(1)) ; 
  2 :: atom(isShrimp(1)) ; 
  7 :: atom(isFattyFish(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(isSweet(1)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  14 :: atom(isRoe(1)) ; 
  5 :: not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(isRaw(1))  ; 
  14 :: atom(hasMinorGrp(2)) ; 
  5 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasPrice(1)) ; 
  8 :: atom(isChewy(1)) ; 
  5 :: atom(isSweet(1)) ; 
  7 :: atom(isFattyFish(1)) ; 
  6 :: atom(isOctopus(1)) ; 
  1 :: not atom(isChewy(1))  ; 
  2 :: atom(isShrimp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(isRaw(0)) ; 
  4 :: atom(isShrimp(1)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  5 :: not atom(isRaw(1))  ; 
  8 :: atom(isChewy(1)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(isOctopus(1)) ; 
  14 :: atom(hasMinorGrp(2)) ; 
  1 :: not atom(isChewy(1))  ; 
  8 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(isRaw(0)) ; 
  4 :: atom(isShrimp(1)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  5 :: not atom(isUnique(1))  ; 
  8 :: atom(isChewy(1)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(isOctopus(1)) ; 
  14 :: atom(hasMinorGrp(2)) ; 
  1 :: not atom(isChewy(1))  ; 
  8 :: atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(isUrchin(1)) ; 
  2 :: atom(isSweet(1)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(isRaw(0)) ; 
  3 :: atom(isUnique(1)) ; 
  3 :: not atom(isRaw(1))  ; 
  1 :: not atom(hasPrice(0))  ; 
  6 :: atom(isRoe(1)) ; 
  10 :: atom(isOctopus(1)) ; 
  1 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(isMaguro(1))  ; 
  2 :: atom(isUnique(1)) ; 
  7 :: atom(isSweet(1)) ; 
  4 :: atom(isFattyFish(1)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(isMaguro(1)) ; 
  2 :: not atom(isShrimp(1))  ; 
  1 :: atom(isShrimp(1)) ; 
  12 :: not atom(hasMinorGrp(0))  ; 
  14 :: atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(isSweet(1)) ; 
  4 :: not atom(isShrimp(1))  ; 
  7 :: atom(isFattyFish(1)) ; 
  15 :: atom(isUnique(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(isShrimp(1)) ; 
  12 :: atom(isChewy(1)) ; 
  13 :: atom(isCreamy(1)) ; 
  10 :: atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isSweet(1)) ; 
  14 :: atom(isOctopus(1)) ; 
  7 :: not atom(isChewy(1))  ; 
  1 :: atom(hasPrice(1)) ; 
  3 :: not atom(isShrimp(1))  ; 
  9 :: atom(isUnique(1)) ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  10 :: atom(isChewy(1)) 
}.
Time limit reached
