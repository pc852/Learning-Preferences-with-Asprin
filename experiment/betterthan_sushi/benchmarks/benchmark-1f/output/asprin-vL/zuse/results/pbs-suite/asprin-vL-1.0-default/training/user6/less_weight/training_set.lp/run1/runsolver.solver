asprin_vL version 1.0
Reading from stdin
-:299:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:309:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:324:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:405:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:666:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:679:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:856:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:985:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1057:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1061:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1061:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1166:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1192:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1312:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1346:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1368:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:216:1-16: info: no atoms over signature occur in program:
  output/3

-:208:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:209:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(4,eq,11) output(4,eq,25) output(4,eq,10) output(4,eq,9) output(4,eq,2) output(4,eq,3) output(4,eq,5) output(4,eq,78) output(4,eq,90) output(11,eq,25) output(11,eq,10) output(11,eq,9) output(11,eq,2) output(11,eq,3) output(11,eq,5) output(11,eq,78) output(11,eq,90) output(25,eq,10) output(25,eq,9) output(25,eq,2) output(25,eq,3) output(25,eq,5) output(25,eq,78) output(25,eq,90) output(10,eq,9) output(10,eq,2) output(10,eq,3) output(10,eq,5) output(10,eq,78) output(10,eq,90) output(9,eq,2) output(9,eq,3) output(9,eq,5) output(9,eq,78) output(9,eq,90) output(2,eq,3) output(2,eq,5) output(2,eq,78) output(2,eq,90) output(3,eq,5) output(3,eq,78) output(3,eq,90) output(5,eq,78) output(5,eq,90) output(78,eq,90)
Optimization: 45 0
Answer: 2
preference(1,(1,12),1,for(atom(hasMinorGrp(4))),7) preference(1,less(weight)) output(4,better,10) output(11,better,10) output(25,better,10) output(10,worse,9) output(10,worse,2) output(10,worse,3) output(10,worse,5) output(10,worse,78) output(10,worse,90) output(4,eq,11) output(4,eq,25) output(4,eq,9) output(4,eq,2) output(4,eq,3) output(4,eq,5) output(4,eq,78) output(4,eq,90) output(11,eq,25) output(11,eq,9) output(11,eq,2) output(11,eq,3) output(11,eq,5) output(11,eq,78) output(11,eq,90) output(25,eq,9) output(25,eq,2) output(25,eq,3) output(25,eq,5) output(25,eq,78) output(25,eq,90) output(9,eq,2) output(9,eq,3) output(9,eq,5) output(9,eq,78) output(9,eq,90) output(2,eq,3) output(2,eq,5) output(2,eq,78) output(2,eq,90) output(3,eq,5) output(3,eq,78) output(3,eq,90) output(5,eq,78) output(5,eq,90) output(78,eq,90)
Optimization: 42 1
Answer: 3
preference(1,(1,12),1,for(atom(hasMinorGrp(5))),8) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(4,better,3) output(4,better,5) output(9,better,3) output(9,better,5) output(10,better,3) output(10,better,5) output(11,better,3) output(11,better,5) output(25,better,3) output(25,better,5) output(3,worse,78) output(3,worse,90) output(5,worse,78) output(5,worse,90) output(4,eq,11) output(4,eq,25) output(4,eq,10) output(4,eq,9) output(4,eq,2) output(4,eq,78) output(4,eq,90) output(11,eq,25) output(11,eq,10) output(11,eq,9) output(11,eq,2) output(11,eq,78) output(11,eq,90) output(25,eq,10) output(25,eq,9) output(25,eq,2) output(25,eq,78) output(25,eq,90) output(10,eq,9) output(10,eq,2) output(10,eq,78) output(10,eq,90) output(9,eq,2) output(9,eq,78) output(9,eq,90) output(2,eq,78) output(2,eq,90) output(3,eq,5) output(78,eq,90)
Optimization: 33 1
Answer: 4
preference(1,(1,1),1,for(atom(hasMajorGrp(0))),7) preference(1,(1,2),1,for(atom(hasStyle(1))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,4),1,for(atom(hasOiliness(1))),7) preference(1,(1,5),1,for(atom(hasOiliness(0))),2) preference(1,(1,6),1,for(atom(hasPrice(1))),2) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,13),1,for(atom(hasPrice(0))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),2) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(4,better,9) output(4,better,3) output(4,better,5) output(9,better,3) output(9,better,5) output(10,better,9) output(10,better,2) output(10,better,3) output(10,better,5) output(10,better,78) output(11,better,9) output(11,better,3) output(11,better,5) output(25,better,9) output(25,better,3) output(25,better,5) output(2,worse,90) output(3,worse,78) output(3,worse,90) output(4,worse,10) output(4,worse,90) output(5,worse,78) output(5,worse,90) output(9,worse,2) output(9,worse,78) output(9,worse,90) output(11,worse,10) output(11,worse,90) output(25,worse,10) output(25,worse,90) output(78,worse,90) output(4,eq,11) output(4,eq,25) output(4,eq,2) output(4,eq,78) output(11,eq,25) output(11,eq,2) output(11,eq,78) output(25,eq,2) output(25,eq,78) output(10,eq,90) output(2,eq,78) output(3,eq,5)
Optimization: 27 14
Answer: 5
preference(1,(1,1),1,for(atom(hasMajorGrp(0))),7) preference(1,(1,2),1,for(atom(hasStyle(1))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,4),1,for(atom(hasOiliness(1))),7) preference(1,(1,5),1,for(atom(hasOiliness(0))),2) preference(1,(1,6),1,for(atom(hasPrice(1))),2) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,13),1,for(atom(hasPrice(0))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),8) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(3,better,78) output(4,better,9) output(4,better,3) output(4,better,5) output(4,better,78) output(5,better,78) output(9,better,3) output(9,better,5) output(9,better,78) output(10,better,9) output(10,better,2) output(10,better,3) output(10,better,5) output(10,better,78) output(11,better,9) output(11,better,3) output(11,better,5) output(11,better,78) output(25,better,9) output(25,better,3) output(25,better,5) output(25,better,78) output(2,worse,90) output(3,worse,90) output(4,worse,10) output(4,worse,90) output(5,worse,90) output(9,worse,2) output(9,worse,90) output(11,worse,10) output(11,worse,90) output(25,worse,10) output(25,worse,90) output(78,worse,90) output(4,eq,11) output(4,eq,25) output(4,eq,2) output(11,eq,25) output(11,eq,2) output(25,eq,2) output(10,eq,90) output(3,eq,5)
Optimization: 20 14
Answer: 6
preference(1,(1,1),1,for(atom(hasStyle(1))),1) preference(1,(1,2),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,3),1,for(atom(hasPrice(0))),1) preference(1,(1,4),1,for(atom(hasOiliness(1))),1) preference(1,(1,5),1,for(atom(hasOiliness(0))),1) preference(1,(1,6),1,for(atom(hasPrice(1))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,8),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),8) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(3,better,78) output(4,better,10) output(4,better,9) output(4,better,3) output(4,better,5) output(4,better,78) output(5,better,78) output(9,better,3) output(9,better,5) output(9,better,78) output(10,better,3) output(10,better,5) output(10,better,78) output(11,better,10) output(11,better,9) output(11,better,3) output(11,better,5) output(11,better,78) output(25,better,10) output(25,better,9) output(25,better,3) output(25,better,5) output(25,better,78) output(3,worse,90) output(5,worse,90) output(9,worse,2) output(9,worse,90) output(10,worse,2) output(10,worse,90) output(78,worse,90) output(4,eq,11) output(4,eq,25) output(4,eq,2) output(4,eq,90) output(11,eq,25) output(11,eq,2) output(11,eq,90) output(25,eq,2) output(25,eq,90) output(10,eq,9) output(2,eq,90) output(3,eq,5)
Optimization: 19 14
Answer: 7
preference(1,(1,1),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,2),1,for(atom(hasPrice(0))),2) preference(1,(1,3),1,for(atom(hasStyle(1))),6) preference(1,(1,4),1,for(atom(hasOiliness(0))),2) preference(1,(1,5),1,for(atom(hasPrice(1))),1) preference(1,(1,6),1,for(atom(hasOiliness(1))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(11))),4) preference(1,(1,8),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,10),1,for(atom(hasMajorGrp(0))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),8) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(2,better,90) output(3,better,78) output(3,better,90) output(4,better,11) output(4,better,10) output(4,better,9) output(4,better,3) output(4,better,5) output(4,better,78) output(4,better,90) output(5,better,78) output(5,better,90) output(9,better,78) output(10,better,9) output(10,better,78) output(10,better,90) output(11,better,10) output(11,better,9) output(11,better,3) output(11,better,5) output(11,better,78) output(11,better,90) output(25,better,10) output(25,better,9) output(25,better,3) output(25,better,5) output(25,better,78) output(25,better,90) output(4,worse,2) output(9,worse,2) output(9,worse,3) output(9,worse,5) output(9,worse,90) output(10,worse,2) output(11,worse,25) output(11,worse,2) output(25,worse,2) output(78,worse,90) output(4,eq,25) output(10,eq,3) output(10,eq,5) output(3,eq,5)
Optimization: 14 10
Answer: 8
preference(1,(1,1),1,for(atom(hasStyle(1))),5) preference(1,(1,2),1,for(atom(hasMajorGrp(0))),5) preference(1,(1,7),1,for(atom(hasPrice(1))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,11),1,for(atom(hasPrice(0))),8) preference(1,(1,12),1,for(atom(hasOiliness(1))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),1) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(2,better,90) output(3,better,78) output(4,better,11) output(4,better,25) output(4,better,10) output(4,better,9) output(4,better,2) output(4,better,3) output(4,better,5) output(4,better,78) output(4,better,90) output(5,better,78) output(9,better,3) output(9,better,5) output(9,better,78) output(9,better,90) output(10,better,3) output(10,better,5) output(10,better,78) output(10,better,90) output(11,better,10) output(11,better,3) output(11,better,5) output(11,better,78) output(11,better,90) output(25,better,10) output(25,better,9) output(25,better,2) output(25,better,3) output(25,better,5) output(25,better,78) output(25,better,90) output(3,worse,90) output(5,worse,90) output(10,worse,9) output(10,worse,2) output(11,worse,25) output(11,worse,9) output(11,worse,2) output(78,worse,90) output(9,eq,2) output(3,eq,5)
Optimization: 10 10
Answer: 9
preference(1,(1,2),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,3),1,for(atom(hasStyle(1))),7) preference(1,(1,4),1,for(atom(hasMajorGrp(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),8) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,10),1,for(atom(hasOiliness(1))),8) preference(1,(1,11),1,for(atom(hasOiliness(0))),7) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,13),1,for(atom(hasPrice(0))),5) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(3,better,78) output(4,better,11) output(4,better,25) output(4,better,10) output(4,better,9) output(4,better,2) output(4,better,3) output(4,better,5) output(4,better,78) output(4,better,90) output(5,better,78) output(9,better,2) output(9,better,3) output(9,better,5) output(9,better,78) output(9,better,90) output(10,better,3) output(10,better,5) output(10,better,78) output(11,better,10) output(11,better,9) output(11,better,2) output(11,better,3) output(11,better,5) output(11,better,78) output(11,better,90) output(25,better,10) output(25,better,9) output(25,better,2) output(25,better,3) output(25,better,5) output(25,better,78) output(25,better,90) output(3,worse,90) output(5,worse,90) output(10,worse,9) output(78,worse,90) output(11,eq,25) output(10,eq,2) output(10,eq,90) output(2,eq,90) output(3,eq,5)
Optimization: 9 10
Answer: 10
preference(1,(1,1),1,for(atom(hasStyle(1))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,4),1,for(atom(hasPrice(0))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,6),1,for(atom(hasMajorGrp(0))),4) preference(1,(1,7),1,for(atom(hasOiliness(1))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(8))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),6) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(3,better,78) output(4,better,11) output(4,better,25) output(4,better,10) output(4,better,9) output(4,better,2) output(4,better,3) output(4,better,5) output(4,better,78) output(4,better,90) output(5,better,78) output(9,better,2) output(9,better,3) output(9,better,5) output(9,better,78) output(9,better,90) output(10,better,2) output(10,better,3) output(10,better,5) output(10,better,78) output(11,better,25) output(11,better,10) output(11,better,9) output(11,better,2) output(11,better,3) output(11,better,5) output(11,better,78) output(11,better,90) output(25,better,10) output(25,better,2) output(25,better,3) output(25,better,5) output(25,better,78) output(25,better,90) output(2,worse,90) output(3,worse,90) output(5,worse,90) output(10,worse,9) output(10,worse,90) output(78,worse,90) output(25,eq,9) output(3,eq,5)
Optimization: 8 11
Answer: 11
preference(1,(1,1),1,for(atom(hasOiliness(0))),4) preference(1,(1,2),1,for(atom(hasOiliness(1))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,4),1,for(atom(hasPrice(0))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,10),1,for(atom(hasMajorGrp(0))),4) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),8) preference(1,(1,12),1,for(atom(hasPrice(1))),1) preference(1,(1,13),1,for(atom(hasStyle(1))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),6) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(2,better,90) output(3,better,78) output(3,better,90) output(4,better,11) output(4,better,25) output(4,better,10) output(4,better,9) output(4,better,2) output(4,better,3) output(4,better,5) output(4,better,78) output(4,better,90) output(5,better,78) output(5,better,90) output(9,better,2) output(9,better,3) output(9,better,5) output(9,better,78) output(9,better,90) output(10,better,9) output(10,better,2) output(10,better,3) output(10,better,5) output(10,better,78) output(10,better,90) output(11,better,25) output(11,better,10) output(11,better,9) output(11,better,2) output(11,better,3) output(11,better,5) output(11,better,78) output(11,better,90) output(25,better,10) output(25,better,9) output(25,better,2) output(25,better,3) output(25,better,5) output(25,better,78) output(25,better,90) output(78,better,90) output(3,eq,5)
Optimization: 1 14
Progression : 1 [ 1;14] (Error: 13)
Answer: 12
preference(1,(1,1),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),8) preference(1,(1,4),1,for(atom(hasMajorGrp(0))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,6),1,for(atom(hasStyle(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,13),1,for(atom(hasPrice(1))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(5))),5) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(2,better,90) output(3,better,78) output(3,better,90) output(4,better,11) output(4,better,25) output(4,better,10) output(4,better,9) output(4,better,2) output(4,better,3) output(4,better,5) output(4,better,78) output(4,better,90) output(5,better,78) output(5,better,90) output(9,better,2) output(9,better,3) output(9,better,5) output(9,better,78) output(9,better,90) output(10,better,9) output(10,better,2) output(10,better,3) output(10,better,5) output(10,better,78) output(10,better,90) output(11,better,25) output(11,better,10) output(11,better,9) output(11,better,2) output(11,better,3) output(11,better,5) output(11,better,78) output(11,better,90) output(25,better,10) output(25,better,9) output(25,better,2) output(25,better,3) output(25,better,5) output(25,better,78) output(25,better,90) output(78,better,90) output(3,eq,5)
Optimization: 1 13
Answer: 13
preference(1,(1,1),1,for(atom(hasOiliness(0))),2) preference(1,(1,2),1,for(atom(hasPrice(0))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,13),1,for(atom(hasOiliness(1))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),1) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(2,better,90) output(3,better,78) output(3,better,90) output(4,better,11) output(4,better,25) output(4,better,10) output(4,better,9) output(4,better,2) output(4,better,3) output(4,better,5) output(4,better,78) output(4,better,90) output(5,better,78) output(5,better,90) output(9,better,2) output(9,better,3) output(9,better,5) output(9,better,78) output(9,better,90) output(10,better,9) output(10,better,2) output(10,better,3) output(10,better,5) output(10,better,78) output(10,better,90) output(11,better,25) output(11,better,10) output(11,better,9) output(11,better,2) output(11,better,3) output(11,better,5) output(11,better,78) output(11,better,90) output(25,better,10) output(25,better,9) output(25,better,2) output(25,better,3) output(25,better,5) output(25,better,78) output(25,better,90) output(78,better,90) output(3,eq,5)
Optimization: 1 11
Answer: 14
preference(1,(1,3),1,for(atom(hasOiliness(0))),6) preference(1,(1,5),1,for(atom(hasPrice(0))),8) preference(1,(1,6),1,for(atom(hasOiliness(1))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),2) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(2,better,90) output(3,better,78) output(3,better,90) output(4,better,11) output(4,better,25) output(4,better,10) output(4,better,9) output(4,better,2) output(4,better,3) output(4,better,5) output(4,better,78) output(4,better,90) output(5,better,78) output(5,better,90) output(9,better,2) output(9,better,3) output(9,better,5) output(9,better,78) output(9,better,90) output(10,better,9) output(10,better,2) output(10,better,3) output(10,better,5) output(10,better,78) output(10,better,90) output(11,better,25) output(11,better,10) output(11,better,9) output(11,better,2) output(11,better,3) output(11,better,5) output(11,better,78) output(11,better,90) output(25,better,10) output(25,better,9) output(25,better,2) output(25,better,3) output(25,better,5) output(25,better,78) output(25,better,90) output(78,better,90) output(3,eq,5)
Optimization: 1 9
Progression : 1 [2;9] (Error: 3.5)
Answer: 15
preference(1,(1,2),1,for(atom(hasOiliness(1))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(11))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(8))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,13),1,for(atom(hasPrice(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),8) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(2,better,78) output(2,better,90) output(3,better,78) output(3,better,90) output(4,better,11) output(4,better,25) output(4,better,10) output(4,better,9) output(4,better,2) output(4,better,3) output(4,better,5) output(4,better,78) output(4,better,90) output(5,better,78) output(5,better,90) output(9,better,2) output(9,better,3) output(9,better,5) output(9,better,78) output(9,better,90) output(10,better,9) output(10,better,2) output(10,better,3) output(10,better,5) output(10,better,78) output(10,better,90) output(11,better,25) output(11,better,10) output(11,better,9) output(11,better,2) output(11,better,3) output(11,better,5) output(11,better,78) output(11,better,90) output(25,better,10) output(25,better,9) output(25,better,2) output(25,better,3) output(25,better,5) output(25,better,78) output(25,better,90) output(78,better,90) output(3,eq,5)
Optimization: 1 8
Progression : 1 [3;8] (Error: 1.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.039 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 15+
  Optimum    : unknown
Optimization : 1 8
Calls        : 1
Time         : 296.547s (Solving: 294.98s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1181.210s
Threads      : 4        (Winner: 4)

Choices      : 6633443  (Domain: 738019)
Conflicts    : 6134708  (Analyzed: 6134705)
Restarts     : 5431     (Average: 1129.57 Last: 332759)
Model-Level  : 58.9    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 6273471  (Deleted: 6024654)
  Binary     : 376      (Ratio:   0.01%)
  Ternary    : 3094     (Ratio:   0.05%)
  Conflict   : 6134705  (Average Length:  224.9 Ratio:  97.79%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 138766   (Average Length:  176.8 Ratio:   2.21%) 
  Distributed: 46267    (Ratio:   0.75% Average LBD: 3.82) 
  Integrated : 138801   (Ratio: 300.00% Unit: 270 Average Jumps: 6.06)
Backjumps    : 6134705  (Average:  1.07 Max:  72 Sum: 6568838)
  Executed   : 6134702  (Average:  1.07 Max:  72 Sum: 6568808 Ratio: 100.00%)
  Bounded    : 3        (Average: 10.00 Max:  27 Sum:     30 Ratio:   0.00%)

Rules        : 175339  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 9885    
Bodies       : 8144    
  Sum        : 73      
  Count      : 14      
Equivalences : 8213     (Atom=Atom: 501 Body=Body: 235 Other: 7477)
Tight        : Yes
Variables    : 6961     (Eliminated:    0 Frozen: 4301)
Constraints  : 177922   (Binary:  97.3% Ternary:   1.5% Other:   1.1%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMajorGrp(0)) ; 
  7 :: atom(hasStyle(1)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  7 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMajorGrp(0)) ; 
  7 :: atom(hasStyle(1)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  7 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasPrice(0)) ; 
  8 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasStyle(1)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  1 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(8)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  8 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasPrice(0)) ; 
  6 :: atom(hasStyle(1)) ; 
  2 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasPrice(1)) ; 
  5 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMajorGrp(0)) ; 
  8 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasStyle(1)) ; 
  5 :: atom(hasMajorGrp(0)) ; 
  1 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasPrice(0)) ; 
  7 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasStyle(1)) ; 
  7 :: atom(hasMajorGrp(0)) ; 
  8 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  5 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasStyle(1)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMajorGrp(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasMinorGrp(8)) ; 
  6 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  8 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasMajorGrp(0)) ; 
  8 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasPrice(1)) ; 
  4 :: atom(hasStyle(1)) ; 
  6 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  8 :: atom(hasPrice(0)) ; 
  6 :: atom(hasMajorGrp(0)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasStyle(1)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasPrice(1)) ; 
  5 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPrice(0)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  8 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  8 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasPrice(0)) ; 
  7 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasMinorGrp(11)) ; 
  5 :: atom(hasMinorGrp(8)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(0)) ; 
  8 :: atom(hasMinorGrp(1)) 
}.
