asprin_vL version 1.0
Reading from stdin
-:299:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:309:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:324:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:405:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:666:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:679:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:856:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:985:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1057:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1061:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1061:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1166:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1192:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1312:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1346:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1368:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:216:1-16: info: no atoms over signature occur in program:
  output/3

-:208:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:209:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(44,eq,15) output(44,eq,31) output(44,eq,2) output(44,eq,43) output(44,eq,60) output(44,eq,17) output(44,eq,46) output(44,eq,10) output(44,eq,12) output(15,eq,31) output(15,eq,2) output(15,eq,43) output(15,eq,60) output(15,eq,17) output(15,eq,46) output(15,eq,10) output(15,eq,12) output(31,eq,2) output(31,eq,43) output(31,eq,60) output(31,eq,17) output(31,eq,46) output(31,eq,10) output(31,eq,12) output(2,eq,43) output(2,eq,60) output(2,eq,17) output(2,eq,46) output(2,eq,10) output(2,eq,12) output(43,eq,60) output(43,eq,17) output(43,eq,46) output(43,eq,10) output(43,eq,12) output(60,eq,17) output(60,eq,46) output(60,eq,10) output(60,eq,12) output(17,eq,46) output(17,eq,10) output(17,eq,12) output(46,eq,10) output(46,eq,12) output(10,eq,12)
Optimization: 45 0
Answer: 2
preference(1,(1,12),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),8) preference(1,less(weight)) output(44,better,15) output(44,better,31) output(44,better,2) output(44,better,43) output(44,better,60) output(60,worse,17) output(60,worse,46) output(60,worse,10) output(60,worse,12) output(2,worse,17) output(2,worse,46) output(2,worse,10) output(2,worse,12) output(15,worse,17) output(15,worse,46) output(15,worse,10) output(15,worse,12) output(31,worse,17) output(31,worse,46) output(31,worse,10) output(31,worse,12) output(43,worse,17) output(43,worse,46) output(43,worse,10) output(43,worse,12) output(44,eq,17) output(44,eq,46) output(44,eq,10) output(44,eq,12) output(15,eq,31) output(15,eq,2) output(15,eq,43) output(15,eq,60) output(31,eq,2) output(31,eq,43) output(31,eq,60) output(2,eq,43) output(2,eq,60) output(43,eq,60) output(17,eq,46) output(17,eq,10) output(17,eq,12) output(46,eq,10) output(46,eq,12) output(10,eq,12)
Optimization: 40 2
Answer: 3
preference(1,(1,1),1,for(atom(hasPrice(0))),6) preference(1,(1,2),1,for(atom(hasOiliness(1))),6) preference(1,(1,3),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,4),1,for(atom(hasStyle(0))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,6),1,for(atom(hasStyle(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,11),1,for(atom(hasOiliness(0))),6) preference(1,(1,12),1,for(atom(hasPrice(1))),6) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,14),1,for(atom(hasMajorGrp(0))),6) preference(1,less(weight)) output(60,better,17) output(2,better,17) output(15,better,17) output(31,better,17) output(43,better,17) output(44,better,17) output(17,worse,46) output(17,worse,10) output(17,worse,12) output(44,eq,15) output(44,eq,31) output(44,eq,2) output(44,eq,43) output(44,eq,60) output(44,eq,46) output(44,eq,10) output(44,eq,12) output(15,eq,31) output(15,eq,2) output(15,eq,43) output(15,eq,60) output(15,eq,46) output(15,eq,10) output(15,eq,12) output(31,eq,2) output(31,eq,43) output(31,eq,60) output(31,eq,46) output(31,eq,10) output(31,eq,12) output(2,eq,43) output(2,eq,60) output(2,eq,46) output(2,eq,10) output(2,eq,12) output(43,eq,60) output(43,eq,46) output(43,eq,10) output(43,eq,12) output(60,eq,46) output(60,eq,10) output(60,eq,12) output(46,eq,10) output(46,eq,12) output(10,eq,12)
Optimization: 39 14
Answer: 4
preference(1,(1,1),1,for(atom(hasStyle(1))),1) preference(1,(1,2),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,3),1,for(atom(hasPrice(0))),1) preference(1,(1,4),1,for(atom(hasOiliness(1))),1) preference(1,(1,5),1,for(atom(hasOiliness(0))),1) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,9),1,for(atom(hasPrice(1))),1) preference(1,(1,10),1,for(atom(hasStyle(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),8) preference(1,less(weight)) output(60,better,17) output(60,better,46) output(2,better,17) output(2,better,46) output(15,better,17) output(15,better,46) output(31,better,17) output(31,better,46) output(43,better,17) output(43,better,46) output(17,worse,10) output(17,worse,12) output(44,worse,15) output(44,worse,31) output(44,worse,2) output(44,worse,43) output(44,worse,60) output(44,worse,10) output(44,worse,12) output(46,worse,10) output(46,worse,12) output(44,eq,17) output(44,eq,46) output(15,eq,31) output(15,eq,2) output(15,eq,43) output(15,eq,60) output(15,eq,10) output(15,eq,12) output(31,eq,2) output(31,eq,43) output(31,eq,60) output(31,eq,10) output(31,eq,12) output(2,eq,43) output(2,eq,60) output(2,eq,10) output(2,eq,12) output(43,eq,60) output(43,eq,10) output(43,eq,12) output(60,eq,10) output(60,eq,12) output(17,eq,46) output(10,eq,12)
Optimization: 35 14
Answer: 5
preference(1,(1,1),1,for(atom(hasPrice(0))),6) preference(1,(1,2),1,for(atom(hasOiliness(1))),6) preference(1,(1,3),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,4),1,for(atom(hasStyle(0))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,6),1,for(atom(hasStyle(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,11),1,for(atom(hasOiliness(0))),6) preference(1,(1,12),1,for(atom(hasPrice(1))),6) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,14),1,for(atom(hasMajorGrp(0))),6) preference(1,less(weight)) output(60,better,17) output(60,better,46) output(2,better,17) output(2,better,46) output(15,better,17) output(15,better,46) output(31,better,17) output(31,better,46) output(43,better,17) output(43,better,46) output(44,better,17) output(44,better,46) output(17,worse,46) output(17,worse,10) output(17,worse,12) output(46,worse,10) output(46,worse,12) output(44,eq,15) output(44,eq,31) output(44,eq,2) output(44,eq,43) output(44,eq,60) output(44,eq,10) output(44,eq,12) output(15,eq,31) output(15,eq,2) output(15,eq,43) output(15,eq,60) output(15,eq,10) output(15,eq,12) output(31,eq,2) output(31,eq,43) output(31,eq,60) output(31,eq,10) output(31,eq,12) output(2,eq,43) output(2,eq,60) output(2,eq,10) output(2,eq,12) output(43,eq,60) output(43,eq,10) output(43,eq,12) output(60,eq,10) output(60,eq,12) output(10,eq,12)
Optimization: 33 13
Answer: 6
preference(1,(1,1),1,for(atom(hasPrice(0))),6) preference(1,(1,2),1,for(atom(hasOiliness(1))),6) preference(1,(1,3),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,4),1,for(atom(hasStyle(0))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,6),1,for(atom(hasStyle(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,11),1,for(atom(hasOiliness(0))),6) preference(1,(1,12),1,for(atom(hasPrice(1))),6) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,14),1,for(atom(hasMajorGrp(0))),6) preference(1,less(weight)) output(60,better,17) output(60,better,46) output(2,better,17) output(2,better,46) output(15,better,17) output(15,better,46) output(17,better,46) output(31,better,17) output(31,better,46) output(43,better,17) output(43,better,46) output(44,better,17) output(44,better,46) output(17,worse,10) output(17,worse,12) output(46,worse,10) output(46,worse,12) output(44,eq,15) output(44,eq,31) output(44,eq,2) output(44,eq,43) output(44,eq,60) output(44,eq,10) output(44,eq,12) output(15,eq,31) output(15,eq,2) output(15,eq,43) output(15,eq,60) output(15,eq,10) output(15,eq,12) output(31,eq,2) output(31,eq,43) output(31,eq,60) output(31,eq,10) output(31,eq,12) output(2,eq,43) output(2,eq,60) output(2,eq,10) output(2,eq,12) output(43,eq,60) output(43,eq,10) output(43,eq,12) output(60,eq,10) output(60,eq,12) output(10,eq,12)
Optimization: 32 13
Answer: 7
preference(1,(1,1),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,2),1,for(atom(hasPrice(1))),4) preference(1,(1,3),1,for(atom(hasOiliness(1))),8) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,7),1,for(atom(hasStyle(0))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),7) preference(1,less(weight)) output(60,better,17) output(60,better,46) output(60,better,10) output(60,better,12) output(2,better,43) output(2,better,60) output(2,better,17) output(2,better,46) output(2,better,10) output(2,better,12) output(10,better,12) output(15,better,43) output(15,better,60) output(15,better,17) output(15,better,46) output(15,better,10) output(15,better,12) output(17,better,46) output(17,better,10) output(17,better,12) output(31,better,43) output(31,better,60) output(31,better,17) output(31,better,46) output(31,better,10) output(31,better,12) output(43,better,60) output(43,better,17) output(43,better,46) output(43,better,10) output(43,better,12) output(44,better,15) output(44,better,31) output(44,better,2) output(44,better,43) output(44,better,60) output(44,better,17) output(44,better,46) output(44,better,10) output(44,better,12) output(46,better,10) output(46,better,12) output(15,eq,31) output(15,eq,2) output(31,eq,2)
Optimization: 3 9
Progression : 3 [1;9] (Error: 8)
Progression : 3 [2;9] (Error: 3.5)
Answer: 8
preference(1,(1,1),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,4),1,for(atom(hasPrice(0))),4) preference(1,(1,5),1,for(atom(hasStyle(1))),3) preference(1,(1,6),1,for(atom(hasMajorGrp(0))),4) preference(1,(1,7),1,for(atom(hasOiliness(1))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,14),1,for(atom(hasPrice(1))),2) preference(1,less(weight)) output(60,better,17) output(60,better,46) output(60,better,10) output(60,better,12) output(2,better,43) output(2,better,60) output(2,better,17) output(2,better,46) output(2,better,10) output(2,better,12) output(10,better,12) output(15,better,43) output(15,better,60) output(15,better,17) output(15,better,46) output(15,better,10) output(15,better,12) output(17,better,46) output(17,better,10) output(17,better,12) output(31,better,43) output(31,better,60) output(31,better,17) output(31,better,46) output(31,better,10) output(31,better,12) output(43,better,60) output(43,better,17) output(43,better,46) output(43,better,10) output(43,better,12) output(44,better,15) output(44,better,31) output(44,better,2) output(44,better,43) output(44,better,60) output(44,better,17) output(44,better,46) output(44,better,10) output(44,better,12) output(46,better,10) output(46,better,12) output(15,eq,31) output(15,eq,2) output(31,eq,2)
Optimization: 3 8
Answer: 9
preference(1,(1,2),1,for(atom(hasPrice(1))),4) preference(1,(1,3),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),7) preference(1,(1,6),1,for(atom(hasOiliness(1))),8) preference(1,(1,7),1,for(atom(hasStyle(1))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),4) preference(1,less(weight)) output(60,better,17) output(60,better,46) output(60,better,10) output(60,better,12) output(2,better,43) output(2,better,60) output(2,better,17) output(2,better,46) output(2,better,10) output(2,better,12) output(10,better,12) output(15,better,43) output(15,better,60) output(15,better,17) output(15,better,46) output(15,better,10) output(15,better,12) output(17,better,46) output(17,better,10) output(17,better,12) output(31,better,43) output(31,better,60) output(31,better,17) output(31,better,46) output(31,better,10) output(31,better,12) output(43,better,60) output(43,better,17) output(43,better,46) output(43,better,10) output(43,better,12) output(44,better,15) output(44,better,31) output(44,better,2) output(44,better,43) output(44,better,60) output(44,better,17) output(44,better,46) output(44,better,10) output(44,better,12) output(46,better,10) output(46,better,12) output(15,eq,31) output(15,eq,2) output(31,eq,2)
Optimization: 3 7
Answer: 10
preference(1,(1,2),1,for(atom(hasStyle(1))),6) preference(1,(1,3),1,for(atom(hasOiliness(1))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,12),1,for(atom(hasPrice(1))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),4) preference(1,less(weight)) output(60,better,17) output(60,better,46) output(60,better,10) output(60,better,12) output(2,better,43) output(2,better,60) output(2,better,17) output(2,better,46) output(2,better,10) output(2,better,12) output(10,better,12) output(15,better,43) output(15,better,60) output(15,better,17) output(15,better,46) output(15,better,10) output(15,better,12) output(17,better,46) output(17,better,10) output(17,better,12) output(31,better,43) output(31,better,60) output(31,better,17) output(31,better,46) output(31,better,10) output(31,better,12) output(43,better,60) output(43,better,17) output(43,better,46) output(43,better,10) output(43,better,12) output(44,better,15) output(44,better,31) output(44,better,2) output(44,better,43) output(44,better,60) output(44,better,17) output(44,better,46) output(44,better,10) output(44,better,12) output(46,better,10) output(46,better,12) output(15,eq,31) output(15,eq,2) output(31,eq,2)
Optimization: 3 6
Progression : 3 [3;6] (Error: 1)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.064 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 10+
  Optimum    : unknown
Optimization : 3 6
Calls        : 1
Time         : 296.385s (Solving: 294.81s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1180.576s
Threads      : 4        (Winner: 4)

Choices      : 7631357  (Domain: 353672)
Conflicts    : 5923528  (Analyzed: 5923525)
Restarts     : 4922     (Average: 1203.48 Last: 383111)
Model-Level  : 46.4    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 5932863  (Deleted: 5645377)
  Binary     : 984      (Ratio:   0.02%)
  Ternary    : 1392     (Ratio:   0.02%)
  Conflict   : 5923525  (Average Length:  340.7 Ratio:  99.84%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 9338     (Average Length:   29.3 Ratio:   0.16%) 
  Distributed: 3115     (Ratio:   0.05% Average LBD: 3.44) 
  Integrated : 9345     (Ratio: 300.00% Unit: 8 Average Jumps: 25.00)
Backjumps    : 5923525  (Average:  1.23 Max: 802 Sum: 7297421)
  Executed   : 5923524  (Average:  1.23 Max: 802 Sum: 7297394 Ratio: 100.00%)
  Bounded    : 1        (Average: 27.00 Max:  27 Sum:     27 Ratio:   0.00%)

Rules        : 174773  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 9877    
Bodies       : 8128    
  Sum        : 57      
  Count      : 14      
Equivalences : 8171     (Atom=Atom: 531 Body=Body: 271 Other: 7369)
Tight        : Yes
Variables    : 6929     (Eliminated:    0 Frozen: 4269)
Constraints  : 177314   (Binary:  97.3% Ternary:   1.5% Other:   1.1%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(0)) ; 
  6 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasStyle(0)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasStyle(1)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasPrice(1)) ; 
  6 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMajorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasStyle(1)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  1 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasPrice(1)) ; 
  1 :: atom(hasStyle(0)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(0)) ; 
  6 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasStyle(0)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasStyle(1)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasPrice(1)) ; 
  6 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMajorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(0)) ; 
  6 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasStyle(0)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasStyle(1)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasPrice(1)) ; 
  6 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMajorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasPrice(1)) ; 
  8 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasStyle(0)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(11)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasStyle(1)) ; 
  4 :: atom(hasMajorGrp(0)) ; 
  6 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  7 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasStyle(1)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasStyle(1)) ; 
  7 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasPrice(1)) ; 
  4 :: atom(hasMinorGrp(4)) 
}.
