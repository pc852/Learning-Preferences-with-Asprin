asprin_vL version 1.0
Reading from stdin
-:299:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:309:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:324:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:405:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:666:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:679:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:856:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:985:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1057:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1061:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1061:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1166:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1192:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1312:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1346:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1368:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:216:1-16: info: no atoms over signature occur in program:
  output/3

-:208:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:209:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(11,eq,57) output(11,eq,3) output(11,eq,31) output(11,eq,18) output(11,eq,7) output(11,eq,20) output(11,eq,21) output(11,eq,16) output(11,eq,30) output(57,eq,3) output(57,eq,31) output(57,eq,18) output(57,eq,7) output(57,eq,20) output(57,eq,21) output(57,eq,16) output(57,eq,30) output(3,eq,31) output(3,eq,18) output(3,eq,7) output(3,eq,20) output(3,eq,21) output(3,eq,16) output(3,eq,30) output(31,eq,18) output(31,eq,7) output(31,eq,20) output(31,eq,21) output(31,eq,16) output(31,eq,30) output(18,eq,7) output(18,eq,20) output(18,eq,21) output(18,eq,16) output(18,eq,30) output(7,eq,20) output(7,eq,21) output(7,eq,16) output(7,eq,30) output(20,eq,21) output(20,eq,16) output(20,eq,30) output(21,eq,16) output(21,eq,30) output(16,eq,30)
Optimization: 45 0
Progression : [ 3;45] (Error: 14)
Answer: 2
preference(1,(1,1),1,for(atom(hasPrice(1))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,5),1,for(atom(hasStyle(1))),1) preference(1,(1,8),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,13),1,for(atom(hasOiliness(1))),4) preference(1,less(weight)) output(3,better,20) output(3,better,21) output(3,better,16) output(7,better,20) output(7,better,21) output(7,better,16) output(7,better,30) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,31) output(3,worse,18) output(3,worse,7) output(11,worse,57) output(11,worse,3) output(11,worse,31) output(11,worse,18) output(11,worse,7) output(11,worse,21) output(11,worse,16) output(11,worse,30) output(16,worse,30) output(20,worse,21) output(20,worse,16) output(20,worse,30) output(21,worse,30) output(57,worse,31) output(57,worse,18) output(57,worse,7) output(11,eq,20) output(3,eq,30) output(31,eq,18) output(31,eq,7) output(18,eq,7) output(21,eq,16)
Optimization: 25 7
Answer: 3
preference(1,(1,1),1,for(atom(hasPrice(1))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,5),1,for(atom(hasStyle(1))),1) preference(1,(1,8),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,13),1,for(atom(hasOiliness(1))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),3) preference(1,less(weight)) output(3,better,20) output(3,better,21) output(3,better,16) output(7,better,20) output(7,better,21) output(7,better,16) output(7,better,30) output(11,better,16) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,16) output(21,better,16) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,31) output(3,worse,18) output(3,worse,7) output(11,worse,57) output(11,worse,3) output(11,worse,31) output(11,worse,18) output(11,worse,7) output(11,worse,21) output(11,worse,30) output(16,worse,30) output(20,worse,21) output(20,worse,30) output(21,worse,30) output(57,worse,31) output(57,worse,18) output(57,worse,7) output(11,eq,20) output(3,eq,30) output(31,eq,18) output(31,eq,7) output(18,eq,7)
Optimization: 22 8
Progression : [ 4;22] (Error: 4.5)
Answer: 4
preference(1,(1,1),1,for(atom(hasPrice(1))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,5),1,for(atom(hasStyle(1))),1) preference(1,(1,8),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,13),1,for(atom(hasOiliness(1))),4) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),2) preference(1,less(weight)) output(3,better,20) output(3,better,21) output(3,better,16) output(7,better,20) output(7,better,21) output(7,better,16) output(7,better,30) output(11,better,16) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,16) output(21,better,16) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,31) output(3,worse,18) output(3,worse,7) output(11,worse,57) output(11,worse,3) output(11,worse,31) output(11,worse,18) output(11,worse,7) output(11,worse,21) output(11,worse,30) output(16,worse,30) output(20,worse,21) output(20,worse,30) output(21,worse,30) output(57,worse,31) output(57,worse,18) output(11,eq,20) output(57,eq,7) output(3,eq,30) output(31,eq,18)
Optimization: 20 9
Answer: 5
preference(1,(1,1),1,for(atom(hasPrice(1))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,3),1,for(atom(hasPrice(0))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,5),1,for(atom(hasStyle(1))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,8),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(9))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,13),1,for(atom(hasOiliness(1))),4) preference(1,(1,14),1,for(atom(hasOiliness(0))),3) preference(1,less(weight)) output(3,better,7) output(3,better,20) output(3,better,21) output(3,better,16) output(7,better,21) output(7,better,16) output(11,better,21) output(11,better,16) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(20,better,21) output(20,better,16) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(7,worse,30) output(11,worse,57) output(11,worse,3) output(11,worse,31) output(11,worse,18) output(11,worse,30) output(16,worse,30) output(20,worse,30) output(21,worse,30) output(11,eq,7) output(11,eq,20) output(3,eq,31) output(3,eq,18) output(3,eq,30) output(31,eq,18) output(31,eq,30) output(18,eq,30) output(7,eq,20) output(21,eq,16)
Optimization: 19 13
Answer: 6
preference(1,(1,1),1,for(atom(hasPrice(1))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,5),1,for(atom(hasStyle(1))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,8),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,13),1,for(atom(hasOiliness(1))),4) preference(1,(1,14),1,for(atom(hasOiliness(0))),3) preference(1,less(weight)) output(3,better,7) output(3,better,20) output(3,better,21) output(3,better,16) output(7,better,20) output(7,better,21) output(7,better,16) output(11,better,21) output(11,better,16) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(20,better,21) output(20,better,16) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(7,worse,30) output(11,worse,57) output(11,worse,3) output(11,worse,31) output(11,worse,18) output(11,worse,7) output(11,worse,30) output(16,worse,30) output(20,worse,30) output(21,worse,30) output(11,eq,20) output(3,eq,31) output(3,eq,18) output(3,eq,30) output(31,eq,18) output(31,eq,30) output(18,eq,30) output(21,eq,16)
Optimization: 18 13
Progression : [ 5;18] (Error: 2.6)
Answer: 7
preference(1,(1,1),1,for(atom(hasStyle(1))),7) preference(1,(1,2),1,for(atom(hasOiliness(1))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),7) preference(1,(1,4),1,for(atom(hasMajorGrp(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(9))),8) preference(1,(1,9),1,for(atom(hasPrice(1))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(5))),5) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,16) output(7,better,16) output(11,better,3) output(11,better,31) output(11,better,7) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(21,better,30) output(31,better,16) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,18) output(3,worse,20) output(3,worse,21) output(7,worse,20) output(7,worse,21) output(7,worse,30) output(11,worse,57) output(11,worse,18) output(16,worse,30) output(31,worse,18) output(31,worse,20) output(31,worse,21) output(31,worse,30) output(11,eq,20) output(3,eq,30) output(31,eq,7)
Optimization: 16 11
Answer: 8
preference(1,(1,1),1,for(atom(hasStyle(1))),7) preference(1,(1,2),1,for(atom(hasOiliness(1))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),7) preference(1,(1,4),1,for(atom(hasMajorGrp(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,9),1,for(atom(hasPrice(1))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(9))),8) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(5))),5) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,16) output(7,better,16) output(11,better,3) output(11,better,31) output(11,better,7) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(21,better,30) output(31,better,7) output(31,better,16) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,18) output(3,worse,20) output(3,worse,21) output(7,worse,20) output(7,worse,21) output(7,worse,30) output(11,worse,57) output(11,worse,18) output(16,worse,30) output(31,worse,18) output(31,worse,20) output(31,worse,21) output(31,worse,30) output(11,eq,20) output(3,eq,30)
Optimization: 15 12
Answer: 9
preference(1,(1,1),1,for(atom(hasStyle(1))),7) preference(1,(1,2),1,for(atom(hasOiliness(1))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),7) preference(1,(1,4),1,for(atom(hasMajorGrp(0))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,8),1,for(atom(hasOiliness(0))),8) preference(1,(1,9),1,for(atom(hasPrice(1))),2) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(9))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(5))),5) preference(1,less(weight)) output(3,better,31) output(3,better,18) output(3,better,7) output(3,better,21) output(3,better,16) output(7,better,21) output(7,better,16) output(11,better,3) output(11,better,31) output(11,better,18) output(11,better,7) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,21) output(18,better,16) output(20,better,21) output(20,better,16) output(20,better,30) output(31,better,7) output(31,better,21) output(31,better,16) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,20) output(7,worse,20) output(7,worse,30) output(11,worse,57) output(16,worse,30) output(18,worse,20) output(18,worse,30) output(21,worse,30) output(31,worse,20) output(31,worse,30) output(11,eq,20) output(3,eq,30) output(31,eq,18) output(21,eq,16)
Optimization: 14 12
Progression : [ 6;14] (Error: 1.33333)
Progression : [ 7;14] (Error: 1)
Progression : [ 8;14] (Error: 0.75)
Progression : [ 9;14] (Error: 0.555556)
Answer: 10
preference(1,(1,1),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,2),1,for(atom(hasPrice(0))),4) preference(1,(1,3),1,for(atom(hasStyle(1))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,5),1,for(atom(hasMajorGrp(0))),6) preference(1,(1,6),1,for(atom(hasPrice(1))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(9))),5) preference(1,(1,9),1,for(atom(hasOiliness(0))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,13),1,for(atom(hasOiliness(1))),4) preference(1,less(weight)) output(3,better,31) output(3,better,18) output(3,better,7) output(3,better,21) output(3,better,16) output(7,better,21) output(7,better,16) output(11,better,3) output(11,better,31) output(11,better,18) output(11,better,7) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,21) output(18,better,16) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(31,better,18) output(31,better,7) output(31,better,21) output(31,better,16) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,20) output(7,worse,20) output(7,worse,30) output(11,worse,57) output(16,worse,30) output(18,worse,7) output(18,worse,20) output(18,worse,30) output(21,worse,30) output(31,worse,20) output(31,worse,30) output(11,eq,20) output(3,eq,30)
Optimization: 13 12
Progression : [10;13] (Error: 0.3)
Progression : [11;13] (Error: 0.181818)
Progression : [12;13] (Error: 0.0833333)
Answer: 11
preference(1,(1,1),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,3),1,for(atom(hasMajorGrp(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(11))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,10),1,for(atom(hasOiliness(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(8))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,14),1,for(atom(hasPrice(1))),4) preference(1,less(weight)) output(7,better,21) output(7,better,16) output(7,better,30) output(11,better,3) output(11,better,7) output(11,better,21) output(11,better,16) output(11,better,30) output(16,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(21,better,30) output(31,better,18) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,31) output(3,worse,18) output(3,worse,7) output(3,worse,20) output(3,worse,21) output(3,worse,16) output(7,worse,20) output(11,worse,57) output(11,worse,31) output(11,worse,18) output(11,eq,20) output(3,eq,30)
Optimization: 12 12
Progression : 12 [ 1;12] (Error: 11)
Answer: 12
preference(1,(1,1),1,for(atom(hasPrice(1))),3) preference(1,(1,2),1,for(atom(hasOiliness(0))),3) preference(1,(1,3),1,for(atom(hasStyle(1))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,10),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,13),1,for(atom(hasOiliness(1))),4) preference(1,less(weight)) output(3,better,7) output(3,better,21) output(3,better,16) output(7,better,21) output(7,better,16) output(11,better,3) output(11,better,7) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(31,better,18) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,31) output(3,worse,18) output(3,worse,20) output(7,worse,20) output(7,worse,30) output(11,worse,57) output(11,worse,31) output(11,worse,18) output(16,worse,30) output(21,worse,30) output(11,eq,20) output(3,eq,30)
Optimization: 12 11
Progression : 12 [ 2;11] (Error: 4.5)
Answer: 13
preference(1,(1,1),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,3),1,for(atom(hasPrice(1))),2) preference(1,(1,4),1,for(atom(hasOiliness(0))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,13),1,for(atom(hasOiliness(1))),5) preference(1,(1,14),1,for(atom(hasMinorGrp(5))),6) preference(1,less(weight)) output(3,better,7) output(3,better,21) output(3,better,16) output(7,better,21) output(7,better,16) output(11,better,3) output(11,better,18) output(11,better,7) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(31,better,18) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,31) output(3,worse,18) output(3,worse,20) output(7,worse,20) output(7,worse,30) output(11,worse,57) output(11,worse,31) output(16,worse,30) output(18,worse,20) output(21,worse,30) output(11,eq,20) output(3,eq,30)
Optimization: 12 9
Answer: 14
preference(1,(1,1),1,for(atom(hasOiliness(0))),2) preference(1,(1,3),1,for(atom(hasOiliness(1))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,9),1,for(atom(hasPrice(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),7) preference(1,less(weight)) output(3,better,31) output(3,better,18) output(3,better,7) output(3,better,21) output(3,better,16) output(7,better,21) output(7,better,16) output(11,better,3) output(11,better,31) output(11,better,18) output(11,better,7) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,21) output(18,better,16) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(31,better,18) output(31,better,7) output(31,better,21) output(31,better,16) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,20) output(7,worse,20) output(7,worse,30) output(11,worse,57) output(16,worse,30) output(18,worse,20) output(18,worse,30) output(21,worse,30) output(31,worse,20) output(31,worse,30) output(11,eq,20) output(3,eq,30)
Optimization: 12 8
Answer: 15
preference(1,(1,4),1,for(atom(hasMinorGrp(9))),3) preference(1,(1,6),1,for(atom(hasOiliness(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,8),1,for(atom(hasPrice(1))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,14),1,for(atom(hasOiliness(0))),7) preference(1,less(weight)) output(7,better,20) output(7,better,21) output(7,better,16) output(7,better,30) output(11,better,3) output(11,better,21) output(11,better,16) output(11,better,30) output(16,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(21,better,30) output(31,better,18) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,31) output(3,worse,18) output(3,worse,7) output(3,worse,20) output(3,worse,21) output(3,worse,16) output(11,worse,57) output(11,worse,31) output(11,worse,18) output(11,worse,7) output(11,eq,20) output(3,eq,30)
Optimization: 12 7
Progression : 12 [3;7] (Error: 1.33333)
Answer: 16
preference(1,(1,3),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,5),1,for(atom(hasPrice(1))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),5) preference(1,less(weight)) output(3,better,21) output(3,better,16) output(7,better,21) output(7,better,16) output(7,better,30) output(11,better,3) output(11,better,7) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(31,better,18) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(3,worse,31) output(3,worse,18) output(3,worse,7) output(3,worse,20) output(7,worse,20) output(11,worse,57) output(11,worse,31) output(11,worse,18) output(16,worse,30) output(21,worse,30) output(11,eq,20) output(3,eq,30)
Optimization: 12 6
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.054 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 16+
  Optimum    : unknown
Optimization : 12 6
Bounds       : 12 [3;6]
Calls        : 1
Time         : 296.434s (Solving: 294.91s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1179.937s
Threads      : 4        (Winner: 4)

Choices      : 10862099 (Domain: 935289)
Conflicts    : 6958145  (Analyzed: 6958132)
Restarts     : 5471     (Average: 1271.82 Last: 613009)
Model-Level  : 81.9    
Problems     : 19       (Average Length: 0.21 Splits: 0)
Lemmas       : 6998488  (Deleted: 6728720)
  Binary     : 668      (Ratio:   0.01%)
  Ternary    : 5195     (Ratio:   0.07%)
  Conflict   : 6958132  (Average Length:  228.1 Ratio:  99.42%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 40356    (Average Length:   28.0 Ratio:   0.58%) 
  Distributed: 13593    (Ratio:   0.20% Average LBD: 3.62) 
  Integrated : 40779    (Ratio: 300.00% Unit: 147 Average Jumps: 9.59)
Backjumps    : 6958132  (Average:  1.46 Max: 494 Sum: 10186747)
  Executed   : 6958116  (Average:  1.46 Max: 494 Sum: 10186556 Ratio: 100.00%)
  Bounded    : 16       (Average: 11.94 Max:  32 Sum:    191 Ratio:   0.00%)

Rules        : 174776  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 9877    
Bodies       : 8149    
  Sum        : 78      
  Count      : 14      
Equivalences : 8213     (Atom=Atom: 484 Body=Body: 221 Other: 7508)
Tight        : Yes
Variables    : 6960     (Eliminated:    0 Frozen: 4300)
Constraints  : 177364   (Binary:  97.3% Ternary:   1.5% Other:   1.1%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(1)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasStyle(1)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(1)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasStyle(1)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(1)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasStyle(1)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasStyle(1)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasMinorGrp(9)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(1)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasStyle(1)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasStyle(1)) ; 
  7 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMajorGrp(0)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasStyle(1)) ; 
  7 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMajorGrp(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasPrice(1)) ; 
  8 :: atom(hasMinorGrp(9)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  5 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasStyle(1)) ; 
  7 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMajorGrp(0)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasPrice(1)) ; 
  8 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasMinorGrp(9)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasPrice(0)) ; 
  6 :: atom(hasStyle(1)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  6 :: atom(hasMajorGrp(0)) ; 
  1 :: atom(hasPrice(1)) ; 
  5 :: atom(hasMinorGrp(9)) ; 
  6 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMajorGrp(0)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasMinorGrp(11)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  1 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMinorGrp(8)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrice(1)) ; 
  3 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasStyle(1)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasPrice(1)) ; 
  2 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  5 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(9)) ; 
  6 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  4 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  4 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasMajorGrp(1)) 
}.
