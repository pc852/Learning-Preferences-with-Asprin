asprin_vL version 1.0
Reading from stdin
-:314:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:324:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:339:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:420:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:681:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:694:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:871:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1000:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1072:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1076:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1076:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1082:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1181:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1207:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1327:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1361:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1383:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:231:1-16: info: no atoms over signature occur in program:
  output/3

-:223:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:224:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(38,eq,5) output(38,eq,33) output(38,eq,6) output(38,eq,18) output(38,eq,62) output(38,eq,91) output(38,eq,7) output(38,eq,1) output(38,eq,2) output(5,eq,33) output(5,eq,6) output(5,eq,18) output(5,eq,62) output(5,eq,91) output(5,eq,7) output(5,eq,1) output(5,eq,2) output(33,eq,6) output(33,eq,18) output(33,eq,62) output(33,eq,91) output(33,eq,7) output(33,eq,1) output(33,eq,2) output(6,eq,18) output(6,eq,62) output(6,eq,91) output(6,eq,7) output(6,eq,1) output(6,eq,2) output(18,eq,62) output(18,eq,91) output(18,eq,7) output(18,eq,1) output(18,eq,2) output(62,eq,91) output(62,eq,7) output(62,eq,1) output(62,eq,2) output(91,eq,7) output(91,eq,1) output(91,eq,2) output(7,eq,1) output(7,eq,2) output(1,eq,2)
Optimization: 45 0
Answer: 2
preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,less(weight)) output(18,better,62) output(18,better,91) output(5,better,33) output(5,better,62) output(5,better,91) output(6,better,62) output(6,better,91) output(91,worse,7) output(91,worse,1) output(91,worse,2) output(33,worse,6) output(33,worse,18) output(33,worse,7) output(33,worse,1) output(33,worse,2) output(62,worse,7) output(62,worse,1) output(62,worse,2) output(38,worse,5) output(38,worse,6) output(38,worse,18) output(38,worse,7) output(38,worse,1) output(38,worse,2) output(38,eq,33) output(38,eq,62) output(38,eq,91) output(5,eq,6) output(5,eq,18) output(5,eq,7) output(5,eq,1) output(5,eq,2) output(33,eq,62) output(33,eq,91) output(6,eq,18) output(6,eq,7) output(6,eq,1) output(6,eq,2) output(18,eq,7) output(18,eq,1) output(18,eq,2) output(62,eq,91) output(7,eq,1) output(7,eq,2) output(1,eq,2)
Optimization: 38 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(2)))),1) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(3)))),1) preference(1,(1,5),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,6),1,for(neg(atom(hasOiliness(1)))),1) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(0)))),1) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(2)))),1) preference(1,(1,10),1,for(atom(hasOiliness(0))),2) preference(1,less(weight)) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(7,better,1) output(7,better,2) output(18,worse,7) output(91,worse,7) output(6,worse,7) output(62,worse,7) output(38,worse,5) output(38,worse,33) output(38,worse,7) output(38,eq,6) output(38,eq,18) output(38,eq,62) output(38,eq,91) output(38,eq,1) output(38,eq,2) output(5,eq,33) output(5,eq,7) output(33,eq,7) output(6,eq,18) output(6,eq,62) output(6,eq,91) output(6,eq,1) output(6,eq,2) output(18,eq,62) output(18,eq,91) output(18,eq,1) output(18,eq,2) output(62,eq,91) output(62,eq,1) output(62,eq,2) output(91,eq,1) output(91,eq,2) output(1,eq,2)
Optimization: 31 10
Answer: 4
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,5),1,for(atom(hasOilyLevel(2))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),1) preference(1,less(weight)) output(18,better,1) output(91,better,1) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,7) output(33,better,1) output(33,better,2) output(5,better,6) output(5,better,1) output(7,better,1) output(62,better,1) output(38,better,5) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,7) output(38,better,1) output(18,worse,7) output(18,worse,2) output(91,worse,7) output(91,worse,2) output(1,worse,2) output(5,worse,33) output(5,worse,7) output(5,worse,2) output(6,worse,18) output(6,worse,62) output(6,worse,91) output(6,worse,7) output(6,worse,2) output(7,worse,2) output(62,worse,7) output(62,worse,2) output(38,worse,33) output(38,eq,2) output(5,eq,18) output(5,eq,62) output(5,eq,91) output(6,eq,1) output(18,eq,62) output(18,eq,91) output(62,eq,91)
Optimization: 25 8
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,2),1,for(neg(atom(hasPriceLevel(0)))),3) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,5),1,for(atom(hasOilyLevel(2))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),2) preference(1,less(weight)) output(18,better,1) output(91,better,1) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,7) output(33,better,1) output(33,better,2) output(5,better,6) output(5,better,1) output(7,better,1) output(62,better,91) output(62,better,1) output(38,better,5) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,7) output(38,better,1) output(18,worse,62) output(18,worse,7) output(18,worse,2) output(91,worse,7) output(91,worse,2) output(1,worse,2) output(5,worse,33) output(5,worse,62) output(5,worse,7) output(5,worse,2) output(6,worse,18) output(6,worse,62) output(6,worse,91) output(6,worse,7) output(6,worse,2) output(7,worse,2) output(62,worse,7) output(62,worse,2) output(38,worse,33) output(38,eq,2) output(5,eq,18) output(5,eq,91) output(6,eq,1) output(18,eq,91)
Optimization: 24 9
Answer: 6
preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(0)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,2),1,for(atom(hasPriceLevel(1))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasOftenSold(1))),9) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),6) preference(1,less(weight)) output(18,better,7) output(18,better,1) output(18,better,2) output(91,better,7) output(91,better,1) output(91,better,2) output(33,better,18) output(33,better,7) output(33,better,1) output(33,better,2) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,91) output(6,better,7) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(62,better,91) output(62,better,7) output(62,better,1) output(62,better,2) output(38,better,5) output(38,better,7) output(38,better,1) output(38,better,2) output(18,worse,62) output(18,worse,91) output(33,worse,6) output(33,worse,62) output(33,worse,91) output(5,worse,33) output(5,worse,6) output(5,worse,18) output(5,worse,62) output(5,worse,91) output(38,worse,33) output(38,worse,6) output(38,worse,62) output(38,worse,91) output(38,eq,18) output(5,eq,7) output(6,eq,62) output(1,eq,2)
Optimization: 18 10
Answer: 7
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),6) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(0)))),11) preference(1,(1,1),1,for(atom(hasPrice(0))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),3) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),2) preference(1,(1,10),1,for(atom(hasOftenSold(0))),3) preference(1,less(weight)) output(18,better,91) output(18,better,1) output(33,better,91) output(33,better,1) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,1) output(38,better,2) output(18,worse,62) output(18,worse,7) output(91,worse,7) output(91,worse,1) output(91,worse,2) output(1,worse,2) output(33,worse,6) output(33,worse,18) output(33,worse,62) output(33,worse,7) output(33,worse,2) output(6,worse,7) output(62,worse,7) output(38,worse,5) output(38,worse,7) output(5,eq,7) output(18,eq,2)
Optimization: 17 10
Answer: 8
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),6) preference(1,(1,1),1,for(atom(hasPrice(0))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),3) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,9),1,for(atom(hasPriceLevel(2))),3) preference(1,(1,10),1,for(atom(hasOftenSold(0))),3) preference(1,less(weight)) output(18,better,91) output(18,better,1) output(33,better,91) output(33,better,1) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,7) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,91) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,7) output(38,better,1) output(38,better,2) output(18,worse,62) output(18,worse,7) output(91,worse,7) output(91,worse,1) output(91,worse,2) output(1,worse,2) output(33,worse,6) output(33,worse,18) output(33,worse,62) output(33,worse,7) output(33,worse,2) output(38,worse,5) output(6,eq,62) output(6,eq,7) output(18,eq,2) output(62,eq,7)
Optimization: 16 10
Answer: 9
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),6) preference(1,(1,1),1,for(atom(hasPrice(0))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),3) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,10),1,for(atom(hasOftenSold(0))),3) preference(1,less(weight)) output(18,better,91) output(18,better,1) output(33,better,91) output(33,better,1) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,7) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,7) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,33) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,7) output(38,better,1) output(38,better,2) output(18,worse,62) output(18,worse,7) output(91,worse,7) output(91,worse,1) output(91,worse,2) output(1,worse,2) output(33,worse,6) output(33,worse,18) output(33,worse,62) output(33,worse,7) output(33,worse,2) output(38,worse,5) output(38,worse,6) output(18,eq,2) output(62,eq,7)
Optimization: 15 10
Answer: 10
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),6) preference(1,(1,1),1,for(atom(hasPrice(0))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),3) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,10),1,for(atom(hasOftenSold(0))),3) preference(1,less(weight)) output(18,better,91) output(18,better,1) output(33,better,91) output(33,better,1) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,7) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,7) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,7) output(38,better,1) output(38,better,2) output(18,worse,62) output(18,worse,7) output(91,worse,7) output(91,worse,1) output(91,worse,2) output(1,worse,2) output(33,worse,6) output(33,worse,18) output(33,worse,62) output(33,worse,7) output(33,worse,2) output(38,worse,5) output(18,eq,2) output(62,eq,7)
Optimization: 14 10
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(1)))),10) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),7) preference(1,(1,4),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),10) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(1)))),11) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,6),1,for(atom(hasOiliness(1))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,10),1,for(atom(hasOiliness(0))),6) preference(1,less(weight)) output(18,better,62) output(18,better,91) output(18,better,1) output(91,better,1) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,7) output(33,better,1) output(33,better,2) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,62) output(6,better,91) output(6,better,1) output(7,better,1) output(7,better,2) output(62,better,1) output(38,better,5) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,7) output(38,better,1) output(38,better,2) output(18,worse,7) output(91,worse,7) output(91,worse,2) output(1,worse,2) output(5,worse,33) output(6,worse,7) output(62,worse,7) output(62,worse,2) output(5,eq,7) output(6,eq,18) output(6,eq,2) output(18,eq,2) output(62,eq,91)
Optimization: 13 10
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(2)))),6) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),2) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(3)))),9) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,3),1,for(atom(hasOilyLevel(0))),4) preference(1,(1,4),1,for(atom(hasPriceLevel(1))),11) preference(1,(1,8),1,for(atom(hasPrice(0))),10) preference(1,(1,10),1,for(atom(hasPriceLevel(0))),1) preference(1,less(weight)) output(18,better,62) output(18,better,1) output(18,better,2) output(91,better,1) output(91,better,2) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,7) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,7) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,7) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(62,better,1) output(62,better,2) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,7) output(38,better,1) output(38,better,2) output(33,worse,6) output(62,worse,91) output(62,worse,7) output(38,eq,5) output(18,eq,91) output(18,eq,7) output(91,eq,7) output(1,eq,2)
Optimization: 8 10
Answer: 13
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),7) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,5),1,for(neg(atom(hasOiliness(0)))),8) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,10),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),8) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),12) preference(1,(1,6),1,for(atom(hasOilyLevel(1))),11) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,8),1,for(atom(hasOiliness(1))),1) preference(1,less(weight)) output(18,better,62) output(18,better,91) output(18,better,7) output(18,better,1) output(18,better,2) output(91,better,7) output(91,better,1) output(91,better,2) output(1,better,2) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,7) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,7) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,7) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(62,better,91) output(62,better,7) output(62,better,1) output(62,better,2) output(38,better,5) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,7) output(38,better,1) output(38,better,2)
Optimization: 0 10
Progression : 0 [ 1;10] (Error: 9)
Progression : 0 [ 2;10] (Error: 4)
Answer: 14
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,9),1,for(neg(atom(hasOftenSold(0)))),3) preference(1,(1,1),1,for(atom(hasOftenSold(0))),6) preference(1,(1,2),1,for(atom(hasOiliness(1))),8) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),8) preference(1,(1,8),1,for(atom(hasOilyLevel(1))),4) preference(1,(1,10),1,for(atom(hasOftenSold(1))),1) preference(1,less(weight)) output(18,better,62) output(18,better,91) output(18,better,7) output(18,better,1) output(18,better,2) output(91,better,7) output(91,better,1) output(91,better,2) output(1,better,2) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,7) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,7) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,7) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(62,better,91) output(62,better,7) output(62,better,1) output(62,better,2) output(38,better,5) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,7) output(38,better,1) output(38,better,2)
Optimization: 0 9
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.071 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 14+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 1198.091s (Solving: 1191.76s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 4772.883s
Threads      : 4        (Winner: 4)

Choices      : 17225005 (Domain: 19289)
Conflicts    : 4683267  (Analyzed: 4683265)
Restarts     : 5729     (Average: 817.47 Last: 140177)
Model-Level  : 459.6   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 4716595  (Deleted: 4423805)
  Binary     : 2060     (Ratio:   0.04%)
  Ternary    : 1546     (Ratio:   0.03%)
  Conflict   : 4683265  (Average Length:  873.3 Ratio:  99.29%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 33330    (Average Length:   99.1 Ratio:   0.71%) 
  Distributed: 11111    (Ratio:   0.24% Average LBD: 3.46) 
  Integrated : 33333    (Ratio: 300.00% Unit: 50 Average Jumps: 11.68)
Backjumps    : 4683265  (Average:  2.93 Max: 1604 Sum: 13739091)
  Executed   : 4683264  (Average:  2.93 Max: 1604 Sum: 13739065 Ratio: 100.00%)
  Bounded    : 1        (Average: 26.00 Max:  26 Sum:     26 Ratio:   0.00%)

Rules        : 1631748 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 483701  
Bodies       : 487547  
  Sum        : 270     
  Count      : 10      
Equivalences : 1439210  (Atom=Atom: 465513 Body=Body: 475744 Other: 497953)
Tight        : Yes
Variables    : 16675    (Eliminated:    0 Frozen: 11715)
Constraints  : 1181671  (Binary:  98.9% Ternary:   0.4% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasMinorGrp(0))  ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  1 :: not atom(hasMinorGrp(2))  ; 
  1 :: not atom(hasMinorGrp(3))  ; 
  1 :: not atom(hasOiliness(0))  ; 
  1 :: not atom(hasOiliness(1))  ; 
  1 :: not atom(hasOilyLevel(0))  ; 
  1 :: not atom(hasOilyLevel(1))  ; 
  1 :: not atom(hasOilyLevel(2))  ; 
  2 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasOilyLevel(1))  ; 
  2 :: atom(hasMinorGrp(2)) ; 
  10 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasOilyLevel(2)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasPriceLevel(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasOilyLevel(1))  ; 
  3 :: not atom(hasPriceLevel(0))  ; 
  10 :: not atom(hasPriceLevel(1))  ; 
  1 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOilyLevel(2)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasPriceLevel(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasPriceLevel(1)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  6 :: not atom(hasOftenSold(1))  ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasOiliness(1)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  9 :: not atom(hasMinorGrp(0))  ; 
  6 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(hasPrice(0))  ; 
  3 :: atom(hasOilyLevel(1)) ; 
  6 :: not atom(hasOftenSold(1))  ; 
  6 :: not atom(hasOilyLevel(1))  ; 
  2 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasPriceLevel(2)) ; 
  11 :: not atom(hasPriceLevel(0))  ; 
  3 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(hasPrice(0))  ; 
  3 :: atom(hasOilyLevel(1)) ; 
  6 :: not atom(hasOftenSold(1))  ; 
  6 :: not atom(hasOilyLevel(1))  ; 
  2 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasPriceLevel(2)) ; 
  3 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(hasPrice(0))  ; 
  3 :: atom(hasOilyLevel(1)) ; 
  6 :: not atom(hasOftenSold(1))  ; 
  6 :: not atom(hasOilyLevel(1))  ; 
  2 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(hasPrice(0))  ; 
  3 :: atom(hasOilyLevel(1)) ; 
  6 :: not atom(hasOftenSold(1))  ; 
  6 :: not atom(hasOilyLevel(1))  ; 
  2 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasPriceLevel(2)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  7 :: not atom(hasPrice(0))  ; 
  1 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasOiliness(1)) ; 
  10 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  11 :: not atom(hasOilyLevel(1))  ; 
  6 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasPriceLevel(2))  ; 
  2 :: not atom(hasMinorGrp(1))  ; 
  4 :: atom(hasOilyLevel(0)) ; 
  11 :: atom(hasPriceLevel(1)) ; 
  9 :: not atom(hasMinorGrp(3))  ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  4 :: not atom(hasMinorGrp(2))  ; 
  10 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasOiliness(1))  ; 
  1 :: atom(hasPriceLevel(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPriceLevel(1)) ; 
  7 :: not atom(hasOilyLevel(1))  ; 
  1 :: not atom(hasPrice(0))  ; 
  12 :: atom(hasMinorGrp(0)) ; 
  8 :: not atom(hasOiliness(0))  ; 
  11 :: atom(hasOilyLevel(1)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasOiliness(1)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  2 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasPriceLevel(1)) ; 
  4 :: atom(hasOilyLevel(1)) ; 
  3 :: not atom(hasOftenSold(0))  ; 
  1 :: atom(hasOftenSold(1)) 
}.
