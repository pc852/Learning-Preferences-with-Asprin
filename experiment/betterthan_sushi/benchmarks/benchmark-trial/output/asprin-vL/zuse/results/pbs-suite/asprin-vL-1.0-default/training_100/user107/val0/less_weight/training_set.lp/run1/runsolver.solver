asprin_vL version 1.0
Reading from stdin
-:314:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:324:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:339:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:420:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:681:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:694:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:871:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1000:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1072:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1076:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1076:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1082:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1181:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1207:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1327:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1361:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1383:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:231:1-16: info: no atoms over signature occur in program:
  output/3

-:223:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:224:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(1,eq,4) output(1,eq,3) output(1,eq,23) output(1,eq,5) output(1,eq,17) output(1,eq,78) output(1,eq,19) output(1,eq,8) output(1,eq,59) output(4,eq,3) output(4,eq,23) output(4,eq,5) output(4,eq,17) output(4,eq,78) output(4,eq,19) output(4,eq,8) output(4,eq,59) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(3,eq,78) output(3,eq,19) output(3,eq,8) output(3,eq,59) output(23,eq,5) output(23,eq,17) output(23,eq,78) output(23,eq,19) output(23,eq,8) output(23,eq,59) output(5,eq,17) output(5,eq,78) output(5,eq,19) output(5,eq,8) output(5,eq,59) output(17,eq,78) output(17,eq,19) output(17,eq,8) output(17,eq,59) output(78,eq,19) output(78,eq,8) output(78,eq,59) output(19,eq,8) output(19,eq,59) output(8,eq,59)
Optimization: 45 0
Answer: 2
preference(1,(1,2),1,for(neg(atom(hasPrice(0)))),4) preference(1,less(weight)) output(23,better,19) output(23,better,8) output(1,better,4) output(1,better,19) output(1,better,8) output(3,better,19) output(3,better,8) output(5,better,19) output(5,better,8) output(17,better,19) output(17,better,8) output(78,better,19) output(78,better,8) output(8,worse,59) output(19,worse,59) output(4,worse,3) output(4,worse,23) output(4,worse,5) output(4,worse,17) output(4,worse,78) output(4,worse,59) output(1,eq,3) output(1,eq,23) output(1,eq,5) output(1,eq,17) output(1,eq,78) output(1,eq,59) output(4,eq,19) output(4,eq,8) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(3,eq,78) output(3,eq,59) output(23,eq,5) output(23,eq,17) output(23,eq,78) output(23,eq,59) output(5,eq,17) output(5,eq,78) output(5,eq,59) output(17,eq,78) output(17,eq,59) output(78,eq,59) output(19,eq,8)
Optimization: 32 1
Answer: 3
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,less(weight)) output(23,better,19) output(23,better,8) output(23,better,59) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(1,worse,3) output(1,worse,23) output(1,worse,5) output(1,worse,17) output(1,worse,78) output(4,worse,3) output(4,worse,23) output(4,worse,5) output(4,worse,17) output(4,worse,78) output(1,eq,4) output(1,eq,19) output(1,eq,8) output(1,eq,59) output(4,eq,19) output(4,eq,8) output(4,eq,59) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(3,eq,78) output(23,eq,5) output(23,eq,17) output(23,eq,78) output(5,eq,17) output(5,eq,78) output(17,eq,78) output(19,eq,8) output(19,eq,59) output(8,eq,59)
Optimization: 30 1
Answer: 4
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),2) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(2)))),2) preference(1,(1,6),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),2) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),2) preference(1,(1,7),1,for(atom(hasOiliness(1))),11) preference(1,(1,10),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(23,better,78) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,59) output(3,better,78) output(5,better,78) output(17,better,78) output(4,better,3) output(4,better,23) output(4,better,5) output(4,better,17) output(4,better,78) output(4,better,59) output(23,worse,19) output(23,worse,8) output(23,worse,59) output(3,worse,19) output(3,worse,8) output(3,worse,59) output(5,worse,19) output(5,worse,8) output(5,worse,59) output(17,worse,19) output(17,worse,8) output(17,worse,59) output(78,worse,19) output(78,worse,8) output(78,worse,59) output(1,eq,4) output(1,eq,19) output(1,eq,8) output(4,eq,19) output(4,eq,8) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(23,eq,5) output(23,eq,17) output(5,eq,17) output(19,eq,8)
Optimization: 27 10
Answer: 5
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),2) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(2)))),2) preference(1,(1,6),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),2) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),2) preference(1,(1,7),1,for(atom(hasOiliness(1))),11) preference(1,(1,10),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(23,better,78) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,59) output(3,better,78) output(3,better,59) output(5,better,78) output(5,better,59) output(17,better,78) output(17,better,59) output(4,better,3) output(4,better,23) output(4,better,5) output(4,better,17) output(4,better,78) output(4,better,59) output(23,worse,19) output(23,worse,8) output(3,worse,19) output(3,worse,8) output(5,worse,19) output(5,worse,8) output(17,worse,19) output(17,worse,8) output(78,worse,19) output(78,worse,8) output(78,worse,59) output(1,eq,4) output(1,eq,19) output(1,eq,8) output(4,eq,19) output(4,eq,8) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(23,eq,5) output(23,eq,17) output(5,eq,17) output(19,eq,8)
Optimization: 23 10
Answer: 6
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,4),1,for(neg(atom(hasOiliness(1)))),1) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),4) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),1) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,1),1,for(atom(hasPriceLevel(0))),1) preference(1,(1,3),1,for(atom(hasOilyLevel(0))),1) preference(1,(1,5),1,for(atom(hasOftenSold(1))),1) preference(1,(1,6),1,for(atom(hasOftenSold(0))),5) preference(1,(1,10),1,for(atom(hasOiliness(0))),1) preference(1,less(weight)) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,78) output(1,better,59) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,59) output(4,better,78) output(4,better,59) output(78,better,59) output(1,worse,3) output(1,worse,23) output(1,worse,5) output(4,worse,3) output(4,worse,23) output(4,worse,5) output(78,worse,19) output(78,worse,8) output(1,eq,4) output(1,eq,17) output(1,eq,19) output(1,eq,8) output(4,eq,17) output(4,eq,19) output(4,eq,8) output(3,eq,23) output(3,eq,5) output(23,eq,5) output(17,eq,19) output(17,eq,8) output(19,eq,8)
Optimization: 21 10
Answer: 7
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,4),1,for(neg(atom(hasOiliness(1)))),1) preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),11) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(2)))),3) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),4) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),1) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,1),1,for(atom(hasPriceLevel(0))),1) preference(1,(1,3),1,for(atom(hasOilyLevel(0))),1) preference(1,(1,10),1,for(atom(hasOiliness(0))),1) preference(1,less(weight)) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,78) output(1,better,59) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,59) output(4,better,17) output(4,better,78) output(4,better,59) output(78,better,59) output(1,worse,4) output(1,worse,3) output(1,worse,23) output(1,worse,5) output(1,worse,19) output(1,worse,8) output(17,worse,19) output(17,worse,8) output(4,worse,3) output(4,worse,23) output(4,worse,5) output(78,worse,19) output(78,worse,8) output(1,eq,17) output(4,eq,19) output(4,eq,8) output(3,eq,23) output(3,eq,5) output(23,eq,5) output(19,eq,8)
Optimization: 20 10
Answer: 8
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),10) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),6) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(2)))),11) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),1) preference(1,(1,2),1,for(atom(hasPriceLevel(0))),1) preference(1,(1,5),1,for(atom(hasOiliness(1))),11) preference(1,(1,10),1,for(atom(hasPrice(0))),11) preference(1,less(weight)) output(23,better,19) output(23,better,8) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,19) output(3,better,8) output(5,better,19) output(5,better,8) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(4,better,3) output(4,better,23) output(4,better,5) output(4,better,17) output(4,better,78) output(4,better,19) output(4,better,8) output(4,better,59) output(78,better,19) output(78,better,8) output(23,worse,17) output(8,worse,59) output(19,worse,59) output(1,worse,4) output(3,worse,17) output(5,worse,17) output(1,eq,17) output(3,eq,23) output(3,eq,5) output(3,eq,78) output(3,eq,59) output(23,eq,5) output(23,eq,78) output(23,eq,59) output(5,eq,78) output(5,eq,59) output(78,eq,59) output(19,eq,8)
Optimization: 18 10
Answer: 9
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),10) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),9) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(2)))),11) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),1) preference(1,(1,2),1,for(atom(hasPriceLevel(0))),1) preference(1,(1,5),1,for(atom(hasOiliness(1))),11) preference(1,(1,10),1,for(atom(hasPrice(0))),11) preference(1,less(weight)) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(4,better,3) output(4,better,23) output(4,better,5) output(4,better,17) output(4,better,78) output(4,better,19) output(4,better,8) output(4,better,59) output(78,better,19) output(78,better,8) output(8,worse,59) output(19,worse,59) output(1,worse,4) output(1,eq,3) output(1,eq,23) output(1,eq,5) output(1,eq,17) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(23,eq,5) output(23,eq,17) output(5,eq,17) output(78,eq,59) output(19,eq,8)
Optimization: 15 10
Progression : [ 1;15] (Error: 14)
Progression : [ 2;15] (Error: 6.5)
Progression : [ 3;15] (Error: 4)
Answer: 10
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(3)))),12) preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),11) preference(1,(1,9),1,for(neg(atom(hasOftenSold(0)))),12) preference(1,(1,10),1,for(neg(atom(hasPrice(0)))),3) preference(1,(1,1),1,for(atom(hasOftenSold(1))),12) preference(1,(1,2),1,for(atom(hasOilyLevel(0))),12) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),12) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),6) preference(1,(1,8),1,for(atom(hasOiliness(0))),6) preference(1,less(weight)) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,23) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(4,better,78) output(4,better,19) output(4,better,8) output(4,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(23,worse,5) output(23,worse,17) output(1,worse,4) output(1,worse,3) output(1,worse,23) output(1,worse,5) output(1,worse,17) output(1,worse,78) output(4,worse,3) output(4,worse,23) output(4,worse,5) output(4,worse,17) output(3,eq,5) output(19,eq,8)
Optimization: 14 10
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(2)))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,6),1,for(atom(hasOftenSold(0))),10) preference(1,(1,8),1,for(atom(hasPriceLevel(1))),1) preference(1,(1,10),1,for(atom(hasOilyLevel(1))),3) preference(1,less(weight)) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,4) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(4,better,3) output(4,better,23) output(4,better,5) output(4,better,17) output(4,better,78) output(4,better,19) output(4,better,8) output(4,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(3,eq,23) output(3,eq,5) output(23,eq,5) output(19,eq,8)
Optimization: 4 9
Answer: 12
preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(2)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),2) preference(1,(1,6),1,for(atom(hasOftenSold(0))),10) preference(1,(1,8),1,for(atom(hasPriceLevel(1))),1) preference(1,(1,10),1,for(atom(hasOilyLevel(1))),3) preference(1,less(weight)) output(23,better,5) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,4) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(4,better,3) output(4,better,23) output(4,better,5) output(4,better,17) output(4,better,78) output(4,better,19) output(4,better,8) output(4,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(3,worse,23) output(3,eq,5) output(19,eq,8)
Optimization: 3 9
Progression : 3 [1;9] (Error: 8)
Progression : 3 [2;9] (Error: 3.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.141 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 12+
  Optimum    : unknown
Optimization : 3 9
Bounds       : 3 [2;9]
Calls        : 1
Time         : 1198.338s (Solving: 1192.44s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 4772.181s
Threads      : 4        (Winner: 4)

Choices      : 11540985 (Domain: 14548)
Conflicts    : 4527012  (Analyzed: 4527007)
Restarts     : 3867     (Average: 1170.68 Last: 276538)
Model-Level  : 168.5   
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 4533634  (Deleted: 4230421)
  Binary     : 312      (Ratio:   0.01%)
  Ternary    : 366      (Ratio:   0.01%)
  Conflict   : 4527007  (Average Length: 1068.4 Ratio:  99.85%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 6627     (Average Length:   70.8 Ratio:   0.15%) 
  Distributed: 2209     (Ratio:   0.05% Average LBD: 3.67) 
  Integrated : 6627     (Ratio: 300.00% Unit: 27 Average Jumps: 57.22)
Backjumps    : 4527007  (Average:  2.00 Max: 2677 Sum: 9058927)
  Executed   : 4526973  (Average:  2.00 Max: 2677 Sum: 9057781 Ratio:  99.99%)
  Bounded    : 34       (Average: 33.71 Max:  43 Sum:   1146 Ratio:   0.01%)

Rules        : 1615548 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 467501  
Bodies       : 470987  
  Sum        : 270     
  Count      : 10      
Equivalences : 1389530  (Atom=Atom: 449313 Body=Body: 459184 Other: 481033)
Tight        : Yes
Variables    : 16675    (Eliminated:    0 Frozen: 11715)
Constraints  : 1181671  (Binary:  98.9% Ternary:   0.4% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOilyLevel(0)) ; 
  2 :: not atom(hasMinorGrp(1))  ; 
  2 :: atom(hasPriceLevel(0)) ; 
  2 :: not atom(hasPrice(1))  ; 
  2 :: not atom(hasPriceLevel(2))  ; 
  1 :: not atom(hasOftenSold(1))  ; 
  11 :: atom(hasOiliness(1)) ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOilyLevel(0)) ; 
  2 :: not atom(hasMinorGrp(1))  ; 
  2 :: atom(hasPriceLevel(0)) ; 
  2 :: not atom(hasPrice(1))  ; 
  2 :: not atom(hasPriceLevel(2))  ; 
  12 :: not atom(hasOftenSold(1))  ; 
  11 :: atom(hasOiliness(1)) ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPriceLevel(0)) ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  1 :: atom(hasOilyLevel(0)) ; 
  1 :: not atom(hasOiliness(1))  ; 
  1 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  4 :: not atom(hasOilyLevel(2))  ; 
  1 :: not atom(hasMinorGrp(2))  ; 
  1 :: not atom(hasOilyLevel(1))  ; 
  1 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPriceLevel(0)) ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  1 :: atom(hasOilyLevel(0)) ; 
  1 :: not atom(hasOiliness(1))  ; 
  11 :: not atom(hasOftenSold(1))  ; 
  3 :: not atom(hasPriceLevel(2))  ; 
  4 :: not atom(hasOilyLevel(2))  ; 
  1 :: not atom(hasMinorGrp(2))  ; 
  1 :: not atom(hasOilyLevel(1))  ; 
  1 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOilyLevel(0)) ; 
  1 :: atom(hasPriceLevel(0)) ; 
  1 :: not atom(hasMinorGrp(0))  ; 
  11 :: not atom(hasMinorGrp(2))  ; 
  11 :: atom(hasOiliness(1)) ; 
  10 :: not atom(hasPrice(0))  ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  6 :: not atom(hasPriceLevel(1))  ; 
  11 :: not atom(hasPriceLevel(2))  ; 
  11 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOilyLevel(0)) ; 
  1 :: atom(hasPriceLevel(0)) ; 
  1 :: not atom(hasMinorGrp(0))  ; 
  11 :: not atom(hasMinorGrp(2))  ; 
  11 :: atom(hasOiliness(1)) ; 
  10 :: not atom(hasPrice(0))  ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  9 :: not atom(hasOftenSold(1))  ; 
  11 :: not atom(hasPriceLevel(2))  ; 
  11 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOftenSold(1)) ; 
  12 :: atom(hasOilyLevel(0)) ; 
  12 :: atom(hasPriceLevel(0)) ; 
  12 :: not atom(hasMinorGrp(3))  ; 
  11 :: not atom(hasOftenSold(1))  ; 
  7 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPriceLevel(1)) ; 
  6 :: atom(hasOiliness(0)) ; 
  12 :: not atom(hasOftenSold(0))  ; 
  3 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasPrice(0))  ; 
  2 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  4 :: not atom(hasOftenSold(1))  ; 
  1 :: atom(hasPriceLevel(1)) ; 
  10 :: not atom(hasMinorGrp(2))  ; 
  3 :: atom(hasOilyLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  9 :: not atom(hasPrice(0))  ; 
  2 :: atom(hasPriceLevel(2)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  4 :: not atom(hasOftenSold(1))  ; 
  1 :: atom(hasPriceLevel(1)) ; 
  10 :: not atom(hasMinorGrp(2))  ; 
  3 :: atom(hasOilyLevel(1)) 
}.
