asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(1,eq,7) output(1,eq,5) output(1,eq,4) output(1,eq,2) output(1,eq,6) output(1,eq,3) output(1,eq,0) output(1,eq,8) output(7,eq,5) output(7,eq,4) output(7,eq,2) output(7,eq,6) output(7,eq,3) output(7,eq,0) output(7,eq,8) output(5,eq,4) output(5,eq,2) output(5,eq,6) output(5,eq,3) output(5,eq,0) output(5,eq,8) output(4,eq,2) output(4,eq,6) output(4,eq,3) output(4,eq,0) output(4,eq,8) output(2,eq,6) output(2,eq,3) output(2,eq,0) output(2,eq,8) output(6,eq,3) output(6,eq,0) output(6,eq,8) output(3,eq,0) output(3,eq,8) output(0,eq,8)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(hasPrice(1))),12) preference(1,less(weight)) output(2,better,6) output(2,better,8) output(1,better,4) output(1,better,6) output(1,better,8) output(3,better,8) output(5,better,4) output(5,better,6) output(5,better,8) output(0,better,8) output(7,better,4) output(7,better,6) output(7,better,8) output(6,worse,3) output(6,worse,0) output(4,worse,2) output(4,worse,3) output(4,worse,0) output(1,eq,7) output(1,eq,5) output(1,eq,2) output(1,eq,3) output(1,eq,0) output(7,eq,5) output(7,eq,2) output(7,eq,3) output(7,eq,0) output(5,eq,2) output(5,eq,3) output(5,eq,0) output(4,eq,6) output(4,eq,8) output(2,eq,3) output(2,eq,0) output(6,eq,8) output(3,eq,0)
Optimization: 23 1
Answer: 3
preference(1,(1,6),1,for(atom(hasOilyLevel(2))),12) preference(1,(1,7),1,for(atom(hasPrice(1))),12) preference(1,less(weight)) output(2,better,6) output(2,better,3) output(2,better,0) output(2,better,8) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,3) output(1,better,0) output(1,better,8) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(5,worse,2) output(4,worse,2) output(1,eq,7) output(1,eq,2) output(7,eq,2) output(5,eq,4) output(5,eq,6) output(5,eq,3) output(5,eq,0) output(5,eq,8) output(4,eq,6) output(4,eq,3) output(4,eq,0) output(4,eq,8) output(6,eq,3) output(6,eq,0) output(6,eq,8) output(3,eq,0) output(3,eq,8) output(0,eq,8)
Optimization: 20 2
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasOilyLevel(0)))),3) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),12) preference(1,(1,13),1,for(neg(atom(hasPrice(0)))),4) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),12) preference(1,(1,2),1,for(atom(hasOilyLevel(1))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),12) preference(1,(1,14),1,for(atom(hasOilyLevel(2))),5) preference(1,less(weight)) output(2,better,6) output(2,better,0) output(2,better,8) output(1,better,7) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,0) output(1,better,8) output(3,better,0) output(3,better,8) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,0) output(5,better,8) output(6,better,0) output(4,better,0) output(7,better,0) output(2,worse,3) output(1,worse,5) output(1,worse,3) output(0,worse,8) output(6,worse,3) output(4,worse,2) output(4,worse,3) output(7,worse,5) output(7,worse,4) output(7,worse,2) output(7,worse,6) output(7,worse,3) output(7,worse,8) output(5,eq,3) output(4,eq,6) output(4,eq,8) output(6,eq,8)
Optimization: 17 9
Answer: 5
preference(1,(1,7),1,for(neg(atom(hasOilyLevel(0)))),3) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,13),1,for(neg(atom(hasPrice(0)))),4) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),12) preference(1,(1,2),1,for(atom(hasOilyLevel(1))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),12) preference(1,(1,14),1,for(atom(hasOilyLevel(2))),5) preference(1,less(weight)) output(2,better,6) output(2,better,0) output(2,better,8) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,0) output(1,better,8) output(3,better,0) output(3,better,8) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,0) output(5,better,8) output(6,better,0) output(4,better,0) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(2,worse,3) output(1,worse,7) output(1,worse,5) output(1,worse,3) output(0,worse,8) output(6,worse,3) output(4,worse,2) output(4,worse,3) output(5,eq,3) output(4,eq,6) output(4,eq,8) output(6,eq,8)
Optimization: 12 8
Answer: 6
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),7) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,7),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,10),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,5),1,for(atom(hasOiliness(1))),10) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,9),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,12),1,for(atom(hasPrice(1))),10) preference(1,(1,13),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),5) preference(1,less(weight)) output(2,better,6) output(2,better,3) output(2,better,0) output(2,better,8) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,0) output(1,better,8) output(0,better,8) output(6,better,3) output(6,better,0) output(6,better,8) output(4,better,3) output(4,better,0) output(4,better,8) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(3,worse,0) output(3,worse,8) output(5,worse,4) output(5,worse,2) output(5,worse,6) output(5,worse,0) output(5,worse,8) output(4,worse,2) output(7,worse,2) output(5,eq,3) output(4,eq,6)
Optimization: 11 13
Answer: 7
preference(1,(1,4),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),7) preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,10),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,14),1,for(neg(atom(hasOilyLevel(0)))),4) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),3) preference(1,(1,2),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),9) preference(1,(1,7),1,for(atom(hasOiliness(1))),5) preference(1,(1,11),1,for(atom(hasOiliness(0))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),10) preference(1,(1,13),1,for(atom(hasOilyLevel(1))),12) preference(1,less(weight)) output(2,better,6) output(2,better,3) output(2,better,0) output(2,better,8) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,0) output(1,better,8) output(0,better,8) output(6,better,3) output(6,better,0) output(6,better,8) output(4,better,3) output(4,better,0) output(4,better,8) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(3,worse,0) output(3,worse,8) output(5,worse,4) output(5,worse,2) output(5,worse,6) output(5,worse,0) output(5,worse,8) output(4,worse,2) output(5,eq,3) output(4,eq,6)
Optimization: 10 14
Answer: 8
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),4) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(1)))),9) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(1)))),10) preference(1,(1,9),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(2)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,2),1,for(atom(hasOftenSold(0))),4) preference(1,(1,5),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,10),1,for(atom(hasPrice(1))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,13),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,14),1,for(atom(hasPriceLevel(2))),7) preference(1,less(weight)) output(2,better,3) output(2,better,0) output(2,better,8) output(1,better,5) output(1,better,2) output(1,better,3) output(1,better,0) output(1,better,8) output(3,better,0) output(3,better,8) output(5,better,0) output(5,better,8) output(0,better,8) output(6,better,3) output(6,better,0) output(6,better,8) output(4,better,2) output(4,better,3) output(4,better,0) output(4,better,8) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(2,worse,6) output(1,worse,7) output(5,worse,4) output(5,worse,2) output(5,worse,6) output(1,eq,4) output(1,eq,6) output(5,eq,3) output(4,eq,6)
Optimization: 9 14
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(1)))),10) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),4) preference(1,(1,9),1,for(neg(atom(hasOiliness(0)))),5) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(0)))),2) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),9) preference(1,(1,3),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,5),1,for(atom(hasPrice(1))),8) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,14),1,for(atom(hasPriceLevel(1))),2) preference(1,less(weight)) output(2,better,3) output(2,better,0) output(2,better,8) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,0) output(1,better,8) output(3,better,0) output(3,better,8) output(5,better,0) output(5,better,8) output(6,better,3) output(6,better,0) output(6,better,8) output(4,better,2) output(4,better,3) output(4,better,0) output(4,better,8) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(2,worse,6) output(5,worse,4) output(5,worse,2) output(5,worse,6) output(0,worse,8) output(1,eq,7) output(5,eq,3) output(4,eq,6)
Optimization: 8 14
Answer: 10
preference(1,(1,1),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,4),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),10) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(0)))),2) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),9) preference(1,(1,3),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,5),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,7),1,for(atom(hasOftenSold(0))),4) preference(1,(1,9),1,for(atom(hasPrice(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,14),1,for(atom(hasOilyLevel(1))),9) preference(1,less(weight)) output(2,better,8) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,0) output(1,better,8) output(3,better,0) output(3,better,8) output(5,better,2) output(5,better,0) output(5,better,8) output(0,better,8) output(6,better,3) output(6,better,0) output(6,better,8) output(4,better,2) output(4,better,3) output(4,better,0) output(4,better,8) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(2,worse,6) output(2,worse,3) output(2,worse,0) output(5,worse,4) output(5,worse,6) output(5,eq,3) output(4,eq,6)
Optimization: 7 14
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,3),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,4),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),10) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(0)))),2) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),9) preference(1,(1,5),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,7),1,for(atom(hasOftenSold(0))),4) preference(1,(1,9),1,for(atom(hasPrice(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,14),1,for(atom(hasOilyLevel(1))),9) preference(1,less(weight)) output(2,better,0) output(2,better,8) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,0) output(1,better,8) output(3,better,0) output(3,better,8) output(5,better,2) output(5,better,0) output(5,better,8) output(0,better,8) output(6,better,3) output(6,better,0) output(6,better,8) output(4,better,2) output(4,better,3) output(4,better,0) output(4,better,8) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(2,worse,6) output(2,worse,3) output(5,worse,4) output(5,worse,6) output(5,eq,3) output(4,eq,6)
Optimization: 6 14
Progression : [1;6] (Error: 5)
Progression : [2;6] (Error: 2)
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(3)))),6) preference(1,(1,4),1,for(neg(atom(hasOftenSold(0)))),1) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),7) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,2),1,for(atom(hasOftenSold(1))),11) preference(1,(1,3),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,5),1,for(atom(hasPriceLevel(0))),4) preference(1,(1,6),1,for(atom(hasPrice(1))),3) preference(1,(1,8),1,for(atom(hasOilyLevel(0))),12) preference(1,(1,11),1,for(atom(hasOiliness(1))),8) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),9) preference(1,(1,14),1,for(atom(hasOilyLevel(1))),3) preference(1,less(weight)) output(2,better,6) output(2,better,3) output(2,better,0) output(2,better,8) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,0) output(1,better,8) output(3,better,0) output(3,better,8) output(5,better,0) output(5,better,8) output(0,better,8) output(6,better,3) output(6,better,0) output(6,better,8) output(4,better,3) output(4,better,0) output(4,better,8) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(5,worse,4) output(5,worse,2) output(5,worse,6) output(4,worse,2) output(5,eq,3) output(4,eq,6)
Optimization: 6 13
Progression : [3;6] (Error: 1)
Progression : [4;6] (Error: 0.5)
Answer: 13
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(3)))),12) preference(1,(1,10),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,11),1,for(neg(atom(hasOftenSold(0)))),11) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),1) preference(1,(1,2),1,for(atom(hasPriceLevel(0))),6) preference(1,(1,3),1,for(atom(hasPriceLevel(1))),5) preference(1,(1,6),1,for(atom(hasOftenSold(1))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,9),1,for(atom(hasPrice(1))),3) preference(1,(1,12),1,for(atom(hasOilyLevel(1))),8) preference(1,less(weight)) output(2,better,6) output(2,better,0) output(2,better,8) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,0) output(1,better,8) output(3,better,0) output(3,better,8) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,0) output(5,better,8) output(0,better,8) output(6,better,0) output(6,better,8) output(4,better,0) output(4,better,8) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,0) output(7,better,8) output(2,worse,3) output(6,worse,3) output(4,worse,2) output(4,worse,3) output(5,eq,3) output(4,eq,6)
Optimization: 6 12
Progression : [5;6] (Error: 0.2)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.037 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 13+
  Optimum    : unknown
Optimization : 6 12
Bounds       : [5;6] [0;12]
Calls        : 1
Time         : 597.875s (Solving: 590.77s 1st Model: 0.06s Unsat: 0.00s)
CPU Time     : 2369.955s
Threads      : 4        (Winner: 4)

Choices      : 4749501  (Domain: 9661)
Conflicts    : 4017310  (Analyzed: 4017305)
Restarts     : 6287     (Average: 638.99 Last: 110092)
Model-Level  : 652.4   
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 4037344  (Deleted: 3662670)
  Binary     : 2091     (Ratio:   0.05%)
  Ternary    : 617      (Ratio:   0.02%)
  Conflict   : 4017302  (Average Length:  358.4 Ratio:  99.50%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 20042    (Average Length:   84.8 Ratio:   0.50%) 
  Distributed: 6682     (Ratio:   0.17% Average LBD: 3.47) 
  Integrated : 20046    (Ratio: 300.00% Unit: 489 Average Jumps: 7.54)
Backjumps    : 4017305  (Average:  1.15 Max: 1010 Sum: 4612681)
  Executed   : 4017271  (Average:  1.15 Max: 1010 Sum: 4612135 Ratio:  99.99%)
  Bounded    : 34       (Average: 16.06 Max:  37 Sum:    546 Ratio:   0.01%)

Rules        : 1818507 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 510235  
Bodies       : 520908  
  Sum        : 216     
  Count      : 14      
Equivalences : 1527012  (Atom=Atom: 491623 Body=Body: 503816 Other: 531573)
Tight        : Yes
Variables    : 19827    (Eliminated:    0 Frozen: 12883)
Constraints  : 1347217  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOilyLevel(2)) ; 
  12 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(1)) ; 
  1 :: atom(hasOilyLevel(1)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOilyLevel(0))  ; 
  12 :: not atom(hasOilyLevel(2))  ; 
  4 :: not atom(hasPrice(0))  ; 
  5 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(1)) ; 
  1 :: atom(hasOilyLevel(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOilyLevel(0))  ; 
  12 :: not atom(hasOftenSold(1))  ; 
  4 :: not atom(hasPrice(0))  ; 
  5 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPriceLevel(1)) ; 
  7 :: not atom(hasOilyLevel(1))  ; 
  9 :: atom(hasMinorGrp(0)) ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  10 :: atom(hasOiliness(1)) ; 
  9 :: atom(hasOilyLevel(2)) ; 
  1 :: not atom(hasOiliness(0))  ; 
  1 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  2 :: not atom(hasOiliness(1))  ; 
  10 :: atom(hasPrice(1)) ; 
  12 :: atom(hasOilyLevel(1)) ; 
  5 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPriceLevel(1)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(hasOilyLevel(2)) ; 
  5 :: atom(hasOiliness(1)) ; 
  7 :: not atom(hasPrice(0))  ; 
  2 :: not atom(hasOiliness(1))  ; 
  1 :: not atom(hasOiliness(0))  ; 
  1 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasPrice(1)) ; 
  12 :: atom(hasOilyLevel(1)) ; 
  4 :: not atom(hasOilyLevel(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  4 :: not atom(hasPrice(0))  ; 
  9 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasPriceLevel(1)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  10 :: not atom(hasOilyLevel(1))  ; 
  12 :: not atom(hasOftenSold(1))  ; 
  5 :: atom(hasPrice(1)) ; 
  9 :: not atom(hasMinorGrp(2))  ; 
  7 :: atom(hasMinorGrp(0)) ; 
  12 :: atom(hasOilyLevel(1)) ; 
  7 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasPrice(0))  ; 
  9 :: atom(hasOilyLevel(2)) ; 
  12 :: atom(hasOilyLevel(1)) ; 
  10 :: not atom(hasOilyLevel(1))  ; 
  8 :: atom(hasPrice(1)) ; 
  6 :: not atom(hasPrice(1))  ; 
  4 :: not atom(hasOilyLevel(2))  ; 
  9 :: atom(hasMinorGrp(0)) ; 
  5 :: not atom(hasOiliness(0))  ; 
  4 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  2 :: not atom(hasPriceLevel(0))  ; 
  2 :: atom(hasPriceLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasPrice(1))  ; 
  9 :: atom(hasOilyLevel(2)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  12 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPriceLevel(1)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  10 :: not atom(hasPrice(0))  ; 
  3 :: atom(hasPrice(1)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  2 :: not atom(hasPriceLevel(0))  ; 
  9 :: atom(hasOilyLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasPrice(1))  ; 
  9 :: atom(hasOilyLevel(2)) ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  12 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPriceLevel(1)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  10 :: not atom(hasPrice(0))  ; 
  3 :: atom(hasPrice(1)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  2 :: not atom(hasPriceLevel(0))  ; 
  9 :: atom(hasOilyLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasMinorGrp(3))  ; 
  11 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasPriceLevel(1)) ; 
  1 :: not atom(hasOftenSold(0))  ; 
  4 :: atom(hasPriceLevel(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  7 :: not atom(hasMinorGrp(2))  ; 
  12 :: atom(hasOilyLevel(0)) ; 
  1 :: not atom(hasPrice(0))  ; 
  8 :: atom(hasOiliness(1)) ; 
  9 :: atom(hasPriceLevel(2)) ; 
  3 :: not atom(hasMinorGrp(0))  ; 
  3 :: atom(hasOilyLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOilyLevel(0)) ; 
  6 :: atom(hasPriceLevel(0)) ; 
  5 :: atom(hasPriceLevel(1)) ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  9 :: not atom(hasPrice(0))  ; 
  4 :: atom(hasOftenSold(1)) ; 
  12 :: not atom(hasMinorGrp(3))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasPrice(1)) ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  11 :: not atom(hasOftenSold(0))  ; 
  8 :: atom(hasOilyLevel(1)) 
}.
