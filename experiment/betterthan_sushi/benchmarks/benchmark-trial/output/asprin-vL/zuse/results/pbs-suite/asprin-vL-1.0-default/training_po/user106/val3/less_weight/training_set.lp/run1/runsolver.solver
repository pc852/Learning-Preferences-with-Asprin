asprin_vL version 1.0
Reading from stdin
-:235:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:245:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:260:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:341:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:602:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:615:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:792:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:921:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:993:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:997:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:997:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1003:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1102:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1128:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1248:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1282:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1304:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:152:1-16: info: no atoms over signature occur in program:
  output/3

-:144:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:145:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(2,eq,5) output(2,eq,4) output(2,eq,8) output(2,eq,0) output(2,eq,6) output(2,eq,9) output(2,eq,1) output(2,eq,7) output(5,eq,4) output(5,eq,8) output(5,eq,0) output(5,eq,6) output(5,eq,9) output(5,eq,1) output(5,eq,7) output(4,eq,8) output(4,eq,0) output(4,eq,6) output(4,eq,9) output(4,eq,1) output(4,eq,7) output(8,eq,0) output(8,eq,6) output(8,eq,9) output(8,eq,1) output(8,eq,7) output(0,eq,6) output(0,eq,9) output(0,eq,1) output(0,eq,7) output(6,eq,9) output(6,eq,1) output(6,eq,7) output(9,eq,1) output(9,eq,7) output(1,eq,7)
Optimization: 36 0
Answer: 2
preference(1,(1,10),1,for(atom(isChewy(1))),15) preference(1,less(weight)) output(2,better,5) output(5,worse,4) output(5,worse,8) output(5,worse,0) output(5,worse,6) output(5,worse,9) output(5,worse,1) output(5,worse,7) output(2,eq,4) output(2,eq,8) output(2,eq,0) output(2,eq,6) output(2,eq,9) output(2,eq,1) output(2,eq,7) output(4,eq,8) output(4,eq,0) output(4,eq,6) output(4,eq,9) output(4,eq,1) output(4,eq,7) output(8,eq,0) output(8,eq,6) output(8,eq,9) output(8,eq,1) output(8,eq,7) output(0,eq,6) output(0,eq,9) output(0,eq,1) output(0,eq,7) output(6,eq,9) output(6,eq,1) output(6,eq,7) output(9,eq,1) output(9,eq,7) output(1,eq,7)
Optimization: 35 1
Answer: 3
preference(1,(1,10),1,for(atom(isUrchin(1))),15) preference(1,less(weight)) output(5,better,4) output(2,better,4) output(4,worse,8) output(4,worse,0) output(4,worse,6) output(4,worse,9) output(4,worse,1) output(4,worse,7) output(2,eq,5) output(2,eq,8) output(2,eq,0) output(2,eq,6) output(2,eq,9) output(2,eq,1) output(2,eq,7) output(5,eq,8) output(5,eq,0) output(5,eq,6) output(5,eq,9) output(5,eq,1) output(5,eq,7) output(8,eq,0) output(8,eq,6) output(8,eq,9) output(8,eq,1) output(8,eq,7) output(0,eq,6) output(0,eq,9) output(0,eq,1) output(0,eq,7) output(6,eq,9) output(6,eq,1) output(6,eq,7) output(9,eq,1) output(9,eq,7) output(1,eq,7)
Optimization: 34 1
Answer: 4
preference(1,(1,10),1,for(atom(isRoe(1))),15) preference(1,less(weight)) output(4,better,6) output(5,better,6) output(2,better,6) output(0,better,6) output(8,better,6) output(6,worse,9) output(6,worse,1) output(6,worse,7) output(2,eq,5) output(2,eq,4) output(2,eq,8) output(2,eq,0) output(2,eq,9) output(2,eq,1) output(2,eq,7) output(5,eq,4) output(5,eq,8) output(5,eq,0) output(5,eq,9) output(5,eq,1) output(5,eq,7) output(4,eq,8) output(4,eq,0) output(4,eq,9) output(4,eq,1) output(4,eq,7) output(8,eq,0) output(8,eq,9) output(8,eq,1) output(8,eq,7) output(0,eq,9) output(0,eq,1) output(0,eq,7) output(9,eq,1) output(9,eq,7) output(1,eq,7)
Optimization: 31 1
Answer: 5
preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),1) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),1) preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),1) preference(1,(1,4),1,for(neg(atom(isRoe(1)))),1) preference(1,(1,5),1,for(neg(atom(isShrimp(1)))),1) preference(1,(1,6),1,for(neg(atom(isFattyFish(1)))),1) preference(1,(1,7),1,for(neg(atom(isChewy(1)))),1) preference(1,(1,8),1,for(neg(atom(isCreamy(1)))),1) preference(1,(1,9),1,for(neg(atom(isUnique(1)))),1) preference(1,(1,10),1,for(neg(atom(hasPrice(1)))),2) preference(1,less(weight)) output(4,better,0) output(4,better,6) output(4,better,9) output(4,better,1) output(4,better,7) output(8,better,0) output(8,better,6) output(8,better,9) output(8,better,1) output(8,better,7) output(5,worse,4) output(5,worse,8) output(2,worse,4) output(2,worse,8) output(2,eq,5) output(2,eq,0) output(2,eq,6) output(2,eq,9) output(2,eq,1) output(2,eq,7) output(5,eq,0) output(5,eq,6) output(5,eq,9) output(5,eq,1) output(5,eq,7) output(4,eq,8) output(0,eq,6) output(0,eq,9) output(0,eq,1) output(0,eq,7) output(6,eq,9) output(6,eq,1) output(6,eq,7) output(9,eq,1) output(9,eq,7) output(1,eq,7)
Optimization: 26 10
Answer: 6
preference(1,(1,1),1,for(neg(atom(isRaw(1)))),4) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,2),1,for(atom(isRaw(0))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,4),1,for(atom(isShrimp(1))),6) preference(1,(1,5),1,for(atom(isUrchin(1))),7) preference(1,(1,6),1,for(atom(isCreamy(1))),6) preference(1,(1,7),1,for(atom(isUnique(1))),3) preference(1,(1,9),1,for(atom(isFattyFish(1))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(4,better,8) output(4,better,0) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,8) output(5,better,0) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,9) output(6,better,1) output(6,better,7) output(0,better,1) output(9,better,1) output(8,better,0) output(8,better,9) output(8,better,1) output(8,better,7) output(4,worse,6) output(5,worse,6) output(2,worse,6) output(0,worse,6) output(0,worse,9) output(0,worse,7) output(1,worse,7) output(8,worse,6) output(9,eq,7)
Optimization: 9 10
Answer: 7
preference(1,(1,1),1,for(neg(atom(isRaw(1)))),4) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,2),1,for(atom(isRaw(0))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,4),1,for(atom(isShrimp(1))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,6),1,for(atom(isUrchin(1))),7) preference(1,(1,7),1,for(atom(isUnique(1))),3) preference(1,(1,9),1,for(atom(isFattyFish(1))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(4,better,8) output(4,better,0) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,8) output(5,better,0) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,9) output(6,better,1) output(6,better,7) output(0,better,1) output(9,better,1) output(8,better,0) output(8,better,9) output(8,better,1) output(8,better,7) output(4,worse,6) output(5,worse,6) output(0,worse,6) output(0,worse,9) output(0,worse,7) output(1,worse,7) output(8,worse,6) output(9,eq,7)
Optimization: 8 10
Answer: 8
preference(1,(1,8),1,for(neg(atom(isRaw(1)))),4) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,2),1,for(atom(isUrchin(1))),3) preference(1,(1,3),1,for(atom(isUnique(1))),10) preference(1,(1,4),1,for(atom(isRoe(1))),5) preference(1,(1,5),1,for(atom(isCreamy(1))),2) preference(1,(1,6),1,for(atom(isRaw(0))),5) preference(1,(1,7),1,for(atom(isShrimp(1))),2) preference(1,(1,9),1,for(atom(isSweet(1))),5) preference(1,(1,10),1,for(atom(isFattyFish(1))),2) preference(1,less(weight)) output(4,better,0) output(4,better,6) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,1) output(0,better,6) output(0,better,9) output(0,better,1) output(9,better,1) output(8,better,0) output(8,better,6) output(8,better,9) output(8,better,1) output(8,better,7) output(4,worse,8) output(6,worse,9) output(6,worse,7) output(9,worse,7) output(1,worse,7) output(5,eq,8) output(0,eq,7)
Optimization: 7 10
Answer: 9
preference(1,(1,8),1,for(neg(atom(isRaw(1)))),4) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,2),1,for(atom(isUrchin(1))),3) preference(1,(1,3),1,for(atom(isUnique(1))),10) preference(1,(1,4),1,for(atom(isRoe(1))),5) preference(1,(1,5),1,for(atom(isCreamy(1))),2) preference(1,(1,6),1,for(atom(isRaw(0))),5) preference(1,(1,7),1,for(atom(isShrimp(1))),2) preference(1,(1,9),1,for(atom(isSweet(1))),5) preference(1,(1,10),1,for(atom(isFattyFish(1))),2) preference(1,less(weight)) output(4,better,0) output(4,better,6) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,8) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,1) output(0,better,6) output(0,better,9) output(0,better,1) output(9,better,1) output(8,better,0) output(8,better,6) output(8,better,9) output(8,better,1) output(8,better,7) output(6,worse,9) output(6,worse,7) output(9,worse,7) output(1,worse,7) output(4,eq,8) output(0,eq,7)
Optimization: 6 10
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,1),1,for(atom(isSweet(1))),4) preference(1,(1,3),1,for(atom(isFattyFish(1))),6) preference(1,(1,4),1,for(atom(isUnique(1))),10) preference(1,(1,5),1,for(atom(isCreamy(1))),4) preference(1,(1,6),1,for(atom(isRaw(0))),5) preference(1,(1,7),1,for(atom(isShrimp(1))),2) preference(1,(1,8),1,for(atom(isMaguro(1))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,10),1,for(atom(isUrchin(1))),2) preference(1,less(weight)) output(4,better,8) output(4,better,0) output(4,better,6) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,8) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,9) output(6,better,1) output(0,better,6) output(0,better,9) output(0,better,1) output(0,better,7) output(9,better,1) output(8,better,6) output(8,better,9) output(8,better,1) output(6,worse,7) output(9,worse,7) output(1,worse,7) output(8,worse,0) output(8,eq,7)
Optimization: 5 10
Answer: 11
preference(1,(1,2),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,3),1,for(atom(isFattyFish(1))),6) preference(1,(1,4),1,for(atom(isUnique(1))),10) preference(1,(1,5),1,for(atom(isMaguro(1))),2) preference(1,(1,6),1,for(atom(isRaw(0))),5) preference(1,(1,7),1,for(atom(isShrimp(1))),2) preference(1,(1,8),1,for(atom(isUrchin(1))),2) preference(1,(1,9),1,for(atom(isSweet(1))),4) preference(1,less(weight)) output(4,better,8) output(4,better,0) output(4,better,6) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,8) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,9) output(6,better,1) output(0,better,6) output(0,better,9) output(0,better,1) output(0,better,7) output(9,better,1) output(8,better,6) output(8,better,9) output(8,better,1) output(8,better,7) output(6,worse,7) output(9,worse,7) output(1,worse,7) output(8,worse,0)
Optimization: 4 8
Answer: 12
preference(1,(1,1),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,2),1,for(atom(isRaw(0))),4) preference(1,(1,3),1,for(atom(isFattyFish(1))),6) preference(1,(1,4),1,for(atom(isMaguro(1))),1) preference(1,(1,5),1,for(atom(isShrimp(1))),3) preference(1,(1,6),1,for(atom(isCreamy(1))),1) preference(1,(1,7),1,for(atom(isUnique(1))),2) preference(1,(1,8),1,for(atom(isRoe(1))),6) preference(1,(1,9),1,for(atom(isSweet(1))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),4) preference(1,less(weight)) output(4,better,8) output(4,better,0) output(4,better,6) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,8) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,9) output(6,better,1) output(6,better,7) output(0,better,6) output(0,better,9) output(0,better,1) output(0,better,7) output(9,better,1) output(9,better,7) output(8,better,9) output(8,better,1) output(8,better,7) output(1,worse,7) output(8,worse,0) output(8,eq,6)
Optimization: 3 10
Answer: 13
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,3),1,for(neg(atom(isOctopus(1)))),2) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),4) preference(1,(1,2),1,for(atom(hasPrice(1))),2) preference(1,(1,4),1,for(atom(isMaguro(1))),3) preference(1,(1,5),1,for(atom(isShrimp(1))),3) preference(1,(1,6),1,for(atom(isUnique(1))),7) preference(1,(1,7),1,for(atom(isRaw(0))),3) preference(1,(1,9),1,for(atom(isCreamy(1))),5) preference(1,(1,10),1,for(atom(isFattyFish(1))),6) preference(1,less(weight)) output(4,better,8) output(4,better,0) output(4,better,6) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,8) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,9) output(6,better,1) output(6,better,7) output(0,better,6) output(0,better,9) output(0,better,1) output(0,better,7) output(9,better,1) output(9,better,7) output(8,better,6) output(8,better,9) output(8,better,1) output(8,better,7) output(1,worse,7) output(8,eq,0)
Optimization: 2 10
Answer: 14
preference(1,(1,1),1,for(neg(atom(hasPrice(1)))),1) preference(1,(1,2),1,for(atom(isShrimp(1))),8) preference(1,(1,3),1,for(atom(isRoe(1))),4) preference(1,(1,4),1,for(atom(isCreamy(1))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,6),1,for(atom(isFattyFish(1))),12) preference(1,(1,7),1,for(atom(isUnique(1))),2) preference(1,(1,8),1,for(atom(hasPrice(0))),5) preference(1,(1,9),1,for(atom(isOctopus(1))),3) preference(1,(1,10),1,for(atom(isSweet(1))),3) preference(1,less(weight)) output(4,better,8) output(4,better,0) output(4,better,6) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,8) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,9) output(6,better,1) output(6,better,7) output(0,better,6) output(0,better,9) output(0,better,1) output(0,better,7) output(9,better,1) output(9,better,7) output(8,better,0) output(8,better,6) output(8,better,9) output(8,better,1) output(8,better,7) output(1,worse,7)
Optimization: 1 10
Answer: 15
preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),9) preference(1,(1,2),1,for(neg(atom(isRaw(0)))),8) preference(1,(1,5),1,for(neg(atom(isRaw(1)))),12) preference(1,(1,3),1,for(atom(isCreamy(1))),15) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,6),1,for(atom(isUnique(1))),11) preference(1,(1,7),1,for(atom(isRaw(0))),4) preference(1,(1,8),1,for(atom(isShrimp(1))),5) preference(1,(1,9),1,for(atom(isFattyFish(1))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),5) preference(1,less(weight)) output(4,better,8) output(4,better,0) output(4,better,6) output(4,better,9) output(4,better,1) output(4,better,7) output(5,better,4) output(5,better,8) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,1) output(5,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,9) output(2,better,1) output(2,better,7) output(6,better,9) output(6,better,1) output(6,better,7) output(0,better,6) output(0,better,9) output(0,better,1) output(0,better,7) output(9,better,1) output(9,better,7) output(1,better,7) output(8,better,0) output(8,better,6) output(8,better,9) output(8,better,1) output(8,better,7)
Optimization: 0 10
Progression : 0 [ 1;10] (Error: 9)
Progression : 0 [ 2;10] (Error: 4)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.061 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 15+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 1198.142s (Solving: 1191.53s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 4772.340s
Threads      : 4        (Winner: 4)

Choices      : 21253826 (Domain: 2980)
Conflicts    : 5165122  (Analyzed: 5165120)
Restarts     : 6064     (Average: 851.77 Last: 122979)
Model-Level  : 516.9   
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 5179515  (Deleted: 4869320)
  Binary     : 1796     (Ratio:   0.03%)
  Ternary    : 302      (Ratio:   0.01%)
  Conflict   : 5165120  (Average Length: 1211.9 Ratio:  99.72%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 14395    (Average Length:  102.2 Ratio:   0.28%) 
  Distributed: 4799     (Ratio:   0.09% Average LBD: 3.42) 
  Integrated : 14397    (Ratio: 300.00% Unit: 44 Average Jumps: 22.36)
Backjumps    : 5165120  (Average:  2.97 Max: 2485 Sum: 15336099)
  Executed   : 5165119  (Average:  2.97 Max: 2485 Sum: 15336070 Ratio: 100.00%)
  Bounded    : 1        (Average: 29.00 Max:  29 Sum:     29 Ratio:   0.00%)

Rules        : 1879841 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 676781  
Bodies       : 690548  
  Sum        : 216     
  Count      : 10      
Equivalences : 2043982  (Atom=Atom: 660348 Body=Body: 676777 Other: 706857)
Tight        : Yes
Variables    : 18647    (Eliminated:    0 Frozen: 13037)
Constraints  : 1239262  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(isUrchin(1))  ; 
  1 :: not atom(isOctopus(1))  ; 
  1 :: not atom(isMaguro(1))  ; 
  1 :: not atom(isRoe(1))  ; 
  1 :: not atom(isShrimp(1))  ; 
  1 :: not atom(isFattyFish(1))  ; 
  1 :: not atom(isChewy(1))  ; 
  1 :: not atom(isCreamy(1))  ; 
  1 :: not atom(isUnique(1))  ; 
  2 :: not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(isRaw(1))  ; 
  5 :: atom(isRaw(0)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(isShrimp(1)) ; 
  7 :: atom(isUrchin(1)) ; 
  6 :: atom(isCreamy(1)) ; 
  3 :: atom(isUnique(1)) ; 
  4 :: not atom(hasMinorGrp(2))  ; 
  8 :: atom(isFattyFish(1)) ; 
  2 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(isRaw(1))  ; 
  5 :: atom(isRaw(0)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(isShrimp(1)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(isUrchin(1)) ; 
  3 :: atom(isUnique(1)) ; 
  4 :: not atom(hasMinorGrp(2))  ; 
  8 :: atom(isFattyFish(1)) ; 
  2 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(isUrchin(1)) ; 
  10 :: atom(isUnique(1)) ; 
  5 :: atom(isRoe(1)) ; 
  2 :: atom(isCreamy(1)) ; 
  5 :: atom(isRaw(0)) ; 
  2 :: atom(isShrimp(1)) ; 
  4 :: not atom(isRaw(1))  ; 
  5 :: atom(isSweet(1)) ; 
  2 :: atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(isUrchin(1)) ; 
  10 :: atom(isUnique(1)) ; 
  5 :: atom(isRoe(1)) ; 
  2 :: atom(isCreamy(1)) ; 
  5 :: atom(isRaw(0)) ; 
  2 :: atom(isShrimp(1)) ; 
  4 :: not atom(isRaw(1))  ; 
  5 :: atom(isSweet(1)) ; 
  2 :: atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(isSweet(1)) ; 
  2 :: not atom(hasPrice(0))  ; 
  6 :: atom(isFattyFish(1)) ; 
  10 :: atom(isUnique(1)) ; 
  4 :: atom(isCreamy(1)) ; 
  5 :: atom(isRaw(0)) ; 
  2 :: atom(isShrimp(1)) ; 
  2 :: atom(isMaguro(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPrice(0))  ; 
  6 :: atom(isFattyFish(1)) ; 
  10 :: atom(isUnique(1)) ; 
  2 :: atom(isMaguro(1)) ; 
  5 :: atom(isRaw(0)) ; 
  2 :: atom(isShrimp(1)) ; 
  2 :: atom(isUrchin(1)) ; 
  4 :: atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(isRaw(0)) ; 
  6 :: atom(isFattyFish(1)) ; 
  1 :: atom(isMaguro(1)) ; 
  3 :: atom(isShrimp(1)) ; 
  1 :: atom(isCreamy(1)) ; 
  2 :: atom(isUnique(1)) ; 
  6 :: atom(isRoe(1)) ; 
  5 :: atom(isSweet(1)) ; 
  4 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasMinorGrp(1))  ; 
  2 :: atom(hasPrice(1)) ; 
  2 :: not atom(isOctopus(1))  ; 
  3 :: atom(isMaguro(1)) ; 
  3 :: atom(isShrimp(1)) ; 
  7 :: atom(isUnique(1)) ; 
  3 :: atom(isRaw(0)) ; 
  4 :: not atom(isRaw(1))  ; 
  5 :: atom(isCreamy(1)) ; 
  6 :: atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPrice(1))  ; 
  8 :: atom(isShrimp(1)) ; 
  4 :: atom(isRoe(1)) ; 
  8 :: atom(isCreamy(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(isFattyFish(1)) ; 
  2 :: atom(isUnique(1)) ; 
  5 :: atom(hasPrice(0)) ; 
  3 :: atom(isOctopus(1)) ; 
  3 :: atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: not atom(isUrchin(1))  ; 
  8 :: not atom(isRaw(0))  ; 
  15 :: atom(isCreamy(1)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  12 :: not atom(isRaw(1))  ; 
  11 :: atom(isUnique(1)) ; 
  4 :: atom(isRaw(0)) ; 
  5 :: atom(isShrimp(1)) ; 
  6 :: atom(isFattyFish(1)) ; 
  5 :: atom(hasMinorGrp(0)) 
}.
