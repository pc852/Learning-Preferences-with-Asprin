asprin_vL version 1.0
Reading from stdin
-:314:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:324:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:339:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:420:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:681:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:694:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:871:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1000:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1072:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1076:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1076:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1082:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1181:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1207:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1327:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1361:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1383:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:231:1-16: info: no atoms over signature occur in program:
  output/3

-:223:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:224:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(37,eq,1) output(37,eq,18) output(37,eq,11) output(37,eq,5) output(37,eq,35) output(37,eq,3) output(37,eq,52) output(37,eq,14) output(37,eq,4) output(1,eq,18) output(1,eq,11) output(1,eq,5) output(1,eq,35) output(1,eq,3) output(1,eq,52) output(1,eq,14) output(1,eq,4) output(18,eq,11) output(18,eq,5) output(18,eq,35) output(18,eq,3) output(18,eq,52) output(18,eq,14) output(18,eq,4) output(11,eq,5) output(11,eq,35) output(11,eq,3) output(11,eq,52) output(11,eq,14) output(11,eq,4) output(5,eq,35) output(5,eq,3) output(5,eq,52) output(5,eq,14) output(5,eq,4) output(35,eq,3) output(35,eq,52) output(35,eq,14) output(35,eq,4) output(3,eq,52) output(3,eq,14) output(3,eq,4) output(52,eq,14) output(52,eq,4) output(14,eq,4)
Optimization: 45 0
Answer: 2
preference(1,(1,7),1,for(atom(hasOilyLevel(2))),12) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,3) output(37,better,11) output(37,better,5) output(37,better,3) output(1,better,11) output(1,better,5) output(1,better,3) output(35,better,3) output(11,worse,35) output(11,worse,52) output(11,worse,14) output(11,worse,4) output(3,worse,52) output(3,worse,14) output(3,worse,4) output(5,worse,35) output(5,worse,52) output(5,worse,14) output(5,worse,4) output(37,eq,1) output(37,eq,18) output(37,eq,35) output(37,eq,52) output(37,eq,14) output(37,eq,4) output(1,eq,18) output(1,eq,35) output(1,eq,52) output(1,eq,14) output(1,eq,4) output(18,eq,35) output(18,eq,52) output(18,eq,14) output(18,eq,4) output(11,eq,5) output(11,eq,3) output(5,eq,3) output(35,eq,52) output(35,eq,14) output(35,eq,4) output(52,eq,14) output(52,eq,4) output(14,eq,4)
Optimization: 35 1
Answer: 3
preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(18,better,14) output(18,better,4) output(37,better,14) output(37,better,4) output(11,better,14) output(11,better,4) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,14) output(35,better,4) output(37,eq,1) output(37,eq,18) output(37,eq,11) output(37,eq,5) output(37,eq,35) output(37,eq,3) output(37,eq,52) output(1,eq,18) output(1,eq,11) output(1,eq,5) output(1,eq,35) output(1,eq,3) output(1,eq,52) output(18,eq,11) output(18,eq,5) output(18,eq,35) output(18,eq,3) output(18,eq,52) output(11,eq,5) output(11,eq,35) output(11,eq,3) output(11,eq,52) output(5,eq,35) output(5,eq,3) output(5,eq,52) output(35,eq,3) output(35,eq,52) output(3,eq,52) output(14,eq,4)
Optimization: 29 1
Answer: 4
preference(1,(1,6),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,7),1,for(atom(hasOilyLevel(2))),12) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,4) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,4) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,4) output(14,better,4) output(52,better,4) output(11,worse,52) output(11,worse,14) output(3,worse,52) output(3,worse,14) output(5,worse,52) output(5,worse,14) output(35,worse,52) output(35,worse,14) output(37,eq,1) output(37,eq,18) output(37,eq,52) output(37,eq,14) output(1,eq,18) output(1,eq,52) output(1,eq,14) output(18,eq,52) output(18,eq,14) output(11,eq,5) output(11,eq,35) output(11,eq,3) output(11,eq,4) output(5,eq,35) output(5,eq,3) output(5,eq,4) output(35,eq,3) output(35,eq,4) output(3,eq,4) output(52,eq,14)
Optimization: 28 2
Answer: 5
preference(1,(1,6),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),12) preference(1,less(weight)) output(18,better,35) output(18,better,14) output(18,better,4) output(37,better,35) output(37,better,14) output(37,better,4) output(11,better,35) output(11,better,14) output(11,better,4) output(1,better,35) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,35) output(5,better,14) output(5,better,4) output(35,worse,3) output(35,worse,52) output(37,eq,1) output(37,eq,18) output(37,eq,11) output(37,eq,5) output(37,eq,3) output(37,eq,52) output(1,eq,18) output(1,eq,11) output(1,eq,5) output(1,eq,3) output(1,eq,52) output(18,eq,11) output(18,eq,5) output(18,eq,3) output(18,eq,52) output(11,eq,5) output(11,eq,3) output(11,eq,52) output(5,eq,3) output(5,eq,52) output(35,eq,14) output(35,eq,4) output(3,eq,52) output(14,eq,4)
Optimization: 26 2
Answer: 6
preference(1,(1,6),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,7),1,for(atom(hasOilyLevel(2))),12) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,3) output(18,better,14) output(18,better,4) output(37,better,11) output(37,better,5) output(37,better,3) output(37,better,14) output(37,better,4) output(1,better,11) output(1,better,5) output(1,better,3) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(35,better,3) output(35,better,14) output(35,better,4) output(11,worse,35) output(11,worse,52) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(37,eq,1) output(37,eq,18) output(37,eq,35) output(37,eq,52) output(1,eq,18) output(1,eq,35) output(1,eq,52) output(18,eq,35) output(18,eq,52) output(11,eq,5) output(11,eq,3) output(11,eq,14) output(11,eq,4) output(5,eq,3) output(5,eq,14) output(5,eq,4) output(35,eq,52) output(3,eq,14) output(3,eq,4) output(14,eq,4)
Optimization: 25 2
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasOiliness(1)))),7) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,10),1,for(neg(atom(hasOftenSold(0)))),4) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),12) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),11) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,8),1,for(atom(hasPrice(1))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,14),1,for(atom(hasOftenSold(1))),6) preference(1,less(weight)) output(18,better,11) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,14) output(37,better,4) output(11,better,14) output(11,better,4) output(1,better,11) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,14) output(35,better,4) output(18,worse,35) output(18,worse,52) output(37,worse,52) output(11,worse,5) output(11,worse,35) output(11,worse,3) output(11,worse,52) output(1,worse,35) output(1,worse,52) output(14,worse,4) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(35,worse,52) output(1,eq,18) output(1,eq,5) output(1,eq,3) output(18,eq,5) output(18,eq,3) output(5,eq,3)
Optimization: 20 11
Answer: 8
preference(1,(1,1),1,for(neg(atom(hasOiliness(1)))),7) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(0)))),2) preference(1,(1,10),1,for(neg(atom(hasOftenSold(0)))),4) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),12) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),11) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),8) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,8),1,for(atom(hasPrice(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,14),1,for(atom(hasOftenSold(1))),6) preference(1,less(weight)) output(18,better,11) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,14) output(37,better,4) output(11,better,14) output(11,better,4) output(1,better,11) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,14) output(35,better,4) output(18,worse,35) output(18,worse,52) output(37,worse,52) output(11,worse,5) output(11,worse,35) output(11,worse,3) output(11,worse,52) output(1,worse,35) output(1,worse,52) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(35,worse,52) output(1,eq,18) output(1,eq,5) output(1,eq,3) output(18,eq,5) output(18,eq,3) output(5,eq,3)
Optimization: 19 12
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasOiliness(1)))),7) preference(1,(1,2),1,for(neg(atom(hasPriceLevel(0)))),3) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(0)))),2) preference(1,(1,10),1,for(neg(atom(hasOftenSold(0)))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),8) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,8),1,for(atom(hasPrice(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),6) preference(1,less(weight)) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,14) output(11,better,4) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,14) output(35,better,4) output(18,worse,11) output(18,worse,35) output(18,worse,52) output(37,worse,52) output(11,worse,52) output(1,worse,11) output(1,worse,35) output(1,worse,52) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(35,worse,52) output(1,eq,18) output(1,eq,5) output(1,eq,3) output(18,eq,5) output(18,eq,3) output(5,eq,3)
Optimization: 18 12
Progression : [ 1;18] (Error: 17)
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasPrice(1)))),3) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),6) preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,11),1,for(neg(atom(hasOftenSold(0)))),10) preference(1,(1,1),1,for(atom(hasOftenSold(0))),5) preference(1,(1,3),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),9) preference(1,(1,5),1,for(atom(hasOiliness(1))),12) preference(1,(1,6),1,for(atom(hasOiliness(0))),10) preference(1,(1,7),1,for(atom(hasOftenSold(1))),2) preference(1,(1,10),1,for(atom(hasPrice(0))),6) preference(1,(1,12),1,for(atom(hasPrice(1))),8) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,14) output(18,better,4) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,14) output(37,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,14) output(35,better,4) output(18,worse,52) output(37,worse,1) output(37,worse,52) output(11,worse,5) output(11,worse,35) output(11,worse,3) output(11,worse,52) output(11,worse,4) output(14,worse,4) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(35,worse,52) output(11,eq,14) output(5,eq,3)
Optimization: 15 14
Answer: 11
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),10) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),6) preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,11),1,for(neg(atom(hasOftenSold(0)))),10) preference(1,(1,1),1,for(atom(hasOftenSold(0))),5) preference(1,(1,3),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),9) preference(1,(1,5),1,for(atom(hasOiliness(1))),12) preference(1,(1,6),1,for(atom(hasOiliness(0))),10) preference(1,(1,7),1,for(atom(hasOftenSold(1))),2) preference(1,(1,10),1,for(atom(hasPrice(0))),6) preference(1,(1,12),1,for(atom(hasPrice(1))),8) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,11) output(37,better,5) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(37,worse,1) output(37,worse,18) output(37,worse,35) output(11,worse,5) output(11,worse,35) output(11,worse,3) output(11,worse,52) output(11,worse,4) output(14,worse,4) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(11,eq,14) output(5,eq,3)
Optimization: 14 14
Answer: 12
preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),6) preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,11),1,for(neg(atom(hasOftenSold(0)))),10) preference(1,(1,1),1,for(atom(hasOftenSold(0))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),11) preference(1,(1,3),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),9) preference(1,(1,5),1,for(atom(hasOiliness(1))),12) preference(1,(1,6),1,for(atom(hasOiliness(0))),10) preference(1,(1,7),1,for(atom(hasOftenSold(1))),2) preference(1,(1,10),1,for(atom(hasPrice(0))),6) preference(1,(1,12),1,for(atom(hasPrice(1))),8) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,11) output(37,better,5) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,3) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(5,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(37,worse,1) output(37,worse,18) output(37,worse,35) output(11,worse,35) output(11,worse,52) output(11,worse,4) output(14,worse,4) output(3,worse,52) output(3,worse,4) output(5,worse,35) output(5,worse,52) output(5,worse,4) output(5,eq,3)
Optimization: 13 14
Answer: 13
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),6) preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,11),1,for(neg(atom(hasOftenSold(0)))),10) preference(1,(1,1),1,for(atom(hasOftenSold(0))),5) preference(1,(1,3),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),9) preference(1,(1,5),1,for(atom(hasOiliness(1))),12) preference(1,(1,6),1,for(atom(hasOiliness(0))),10) preference(1,(1,7),1,for(atom(hasOftenSold(1))),2) preference(1,(1,10),1,for(atom(hasPrice(0))),6) preference(1,(1,12),1,for(atom(hasPrice(1))),8) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,3) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,14) output(35,better,4) output(37,worse,1) output(37,worse,18) output(11,worse,52) output(14,worse,4) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(35,worse,52) output(11,eq,35) output(5,eq,3)
Optimization: 10 14
Answer: 14
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),8) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(0)))),3) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),9) preference(1,(1,1),1,for(atom(hasOilyLevel(2))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,10),1,for(atom(hasOiliness(1))),6) preference(1,(1,11),1,for(atom(hasPrice(1))),3) preference(1,(1,12),1,for(atom(hasOftenSold(0))),7) preference(1,(1,14),1,for(atom(hasOilyLevel(1))),2) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,35) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,52) output(35,better,14) output(35,better,4) output(37,worse,1) output(37,worse,18) output(37,worse,11) output(37,worse,5) output(37,worse,35) output(37,worse,3) output(14,worse,4) output(35,worse,3) output(5,eq,3)
Optimization: 9 14
Answer: 15
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),8) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(0)))),5) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),9) preference(1,(1,1),1,for(atom(hasOftenSold(1))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,10),1,for(atom(hasOiliness(1))),6) preference(1,(1,11),1,for(atom(hasPrice(1))),3) preference(1,(1,12),1,for(atom(hasOftenSold(0))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),2) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,35) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,52) output(35,better,14) output(35,better,4) output(37,worse,1) output(37,worse,18) output(37,worse,11) output(37,worse,5) output(37,worse,35) output(37,worse,3) output(35,worse,3) output(5,eq,3)
Optimization: 8 14
Answer: 16
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(2)))),10) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,7),1,for(neg(atom(hasOftenSold(0)))),3) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),12) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,3),1,for(atom(hasOftenSold(0))),1) preference(1,(1,4),1,for(atom(hasPriceLevel(1))),12) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),6) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,12),1,for(atom(hasOiliness(1))),10) preference(1,(1,13),1,for(atom(hasPrice(0))),2) preference(1,(1,14),1,for(atom(hasPrice(1))),2) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,14) output(35,better,4) output(37,worse,1) output(14,worse,4) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(35,worse,52) output(5,eq,3)
Optimization: 7 14
Answer: 17
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),12) preference(1,(1,7),1,for(neg(atom(hasPriceLevel(0)))),2) preference(1,(1,10),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,11),1,for(neg(atom(hasOilyLevel(0)))),5) preference(1,(1,14),1,for(neg(atom(hasOftenSold(0)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,2),1,for(atom(hasPrice(1))),2) preference(1,(1,4),1,for(atom(hasOftenSold(0))),4) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,12),1,for(atom(hasOilyLevel(2))),8) preference(1,(1,13),1,for(atom(hasOilyLevel(1))),4) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,14) output(35,better,4) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(35,worse,52) output(1,eq,18) output(5,eq,3)
Optimization: 6 14
Answer: 18
preference(1,(1,3),1,for(neg(atom(hasOiliness(0)))),8) preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),7) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),12) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(0)))),12) preference(1,(1,14),1,for(neg(atom(hasOilyLevel(1)))),2) preference(1,(1,1),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,2),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,4),1,for(atom(hasOftenSold(0))),2) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,7),1,for(atom(hasOiliness(0))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,12),1,for(atom(hasOiliness(1))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),5) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,14) output(3,better,4) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,14) output(35,better,4) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(35,worse,52) output(5,eq,3)
Optimization: 5 14
Answer: 19
preference(1,(1,1),1,for(neg(atom(hasOiliness(0)))),11) preference(1,(1,3),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,9),1,for(neg(atom(hasOftenSold(0)))),9) preference(1,(1,11),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,12),1,for(neg(atom(hasOftenSold(1)))),7) preference(1,(1,2),1,for(atom(hasPrice(0))),10) preference(1,(1,4),1,for(atom(hasOftenSold(1))),10) preference(1,(1,6),1,for(atom(hasOftenSold(0))),4) preference(1,(1,7),1,for(atom(hasPrice(1))),8) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,13),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,14),1,for(atom(hasOilyLevel(2))),1) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(5,worse,35) output(11,eq,35) output(5,eq,3)
Optimization: 3 14
Answer: 20
preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(0)))),9) preference(1,(1,13),1,for(neg(atom(hasPrice(0)))),6) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,3),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,5),1,for(atom(hasPrice(1))),3) preference(1,(1,6),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,7),1,for(atom(hasOftenSold(1))),10) preference(1,(1,8),1,for(atom(hasOiliness(0))),9) preference(1,(1,9),1,for(atom(hasPrice(0))),10) preference(1,(1,11),1,for(atom(hasOftenSold(0))),3) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(5,worse,35) output(5,eq,3)
Optimization: 2 14
Progression : [2;2] (Error: 0)
Progression : 2 [ 1;14] (Error: 13)
Answer: 21
preference(1,(1,1),1,for(neg(atom(hasOftenSold(0)))),6) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(1)))),2) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,9),1,for(neg(atom(hasOiliness(0)))),5) preference(1,(1,11),1,for(neg(atom(hasPrice(0)))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),10) preference(1,(1,13),1,for(atom(hasPriceLevel(1))),5) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(5,worse,35) output(5,eq,3)
Optimization: 2 13
Answer: 22
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),8) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(0)))),3) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),3) preference(1,(1,9),1,for(neg(atom(hasOiliness(0)))),3) preference(1,(1,2),1,for(atom(hasPrice(0))),6) preference(1,(1,5),1,for(atom(hasOilyLevel(2))),7) preference(1,(1,7),1,for(atom(hasPrice(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,11),1,for(atom(hasOiliness(1))),5) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),1) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(5,worse,35) output(5,eq,3)
Optimization: 2 12
Answer: 23
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),8) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),3) preference(1,(1,9),1,for(neg(atom(hasOiliness(0)))),3) preference(1,(1,2),1,for(atom(hasPrice(0))),6) preference(1,(1,5),1,for(atom(hasOilyLevel(2))),7) preference(1,(1,7),1,for(atom(hasPrice(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,11),1,for(atom(hasOiliness(1))),5) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),1) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(5,worse,35) output(5,eq,3)
Optimization: 2 11
Progression : 2 [ 2;11] (Error: 4.5)
Answer: 24
preference(1,(1,5),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,6),1,for(neg(atom(hasOftenSold(0)))),5) preference(1,(1,10),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,14),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,1),1,for(atom(hasPrice(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,7),1,for(atom(hasOiliness(1))),5) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,11),1,for(atom(hasOilyLevel(1))),4) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,35) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,52) output(35,better,14) output(35,better,4) output(35,worse,3) output(5,eq,3)
Optimization: 2 10
Answer: 25
preference(1,(1,9),1,for(neg(atom(hasOftenSold(1)))),3) preference(1,(1,10),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),7) preference(1,(1,6),1,for(atom(hasOftenSold(1))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,14),1,for(atom(hasOilyLevel(2))),5) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(5,worse,35) output(5,eq,3)
Optimization: 2 9
Answer: 26
preference(1,(1,3),1,for(neg(atom(hasOiliness(0)))),4) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),2) preference(1,(1,13),1,for(neg(atom(hasOftenSold(0)))),1) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,7),1,for(atom(hasOilyLevel(1))),11) preference(1,(1,10),1,for(atom(hasOiliness(1))),3) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(14,better,4) output(52,better,14) output(52,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,52) output(5,better,14) output(5,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(5,worse,35) output(5,eq,3)
Optimization: 2 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.095 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 26+
  Optimum    : unknown
Optimization : 2 8
Bounds       : 2 [2;8]
Calls        : 1
Time         : 598.175s (Solving: 590.42s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 2368.872s
Threads      : 4        (Winner: 4)

Choices      : 8235135  (Domain: 5192)
Conflicts    : 2218707  (Analyzed: 2218701)
Restarts     : 3122     (Average: 710.67 Last: 44111)
Model-Level  : 1139.0  
Problems     : 11       (Average Length: 0.36 Splits: 0)
Lemmas       : 2226552  (Deleted: 2077878)
  Binary     : 796      (Ratio:   0.04%)
  Ternary    : 530      (Ratio:   0.02%)
  Conflict   : 2218701  (Average Length: 1048.2 Ratio:  99.65%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7851     (Average Length:   88.3 Ratio:   0.35%) 
  Distributed: 2619     (Ratio:   0.12% Average LBD: 3.55) 
  Integrated : 7857     (Ratio: 300.00% Unit: 114 Average Jumps: 67.86)
Backjumps    : 2218701  (Average:  2.58 Max: 4243 Sum: 5724294)
  Executed   : 2218682  (Average:  2.58 Max: 4243 Sum: 5724001 Ratio:  99.99%)
  Bounded    : 19       (Average: 15.42 Max:  46 Sum:    293 Ratio:   0.01%)

Rules        : 2260716 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 649117  
Bodies       : 659643  
  Sum        : 270     
  Count      : 14      
Equivalences : 1943190  (Atom=Atom: 628597 Body=Body: 642452 Other: 672141)
Tight        : Yes
Variables    : 20979    (Eliminated:    0 Frozen: 14035)
Constraints  : 1652803  (Binary:  99.1% Ternary:   0.4% Other:   0.5%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasOiliness(1))  ; 
  12 :: atom(hasOilyLevel(2)) ; 
  2 :: not atom(hasPrice(0))  ; 
  11 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  4 :: not atom(hasOftenSold(0))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  11 :: atom(hasPriceLevel(2)) ; 
  6 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasOiliness(1))  ; 
  12 :: atom(hasOilyLevel(2)) ; 
  2 :: not atom(hasPrice(0))  ; 
  11 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  2 :: not atom(hasOilyLevel(0))  ; 
  4 :: not atom(hasOftenSold(0))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasOiliness(1))  ; 
  3 :: not atom(hasPriceLevel(0))  ; 
  2 :: not atom(hasPrice(0))  ; 
  12 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  2 :: not atom(hasOilyLevel(0))  ; 
  4 :: not atom(hasOftenSold(0))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasOftenSold(0)) ; 
  3 :: not atom(hasPrice(1))  ; 
  4 :: atom(hasOilyLevel(2)) ; 
  9 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  6 :: not atom(hasPrice(0))  ; 
  12 :: not atom(hasOiliness(1))  ; 
  6 :: atom(hasPrice(0)) ; 
  10 :: not atom(hasOftenSold(0))  ; 
  8 :: atom(hasPrice(1)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  7 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasOftenSold(0)) ; 
  10 :: not atom(hasPriceLevel(1))  ; 
  4 :: atom(hasOilyLevel(2)) ; 
  9 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  6 :: not atom(hasPrice(0))  ; 
  12 :: not atom(hasOiliness(1))  ; 
  6 :: atom(hasPrice(0)) ; 
  10 :: not atom(hasOftenSold(0))  ; 
  8 :: atom(hasPrice(1)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  7 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasOftenSold(0)) ; 
  11 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasOilyLevel(2)) ; 
  9 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  6 :: not atom(hasPrice(0))  ; 
  12 :: not atom(hasOiliness(1))  ; 
  6 :: atom(hasPrice(0)) ; 
  10 :: not atom(hasOftenSold(0))  ; 
  8 :: atom(hasPrice(1)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  7 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasOftenSold(0)) ; 
  11 :: not atom(hasMinorGrp(0))  ; 
  4 :: atom(hasOilyLevel(2)) ; 
  9 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  6 :: not atom(hasPrice(0))  ; 
  12 :: not atom(hasOiliness(1))  ; 
  6 :: atom(hasPrice(0)) ; 
  10 :: not atom(hasOftenSold(0))  ; 
  8 :: atom(hasPrice(1)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  7 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOilyLevel(2)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  8 :: not atom(hasPrice(0))  ; 
  3 :: not atom(hasPriceLevel(0))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  7 :: not atom(hasPrice(1))  ; 
  6 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasPrice(1)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  9 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasOilyLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  8 :: not atom(hasPrice(0))  ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  5 :: not atom(hasPriceLevel(0))  ; 
  7 :: not atom(hasPrice(1))  ; 
  6 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasPrice(1)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  9 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(2)) ; 
  10 :: not atom(hasPriceLevel(2))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  12 :: atom(hasPriceLevel(1)) ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  6 :: atom(hasPriceLevel(2)) ; 
  3 :: not atom(hasOftenSold(0))  ; 
  5 :: not atom(hasPrice(0))  ; 
  12 :: not atom(hasPrice(1))  ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  4 :: atom(hasOilyLevel(2)) ; 
  10 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasPrice(0)) ; 
  2 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasPrice(1)) ; 
  1 :: not atom(hasPrice(0))  ; 
  4 :: atom(hasOftenSold(0)) ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  12 :: not atom(hasOilyLevel(1))  ; 
  2 :: not atom(hasPriceLevel(0))  ; 
  6 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasOftenSold(1))  ; 
  5 :: not atom(hasOilyLevel(0))  ; 
  8 :: atom(hasOilyLevel(2)) ; 
  4 :: atom(hasOilyLevel(1)) ; 
  10 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOilyLevel(1)) ; 
  11 :: atom(hasPriceLevel(2)) ; 
  8 :: not atom(hasOiliness(0))  ; 
  2 :: atom(hasOftenSold(0)) ; 
  7 :: not atom(hasOftenSold(1))  ; 
  10 :: atom(hasOilyLevel(2)) ; 
  9 :: atom(hasOiliness(0)) ; 
  12 :: not atom(hasPrice(1))  ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  4 :: atom(hasMinorGrp(1)) ; 
  12 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  2 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasOiliness(0))  ; 
  10 :: atom(hasPrice(0)) ; 
  6 :: not atom(hasPrice(1))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  1 :: not atom(hasPrice(0))  ; 
  4 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasPrice(1)) ; 
  3 :: atom(hasPriceLevel(2)) ; 
  9 :: not atom(hasOftenSold(0))  ; 
  12 :: atom(hasMinorGrp(2)) ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  7 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPriceLevel(1)) ; 
  1 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasOftenSold(1))  ; 
  4 :: atom(hasOilyLevel(2)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasPriceLevel(1)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasPrice(0)) ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  3 :: atom(hasOftenSold(0)) ; 
  9 :: not atom(hasMinorGrp(0))  ; 
  6 :: not atom(hasPrice(0))  ; 
  1 :: not atom(hasMinorGrp(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasOftenSold(0))  ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOilyLevel(2)) ; 
  2 :: not atom(hasOilyLevel(1))  ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  5 :: not atom(hasOiliness(0))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  4 :: not atom(hasPrice(0))  ; 
  10 :: atom(hasPriceLevel(2)) ; 
  5 :: atom(hasPriceLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: not atom(hasOilyLevel(2))  ; 
  6 :: atom(hasPrice(0)) ; 
  1 :: not atom(hasPriceLevel(1))  ; 
  7 :: atom(hasOilyLevel(2)) ; 
  3 :: not atom(hasOilyLevel(0))  ; 
  2 :: atom(hasPrice(1)) ; 
  3 :: not atom(hasPrice(0))  ; 
  3 :: not atom(hasOiliness(0))  ; 
  7 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasOiliness(1)) ; 
  11 :: atom(hasPriceLevel(2)) ; 
  1 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: not atom(hasOilyLevel(2))  ; 
  6 :: atom(hasPrice(0)) ; 
  1 :: not atom(hasPriceLevel(1))  ; 
  7 :: atom(hasOilyLevel(2)) ; 
  2 :: atom(hasPrice(1)) ; 
  3 :: not atom(hasPrice(0))  ; 
  3 :: not atom(hasOiliness(0))  ; 
  7 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasOiliness(1)) ; 
  11 :: atom(hasPriceLevel(2)) ; 
  1 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  1 :: not atom(hasPriceLevel(1))  ; 
  5 :: not atom(hasOftenSold(0))  ; 
  5 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasPriceLevel(2)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  4 :: atom(hasOilyLevel(1)) ; 
  2 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPriceLevel(1)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasPriceLevel(2)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  3 :: not atom(hasOftenSold(1))  ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  4 :: atom(hasMinorGrp(1)) ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  5 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(2)) ; 
  4 :: not atom(hasOiliness(0))  ; 
  11 :: atom(hasPriceLevel(2)) ; 
  11 :: atom(hasOilyLevel(1)) ; 
  2 :: not atom(hasOilyLevel(2))  ; 
  3 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasOftenSold(0))  ; 
  10 :: not atom(hasMinorGrp(0))  
}.
