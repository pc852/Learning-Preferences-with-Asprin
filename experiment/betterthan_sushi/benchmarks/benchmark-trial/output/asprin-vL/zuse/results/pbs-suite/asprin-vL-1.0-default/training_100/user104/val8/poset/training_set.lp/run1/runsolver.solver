asprin_vL version 1.0
Reading from stdin
-:322:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:332:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:347:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:428:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:702:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:879:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1008:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1080:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1084:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1084:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1090:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1189:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1215:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1335:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1369:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1391:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:239:1-16: info: no atoms over signature occur in program:
  output/3

-:231:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:232:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:233:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(11,eq,2) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(2,eq,6) output(2,eq,16) output(2,eq,20) output(2,eq,29) output(2,eq,51) output(2,eq,35) output(2,eq,59) output(2,eq,9) output(6,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(20,eq,29) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 45 0
Answer: 2
preference(1,(1,8),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(6,better,51) output(16,better,51) output(29,better,51) output(29,better,35) output(29,better,59) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(35,worse,9) output(59,worse,9) output(51,worse,9) output(11,eq,2) output(11,eq,20) output(2,eq,20) output(6,eq,16) output(6,eq,29) output(6,eq,9) output(16,eq,29) output(16,eq,9) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(35,eq,59)
Optimization: 17 1
Answer: 3
preference(1,(1,4),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,29) output(2,better,35) output(2,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(29,better,35) output(29,better,59) output(11,better,2) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(29,worse,9) output(35,worse,9) output(59,worse,9) output(51,worse,9) output(2,worse,20) output(11,eq,20) output(6,eq,16) output(35,eq,59) output(2,unc,6) output(2,unc,16) output(2,unc,51) output(2,unc,9) output(29,unc,51)
Optimization: 15 2
Answer: 4
preference(1,(1,4),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(3))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,better,2) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(35,worse,9) output(59,worse,9) output(51,worse,9) output(2,worse,20) output(11,eq,20) output(6,eq,16) output(51,eq,35) output(51,eq,59) output(35,eq,59) output(2,unc,6) output(2,unc,16) output(2,unc,29)
Optimization: 14 2
Answer: 5
preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasPriceLevel(0))),()) preference(1,(1,5),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,6),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(3))),()) preference(1,(1,3),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(hasOftenSold(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasOftenSold(0))),()) preference(1,(1,9),2,for(atom(hasOilyLevel(0))),()) preference(1,(1,10),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(6,better,16) output(11,better,2) output(16,better,35) output(16,better,59) output(51,better,9) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(2,worse,6) output(2,worse,16) output(2,worse,20) output(11,worse,20) output(35,eq,59) output(11,unc,6) output(2,unc,29) output(2,unc,51) output(2,unc,35) output(2,unc,59) output(2,unc,9)
Optimization: 13 10
Answer: 6
preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,6),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(3))),()) preference(1,(1,2),2,for(atom(hasOilyLevel(0))),()) preference(1,(1,3),2,for(atom(hasOiliness(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(hasOftenSold(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasOftenSold(0))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,10),2,for(atom(hasPriceLevel(0))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,better,2) output(16,better,35) output(16,better,59) output(51,better,9) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(2,worse,20) output(6,worse,16) output(11,eq,20) output(35,eq,59) output(2,unc,6) output(2,unc,16) output(2,unc,29) output(2,unc,51) output(2,unc,35) output(2,unc,59)
Optimization: 12 10
Answer: 7
preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(3))),()) preference(1,(1,3),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasOftenSold(0))),()) preference(1,(1,9),2,for(atom(hasPrice(0))),()) preference(1,(1,10),2,for(atom(hasOilyLevel(0))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(6,better,16) output(11,better,2) output(16,better,35) output(16,better,59) output(51,better,9) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(2,worse,20) output(11,worse,20) output(35,eq,59) output(2,unc,6) output(2,unc,16) output(2,unc,29) output(2,unc,51) output(2,unc,35) output(2,unc,59)
Optimization: 11 10
Answer: 8
preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasPriceLevel(1))),()) preference(1,(1,2),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,3),2,for(atom(hasOiliness(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasOftenSold(0))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(3))),()) preference(1,(1,10),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(29,better,51) output(29,better,59) output(11,better,2) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(35,better,59) output(6,worse,20) output(16,worse,20) output(2,worse,20) output(11,worse,20) output(6,unc,16) output(29,unc,35) output(29,unc,9) output(51,unc,35) output(51,unc,9) output(59,unc,9)
Optimization: 10 10
Answer: 9
preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasPriceLevel(0))),()) preference(1,(1,2),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasOftenSold(0))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(3))),()) preference(1,(1,10),2,for(atom(hasOilyLevel(0))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(29,better,51) output(29,better,59) output(6,better,16) output(11,better,2) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(35,better,59) output(6,worse,20) output(16,worse,20) output(51,worse,35) output(2,worse,20) output(11,worse,20) output(29,unc,35) output(29,unc,9) output(51,unc,9) output(59,unc,9)
Optimization: 9 10
Answer: 10
preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(3))),()) preference(1,(1,2),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasOftenSold(0))),()) preference(1,(1,9),2,for(atom(hasOilyLevel(2))),()) preference(1,(1,10),2,for(atom(hasOiliness(1))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,better,2) output(16,better,35) output(16,better,59) output(51,better,9) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(2,worse,20) output(11,worse,20) output(35,eq,59) output(6,unc,16)
Optimization: 6 10
Answer: 11
preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasPriceLevel(0))),()) preference(1,(1,2),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasOftenSold(0))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(3))),()) preference(1,(1,10),2,for(atom(hasOilyLevel(0))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(6,better,16) output(11,better,2) output(16,better,35) output(16,better,59) output(51,better,9) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(2,worse,20) output(11,worse,20) output(35,eq,59)
Optimization: 5 10
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.070 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 11+
  Optimum    : unknown
Optimization : 5 10
Calls        : 1
Time         : 1197.510s (Solving: 1193.98s 1st Model: 0.66s Unsat: 0.00s)
CPU Time     : 4778.638s
Threads      : 4        (Winner: 4)

Choices      : 5059192  (Domain: 6101)
Conflicts    : 449111   (Analyzed: 449111)
Restarts     : 526      (Average: 853.82 Last: 15223)
Model-Level  : 77.6    
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 36937033 (Deleted: 36719542)
  Binary     : 5321     (Ratio:   0.01%)
  Ternary    : 85570    (Ratio:   0.23%)
  Conflict   : 449111   (Average Length:  717.1 Ratio:   1.22%) 
  Loop       : 36376099 (Average Length:  170.6 Ratio:  98.48%) 
  Other      : 111823   (Average Length:    3.6 Ratio:   0.30%) 
  Distributed: 37754    (Ratio:   0.10% Average LBD: 2.86) 
  Integrated : 113262   (Ratio: 300.00% Unit: 326 Average Jumps: 413.59)
Backjumps    : 449111   (Average:  9.95 Max: 39697 Sum: 4467039)
  Executed   : 449073   (Average:  9.95 Max: 39697 Sum: 4466924 Ratio: 100.00%)
  Bounded    : 38       (Average:  3.03 Max:  46 Sum:    115 Ratio:   0.00%)

Rules        : 802371  
  Choice     : 31      
  Minimize   : 2       
Atoms        : 27160   
Bodies       : 542834  
  Count      : 40      
Equivalences : 25891    (Atom=Atom: 4646 Body=Body: 5969 Other: 15276)
Tight        : No       (SCCs: 46 Non-Hcfs: 0 Nodes: 513600 Gammas: 0)
Variables    : 524802   (Eliminated:    0 Frozen: 516717)
Constraints  : 2996253  (Binary:  82.1% Ternary:   5.6% Other:  12.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(3)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPriceLevel(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasOilyLevel(0)) >> atom(hasOftenSold(0)) ; 
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(3)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasOilyLevel(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasMinorGrp(3)) ; 
  atom(hasPrice(1)) >> atom(hasOilyLevel(0)) ; 
  atom(hasPrice(1)) >> atom(hasOiliness(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasOilyLevel(0)) >> atom(hasOftenSold(0)) ; 
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(3)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(3)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasMinorGrp(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(3)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) ; 
  atom(hasPrice(1)) >> atom(hasOilyLevel(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasPriceLevel(1)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasOiliness(1)) ; 
  atom(hasPriceLevel(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(1)) ; 
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(3)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(3)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasPriceLevel(0)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) ; 
  atom(hasPriceLevel(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(1)) ; 
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(3)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(3)) ; 
  atom(hasPrice(1)) >> atom(hasOilyLevel(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasMinorGrp(3)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(1)) ; 
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(3)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasOilyLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasPriceLevel(0)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(1)) ; 
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(3)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(3)) ; 
  atom(hasPrice(1)) >> atom(hasOilyLevel(0)) 
}.
