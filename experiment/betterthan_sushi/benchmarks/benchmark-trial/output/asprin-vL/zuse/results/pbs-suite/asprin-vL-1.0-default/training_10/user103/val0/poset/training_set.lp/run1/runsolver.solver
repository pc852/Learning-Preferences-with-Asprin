asprin_vL version 1.0
Reading from stdin
-:313:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:323:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:338:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:419:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:693:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:870:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:999:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1071:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1075:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1075:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1081:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1180:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1206:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1326:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1360:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1382:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:230:1-16: info: no atoms over signature occur in program:
  output/3

-:222:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:223:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:224:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
output(3,eq,5) output(4,eq,6) preference(1,poset) output(9,eq,3) output(9,eq,4) output(9,eq,5) output(9,eq,8) output(9,eq,6) output(9,eq,7) output(9,eq,1) output(9,eq,2) output(3,eq,4) output(3,eq,8) output(3,eq,6) output(3,eq,7) output(3,eq,1) output(3,eq,2) output(4,eq,5) output(4,eq,8) output(4,eq,7) output(4,eq,1) output(4,eq,2) output(5,eq,8) output(5,eq,6) output(5,eq,7) output(5,eq,1) output(5,eq,2) output(8,eq,6) output(8,eq,7) output(8,eq,1) output(8,eq,2) output(6,eq,7) output(6,eq,1) output(6,eq,2) output(7,eq,1) output(7,eq,2) output(1,eq,2)
Optimization: 36 0
Answer: 2
output(3,eq,5) output(4,eq,6) preference(1,(1,8),1,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(9,better,4) output(9,better,8) output(9,better,6) output(9,better,7) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(4,worse,5) output(9,eq,3) output(9,eq,5) output(4,eq,8) output(4,eq,7) output(4,eq,1) output(4,eq,2) output(8,eq,6) output(8,eq,7) output(8,eq,1) output(8,eq,2) output(6,eq,7) output(6,eq,1) output(6,eq,2) output(7,eq,1) output(7,eq,2) output(1,eq,2)
Optimization: 19 1
Answer: 3
output(3,eq,5) output(4,eq,6) preference(1,(1,7),1,for(atom(hasOiliness(1))),()) preference(1,(1,8),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),2,for(atom(hasPriceLevel(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(9,better,4) output(9,better,8) output(9,better,6) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(7,better,1) output(7,better,2) output(4,worse,5) output(8,worse,7) output(9,worse,3) output(9,worse,5) output(4,worse,7) output(6,worse,7) output(4,eq,8) output(4,eq,1) output(4,eq,2) output(8,eq,6) output(8,eq,1) output(8,eq,2) output(6,eq,1) output(6,eq,2) output(1,eq,2) output(9,unc,7)
Optimization: 18 2
Answer: 4
output(3,eq,5) output(4,eq,6) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(8,better,7) output(9,better,7) output(9,better,1) output(9,better,2) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,7) output(5,better,1) output(5,better,2) output(4,better,5) output(4,better,1) output(4,better,2) output(6,better,1) output(6,better,2) output(4,better,7) output(6,better,7) output(8,better,1) output(8,better,2) output(9,worse,8) output(3,worse,8) output(5,worse,8) output(9,worse,4) output(9,worse,6) output(3,worse,4) output(3,worse,6) output(5,worse,6) output(9,eq,3) output(9,eq,5) output(4,eq,8) output(8,eq,6) output(7,eq,1) output(7,eq,2) output(1,eq,2)
Optimization: 17 1
Answer: 5
output(3,eq,5) output(4,eq,6) preference(1,(1,4),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),1,for(atom(hasOilyLevel(2))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),2,for(atom(hasOiliness(0))),()) preference(1,poset) output(8,better,7) output(9,better,4) output(9,better,8) output(9,better,6) output(9,better,7) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(4,better,7) output(6,better,7) output(7,worse,1) output(7,worse,2) output(4,worse,5) output(9,worse,3) output(9,worse,5) output(4,eq,8) output(4,eq,1) output(4,eq,2) output(8,eq,6) output(8,eq,1) output(8,eq,2) output(6,eq,1) output(6,eq,2) output(1,eq,2)
Optimization: 16 2
Answer: 6
output(3,eq,5) output(4,eq,6) preference(1,(1,4),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),1,for(atom(hasOilyLevel(2))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(9,better,8) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(4,better,8) output(4,better,1) output(4,better,2) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(4,worse,5) output(8,worse,6) output(8,worse,7) output(9,worse,3) output(9,worse,5) output(4,eq,7) output(8,eq,1) output(8,eq,2) output(6,eq,7) output(1,eq,2) output(9,unc,4) output(9,unc,6) output(9,unc,7)
Optimization: 15 2
Answer: 7
output(3,eq,5) output(4,eq,6) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,2),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,5),1,for(atom(hasPriceLevel(0))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(hasOftenSold(0))),()) preference(1,(1,8),1,for(atom(hasOilyLevel(1))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,1),2,for(atom(hasPrice(1))),()) preference(1,(1,2),2,for(atom(hasOiliness(0))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),2,for(atom(hasOiliness(0))),()) preference(1,(1,5),2,for(atom(hasPrice(0))),()) preference(1,(1,6),2,for(atom(hasPriceLevel(1))),()) preference(1,(1,7),2,for(atom(hasOilyLevel(0))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,9),2,for(atom(hasPrice(0))),()) preference(1,(1,10),2,for(atom(hasPrice(0))),()) preference(1,poset) output(9,better,4) output(9,better,8) output(9,better,6) output(9,better,7) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(4,better,8) output(4,better,1) output(6,better,1) output(7,better,1) output(7,better,2) output(9,better,3) output(9,better,5) output(4,worse,5) output(8,worse,6) output(8,worse,7) output(1,worse,2) output(4,unc,7) output(4,unc,2) output(8,unc,1) output(8,unc,2) output(6,unc,7) output(6,unc,2)
Optimization: 12 10
Answer: 8
output(3,eq,5) output(4,eq,6) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(3))),()) preference(1,(1,3),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,6),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),1,for(atom(hasOiliness(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,9),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,1),2,for(atom(hasOftenSold(0))),()) preference(1,(1,2),2,for(atom(hasOftenSold(0))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),2,for(atom(hasPrice(0))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,9),2,for(atom(hasOiliness(0))),()) preference(1,(1,10),2,for(atom(hasOiliness(1))),()) preference(1,poset) output(8,better,7) output(9,better,4) output(9,better,8) output(9,better,6) output(9,better,7) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(4,better,1) output(4,better,2) output(6,better,1) output(6,better,2) output(4,better,7) output(6,better,7) output(8,better,1) output(8,better,2) output(4,worse,5) output(1,eq,2) output(9,unc,3) output(9,unc,5) output(4,unc,8) output(8,unc,6) output(7,unc,1) output(7,unc,2)
Optimization: 10 10
Answer: 9
output(3,eq,5) output(4,eq,6) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(3))),()) preference(1,(1,3),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,6),1,for(atom(hasOftenSold(0))),()) preference(1,(1,7),1,for(atom(hasOiliness(1))),()) preference(1,(1,8),1,for(atom(hasOiliness(0))),()) preference(1,(1,9),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,1),2,for(atom(hasOftenSold(0))),()) preference(1,(1,2),2,for(atom(hasOftenSold(0))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),2,for(atom(hasPrice(0))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(hasOftenSold(0))),()) preference(1,(1,8),2,for(atom(hasOiliness(1))),()) preference(1,(1,9),2,for(atom(hasOiliness(0))),()) preference(1,(1,10),2,for(atom(hasPriceLevel(2))),()) preference(1,poset) output(8,better,7) output(9,better,4) output(9,better,8) output(9,better,6) output(9,better,7) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(4,better,1) output(4,better,2) output(6,better,1) output(6,better,2) output(9,better,3) output(9,better,5) output(4,better,7) output(6,better,7) output(8,better,1) output(8,better,2) output(4,worse,5) output(1,eq,2) output(4,unc,8) output(8,unc,6) output(7,unc,1) output(7,unc,2)
Optimization: 8 10
Answer: 10
output(3,eq,5) output(4,eq,6) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,3),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,9),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,1),2,for(atom(hasOftenSold(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,8),2,for(atom(hasOftenSold(1))),()) preference(1,(1,9),2,for(atom(hasPriceLevel(1))),()) preference(1,poset) output(8,better,6) output(8,better,7) output(9,better,4) output(9,better,8) output(9,better,6) output(9,better,7) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(4,better,1) output(4,better,2) output(6,better,1) output(6,better,2) output(9,better,3) output(9,better,5) output(4,better,7) output(6,better,7) output(8,better,1) output(8,better,2) output(4,worse,8) output(7,worse,1) output(7,worse,2) output(4,worse,5) output(1,eq,2)
Optimization: 7 5
Answer: 11
output(3,eq,5) output(4,eq,6) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),2,for(atom(hasPriceLevel(1))),()) preference(1,(1,10),2,for(atom(hasPrice(1))),()) preference(1,poset) output(9,better,4) output(9,better,8) output(9,better,6) output(9,better,7) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(4,better,8) output(4,better,1) output(4,better,2) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(9,better,3) output(9,better,5) output(4,better,7) output(6,better,7) output(8,better,1) output(8,better,2) output(4,worse,5) output(8,worse,6) output(8,worse,7) output(1,eq,2)
Optimization: 6 3
Answer: 12
output(3,eq,5) output(4,eq,6) preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(hasPriceLevel(0))),()) preference(1,(1,3),2,for(atom(hasPriceLevel(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,10),2,for(atom(hasPriceLevel(0))),()) preference(1,poset) output(8,better,7) output(9,better,4) output(9,better,8) output(9,better,6) output(9,better,7) output(9,better,1) output(9,better,2) output(3,better,4) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(4,better,8) output(4,better,1) output(4,better,2) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(9,better,3) output(9,better,5) output(4,better,7) output(6,better,7) output(8,better,1) output(8,better,2) output(4,worse,5) output(8,worse,6) output(1,eq,2)
Optimization: 5 5
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.027 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 12+
  Optimum    : unknown
Optimization : 5 5
Calls        : 1
Time         : 1198.038s (Solving: 1194.31s 1st Model: 0.61s Unsat: 0.00s)
CPU Time     : 4775.329s
Threads      : 4        (Winner: 4)

Choices      : 11857203 (Domain: 3903)
Conflicts    : 694763   (Analyzed: 694763)
Restarts     : 934      (Average: 743.86 Last: 42017)
Model-Level  : 100.2   
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 38588120 (Deleted: 38296462)
  Binary     : 10432    (Ratio:   0.03%)
  Ternary    : 148550   (Ratio:   0.38%)
  Conflict   : 694763   (Average Length:  711.4 Ratio:   1.80%) 
  Loop       : 37684339 (Average Length:  174.5 Ratio:  97.66%) 
  Other      : 209018   (Average Length:    3.7 Ratio:   0.54%) 
  Distributed: 69707    (Ratio:   0.18% Average LBD: 2.87) 
  Integrated : 209120   (Ratio: 300.00% Unit: 557 Average Jumps: 749.04)
Backjumps    : 694763   (Average: 14.74 Max: 81684 Sum: 10242936)
  Executed   : 694731   (Average: 14.74 Max: 81684 Sum: 10242875 Ratio: 100.00%)
  Bounded    : 32       (Average:  1.91 Max:   2 Sum:     61 Ratio:   0.00%)

Rules        : 722564  
  Choice     : 31      
  Minimize   : 2       
Atoms        : 22646   
Bodies       : 509926  
  Count      : 40      
Equivalences : 22149    (Atom=Atom: 3895 Body=Body: 5210 Other: 13044)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 481200 Gammas: 0)
Variables    : 490447   (Eliminated:    0 Frozen: 483542)
Constraints  : 2821752  (Binary:  82.2% Ternary:   4.8% Other:  13.0%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOiliness(1)) >> atom(hasPriceLevel(1)) ; 
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasOilyLevel(2)) >> atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasOilyLevel(2)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(1)) >> atom(hasPrice(1)) ; 
  atom(hasPriceLevel(1)) >> atom(hasOiliness(0)) ; 
  atom(hasMinorGrp(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasOilyLevel(0)) >> atom(hasOiliness(0)) ; 
  atom(hasPriceLevel(0)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPriceLevel(1)) ; 
  atom(hasOftenSold(0)) >> atom(hasOilyLevel(0)) ; 
  atom(hasOilyLevel(1)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPrice(0)) ; 
  atom(hasPriceLevel(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(2)) >> atom(hasOftenSold(0)) ; 
  atom(hasMinorGrp(3)) >> atom(hasOftenSold(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasPrice(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(2)) ; 
  atom(hasOftenSold(0)) >> atom(hasPrice(1)) ; 
  atom(hasOiliness(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPriceLevel(2)) >> atom(hasOiliness(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(2)) >> atom(hasOftenSold(0)) ; 
  atom(hasMinorGrp(3)) >> atom(hasOftenSold(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasPrice(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(2)) ; 
  atom(hasOftenSold(0)) >> atom(hasPrice(1)) ; 
  atom(hasOiliness(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasOiliness(0)) >> atom(hasOiliness(1)) ; 
  atom(hasPriceLevel(2)) >> atom(hasOiliness(0)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(1)) >> atom(hasOftenSold(1)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(0)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPriceLevel(2)) >> atom(hasOftenSold(1)) ; 
  atom(hasPriceLevel(2)) >> atom(hasPriceLevel(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPriceLevel(0)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPriceLevel(1)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPrice(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPriceLevel(0)) 
}.
