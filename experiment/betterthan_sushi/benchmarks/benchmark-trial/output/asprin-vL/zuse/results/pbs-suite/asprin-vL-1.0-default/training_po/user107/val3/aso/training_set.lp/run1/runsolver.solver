asprin_vL version 1.0
Reading from stdin
-:268:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:293:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:374:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:648:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:825:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1026:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1030:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1030:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1036:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1135:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1161:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1281:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1315:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1337:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:185:1-16: info: no atoms over signature occur in program:
  output/3

-:177:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:178:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:179:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:180:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:210:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,7) output(1,better,8) output(1,better,2) output(0,better,7) output(0,better,8) output(0,better,2) output(6,better,8) output(6,better,2) output(9,better,2) output(1,worse,6) output(4,worse,0) output(4,worse,7) output(4,worse,6) output(4,worse,8) output(4,worse,9) output(4,worse,2) output(0,worse,6) output(7,worse,6) output(8,worse,9) output(1,eq,0) output(8,eq,2)
Optimization: 18 4
Answer: 2
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,7) output(1,better,8) output(1,better,9) output(1,better,2) output(0,better,7) output(0,better,8) output(0,better,9) output(0,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,9) output(1,worse,6) output(4,worse,0) output(4,worse,7) output(4,worse,6) output(4,worse,8) output(4,worse,2) output(0,worse,6) output(7,worse,6) output(9,worse,2) output(1,eq,0) output(8,eq,2)
Optimization: 15 4
Answer: 3
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,8),4,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,8) output(1,better,9) output(1,better,2) output(0,better,8) output(0,better,9) output(0,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,9) output(8,better,2) output(4,worse,0) output(4,worse,7) output(4,worse,6) output(4,worse,8) output(9,eq,2)
Optimization: 14 4
Answer: 4
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,8),4,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,8) output(1,better,9) output(1,better,2) output(0,better,7) output(0,better,8) output(0,better,9) output(0,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,9) output(8,better,2) output(4,worse,0) output(4,worse,7) output(4,worse,6) output(4,worse,8) output(9,eq,2)
Optimization: 13 4
Answer: 5
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,7),4,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,8) output(1,better,9) output(1,better,2) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(9,better,2) output(4,worse,0) output(4,worse,7) output(4,worse,6) output(0,eq,7)
Optimization: 12 4
Answer: 6
preference(1,(1,1),0,for(atom(isUnique(1))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(atom(isShrimp(1))),()) preference(1,(1,1),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),1,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),1,for(atom(hasPrice(0))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,9) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,9) output(8,better,9) output(0,worse,7) output(9,worse,2) output(5,eq,1) output(4,eq,7) output(0,eq,8) output(0,eq,2) output(8,eq,2)
Optimization: 10 7
Answer: 7
preference(1,(1,1),0,for(atom(hasPrice(0))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(atom(isShrimp(1))),()) preference(1,(1,1),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),1,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),1,for(atom(hasPrice(0))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,9) output(6,better,2) output(8,better,9) output(8,better,2) output(0,worse,7) output(5,eq,1) output(5,eq,4) output(1,eq,4) output(0,eq,8) output(9,eq,2)
Optimization: 8 7
Answer: 8
preference(1,(1,1),0,for(atom(hasPrice(0))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(atom(isShrimp(1))),()) preference(1,(1,1),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),1,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),1,for(atom(hasPrice(0))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,9) output(6,better,2) output(8,better,9) output(8,better,2) output(0,worse,7) output(5,eq,1) output(4,eq,7) output(0,eq,8) output(9,eq,2)
Optimization: 7 7
Answer: 9
preference(1,(1,2),0,for(atom(isUnique(1))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),0,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(isRaw(0))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),4,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,2) output(0,better,6) output(0,better,8) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,2) output(6,better,8) output(6,better,2) output(8,better,2) output(9,better,2) output(0,worse,7) output(0,worse,9) output(7,worse,9) output(6,worse,9) output(8,worse,9)
Optimization: 7 5
Answer: 10
preference(1,(1,1),0,for(atom(isUnique(1))),()) preference(1,(1,2),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUnique(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,(1,4),3,for(atom(isCreamy(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),4,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(isShrimp(1))),()) preference(1,(1,8),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,6) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,2) output(8,better,9) output(8,better,2) output(9,better,2) output(0,worse,7) output(6,worse,8) output(6,worse,9)
Optimization: 5 8
Answer: 11
preference(1,(1,1),0,for(atom(isUnique(1))),()) preference(1,(1,2),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUnique(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(isMaguro(1))),()) preference(1,(1,7),3,for(atom(isRaw(1))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),4,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(isShrimp(1))),()) preference(1,(1,8),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,2) output(8,better,2) output(9,better,2) output(0,worse,7) output(6,worse,9) output(8,worse,9)
Optimization: 4 8
Answer: 12
preference(1,(1,1),0,for(atom(isUnique(1))),()) preference(1,(1,2),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),0,for(atom(isRaw(1))),()) preference(1,(1,7),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUnique(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(hasPrice(0))),()) preference(1,(1,5),4,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,8),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,9) output(8,better,2) output(9,better,2) output(1,worse,4) output(1,worse,7) output(0,worse,7)
Optimization: 3 8
Answer: 13
preference(1,(1,1),0,for(atom(isUnique(1))),()) preference(1,(1,2),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),0,for(atom(isRaw(1))),()) preference(1,(1,7),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUnique(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,(1,3),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(hasPrice(0))),()) preference(1,(1,3),4,for(atom(isChewy(1))),()) preference(1,(1,5),4,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,8),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,9) output(8,better,2) output(9,better,2) output(1,eq,4)
Optimization: 2 8
Answer: 14
preference(1,(1,1),0,for(atom(isUnique(1))),()) preference(1,(1,2),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUnique(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,3),3,for(atom(isChewy(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,(1,5),4,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,9) output(8,better,2) output(9,better,2)
Optimization: 1 8
Progression : [1;1] (Error: 0)
Progression : 1 [1;8] (Error: 7)
Answer: 15
preference(1,(1,2),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,3),0,for(atom(isShrimp(1))),()) preference(1,(1,4),0,for(atom(isSweet(1))),()) preference(1,(1,8),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isRoe(1))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,(1,4),4,for(atom(isShrimp(1))),()) preference(1,(1,7),4,for(atom(isRaw(1))),()) preference(1,(1,8),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,2) output(9,better,2)
Optimization: 1 7
Answer: 16
preference(1,(1,3),0,for(atom(isShrimp(1))),()) preference(1,(1,4),0,for(atom(isSweet(1))),()) preference(1,(1,8),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(isRoe(1))),()) preference(1,(1,5),3,for(atom(isRaw(1))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,(1,4),4,for(atom(isShrimp(1))),()) preference(1,(1,7),4,for(atom(isRaw(1))),()) preference(1,(1,8),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,2) output(9,better,2)
Optimization: 1 6
Answer: 17
preference(1,(1,3),0,for(atom(isShrimp(1))),()) preference(1,(1,8),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(isRoe(1))),()) preference(1,(1,5),3,for(atom(isRaw(1))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,(1,4),4,for(atom(isShrimp(1))),()) preference(1,(1,7),4,for(atom(isRaw(1))),()) preference(1,(1,8),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,2) output(9,better,2)
Optimization: 1 5
Answer: 18
preference(1,(1,8),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,3),3,for(atom(isMaguro(1))),()) preference(1,(1,5),3,for(atom(isRaw(1))),()) preference(1,(1,7),4,for(atom(isRaw(1))),()) preference(1,(1,8),4,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,2) output(9,better,2) output(8,worse,9)
Optimization: 1 4
Progression : 1 [2;4] (Error: 1)
Answer: 19
preference(1,(1,3),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,3),3,for(atom(isMaguro(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(8,better,2) output(9,better,2) output(8,worse,9)
Optimization: 1 3
OPTIMUM FOUND

Models       : 19
  Optimum    : yes
Optimization : 1 3
Calls        : 1
Time         : 22.739s (Solving: 17.04s 1st Model: 0.15s Unsat: 14.15s)
CPU Time     : 73.701s
Threads      : 4        (Winner: 1)

Choices      : 250713   (Domain: 3952)
Conflicts    : 55038    (Analyzed: 55031)
Restarts     : 93       (Average: 591.73 Last: 5542)
Model-Level  : 554.0   
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 101288   (Deleted: 30969)
  Binary     : 3660     (Ratio:   3.61%)
  Ternary    : 6158     (Ratio:   6.08%)
  Conflict   : 55027    (Average Length:  111.8 Ratio:  54.33%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 46261    (Average Length:   34.2 Ratio:  45.67%) 
  Distributed: 15536    (Ratio:  28.23% Average LBD: 3.21) 
  Integrated : 46585    (Ratio: 299.85% Unit: 313 Average Jumps: 83.43)
Backjumps    : 55031    (Average:  3.78 Max: 757 Sum: 207771)
  Executed   : 55014    (Average:  3.77 Max: 757 Sum: 207539 Ratio:  99.89%)
  Bounded    : 17       (Average: 13.65 Max:  34 Sum:    232 Ratio:   0.11%)

Rules        : 1976121 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 590648  
Bodies       : 695281  
  Count      : 1768    
Equivalences : 1804096  (Atom=Atom: 516580 Body=Body: 558735 Other: 728781)
Tight        : Yes
Variables    : 77399    (Eliminated:    0 Frozen: 54383)
Constraints  : 1492785  (Binary:  94.9% Ternary:   4.2% Other:   0.9%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasMinorGrp(2))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(isRaw(0))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(isRaw(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasMinorGrp(2))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(isRaw(0))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasMinorGrp(2))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isSweet(1))  >> not atom(hasPrice(0))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasMinorGrp(2))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isSweet(1))  >> not atom(isFattyFish(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasPrice(1))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasMinorGrp(0))  >> atom(isRaw(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRaw(1))  >> not atom(isUrchin(1))  || atom(isUnique(1)) ; 
  not atom(isRoe(1))  >> not atom(isOctopus(1))  >> not atom(isChewy(1))  || atom(hasMinorGrp(1)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(2)) >> not atom(isSweet(1))  || not atom(isOctopus(1))  ; 
  not atom(isSweet(1))  >> not atom(isMaguro(1))  || atom(isShrimp(1)) ; 
  atom(hasPrice(0)) ; 
  not atom(hasMinorGrp(1))  ; 
  not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRaw(1))  >> not atom(isChewy(1))  || atom(hasPrice(0)) ; 
  not atom(isRoe(1))  >> not atom(isOctopus(1))  >> not atom(isChewy(1))  || atom(hasMinorGrp(1)) ; 
  atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> not atom(isSweet(1))  || not atom(isOctopus(1))  ; 
  not atom(isSweet(1))  >> not atom(isMaguro(1))  || atom(isShrimp(1)) ; 
  atom(hasPrice(0)) ; 
  not atom(hasMinorGrp(1))  ; 
  not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRaw(1))  >> not atom(isChewy(1))  || atom(hasPrice(0)) ; 
  not atom(isRoe(1))  >> not atom(isOctopus(1))  >> not atom(isChewy(1))  || atom(hasMinorGrp(1)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> not atom(isSweet(1))  || not atom(isOctopus(1))  ; 
  not atom(isSweet(1))  >> not atom(isMaguro(1))  || atom(isShrimp(1)) ; 
  atom(hasPrice(0)) ; 
  not atom(hasMinorGrp(1))  ; 
  not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isMaguro(1))  >> atom(isMaguro(1)) || atom(isUnique(1)) ; 
  atom(isOctopus(1)) >> atom(isSweet(1)) >> atom(isRaw(0)) >> not atom(hasMinorGrp(1))  || not atom(isOctopus(1))  ; 
  not atom(isMaguro(1))  >> atom(isMaguro(1)) || not atom(isRaw(0))  ; 
  not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isRoe(1))  >> atom(hasMinorGrp(1)) || atom(isMaguro(1)) ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(0))  >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isOctopus(1)) || atom(isUnique(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  || not atom(hasPrice(1))  ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> atom(isCreamy(1)) >> not atom(isChewy(1))  || not atom(isSweet(1))  ; 
  atom(isUnique(1)) >> atom(isCreamy(1)) >> atom(isRoe(1)) >> atom(isUrchin(1)) || not atom(hasMinorGrp(2))  ; 
  atom(hasMinorGrp(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(0)) >> atom(isShrimp(1)) || not atom(isFattyFish(1))  ; 
  atom(isOctopus(1)) >> not atom(isRaw(1))  >> not atom(isSweet(1))  >> atom(hasMinorGrp(0)) ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) >> not atom(hasPrice(0))  >> not atom(isFattyFish(1))  ; 
  atom(isChewy(1)) >> not atom(isRaw(1))  >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isOctopus(1)) || atom(isUnique(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  || not atom(hasPrice(1))  ; 
  atom(isUnique(1)) >> atom(isCreamy(1)) >> atom(isRoe(1)) >> atom(isUrchin(1)) || not atom(hasMinorGrp(2))  ; 
  atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  >> atom(isMaguro(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isRaw(1)) >> not atom(isFattyFish(1))  || not atom(isCreamy(1))  ; 
  atom(isOctopus(1)) >> not atom(isRaw(1))  >> not atom(isSweet(1))  >> atom(hasMinorGrp(0)) ; 
  atom(isChewy(1)) >> atom(isCreamy(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  ; 
  atom(isChewy(1)) >> not atom(isRaw(1))  >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isOctopus(1)) || atom(isUnique(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  || not atom(hasPrice(1))  ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  || not atom(isUrchin(1))  ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  >> not atom(isChewy(1))  || not atom(isSweet(1))  ; 
  atom(isUnique(1)) >> atom(isCreamy(1)) >> atom(isRoe(1)) >> atom(isUrchin(1)) || not atom(hasMinorGrp(2))  ; 
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(hasPrice(0)) >> atom(isRoe(1)) || atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  >> not atom(isFattyFish(1))  || not atom(isCreamy(1))  ; 
  atom(isChewy(1)) >> atom(isSweet(1)) >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isOctopus(1)) || atom(isUnique(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  || not atom(hasPrice(1))  ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) >> atom(isRaw(1)) >> atom(isChewy(1)) || not atom(isUrchin(1))  ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  >> not atom(isChewy(1))  || not atom(isSweet(1))  ; 
  atom(isUnique(1)) >> atom(isCreamy(1)) >> atom(isRoe(1)) >> atom(isUrchin(1)) || not atom(hasMinorGrp(2))  ; 
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(hasPrice(0)) >> atom(isRoe(1)) || atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  >> not atom(isFattyFish(1))  || not atom(isCreamy(1))  ; 
  atom(isChewy(1)) >> atom(isSweet(1)) >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isOctopus(1)) || atom(isUnique(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  || not atom(hasPrice(1))  ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> atom(isChewy(1)) >> atom(isRaw(1)) || not atom(isUrchin(1))  ; 
  atom(isUnique(1)) >> atom(isCreamy(1)) >> atom(isRoe(1)) >> atom(isUrchin(1)) || not atom(hasMinorGrp(2))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  >> not atom(isFattyFish(1))  || not atom(isCreamy(1))  ; 
  atom(hasMinorGrp(2)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) || not atom(isRaw(0))  ; 
  atom(isChewy(1)) >> atom(isSweet(1)) >> not atom(isRaw(1))  >> not atom(isChewy(1))  ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isMaguro(1)) >> atom(hasMinorGrp(2)) || not atom(hasMinorGrp(2))  ; 
  atom(hasMinorGrp(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  >> atom(isRaw(1)) || atom(isShrimp(1)) ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isShrimp(1)) || atom(isSweet(1)) ; 
  atom(hasMinorGrp(2)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) || not atom(isRaw(0))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(0))  >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  >> atom(isRaw(1)) || atom(isShrimp(1)) ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isShrimp(1)) || atom(isSweet(1)) ; 
  atom(hasMinorGrp(2)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) || not atom(isRaw(0))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(0))  >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  >> atom(isRaw(1)) || atom(isShrimp(1)) ; 
  atom(hasMinorGrp(2)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) || not atom(isRaw(0))  ; 
  atom(isChewy(1)) >> not atom(isChewy(1))  >> atom(isRoe(1)) >> atom(isShrimp(1)) ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(0))  >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isRaw(1)) >> not atom(isCreamy(1))  >> atom(hasMinorGrp(2)) || not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> atom(isMaguro(1)) >> not atom(isRaw(1))  ; 
  atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(0))  >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> atom(isMaguro(1)) >> not atom(isRaw(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> atom(isRoe(1)) >> atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(0))  >> not atom(isRaw(0))  
}.
