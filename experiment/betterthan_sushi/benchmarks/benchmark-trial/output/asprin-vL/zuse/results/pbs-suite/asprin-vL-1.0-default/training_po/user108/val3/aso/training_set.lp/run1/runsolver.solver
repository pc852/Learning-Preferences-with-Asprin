asprin_vL version 1.0
Reading from stdin
-:268:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:293:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:374:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:648:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:825:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1026:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1030:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1030:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1036:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1135:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1161:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1281:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1315:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1337:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:185:1-16: info: no atoms over signature occur in program:
  output/3

-:177:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:178:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:179:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:180:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:210:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(2,better,0) output(2,better,1) output(5,better,0) output(5,better,1) output(5,better,9) output(6,better,8) output(6,better,4) output(7,worse,2) output(7,worse,5) output(7,worse,0) output(7,worse,1) output(7,worse,6) output(7,worse,8) output(7,worse,9) output(2,worse,6) output(0,worse,6) output(0,worse,8) output(0,worse,9) output(1,worse,6) output(1,worse,8) output(1,worse,9) output(0,eq,1)
Optimization: 29 5
Answer: 2
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(2,better,0) output(2,better,1) output(2,better,9) output(5,better,0) output(5,better,1) output(5,better,9) output(0,better,9) output(1,better,9) output(6,better,8) output(6,better,9) output(6,better,4) output(8,better,9) output(7,worse,2) output(7,worse,5) output(7,worse,0) output(7,worse,1) output(7,worse,6) output(7,worse,8) output(2,worse,6) output(0,worse,6) output(0,worse,8) output(1,worse,6) output(1,worse,8) output(0,eq,1)
Optimization: 24 5
Answer: 3
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,9) output(2,better,0) output(2,better,1) output(2,better,9) output(5,better,0) output(5,better,1) output(5,better,9) output(0,better,9) output(1,better,9) output(6,better,8) output(6,better,9) output(6,better,4) output(8,better,9) output(7,worse,2) output(7,worse,5) output(7,worse,6) output(7,worse,8) output(2,worse,6) output(0,worse,6) output(0,worse,8) output(1,worse,6) output(1,worse,8) output(7,eq,0) output(7,eq,1) output(0,eq,1)
Optimization: 23 5
Answer: 4
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,8),3,for(atom(isRaw(0))),()) preference(1,aso) output(7,better,0) output(7,better,9) output(2,better,0) output(2,better,1) output(2,better,9) output(5,better,0) output(5,better,1) output(5,better,8) output(5,better,9) output(0,better,9) output(1,better,9) output(6,better,8) output(6,better,9) output(8,better,9) output(7,worse,2) output(7,worse,5) output(7,worse,6) output(0,worse,1) output(0,worse,6) output(1,worse,6) output(7,eq,1)
Optimization: 22 5
Answer: 5
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,6),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,8),4,for(atom(isUrchin(1))),()) preference(1,aso) output(7,better,0) output(7,better,1) output(7,better,9) output(2,better,0) output(2,better,1) output(2,better,9) output(5,better,0) output(5,better,1) output(5,better,8) output(5,better,9) output(0,better,9) output(1,better,9) output(6,better,8) output(6,better,9) output(6,better,4) output(8,better,9) output(7,worse,5) output(2,worse,6) output(0,worse,6) output(0,worse,8) output(1,worse,6) output(1,worse,8) output(0,eq,1)
Optimization: 20 5
Answer: 6
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(hasPrice(0))),()) preference(1,(1,8),3,for(atom(isSweet(1))),()) preference(1,aso) output(7,better,0) output(7,better,8) output(7,better,9) output(2,better,0) output(2,better,1) output(2,better,8) output(2,better,9) output(5,better,0) output(5,better,1) output(5,better,8) output(5,better,9) output(0,better,8) output(0,better,9) output(1,better,8) output(1,better,9) output(6,better,8) output(6,better,9) output(7,worse,2) output(7,worse,5) output(7,worse,6) output(0,worse,1) output(0,worse,6) output(1,worse,6) output(7,eq,1)
Optimization: 19 5
Answer: 7
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(hasPrice(0))),()) preference(1,(1,8),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,9) output(2,better,0) output(2,better,1) output(2,better,8) output(2,better,9) output(5,better,0) output(5,better,1) output(5,better,8) output(5,better,9) output(0,better,8) output(0,better,9) output(1,better,8) output(1,better,9) output(6,better,8) output(6,better,9) output(7,worse,5) output(0,worse,6) output(1,worse,6) output(0,eq,1)
Optimization: 18 5
Answer: 8
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,3),3,for(atom(isMaguro(1))),()) preference(1,(1,5),3,for(atom(hasPrice(0))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,9) output(2,better,0) output(2,better,1) output(2,better,8) output(2,better,9) output(5,better,0) output(5,better,1) output(5,better,8) output(5,better,9) output(0,better,8) output(0,better,9) output(1,better,8) output(1,better,9) output(6,better,8) output(6,better,9) output(2,worse,5) output(0,worse,6) output(1,worse,6) output(0,eq,1)
Optimization: 17 5
Answer: 9
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isMaguro(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,9) output(2,better,0) output(2,better,1) output(2,better,8) output(2,better,9) output(5,better,0) output(5,better,1) output(5,better,8) output(5,better,9) output(0,better,1) output(0,better,8) output(0,better,9) output(1,better,9) output(6,better,8) output(6,better,9) output(8,better,9) output(1,worse,6) output(1,eq,8)
Optimization: 16 5
Answer: 10
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isMaguro(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,9) output(2,better,0) output(2,better,1) output(2,better,8) output(2,better,9) output(5,better,0) output(5,better,1) output(5,better,8) output(5,better,9) output(0,better,8) output(0,better,9) output(1,better,8) output(1,better,9) output(6,better,8) output(6,better,9) output(6,better,4) output(8,better,9) output(0,eq,1)
Optimization: 15 5
Answer: 11
preference(1,(1,2),0,for(atom(isFattyFish(1))),()) preference(1,(1,4),0,for(atom(hasPrice(1))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),1,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isSweet(1))),()) preference(1,aso) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(6,better,8) output(6,better,4) output(9,better,4) output(7,worse,2) output(7,worse,5) output(7,worse,0) output(6,worse,9) output(8,worse,9)
Optimization: 14 6
Answer: 12
preference(1,(1,2),0,for(atom(isFattyFish(1))),()) preference(1,(1,4),0,for(atom(hasPrice(1))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),1,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),3,for(atom(isRaw(0))),()) preference(1,(1,8),3,for(atom(isSweet(1))),()) preference(1,aso) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(6,better,8) output(6,better,9) output(6,better,4) output(9,better,4) output(7,worse,2) output(7,worse,5) output(7,worse,0)
Optimization: 13 6
Answer: 13
preference(1,(1,2),0,for(atom(isFattyFish(1))),()) preference(1,(1,4),0,for(atom(hasPrice(1))),()) preference(1,(1,5),0,for(atom(hasPrice(1))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),1,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(isSweet(1))),()) preference(1,aso) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,8) output(1,better,4) output(6,better,8) output(6,better,9) output(6,better,4) output(9,better,4) output(7,worse,2) output(7,worse,5) output(7,worse,0) output(7,worse,1) output(8,worse,9) output(5,eq,0)
Optimization: 12 6
Answer: 14
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),0,for(atom(isFattyFish(1))),()) preference(1,(1,3),0,for(atom(isChewy(1))),()) preference(1,(1,4),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,8),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isSweet(1))),()) preference(1,aso) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,8) output(1,better,4) output(6,better,8) output(6,better,4) output(8,better,4) output(9,better,4) output(7,worse,2) output(7,worse,5) output(7,worse,0) output(7,worse,1) output(6,worse,9) output(8,worse,9)
Optimization: 11 8
Answer: 15
preference(1,(1,1),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),0,for(atom(isSweet(1))),()) preference(1,(1,6),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,4),1,for(atom(isShrimp(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,2),2,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isFattyFish(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isOctopus(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isFattyFish(1))),()) preference(1,(1,3),4,for(atom(isOctopus(1))),()) preference(1,(1,4),4,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,6) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,4) output(8,better,4) output(9,better,4) output(7,worse,5) output(2,worse,5) output(2,worse,0) output(2,worse,1) output(0,eq,1)
Optimization: 9 8
Answer: 16
preference(1,(1,1),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,4),0,for(atom(isRaw(0))),()) preference(1,(1,5),0,for(atom(isFattyFish(1))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),0,for(atom(isUrchin(1))),()) preference(1,(1,8),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),2,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),2,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isShrimp(1))),()) preference(1,(1,4),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),3,for(atom(hasPrice(0))),()) preference(1,aso) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,9) output(1,better,4) output(6,better,8) output(6,better,9) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(1,worse,6) output(7,eq,2) output(7,eq,5) output(7,eq,0) output(2,eq,5) output(2,eq,0) output(5,eq,0) output(1,eq,8)
Optimization: 8 7
Answer: 17
preference(1,(1,1),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,4),0,for(atom(isRaw(0))),()) preference(1,(1,5),0,for(atom(isFattyFish(1))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),0,for(atom(isUrchin(1))),()) preference(1,(1,8),0,for(atom(isRaw(0))),()) preference(1,(1,5),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),2,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),2,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isShrimp(1))),()) preference(1,(1,4),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,1),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),3,for(atom(hasPrice(0))),()) preference(1,aso) output(7,better,5) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,9) output(1,better,4) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(5,worse,0) output(6,worse,8) output(7,eq,2) output(7,eq,0) output(2,eq,0) output(1,eq,8) output(6,eq,9)
Optimization: 7 7
Answer: 18
preference(1,(1,1),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),0,for(atom(isRaw(1))),()) preference(1,(1,8),0,for(atom(isSweet(1))),()) preference(1,(1,2),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),3,for(atom(isOctopus(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(hasPrice(0))),()) preference(1,(1,3),4,for(atom(isFattyFish(1))),()) preference(1,(1,4),4,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,worse,5) output(2,worse,5) output(2,worse,0) output(2,worse,1) output(6,worse,8)
Optimization: 6 8
Answer: 19
preference(1,(1,1),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),0,for(atom(isRaw(1))),()) preference(1,(1,8),0,for(atom(isSweet(1))),()) preference(1,(1,2),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isCreamy(1))),()) preference(1,(1,8),3,for(atom(isOctopus(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(hasPrice(0))),()) preference(1,(1,3),4,for(atom(isFattyFish(1))),()) preference(1,(1,4),4,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,9) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,worse,5) output(2,worse,5) output(2,worse,0) output(2,worse,1)
Optimization: 5 8
Progression : [1;5] (Error: 4)
Answer: 20
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,4),0,for(atom(isChewy(1))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isShrimp(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isShrimp(1))),()) preference(1,(1,3),3,for(atom(isFattyFish(1))),()) preference(1,(1,4),3,for(atom(isCreamy(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,1),4,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,4) output(6,better,8) output(6,better,4) output(8,better,4) output(9,better,4) output(7,worse,2)
Optimization: 4 8
Answer: 21
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,4),0,for(atom(isMaguro(1))),()) preference(1,(1,5),0,for(atom(isRaw(1))),()) preference(1,(1,6),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,1),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(isChewy(1))),()) preference(1,(1,8),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,worse,2) output(6,worse,8) output(6,worse,9)
Optimization: 3 7
Answer: 22
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,4),0,for(atom(isChewy(1))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isShrimp(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isFattyFish(1))),()) preference(1,(1,4),3,for(atom(isCreamy(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,1),4,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,8) output(6,better,9) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,worse,2) output(0,eq,1)
Optimization: 2 8
Progression : [2;2] (Error: 0)
Progression : 2 [1;8] (Error: 7)
Answer: 23
preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(isFattyFish(1))),()) preference(1,(1,4),3,for(atom(isCreamy(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,1),4,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,9) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,worse,2)
Optimization: 2 7
Answer: 24
preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isChewy(1))),()) preference(1,(1,3),3,for(atom(isFattyFish(1))),()) preference(1,(1,4),3,for(atom(isCreamy(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,9) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,worse,2)
Optimization: 2 6
Answer: 25
preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isChewy(1))),()) preference(1,(1,3),3,for(atom(isFattyFish(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,9) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,worse,2)
Optimization: 2 5
Answer: 26
preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,7),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(isFattyFish(1))),()) preference(1,(1,7),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),4,for(atom(hasPrice(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,9) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,worse,2)
Optimization: 2 4
Answer: 27
preference(1,(1,7),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,7),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),4,for(atom(isRaw(1))),()) preference(1,(1,6),4,for(atom(hasPrice(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,9) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,worse,2)
Optimization: 2 3
Progression : 2 [2;3] (Error: 0.5)
Answer: 28
preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isFattyFish(1))),()) preference(1,(1,6),4,for(atom(hasPrice(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,4) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,9) output(2,better,4) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,9) output(5,better,4) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,4) output(6,better,8) output(6,better,9) output(6,better,4) output(8,better,9) output(8,better,4) output(9,better,4) output(7,eq,2) output(0,eq,1)
Optimization: 2 2
OPTIMUM FOUND

Models       : 28
  Optimum    : yes
Optimization : 2 2
Calls        : 1
Time         : 9.211s (Solving: 3.57s 1st Model: 0.17s Unsat: 0.01s)
CPU Time     : 19.763s
Threads      : 4        (Winner: 0)

Choices      : 248991   (Domain: 2370)
Conflicts    : 25054    (Analyzed: 25050)
Restarts     : 58       (Average: 431.90 Last: 632)
Model-Level  : 522.8   
Problems     : 12       (Average Length: 0.33 Splits: 0)
Lemmas       : 47729    (Deleted: 0)
  Binary     : 2640     (Ratio:   5.53%)
  Ternary    : 4472     (Ratio:   9.37%)
  Conflict   : 25048    (Average Length:   83.9 Ratio:  52.48%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 22681    (Average Length:   22.3 Ratio:  47.52%) 
  Distributed: 7579     (Ratio:  30.26% Average LBD: 3.13) 
  Integrated : 22699    (Ratio: 299.50% Unit: 298 Average Jumps: 119.17)
Backjumps    : 25050    (Average:  7.93 Max: 693 Sum: 198638)
  Executed   : 25033    (Average:  7.92 Max: 693 Sum: 198340 Ratio:  99.85%)
  Bounded    : 17       (Average: 17.53 Max:  35 Sum:    298 Ratio:   0.15%)

Rules        : 1976153 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 590648  
Bodies       : 695297  
  Count      : 1768    
Equivalences : 1804112  (Atom=Atom: 516580 Body=Body: 558735 Other: 728797)
Tight        : Yes
Variables    : 77415    (Eliminated:    0 Frozen: 54399)
Constraints  : 1493073  (Binary:  94.9% Ternary:   4.2% Other:   0.9%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(hasMinorGrp(2))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(isRaw(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(hasMinorGrp(2))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isChewy(1))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(isRoe(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isShrimp(1))  >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isRoe(1))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> atom(isRaw(0)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isUnique(1))  >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isRoe(1))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isCreamy(1))  >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isMaguro(1))  >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> atom(hasPrice(0)) >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isMaguro(1))  >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> atom(hasPrice(0)) >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isCreamy(1)) >> atom(isMaguro(1)) >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> atom(hasPrice(0)) >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isChewy(1))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) >> not atom(isChewy(1))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> atom(isMaguro(1)) >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isChewy(1))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> atom(isFattyFish(1)) >> atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> not atom(isChewy(1))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> atom(isMaguro(1)) >> not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isChewy(1))  >> not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> atom(isRoe(1)) >> atom(hasPrice(1)) >> atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isFattyFish(1))  >> atom(isOctopus(1)) || atom(isFattyFish(1)) ; 
  not atom(hasMinorGrp(0))  >> not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  || atom(hasPrice(1)) ; 
  atom(hasMinorGrp(1)) >> atom(isShrimp(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) || not atom(hasMinorGrp(1))  ; 
  not atom(isSweet(1))  >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isFattyFish(1))  >> atom(isOctopus(1)) || atom(isFattyFish(1)) ; 
  not atom(hasMinorGrp(0))  >> not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  || atom(hasPrice(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> atom(isRaw(0)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  atom(hasMinorGrp(0)) >> not atom(isRaw(0))  || not atom(isRoe(1))  ; 
  atom(isMaguro(1)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) || not atom(hasMinorGrp(1))  ; 
  not atom(isSweet(1))  >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isFattyFish(1))  >> atom(isOctopus(1)) || atom(isFattyFish(1)) ; 
  not atom(hasMinorGrp(0))  >> not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  || atom(hasPrice(1)) ; 
  not atom(isSweet(1))  >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  || atom(hasPrice(1)) ; 
  atom(isMaguro(1)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) || not atom(hasMinorGrp(1))  ; 
  not atom(isRoe(1))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(1))  >> atom(isRoe(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> not atom(isChewy(1))  >> not atom(isCreamy(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  not atom(isFattyFish(1))  >> atom(isOctopus(1)) || atom(isFattyFish(1)) ; 
  not atom(isOctopus(1))  >> atom(isShrimp(1)) >> atom(isUnique(1)) || atom(isChewy(1)) ; 
  not atom(hasMinorGrp(0))  >> not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  || atom(hasMinorGrp(1)) ; 
  atom(isChewy(1)) >> atom(isRaw(0)) >> not atom(isMaguro(1))  || not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) || not atom(hasMinorGrp(1))  ; 
  atom(isMaguro(1)) >> atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  ; 
  not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRaw(0)) >> atom(isChewy(1)) >> atom(isUnique(1)) >> atom(isCreamy(1)) || not atom(isRoe(1))  ; 
  atom(isChewy(1)) >> atom(isFattyFish(1)) >> not atom(isRaw(0))  >> atom(isOctopus(1)) || not atom(isFattyFish(1))  ; 
  atom(isShrimp(1)) >> atom(isFattyFish(1)) >> atom(isUnique(1)) >> atom(hasPrice(1)) || not atom(isFattyFish(1))  ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isSweet(1))  || atom(isSweet(1)) ; 
  atom(isOctopus(1)) >> atom(hasPrice(0)) >> not atom(isRaw(0))  >> atom(isFattyFish(1)) ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(hasMinorGrp(2))  >> atom(isRaw(1)) ; 
  atom(isChewy(1)) >> not atom(isUrchin(1))  >> not atom(isChewy(1))  ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(0)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isShrimp(1)) >> not atom(isOctopus(1))  || atom(isUrchin(1)) ; 
  atom(isSweet(1)) || atom(isRaw(0)) ; 
  not atom(isMaguro(1))  >> not atom(hasMinorGrp(1))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(isFattyFish(1)) ; 
  not atom(isCreamy(1))  >> not atom(isMaguro(1))  || not atom(hasPrice(0))  ; 
  not atom(isOctopus(1))  >> not atom(isSweet(1))  >> not atom(isChewy(1))  || atom(isUrchin(1)) ; 
  not atom(isMaguro(1))  >> not atom(isRoe(1))  >> not atom(isUrchin(1))  >> not atom(isCreamy(1))  || atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isChewy(1)) >> atom(hasMinorGrp(0)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isShrimp(1)) >> not atom(isOctopus(1))  || atom(isUrchin(1)) ; 
  atom(isSweet(1)) || atom(isRaw(0)) ; 
  not atom(isMaguro(1))  >> not atom(hasMinorGrp(1))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(isFattyFish(1)) ; 
  not atom(isCreamy(1))  >> not atom(isMaguro(1))  || not atom(hasPrice(0))  ; 
  not atom(isOctopus(1))  >> not atom(isSweet(1))  >> not atom(isChewy(1))  || atom(isUrchin(1)) ; 
  not atom(isMaguro(1))  >> not atom(isRoe(1))  >> not atom(isUrchin(1))  >> not atom(isCreamy(1))  || atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRaw(0)) >> atom(isChewy(1)) >> atom(isUnique(1)) >> atom(isCreamy(1)) || not atom(isRoe(1))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(0))  >> atom(hasMinorGrp(1)) >> atom(hasPrice(1)) || atom(isRaw(1)) ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isSweet(1))  || atom(isSweet(1)) ; 
  atom(isOctopus(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(0))  >> atom(hasPrice(0)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(0)) >> not atom(isRaw(0))  >> atom(isFattyFish(1)) ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(hasMinorGrp(2))  >> atom(isRaw(1)) ; 
  atom(isChewy(1)) >> not atom(isUrchin(1))  >> not atom(isChewy(1))  ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRaw(0)) >> atom(isChewy(1)) >> atom(isUnique(1)) >> atom(isCreamy(1)) || not atom(isRoe(1))  ; 
  atom(isMaguro(1)) >> not atom(hasMinorGrp(2))  >> atom(isCreamy(1)) >> atom(hasPrice(1)) || atom(isRaw(1)) ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isSweet(1))  || atom(isSweet(1)) ; 
  atom(isOctopus(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(0))  >> atom(hasPrice(0)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(0)) >> not atom(isRaw(0))  >> atom(isFattyFish(1)) ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) ; 
  atom(isChewy(1)) >> not atom(isUrchin(1))  >> not atom(isChewy(1))  ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isChewy(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(0))  || atom(isRaw(1)) ; 
  atom(isShrimp(1)) >> atom(hasPrice(1)) >> atom(isCreamy(1)) >> not atom(isChewy(1))  || atom(isChewy(1)) ; 
  atom(isChewy(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isOctopus(1))  || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> not atom(isCreamy(1))  >> not atom(hasPrice(0))  >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRaw(0)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> not atom(hasMinorGrp(0))  || atom(isMaguro(1)) ; 
  not atom(hasMinorGrp(2))  >> not atom(isOctopus(1))  || atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> not atom(isOctopus(1))  || not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(0)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isChewy(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(0))  || atom(isRaw(1)) ; 
  atom(isShrimp(1)) >> atom(hasPrice(1)) >> atom(isCreamy(1)) >> not atom(isChewy(1))  || atom(isChewy(1)) ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isOctopus(1))  || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> not atom(isCreamy(1))  >> not atom(hasPrice(0))  >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isChewy(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(0))  || atom(isRaw(1)) ; 
  atom(isChewy(1)) >> atom(isFattyFish(1)) >> atom(isRoe(1)) >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(hasMinorGrp(0)) >> atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  >> atom(isCreamy(1)) >> not atom(isChewy(1))  ; 
  atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(0))  || atom(isRaw(1)) ; 
  atom(isChewy(1)) >> atom(isFattyFish(1)) >> atom(isRoe(1)) >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isOctopus(1))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  >> atom(isCreamy(1)) >> not atom(isChewy(1))  ; 
  atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> not atom(isCreamy(1))  >> not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(0))  || atom(isRaw(1)) ; 
  atom(isChewy(1)) >> atom(isFattyFish(1)) >> atom(isRoe(1)) >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isOctopus(1))  || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> not atom(isCreamy(1))  >> not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(0))  || atom(isRaw(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) >> atom(hasMinorGrp(0)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  >> not atom(isCreamy(1))  >> not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isMaguro(1)) >> atom(hasMinorGrp(0)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(1))  >> atom(isRoe(1)) >> atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(0))  || atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) 
}.
