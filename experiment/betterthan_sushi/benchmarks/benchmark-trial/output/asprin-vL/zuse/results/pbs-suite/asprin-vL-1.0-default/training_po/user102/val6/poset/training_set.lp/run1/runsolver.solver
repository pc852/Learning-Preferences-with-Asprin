asprin_vL version 1.0
Reading from stdin
-:243:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:253:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:268:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:349:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:623:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:800:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:929:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1001:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1005:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1005:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1011:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1110:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1136:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1256:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1290:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1312:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:160:1-16: info: no atoms over signature occur in program:
  output/3

-:152:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:153:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:154:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(8,eq,1) output(8,eq,5) output(8,eq,7) output(8,eq,4) output(8,eq,0) output(8,eq,2) output(8,eq,3) output(8,eq,9) output(1,eq,5) output(1,eq,7) output(1,eq,4) output(1,eq,0) output(1,eq,2) output(1,eq,3) output(1,eq,9) output(5,eq,7) output(5,eq,4) output(5,eq,0) output(5,eq,2) output(5,eq,3) output(5,eq,9) output(7,eq,4) output(7,eq,0) output(7,eq,2) output(7,eq,3) output(7,eq,9) output(4,eq,0) output(4,eq,2) output(4,eq,3) output(4,eq,9) output(0,eq,2) output(0,eq,3) output(0,eq,9) output(2,eq,3) output(2,eq,9) output(3,eq,9)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(5,better,7) output(5,better,4) output(2,better,3) output(2,better,9) output(8,better,5) output(8,better,7) output(8,better,4) output(8,better,0) output(8,better,3) output(8,better,9) output(1,better,5) output(1,better,7) output(1,better,4) output(1,better,0) output(1,better,3) output(1,better,9) output(5,worse,2) output(7,worse,2) output(4,worse,2) output(0,worse,2) output(7,worse,0) output(7,worse,9) output(4,worse,0) output(4,worse,9) output(7,worse,3) output(4,worse,3) output(8,eq,1) output(8,eq,2) output(1,eq,2) output(5,eq,0) output(5,eq,3) output(5,eq,9) output(7,eq,4) output(0,eq,3) output(0,eq,9) output(3,eq,9)
Optimization: 20 1
Answer: 3
preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(5,better,7) output(5,better,4) output(5,better,0) output(5,better,3) output(5,better,9) output(2,better,3) output(2,better,9) output(8,better,7) output(8,better,4) output(8,better,0) output(8,better,3) output(8,better,9) output(1,better,7) output(1,better,4) output(1,better,0) output(1,better,3) output(1,better,9) output(8,worse,2) output(1,worse,2) output(5,worse,2) output(7,worse,2) output(4,worse,2) output(0,worse,2) output(7,worse,0) output(7,worse,9) output(4,worse,0) output(4,worse,9) output(7,worse,3) output(4,worse,3) output(8,eq,1) output(7,eq,4) output(0,eq,3) output(0,eq,9) output(3,eq,9) output(8,unc,5) output(1,unc,5)
Optimization: 19 2
Answer: 4
preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,2) output(4,better,3) output(4,better,9) output(5,better,4) output(5,better,2) output(5,better,3) output(5,better,9) output(0,better,2) output(0,better,3) output(1,better,5) output(1,better,4) output(1,better,0) output(1,better,2) output(1,better,3) output(1,better,9) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,9) output(7,better,4) output(0,better,9) output(8,worse,4) output(8,worse,5) output(8,worse,0) output(4,worse,0) output(8,worse,7) output(5,worse,7) output(8,worse,1) output(8,eq,2) output(8,eq,3) output(8,eq,9) output(1,eq,7) output(5,eq,0) output(2,eq,3) output(2,eq,9) output(3,eq,9)
Optimization: 15 1
Answer: 5
preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(5,better,4) output(5,better,2) output(5,better,3) output(5,better,9) output(2,better,3) output(2,better,9) output(0,better,2) output(0,better,3) output(8,better,4) output(8,better,3) output(8,better,9) output(1,better,5) output(1,better,7) output(1,better,4) output(1,better,0) output(1,better,2) output(1,better,3) output(1,better,9) output(7,better,2) output(7,better,3) output(7,better,9) output(7,better,4) output(0,better,9) output(8,worse,5) output(4,worse,2) output(8,worse,0) output(4,worse,0) output(8,worse,7) output(8,worse,1) output(8,eq,2) output(5,eq,7) output(5,eq,0) output(7,eq,0) output(4,eq,3) output(4,eq,9) output(3,eq,9)
Optimization: 13 1
Answer: 6
preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,7),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isRaw(0))),()) preference(1,poset) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,9) output(5,better,7) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,9) output(0,better,2) output(0,better,3) output(8,better,5) output(8,better,7) output(8,better,0) output(8,better,2) output(8,better,3) output(8,better,9) output(1,better,2) output(1,better,3) output(1,better,9) output(7,better,2) output(7,better,3) output(7,better,9) output(8,better,1) output(0,better,9) output(1,worse,4) output(5,worse,4) output(7,worse,4) output(1,worse,5) output(8,eq,4) output(1,eq,7) output(1,eq,0) output(7,eq,0) output(2,eq,3) output(2,eq,9) output(3,eq,9)
Optimization: 11 2
Answer: 7
preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(isRaw(0))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,10),1,for(atom(isRaw(0))),()) preference(1,(1,11),1,for(atom(isRaw(0))),()) preference(1,(1,12),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(hasPrice(0))),()) preference(1,(1,2),2,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isChewy(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,5),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasPrice(0))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,9),2,for(atom(isChewy(1))),()) preference(1,(1,10),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,11),2,for(atom(isUrchin(1))),()) preference(1,(1,12),2,for(atom(hasPrice(1))),()) preference(1,poset) output(4,better,3) output(4,better,9) output(5,better,7) output(5,better,4) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,9) output(2,better,3) output(2,better,9) output(0,better,2) output(0,better,3) output(8,better,5) output(8,better,7) output(8,better,4) output(8,better,0) output(8,better,2) output(8,better,3) output(8,better,9) output(1,better,5) output(1,better,7) output(1,better,4) output(1,better,0) output(1,better,2) output(1,better,3) output(1,better,9) output(3,better,9) output(7,better,2) output(7,better,3) output(7,better,9) output(7,better,4) output(0,better,9) output(7,worse,0) output(4,worse,0) output(8,worse,1) output(4,unc,2)
Optimization: 4 12
Answer: 8
preference(1,(1,2),1,for(atom(isFattyFish(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,10),1,for(atom(isRaw(0))),()) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(hasPrice(0))),()) preference(1,(1,9),2,for(atom(isChewy(1))),()) preference(1,(1,10),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,11),2,for(atom(isCreamy(1))),()) preference(1,poset) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,9) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,9) output(2,better,3) output(2,better,9) output(0,better,2) output(0,better,3) output(8,better,5) output(8,better,7) output(8,better,4) output(8,better,0) output(8,better,2) output(8,better,3) output(8,better,9) output(1,better,5) output(1,better,7) output(1,better,4) output(1,better,0) output(1,better,2) output(1,better,3) output(1,better,9) output(3,better,9) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,9) output(8,better,1) output(0,better,9) output(5,worse,4) output(7,worse,4) output(5,unc,7)
Optimization: 3 8
Answer: 9
preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,9),1,for(atom(isOctopus(1))),()) preference(1,(1,10),1,for(atom(isCreamy(1))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(isRaw(0))),()) preference(1,(1,1),2,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isSweet(1))),()) preference(1,(1,6),2,for(atom(hasPrice(0))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isRaw(0))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),2,for(atom(hasPrice(0))),()) preference(1,(1,11),2,for(atom(isRoe(1))),()) preference(1,(1,12),2,for(atom(isMaguro(1))),()) preference(1,poset) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,9) output(5,better,7) output(5,better,4) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,9) output(2,better,3) output(2,better,9) output(0,better,2) output(0,better,3) output(8,better,5) output(8,better,7) output(8,better,4) output(8,better,0) output(8,better,2) output(8,better,3) output(8,better,9) output(1,better,5) output(1,better,7) output(1,better,4) output(1,better,0) output(1,better,2) output(1,better,3) output(1,better,9) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,9) output(7,better,4) output(0,better,9) output(3,worse,9) output(8,worse,1)
Optimization: 2 12
Answer: 10
preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(hasPrice(0))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isSweet(1))),()) preference(1,(1,8),1,for(atom(isRaw(0))),()) preference(1,(1,9),1,for(atom(isFattyFish(1))),()) preference(1,(1,10),1,for(atom(isRaw(0))),()) preference(1,(1,11),1,for(atom(isRoe(1))),()) preference(1,(1,12),1,for(atom(isFattyFish(1))),()) preference(1,(1,1),2,for(atom(hasPrice(0))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),2,for(atom(isChewy(1))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,9),2,for(atom(isRaw(0))),()) preference(1,(1,10),2,for(atom(hasPrice(1))),()) preference(1,(1,11),2,for(atom(isRaw(0))),()) preference(1,(1,12),2,for(atom(isOctopus(1))),()) preference(1,poset) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,9) output(5,better,7) output(5,better,4) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,9) output(2,better,3) output(2,better,9) output(0,better,2) output(0,better,3) output(8,better,5) output(8,better,7) output(8,better,4) output(8,better,0) output(8,better,2) output(8,better,3) output(8,better,9) output(1,better,5) output(1,better,7) output(1,better,4) output(1,better,0) output(1,better,2) output(1,better,3) output(1,better,9) output(3,better,9) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,9) output(7,better,4) output(0,better,9) output(8,worse,1)
Optimization: 1 12
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.038 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 10+
  Optimum    : unknown
Optimization : 1 12
Calls        : 1
Time         : 1198.065s (Solving: 1192.48s 1st Model: 0.99s Unsat: 0.00s)
CPU Time     : 4774.402s
Threads      : 4        (Winner: 4)

Choices      : 14822307 (Domain: 3149)
Conflicts    : 472213   (Analyzed: 472213)
Restarts     : 447      (Average: 1056.40 Last: 21439)
Model-Level  : 3870.3  
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 21433101 (Deleted: 21191070)
  Binary     : 7224     (Ratio:   0.03%)
  Ternary    : 101980   (Ratio:   0.48%)
  Conflict   : 472213   (Average Length:  980.5 Ratio:   2.20%) 
  Loop       : 20810292 (Average Length:  233.5 Ratio:  97.09%) 
  Other      : 150596   (Average Length:    3.8 Ratio:   0.70%) 
  Distributed: 50230    (Ratio:   0.24% Average LBD: 2.88) 
  Integrated : 150681   (Ratio: 299.98% Unit: 561 Average Jumps: 1017.66)
Backjumps    : 472213   (Average: 28.58 Max: 191800 Sum: 13494840)
  Executed   : 472181   (Average: 28.58 Max: 191800 Sum: 13494741 Ratio: 100.00%)
  Bounded    : 32       (Average:  3.09 Max:  38 Sum:     99 Ratio:   0.00%)

Rules        : 1110937 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 24203   
Bodies       : 820549  
  Count      : 48      
Equivalences : 27346    (Atom=Atom: 4599 Body=Body: 6575 Other: 16172)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 774656 Gammas: 0)
Variables    : 785730   (Eliminated:    0 Frozen: 777348)
Constraints  : 4605286  (Binary:  82.5% Ternary:   3.6% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isMaguro(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isOctopus(1)) ; 
  atom(hasPrice(1)) >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasPrice(0)) ; 
  atom(isRaw(0)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(0)) >> atom(isChewy(1)) ; 
  atom(hasPrice(1)) >> atom(isChewy(1)) ; 
  atom(isFattyFish(1)) >> atom(isRaw(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(1)) ; 
  atom(hasMinorGrp(1)) >> atom(isChewy(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(0)) ; 
  atom(isRaw(0)) >> atom(isUrchin(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isFattyFish(1)) >> atom(hasPrice(1)) ; 
  atom(hasPrice(1)) >> atom(isChewy(1)) ; 
  atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(isRaw(0)) ; 
  atom(isRaw(0)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(0)) >> atom(isChewy(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(0)) ; 
  atom(hasMinorGrp(0)) >> atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isOctopus(1)) >> atom(isCreamy(1)) ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) ; 
  atom(isFattyFish(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isSweet(1)) ; 
  atom(isFattyFish(1)) >> atom(hasPrice(0)) ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) ; 
  atom(isSweet(1)) >> atom(isRaw(0)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(hasPrice(0)) >> atom(isRoe(1)) ; 
  atom(isRaw(0)) >> atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(2)) >> atom(hasPrice(0)) ; 
  atom(hasPrice(0)) >> atom(hasMinorGrp(0)) ; 
  atom(isCreamy(1)) >> atom(isChewy(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isSweet(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isRaw(0)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isSweet(1)) >> atom(isCreamy(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(0)) ; 
  atom(isFattyFish(1)) >> atom(isRaw(0)) ; 
  atom(isRaw(0)) >> atom(hasPrice(1)) ; 
  atom(isRoe(1)) >> atom(isRaw(0)) ; 
  atom(isFattyFish(1)) >> atom(isOctopus(1)) 
}.
