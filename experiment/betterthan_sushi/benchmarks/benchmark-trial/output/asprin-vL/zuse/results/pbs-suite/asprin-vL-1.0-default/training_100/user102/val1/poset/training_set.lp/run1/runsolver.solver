asprin_vL version 1.0
Reading from stdin
-:313:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:323:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:338:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:419:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:693:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:870:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:999:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1071:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1075:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1075:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1081:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1180:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1206:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1326:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1360:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1382:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:230:1-16: info: no atoms over signature occur in program:
  output/3

-:222:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:223:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:224:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
output(48,eq,60) preference(1,poset) output(48,eq,21) output(48,eq,14) output(48,eq,39) output(48,eq,15) output(48,eq,46) output(48,eq,23) output(48,eq,50) output(21,eq,14) output(21,eq,39) output(21,eq,15) output(21,eq,46) output(21,eq,23) output(21,eq,50) output(21,eq,60) output(14,eq,39) output(14,eq,15) output(14,eq,46) output(14,eq,23) output(14,eq,50) output(14,eq,60) output(39,eq,15) output(39,eq,46) output(39,eq,23) output(39,eq,50) output(39,eq,60) output(15,eq,46) output(15,eq,23) output(15,eq,50) output(15,eq,60) output(46,eq,23) output(46,eq,50) output(46,eq,60) output(23,eq,50) output(23,eq,60) output(50,eq,60)
Optimization: 36 0
Answer: 2
output(48,eq,60) preference(1,(1,8),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(21,better,14) output(21,better,50) output(21,better,60) output(39,better,50) output(39,better,60) output(15,better,50) output(15,better,60) output(46,better,50) output(46,better,60) output(23,better,50) output(23,better,60) output(14,better,39) output(14,better,46) output(14,better,50) output(14,better,60) output(15,better,46) output(21,better,39) output(21,better,46) output(48,worse,21) output(48,worse,39) output(48,worse,15) output(48,worse,46) output(48,worse,23) output(14,worse,15) output(14,worse,23) output(48,worse,14) output(39,worse,15) output(46,worse,23) output(39,worse,23) output(48,eq,50) output(21,eq,15) output(21,eq,23) output(39,eq,46) output(15,eq,23) output(50,eq,60)
Optimization: 18 1
Answer: 3
output(48,eq,60) preference(1,(1,8),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(21,better,14) output(21,better,50) output(21,better,60) output(39,better,50) output(39,better,60) output(15,better,50) output(15,better,60) output(46,better,50) output(46,better,60) output(23,better,50) output(23,better,60) output(14,better,15) output(14,better,23) output(14,better,50) output(14,better,60) output(21,better,15) output(39,better,15) output(21,better,23) output(46,better,23) output(39,better,23) output(48,worse,21) output(48,worse,39) output(48,worse,15) output(48,worse,46) output(48,worse,23) output(14,worse,39) output(14,worse,46) output(48,worse,14) output(15,worse,46) output(48,eq,50) output(21,eq,39) output(21,eq,46) output(39,eq,46) output(15,eq,23) output(50,eq,60)
Optimization: 16 1
Answer: 4
output(48,eq,60) preference(1,(1,4),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(21,better,14) output(21,better,50) output(21,better,60) output(39,better,50) output(39,better,60) output(15,better,50) output(15,better,60) output(46,better,50) output(46,better,60) output(23,better,50) output(23,better,60) output(14,better,39) output(14,better,15) output(14,better,46) output(14,better,23) output(14,better,50) output(14,better,60) output(21,better,15) output(21,better,39) output(21,better,23) output(21,better,46) output(48,worse,21) output(48,worse,39) output(48,worse,15) output(48,worse,46) output(48,worse,23) output(48,worse,14) output(48,eq,50) output(39,eq,46) output(15,eq,23) output(50,eq,60) output(39,unc,15) output(39,unc,23) output(15,unc,46) output(46,unc,23)
Optimization: 15 2
Answer: 5
output(48,eq,60) preference(1,(1,4),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(21,better,14) output(21,better,50) output(21,better,60) output(39,better,50) output(39,better,60) output(15,better,50) output(15,better,60) output(46,better,50) output(46,better,60) output(23,better,50) output(23,better,60) output(14,better,39) output(14,better,15) output(14,better,23) output(14,better,50) output(14,better,60) output(21,better,15) output(39,better,15) output(21,better,39) output(21,better,23) output(46,better,23) output(39,better,23) output(48,worse,21) output(48,worse,39) output(48,worse,15) output(48,worse,46) output(48,worse,23) output(14,worse,46) output(48,worse,14) output(15,worse,46) output(39,worse,46) output(48,eq,50) output(21,eq,46) output(15,eq,23) output(50,eq,60)
Optimization: 14 2
Answer: 6
output(48,eq,60) preference(1,(1,2),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(21,better,14) output(21,better,50) output(21,better,60) output(39,better,50) output(39,better,60) output(15,better,50) output(15,better,60) output(46,better,50) output(46,better,60) output(23,better,50) output(23,better,60) output(14,better,39) output(14,better,15) output(14,better,23) output(14,better,50) output(14,better,60) output(50,better,60) output(21,better,15) output(39,better,15) output(21,better,39) output(21,better,23) output(46,better,23) output(39,better,23) output(48,worse,21) output(48,worse,39) output(48,worse,15) output(48,worse,46) output(48,worse,23) output(14,worse,46) output(48,worse,14) output(48,worse,50) output(15,worse,46) output(39,worse,46) output(21,eq,46) output(15,eq,23)
Optimization: 13 3
Answer: 7
output(48,eq,60) preference(1,(1,1),1,for(atom(hasOftenSold(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(hasOftenSold(1))),()) preference(1,poset) output(21,better,50) output(21,better,60) output(39,better,50) output(39,better,60) output(15,better,50) output(15,better,60) output(46,better,50) output(46,better,60) output(23,better,50) output(23,better,60) output(14,better,39) output(14,better,15) output(14,better,46) output(14,better,23) output(14,better,50) output(14,better,60) output(50,better,60) output(21,better,15) output(39,better,15) output(21,better,39) output(21,better,23) output(46,better,23) output(39,better,23) output(21,better,46) output(48,worse,21) output(48,worse,39) output(48,worse,15) output(48,worse,46) output(48,worse,23) output(48,worse,14) output(48,worse,50) output(15,worse,46) output(39,worse,46) output(21,eq,14) output(15,eq,23)
Optimization: 12 3
Answer: 8
output(48,eq,60) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(hasOftenSold(1))),()) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(hasOftenSold(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(21,better,14) output(21,better,50) output(21,better,60) output(39,better,50) output(39,better,60) output(15,better,50) output(15,better,60) output(46,better,50) output(46,better,60) output(23,better,50) output(23,better,60) output(14,better,39) output(14,better,15) output(14,better,46) output(14,better,23) output(14,better,50) output(14,better,60) output(50,better,60) output(21,better,15) output(39,better,15) output(21,better,39) output(21,better,23) output(46,better,23) output(39,better,23) output(21,better,46) output(48,worse,21) output(48,worse,39) output(48,worse,15) output(48,worse,46) output(48,worse,23) output(48,worse,14) output(48,worse,50) output(15,worse,46) output(39,worse,46) output(15,eq,23)
Optimization: 11 4
Answer: 9
output(48,eq,60) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,2),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,3),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,4),1,for(atom(hasOftenSold(1))),()) preference(1,(1,5),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,7),1,for(atom(hasOftenSold(1))),()) preference(1,(1,9),1,for(atom(hasPrice(0))),()) preference(1,(1,10),1,for(atom(hasOiliness(0))),()) preference(1,(1,11),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,12),1,for(atom(hasOiliness(0))),()) preference(1,(1,1),2,for(atom(hasOftenSold(1))),()) preference(1,(1,2),2,for(atom(hasPriceLevel(0))),()) preference(1,(1,3),2,for(atom(hasOiliness(0))),()) preference(1,(1,4),2,for(atom(hasOftenSold(0))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(hasOilyLevel(0))),()) preference(1,(1,9),2,for(atom(hasOftenSold(0))),()) preference(1,(1,10),2,for(atom(hasPrice(0))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,(1,12),2,for(atom(hasPriceLevel(0))),()) preference(1,poset) output(21,better,14) output(21,better,50) output(21,better,60) output(39,better,50) output(39,better,60) output(15,better,50) output(15,better,60) output(46,better,50) output(46,better,60) output(23,better,50) output(23,better,60) output(14,better,39) output(14,better,15) output(14,better,46) output(14,better,23) output(14,better,50) output(14,better,60) output(50,better,60) output(15,better,23) output(21,better,15) output(39,better,15) output(39,better,46) output(21,better,39) output(21,better,23) output(46,better,23) output(39,better,23) output(21,better,46) output(48,worse,21) output(48,worse,39) output(48,worse,15) output(48,worse,46) output(48,worse,23) output(48,worse,14) output(48,worse,50) output(15,worse,46)
Optimization: 9 10
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.073 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 9+
  Optimum    : unknown
Optimization : 9 10
Calls        : 1
Time         : 598.104s (Solving: 593.07s 1st Model: 0.79s Unsat: 0.00s)
CPU Time     : 2376.295s
Threads      : 4        (Winner: 4)

Choices      : 10460967 (Domain: 5450)
Conflicts    : 256497   (Analyzed: 256497)
Restarts     : 361      (Average: 710.52 Last: 8904)
Model-Level  : 18219.1 
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 18160071 (Deleted: 18014828)
  Binary     : 4689     (Ratio:   0.03%)
  Ternary    : 67333    (Ratio:   0.37%)
  Conflict   : 256497   (Average Length:  807.0 Ratio:   1.41%) 
  Loop       : 17803559 (Average Length:  160.1 Ratio:  98.04%) 
  Other      : 100015   (Average Length:    3.7 Ratio:   0.55%) 
  Distributed: 33390    (Ratio:   0.18% Average LBD: 2.84) 
  Integrated : 100168   (Ratio: 299.99% Unit: 264 Average Jumps: 1429.36)
Backjumps    : 256497   (Average: 36.84 Max: 162245 Sum: 9449362)
  Executed   : 256472   (Average: 36.84 Max: 162245 Sum: 9449282 Ratio: 100.00%)
  Bounded    : 25       (Average:  3.20 Max:  37 Sum:     80 Ratio:   0.00%)

Rules        : 943220  
  Choice     : 37      
  Minimize   : 2       
Atoms        : 23819   
Bodies       : 683969  
  Count      : 48      
Equivalences : 25188    (Atom=Atom: 4336 Body=Body: 6008 Other: 14844)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 642960 Gammas: 0)
Variables    : 652913   (Eliminated:    0 Frozen: 645503)
Constraints  : 3838732  (Binary:  82.6% Ternary:   3.5% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPriceLevel(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasMinorGrp(0)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasPriceLevel(1)) >> atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(0)) ; 
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasPriceLevel(1)) >> atom(hasOftenSold(1)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(1)) >> atom(hasOftenSold(1)) ; 
  atom(hasOilyLevel(0)) >> atom(hasPriceLevel(0)) ; 
  atom(hasOilyLevel(0)) >> atom(hasOiliness(0)) ; 
  atom(hasOftenSold(1)) >> atom(hasOftenSold(0)) ; 
  atom(hasOilyLevel(0)) >> atom(hasMinorGrp(0)) ; 
  atom(hasOftenSold(1)) >> atom(hasOilyLevel(0)) ; 
  atom(hasPrice(0)) >> atom(hasOftenSold(0)) ; 
  atom(hasOiliness(0)) >> atom(hasPrice(0)) ; 
  atom(hasOilyLevel(0)) >> atom(hasPrice(0)) ; 
  atom(hasOiliness(0)) >> atom(hasPriceLevel(0)) 
}.
