asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(11,eq,2) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(2,eq,6) output(2,eq,16) output(2,eq,20) output(2,eq,29) output(2,eq,51) output(2,eq,35) output(2,eq,59) output(6,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(16,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(20,eq,29) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(51,eq,35) output(51,eq,59) output(35,eq,59)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(11,better,6) output(11,better,20) output(16,better,20) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(6,worse,16) output(6,worse,29) output(6,worse,51) output(6,worse,35) output(6,worse,59) output(11,eq,2) output(11,eq,16) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(2,eq,16) output(2,eq,29) output(2,eq,51) output(2,eq,35) output(2,eq,59) output(6,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(51,eq,35) output(51,eq,59) output(35,eq,59)
Optimization: 31 1
Answer: 3
preference(1,(1,6),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,51) output(11,better,6) output(11,better,20) output(11,better,51) output(16,better,20) output(16,better,51) output(29,better,51) output(20,worse,29) output(20,worse,35) output(20,worse,59) output(51,worse,35) output(51,worse,59) output(6,worse,16) output(6,worse,29) output(6,worse,35) output(6,worse,59) output(11,eq,2) output(11,eq,16) output(11,eq,29) output(11,eq,35) output(11,eq,59) output(2,eq,16) output(2,eq,29) output(2,eq,35) output(2,eq,59) output(6,eq,20) output(6,eq,51) output(16,eq,29) output(16,eq,35) output(16,eq,59) output(20,eq,51) output(29,eq,35) output(29,eq,59) output(35,eq,59)
Optimization: 27 2
Answer: 4
preference(1,(1,5),1,for(atom(hasMinorGrp(3))),12) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(16,better,20) output(16,better,29) output(16,better,51) output(20,worse,35) output(20,worse,59) output(51,worse,35) output(51,worse,59) output(6,worse,16) output(6,worse,35) output(6,worse,59) output(29,worse,35) output(29,worse,59) output(11,eq,2) output(11,eq,16) output(11,eq,35) output(11,eq,59) output(2,eq,16) output(2,eq,35) output(2,eq,59) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(16,eq,35) output(16,eq,59) output(20,eq,29) output(20,eq,51) output(29,eq,51) output(35,eq,59)
Optimization: 25 3
Answer: 5
preference(1,(1,11),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),12) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,59) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,59) output(35,better,59) output(20,worse,35) output(51,worse,35) output(6,worse,16) output(6,worse,35) output(29,worse,35) output(11,eq,2) output(11,eq,16) output(11,eq,35) output(2,eq,16) output(2,eq,35) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(6,eq,59) output(16,eq,35) output(20,eq,29) output(20,eq,51) output(20,eq,59) output(29,eq,51) output(29,eq,59) output(51,eq,59)
Optimization: 21 4
Answer: 6
preference(1,(1,11),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,14),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),12) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,13),1,for(atom(hasOftenSold(0))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(6,worse,16) output(11,eq,2) output(11,eq,16) output(2,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(20,eq,29) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(51,eq,35) output(51,eq,59) output(35,eq,59)
Optimization: 19 6
Answer: 7
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(0)))),5) preference(1,(1,9),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(0)))),5) preference(1,(1,11),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,4),1,for(atom(hasOilyLevel(2))),8) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasOftenSold(0))),12) preference(1,less(weight)) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,59) output(2,worse,16) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(51,worse,35) output(51,worse,59) output(6,worse,16) output(29,worse,35) output(11,eq,16) output(2,eq,6) output(2,eq,35) output(6,eq,35)
Optimization: 13 10
Answer: 8
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(0)))),11) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(0)))),2) preference(1,(1,11),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,1),1,for(atom(hasOftenSold(0))),12) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,4),1,for(atom(hasOilyLevel(2))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),1) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(6,better,20) output(6,better,51) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,59) output(2,worse,16) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(51,worse,35) output(6,worse,16) output(11,eq,16) output(6,eq,29) output(6,eq,35) output(29,eq,35) output(51,eq,59)
Optimization: 12 12
Answer: 9
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(0)))),11) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(0)))),2) preference(1,(1,11),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,14),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(0))),12) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,4),1,for(atom(hasOilyLevel(2))),8) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),1) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(6,better,20) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(29,better,51) output(29,better,35) output(29,better,59) output(2,worse,16) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(51,worse,35) output(51,worse,59) output(6,worse,16) output(11,eq,16) output(6,eq,29) output(35,eq,59)
Optimization: 11 12
Answer: 10
preference(1,(1,3),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),5) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(0)))),1) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(0)))),2) preference(1,(1,11),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,2),1,for(atom(hasOiliness(0))),2) preference(1,(1,4),1,for(atom(hasPrice(0))),1) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),12) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,59) output(16,better,29) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,35) output(29,better,59) output(2,worse,20) output(2,worse,51) output(6,worse,16) output(6,worse,20) output(6,worse,29) output(6,worse,51) output(6,worse,35) output(16,worse,20) output(16,worse,51) output(29,worse,51)
Optimization: 10 14
Answer: 11
preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),10) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),7) preference(1,(1,5),1,for(neg(atom(hasOilyLevel(1)))),5) preference(1,(1,8),1,for(neg(atom(hasOftenSold(0)))),8) preference(1,(1,13),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),5) preference(1,(1,4),1,for(atom(hasOftenSold(0))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,9),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,11),1,for(atom(hasPrice(1))),3) preference(1,(1,12),1,for(atom(hasOiliness(0))),3) preference(1,less(weight)) output(2,better,6) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,35) output(29,better,59) output(2,worse,16) output(2,worse,20) output(2,worse,29) output(2,worse,51) output(6,worse,16) output(6,worse,20) output(6,worse,29) output(6,worse,51) output(29,eq,51)
Optimization: 9 14
Answer: 12
preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),10) preference(1,(1,5),1,for(neg(atom(hasOilyLevel(1)))),5) preference(1,(1,8),1,for(neg(atom(hasOftenSold(0)))),8) preference(1,(1,11),1,for(neg(atom(hasPrice(0)))),7) preference(1,(1,13),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),5) preference(1,(1,3),1,for(atom(hasPrice(1))),3) preference(1,(1,4),1,for(atom(hasOftenSold(0))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,9),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,12),1,for(atom(hasOiliness(0))),3) preference(1,less(weight)) output(2,better,6) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59) output(2,worse,16) output(2,worse,20) output(2,worse,29) output(2,worse,51) output(6,worse,16) output(6,worse,20) output(6,worse,29) output(6,worse,51)
Optimization: 8 14
Answer: 13
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),8) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,13),1,for(neg(atom(hasOiliness(1)))),5) preference(1,(1,3),1,for(atom(hasOilyLevel(2))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,6),1,for(atom(hasOftenSold(0))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,9),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,10),1,for(atom(hasPrice(0))),8) preference(1,(1,11),1,for(atom(hasPriceLevel(2))),1) preference(1,(1,12),1,for(atom(hasOiliness(0))),12) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,35) output(29,better,59) output(2,worse,16) output(2,worse,20) output(6,worse,16) output(6,worse,20) output(16,worse,20) output(29,eq,51)
Optimization: 6 14
Answer: 14
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,2),1,for(neg(atom(hasOiliness(0)))),8) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(2)))),2) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,13),1,for(neg(atom(hasOiliness(1)))),5) preference(1,(1,3),1,for(atom(hasOftenSold(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,6),1,for(atom(hasPrice(1))),12) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,10),1,for(atom(hasPrice(0))),8) preference(1,(1,11),1,for(atom(hasPriceLevel(2))),7) preference(1,(1,12),1,for(atom(hasOiliness(0))),12) preference(1,(1,14),1,for(atom(hasOiliness(1))),1) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,35) output(29,better,59) output(2,worse,16) output(6,worse,16) output(6,eq,20) output(29,eq,51)
Optimization: 4 14
Answer: 15
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,2),1,for(neg(atom(hasOiliness(0)))),8) preference(1,(1,4),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,10),1,for(neg(atom(hasOilyLevel(2)))),2) preference(1,(1,13),1,for(neg(atom(hasOiliness(1)))),5) preference(1,(1,3),1,for(atom(hasOftenSold(0))),6) preference(1,(1,5),1,for(atom(hasPrice(0))),8) preference(1,(1,6),1,for(atom(hasPrice(1))),12) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,11),1,for(atom(hasPriceLevel(2))),7) preference(1,(1,12),1,for(atom(hasOiliness(0))),12) preference(1,(1,14),1,for(atom(hasOilyLevel(2))),1) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,35) output(29,better,59) output(2,worse,16) output(6,worse,16) output(29,worse,51)
Optimization: 3 14
Answer: 16
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),4) preference(1,(1,7),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),5) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(1)))),10) preference(1,(1,10),1,for(neg(atom(hasOilyLevel(2)))),2) preference(1,(1,11),1,for(neg(atom(hasOftenSold(1)))),3) preference(1,(1,12),1,for(neg(atom(hasOiliness(0)))),11) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,4),1,for(atom(hasOilyLevel(2))),3) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),7) preference(1,(1,6),1,for(atom(hasPrice(1))),12) preference(1,(1,13),1,for(atom(hasPrice(0))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(3))),2) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59) output(6,worse,16) output(2,eq,16)
Optimization: 2 14
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),4) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(1)))),10) preference(1,(1,6),1,for(neg(atom(hasOftenSold(0)))),3) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),5) preference(1,(1,10),1,for(neg(atom(hasOilyLevel(2)))),2) preference(1,(1,12),1,for(neg(atom(hasOiliness(0)))),11) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),3) preference(1,(1,2),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),8) preference(1,(1,9),1,for(atom(hasOftenSold(0))),8) preference(1,(1,11),1,for(atom(hasOiliness(0))),12) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59) output(6,worse,16)
Optimization: 1 14
Answer: 18
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,3),1,for(neg(atom(hasPrice(1)))),5) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),3) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(2)))),2) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),8) preference(1,(1,7),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),5) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(2)))),12) preference(1,(1,14),1,for(neg(atom(hasOftenSold(1)))),9) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),11) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,11),1,for(atom(hasPrice(0))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 19
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(1)))),6) preference(1,(1,2),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),12) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,7),1,for(neg(atom(hasOiliness(0)))),6) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(2)))),1) preference(1,(1,10),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,8),1,for(atom(hasOilyLevel(2))),7) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,14),1,for(atom(hasOiliness(0))),4) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59)
Optimization: 0 13
Answer: 20
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),1) preference(1,(1,4),1,for(neg(atom(hasOftenSold(1)))),11) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(2)))),12) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,11),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,13),1,for(neg(atom(hasPrice(1)))),12) preference(1,(1,3),1,for(atom(hasOilyLevel(1))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,14),1,for(atom(hasPriceLevel(2))),8) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59)
Optimization: 0 12
Answer: 21
preference(1,(1,2),1,for(neg(atom(hasOiliness(0)))),2) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,5),1,for(neg(atom(hasOiliness(1)))),1) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),10) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(2)))),1) preference(1,(1,12),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,11),1,for(atom(hasOftenSold(0))),11) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),8) preference(1,(1,14),1,for(atom(hasOilyLevel(2))),3) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59)
Optimization: 0 11
Answer: 22
preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,4),1,for(neg(atom(hasOiliness(0)))),2) preference(1,(1,5),1,for(neg(atom(hasOiliness(1)))),1) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),10) preference(1,(1,12),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(2)))),1) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,11),1,for(atom(hasOftenSold(0))),11) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),8) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59)
Optimization: 0 10
Answer: 23
preference(1,(1,4),1,for(neg(atom(hasOiliness(0)))),2) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(1)))),10) preference(1,(1,3),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,5),1,for(atom(hasOftenSold(0))),11) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,12),1,for(atom(hasOiliness(0))),4) preference(1,(1,13),1,for(atom(hasPrice(0))),2) preference(1,(1,14),1,for(atom(hasOilyLevel(2))),3) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59)
Optimization: 0 9
Progression : 0 [2;9] (Error: 3.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.113 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 23+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 597.694s (Solving: 591.67s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 2372.241s
Threads      : 4        (Winner: 4)

Choices      : 11350629 (Domain: 6153)
Conflicts    : 2380166  (Analyzed: 2380164)
Restarts     : 3085     (Average: 771.53 Last: 96999)
Model-Level  : 1219.4  
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 2387994  (Deleted: 2190443)
  Binary     : 668      (Ratio:   0.03%)
  Ternary    : 330      (Ratio:   0.01%)
  Conflict   : 2380164  (Average Length: 1276.0 Ratio:  99.67%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7830     (Average Length:  149.0 Ratio:   0.33%) 
  Distributed: 2610     (Ratio:   0.11% Average LBD: 3.46) 
  Integrated : 7830     (Ratio: 300.00% Unit: 7 Average Jumps: 167.57)
Backjumps    : 2380164  (Average:  3.33 Max: 2795 Sum: 7936959)
  Executed   : 2380163  (Average:  3.33 Max: 2795 Sum: 7936932 Ratio: 100.00%)
  Bounded    : 1        (Average: 27.00 Max:  27 Sum:     27 Ratio:   0.00%)

Rules        : 1811787 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 503515  
Bodies       : 514020  
  Sum        : 216     
  Count      : 14      
Equivalences : 1506348  (Atom=Atom: 484903 Body=Body: 496928 Other: 524517)
Tight        : Yes
Variables    : 19827    (Eliminated:    0 Frozen: 12883)
Constraints  : 1347217  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(3)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(3)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(3)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: not atom(hasPriceLevel(1))  ; 
  12 :: atom(hasOftenSold(0)) ; 
  12 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPriceLevel(1))  ; 
  3 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasOilyLevel(2)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  5 :: not atom(hasOilyLevel(0))  ; 
  1 :: atom(hasMinorGrp(1)) ; 
  12 :: not atom(hasOftenSold(1))  ; 
  5 :: not atom(hasPriceLevel(0))  ; 
  12 :: not atom(hasOiliness(1))  ; 
  12 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOftenSold(0)) ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  3 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasOilyLevel(2)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  11 :: not atom(hasOilyLevel(0))  ; 
  1 :: atom(hasMinorGrp(1)) ; 
  1 :: not atom(hasPrice(0))  ; 
  2 :: not atom(hasPriceLevel(0))  ; 
  12 :: not atom(hasOiliness(1))  ; 
  1 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOftenSold(0)) ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  3 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasOilyLevel(2)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  11 :: not atom(hasOilyLevel(0))  ; 
  1 :: atom(hasMinorGrp(1)) ; 
  1 :: not atom(hasPrice(0))  ; 
  2 :: not atom(hasPriceLevel(0))  ; 
  12 :: not atom(hasOiliness(1))  ; 
  1 :: atom(hasPrice(1)) ; 
  2 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOiliness(0)) ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  1 :: atom(hasPrice(0)) ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasPriceLevel(2)) ; 
  5 :: not atom(hasOftenSold(1))  ; 
  1 :: not atom(hasOilyLevel(0))  ; 
  2 :: not atom(hasPriceLevel(0))  ; 
  1 :: atom(hasMinorGrp(1)) ; 
  12 :: not atom(hasOiliness(1))  ; 
  8 :: atom(hasPrice(1)) ; 
  12 :: atom(hasMinorGrp(3)) ; 
  12 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPriceLevel(2)) ; 
  10 :: not atom(hasOftenSold(1))  ; 
  7 :: not atom(hasPrice(0))  ; 
  8 :: atom(hasOftenSold(0)) ; 
  5 :: not atom(hasOilyLevel(1))  ; 
  1 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  8 :: not atom(hasOftenSold(0))  ; 
  2 :: atom(hasPriceLevel(1)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  3 :: atom(hasOiliness(0)) ; 
  12 :: not atom(hasOiliness(1))  ; 
  11 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPriceLevel(2)) ; 
  10 :: not atom(hasOftenSold(1))  ; 
  3 :: atom(hasPrice(1)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  5 :: not atom(hasOilyLevel(1))  ; 
  1 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasMinorGrp(3)) ; 
  8 :: not atom(hasOftenSold(0))  ; 
  2 :: atom(hasPriceLevel(1)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  7 :: not atom(hasPrice(0))  ; 
  3 :: atom(hasOiliness(0)) ; 
  12 :: not atom(hasOiliness(1))  ; 
  11 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasMinorGrp(0))  ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  3 :: atom(hasOilyLevel(2)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  8 :: not atom(hasPrice(0))  ; 
  10 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasMinorGrp(3)) ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasPriceLevel(1)) ; 
  8 :: atom(hasPrice(0)) ; 
  1 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasOiliness(0)) ; 
  5 :: not atom(hasOiliness(1))  ; 
  12 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: not atom(hasMinorGrp(0))  ; 
  8 :: not atom(hasOiliness(0))  ; 
  7 :: atom(hasOftenSold(0)) ; 
  2 :: not atom(hasOilyLevel(2))  ; 
  1 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasPrice(1)) ; 
  9 :: atom(hasMinorGrp(3)) ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasPrice(0))  ; 
  8 :: atom(hasPrice(0)) ; 
  7 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasOiliness(0)) ; 
  5 :: not atom(hasOiliness(1))  ; 
  1 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: not atom(hasMinorGrp(0))  ; 
  8 :: not atom(hasOiliness(0))  ; 
  6 :: atom(hasOftenSold(0)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  8 :: atom(hasPrice(0)) ; 
  12 :: atom(hasPrice(1)) ; 
  9 :: atom(hasMinorGrp(3)) ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasPrice(0))  ; 
  2 :: not atom(hasOilyLevel(2))  ; 
  7 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasOiliness(0)) ; 
  5 :: not atom(hasOiliness(1))  ; 
  1 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasMinorGrp(0))  ; 
  4 :: not atom(hasPriceLevel(1))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasOilyLevel(2)) ; 
  7 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasPrice(1)) ; 
  12 :: not atom(hasOiliness(1))  ; 
  5 :: not atom(hasPrice(1))  ; 
  10 :: not atom(hasOilyLevel(1))  ; 
  2 :: not atom(hasOilyLevel(2))  ; 
  3 :: not atom(hasOftenSold(1))  ; 
  11 :: not atom(hasOiliness(0))  ; 
  8 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasMinorGrp(0))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  4 :: not atom(hasPriceLevel(1))  ; 
  10 :: not atom(hasOilyLevel(1))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOftenSold(0))  ; 
  8 :: atom(hasMinorGrp(3)) ; 
  5 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasOftenSold(0)) ; 
  2 :: not atom(hasOilyLevel(2))  ; 
  12 :: atom(hasOiliness(0)) ; 
  11 :: not atom(hasOiliness(0))  ; 
  3 :: not atom(hasOftenSold(1))  ; 
  12 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasMinorGrp(0))  ; 
  11 :: atom(hasOilyLevel(2)) ; 
  5 :: not atom(hasPrice(1))  ; 
  3 :: not atom(hasPrice(0))  ; 
  2 :: not atom(hasPriceLevel(2))  ; 
  8 :: not atom(hasOilyLevel(1))  ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  5 :: not atom(hasMinorGrp(2))  ; 
  12 :: not atom(hasOilyLevel(2))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  4 :: atom(hasPrice(0)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  9 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasOilyLevel(1))  ; 
  2 :: not atom(hasPrice(0))  ; 
  12 :: not atom(hasMinorGrp(0))  ; 
  4 :: atom(hasMinorGrp(1)) ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  6 :: not atom(hasOiliness(0))  ; 
  7 :: atom(hasOilyLevel(2)) ; 
  1 :: not atom(hasMinorGrp(2))  ; 
  12 :: not atom(hasOiliness(1))  ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  10 :: not atom(hasOftenSold(1))  ; 
  4 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOilyLevel(2))  ; 
  5 :: atom(hasOilyLevel(1)) ; 
  11 :: not atom(hasOftenSold(1))  ; 
  12 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasMinorGrp(3)) ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  10 :: atom(hasMinorGrp(2)) ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  2 :: not atom(hasOiliness(1))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  12 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasOiliness(0))  ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  1 :: not atom(hasOiliness(1))  ; 
  10 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  1 :: not atom(hasMinorGrp(2))  ; 
  11 :: atom(hasOftenSold(0)) ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  8 :: atom(hasPriceLevel(2)) ; 
  3 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOilyLevel(2)) ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasOiliness(0))  ; 
  1 :: not atom(hasOiliness(1))  ; 
  10 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasMinorGrp(2)) ; 
  11 :: atom(hasOftenSold(0)) ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  8 :: atom(hasPriceLevel(2)) ; 
  1 :: not atom(hasMinorGrp(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPriceLevel(2)) ; 
  2 :: not atom(hasOiliness(0))  ; 
  11 :: atom(hasOftenSold(0)) ; 
  10 :: not atom(hasPriceLevel(1))  ; 
  8 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasPrice(0)) ; 
  3 :: atom(hasOilyLevel(2)) 
}.
