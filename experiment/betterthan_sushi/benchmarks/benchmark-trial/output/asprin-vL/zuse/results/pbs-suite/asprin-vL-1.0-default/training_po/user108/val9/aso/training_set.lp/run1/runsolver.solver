asprin_vL version 1.0
Reading from stdin
-:268:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:293:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:374:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:648:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:825:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1026:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1030:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1030:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1036:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1135:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1161:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1281:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1315:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1337:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:185:1-16: info: no atoms over signature occur in program:
  output/3

-:177:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:178:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:179:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:180:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:210:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUnique(1))),()) preference(1,(1,8),1,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,3) output(5,better,1) output(0,better,1) output(0,better,8) output(0,better,3) output(6,better,8) output(6,better,3) output(8,better,3) output(7,worse,2) output(7,worse,5) output(7,worse,0) output(7,worse,1) output(7,worse,6) output(7,worse,8) output(7,worse,3) output(2,worse,0) output(2,worse,6) output(5,worse,0) output(5,worse,6) output(5,worse,8) output(0,worse,6) output(1,worse,6) output(1,worse,8) output(1,worse,3) output(5,eq,3)
Optimization: 25 5
Answer: 2
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUnique(1))),()) preference(1,(1,8),1,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,6),4,for(atom(hasPrice(1))),()) preference(1,aso) output(7,better,1) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,3) output(5,better,1) output(0,better,1) output(0,better,8) output(0,better,3) output(6,better,8) output(6,better,3) output(8,better,3) output(2,worse,0) output(2,worse,6) output(5,worse,0) output(5,worse,6) output(5,worse,8) output(0,worse,6) output(1,worse,6) output(1,worse,8) output(1,worse,3) output(5,eq,3)
Optimization: 24 5
Answer: 3
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUnique(1))),()) preference(1,(1,8),1,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,5) output(7,better,1) output(7,better,3) output(2,better,8) output(2,better,3) output(5,better,3) output(0,better,1) output(0,better,8) output(0,better,3) output(1,better,3) output(6,better,8) output(6,better,3) output(8,better,3) output(2,worse,0) output(2,worse,6) output(5,worse,0) output(5,worse,6) output(0,worse,6) output(1,worse,6) output(5,eq,1)
Optimization: 23 5
Answer: 4
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUnique(1))),()) preference(1,(1,8),1,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,5) output(7,better,1) output(7,better,3) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,3) output(0,better,1) output(0,better,8) output(0,better,3) output(1,better,3) output(6,better,8) output(6,better,3) output(8,better,3) output(2,worse,0) output(2,worse,6) output(5,worse,0) output(5,worse,1) output(5,worse,6) output(5,worse,8) output(0,worse,6) output(1,worse,6) output(1,worse,8) output(5,eq,3)
Optimization: 22 5
Answer: 5
preference(1,(1,2),0,for(atom(isRaw(1))),()) preference(1,(1,3),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),1,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,7),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,5),2,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,2) output(7,better,6) output(7,better,4) output(2,better,6) output(2,better,4) output(5,better,6) output(5,better,4) output(0,better,6) output(0,better,4) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,4) output(8,better,4) output(7,worse,1) output(2,worse,5) output(2,worse,0) output(2,worse,1) output(2,worse,3) output(5,worse,1) output(0,worse,1) output(6,worse,8) output(6,worse,3) output(4,worse,3) output(7,eq,5) output(7,eq,0) output(7,eq,3) output(5,eq,0) output(5,eq,3) output(0,eq,3)
Optimization: 21 6
Answer: 6
preference(1,(1,3),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),0,for(atom(isUrchin(1))),()) preference(1,(1,6),0,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,2),2,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),2,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(isRaw(0))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,2),3,for(atom(isRaw(1))),()) preference(1,(1,1),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,2) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,4) output(8,better,4) output(8,better,3) output(6,worse,8) output(0,eq,1)
Optimization: 7 6
Answer: 7
preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(hasPrice(0))),()) preference(1,(1,8),1,for(atom(isRaw(0))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(hasPrice(1))),()) preference(1,aso) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,worse,3) output(7,eq,2) output(7,eq,5) output(2,eq,5)
Optimization: 6 4
Answer: 8
preference(1,(1,1),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,5),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(atom(isRaw(1))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isShrimp(1))),()) preference(1,(1,4),1,for(atom(isShrimp(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isUnique(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,2),3,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(hasPrice(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,1),4,for(atom(isRaw(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isUrchin(1))),()) preference(1,(1,4),4,for(atom(isFattyFish(1))),()) preference(1,(1,5),4,for(atom(isOctopus(1))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,8),4,for(atom(isUrchin(1))),()) preference(1,aso) output(7,better,2) output(7,better,5) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,5) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,better,4) output(4,worse,3)
Optimization: 5 8
Answer: 9
preference(1,(1,1),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,5),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(atom(isRaw(1))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isShrimp(1))),()) preference(1,(1,4),1,for(atom(isShrimp(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isUnique(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,2),3,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(hasPrice(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(hasPrice(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,1),4,for(atom(isRaw(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isUrchin(1))),()) preference(1,(1,4),4,for(atom(isFattyFish(1))),()) preference(1,(1,5),4,for(atom(isOctopus(1))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,8),4,for(atom(isUrchin(1))),()) preference(1,aso) output(7,better,2) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,5) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,better,4) output(4,worse,3)
Optimization: 4 8
Answer: 10
preference(1,(1,1),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,5),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(atom(isRaw(1))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isShrimp(1))),()) preference(1,(1,4),1,for(atom(isShrimp(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isUnique(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,2),3,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isChewy(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,1),4,for(atom(isRaw(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isUrchin(1))),()) preference(1,(1,4),4,for(atom(isFattyFish(1))),()) preference(1,(1,5),4,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,8),4,for(atom(isUrchin(1))),()) preference(1,aso) output(7,better,2) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,5) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,better,4) output(8,better,3)
Optimization: 3 8
Answer: 11
preference(1,(1,1),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isUnique(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,2),3,for(atom(isUrchin(1))),()) preference(1,(1,3),3,for(atom(isChewy(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,1),4,for(atom(isRaw(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(isFattyFish(1))),()) preference(1,(1,5),4,for(atom(isRoe(1))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,better,4) output(8,better,3)
Optimization: 2 8
Progression : [1;2] (Error: 1)
Progression : [2;2] (Error: 0)
Progression : 2 [1;8] (Error: 7)
Answer: 12
preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(hasPrice(1))),()) preference(1,(1,4),4,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,2) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,better,4) output(8,better,3)
Optimization: 2 7
Answer: 13
preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,5),1,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isChewy(1))),()) preference(1,(1,3),4,for(atom(hasPrice(1))),()) preference(1,(1,4),4,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,better,4) output(8,better,3) output(4,worse,3) output(7,eq,2)
Optimization: 2 6
Answer: 14
preference(1,(1,1),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),3,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(hasPrice(1))),()) preference(1,(1,7),4,for(atom(isUrchin(1))),()) preference(1,aso) output(7,better,2) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,better,4) output(8,better,3)
Optimization: 2 5
Answer: 15
preference(1,(1,2),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,3),3,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(hasPrice(1))),()) preference(1,(1,2),4,for(atom(isRaw(1))),()) preference(1,aso) output(7,better,2) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,better,4) output(8,better,3)
Optimization: 2 4
Progression : 2 [2;4] (Error: 1)
Answer: 16
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isRaw(0))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,aso) output(7,better,5) output(7,better,0) output(7,better,1) output(7,better,6) output(7,better,8) output(7,better,4) output(7,better,3) output(2,better,5) output(2,better,0) output(2,better,1) output(2,better,6) output(2,better,8) output(2,better,4) output(2,better,3) output(5,better,0) output(5,better,1) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(0,better,1) output(0,better,6) output(0,better,8) output(0,better,4) output(0,better,3) output(1,better,6) output(1,better,8) output(1,better,4) output(1,better,3) output(6,better,8) output(6,better,4) output(6,better,3) output(8,better,4) output(8,better,3) output(4,worse,3) output(7,eq,2)
Optimization: 2 3
OPTIMUM FOUND

Models       : 16
  Optimum    : yes
Optimization : 2 3
Calls        : 1
Time         : 40.414s (Solving: 34.54s 1st Model: 0.16s Unsat: 25.80s)
CPU Time     : 143.848s
Threads      : 4        (Winner: 1)

Choices      : 491447   (Domain: 11706)
Conflicts    : 125972   (Analyzed: 125965)
Restarts     : 172      (Average: 732.35 Last: 7713)
Model-Level  : 495.9   
Problems     : 12       (Average Length: 0.33 Splits: 0)
Lemmas       : 205029   (Deleted: 113732)
  Binary     : 5530     (Ratio:   2.70%)
  Ternary    : 10673    (Ratio:   5.21%)
  Conflict   : 125964   (Average Length:   92.7 Ratio:  61.44%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 79065    (Average Length:   32.6 Ratio:  38.56%) 
  Distributed: 26412    (Ratio:  20.97% Average LBD: 3.19) 
  Integrated : 79236    (Ratio: 300.00% Unit: 473 Average Jumps: 64.81)
Backjumps    : 125965   (Average:  3.49 Max: 716 Sum: 439015)
  Executed   : 125940   (Average:  3.48 Max: 716 Sum: 438666 Ratio:  99.92%)
  Bounded    : 25       (Average: 13.96 Max:  35 Sum:    349 Ratio:   0.08%)

Rules        : 1978073 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 591608  
Bodies       : 696354  
  Count      : 1768    
Equivalences : 1807185  (Atom=Atom: 517635 Body=Body: 559991 Other: 729559)
Tight        : Yes
Variables    : 77183    (Eliminated:    0 Frozen: 54167)
Constraints  : 1492497  (Binary:  94.9% Ternary:   4.2% Other:   0.9%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isChewy(1))  || atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(2))  >> not atom(isFattyFish(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(isSweet(1))  >> not atom(isOctopus(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(isUnique(1))  >> not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isChewy(1))  || atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(2))  >> atom(hasPrice(1)) ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(isSweet(1))  >> not atom(isOctopus(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(isUnique(1))  >> not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isChewy(1))  || atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(2))  >> not atom(isCreamy(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(isRaw(1))  >> not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isChewy(1))  || atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(2))  >> not atom(isCreamy(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(isChewy(1))  >> not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRaw(1))  >> atom(isMaguro(1)) >> not atom(isChewy(1))  || atom(isRaw(1)) ; 
  not atom(isUrchin(1))  >> atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(1)) || atom(hasMinorGrp(2)) ; 
  not atom(isSweet(1))  >> not atom(hasMinorGrp(0))  || not atom(isRaw(0))  ; 
  not atom(isRaw(1))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || not atom(hasMinorGrp(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(1))  >> not atom(isFattyFish(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(hasMinorGrp(1)) ; 
  not atom(isUrchin(1))  >> not atom(hasPrice(1))  || atom(isUrchin(1)) ; 
  atom(isRaw(0)) >> not atom(isUnique(1))  >> not atom(isShrimp(1))  || atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) ; 
  atom(isRaw(0)) >> not atom(hasMinorGrp(2))  >> atom(isRaw(1)) ; 
  not atom(isUnique(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) || not atom(isOctopus(1))  ; 
  atom(hasPrice(0)) >> not atom(isMaguro(1))  >> atom(isRaw(0)) >> not atom(isRaw(1))  || not atom(hasMinorGrp(2))  ; 
  not atom(isMaguro(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(1)) || not atom(isRaw(1))  ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(2)) >> not atom(isMaguro(1))  || not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(isChewy(1)) >> not atom(hasPrice(0))  >> atom(isUrchin(1)) >> atom(isOctopus(1)) || atom(hasPrice(0)) ; 
  atom(isRoe(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> atom(isOctopus(1)) || not atom(isRaw(0))  ; 
  atom(isUnique(1)) >> atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isRoe(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(hasPrice(1)) || atom(isRaw(1)) ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  >> atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> not atom(isShrimp(1))  >> atom(isOctopus(1)) >> atom(isFattyFish(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(1)) >> atom(hasPrice(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(isChewy(1)) >> not atom(hasPrice(0))  >> atom(isUrchin(1)) >> atom(isOctopus(1)) || atom(hasPrice(0)) ; 
  atom(isRoe(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> atom(isOctopus(1)) || not atom(isRaw(0))  ; 
  atom(isUnique(1)) >> atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isRoe(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(hasPrice(1)) || atom(isRaw(1)) ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  >> atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) >> atom(isFattyFish(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(1)) >> atom(hasPrice(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(isChewy(1)) >> not atom(hasPrice(0))  >> atom(isUrchin(1)) >> atom(isOctopus(1)) || atom(hasPrice(0)) ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> atom(isChewy(1)) >> atom(hasMinorGrp(2)) || not atom(isRaw(0))  ; 
  atom(isUnique(1)) >> atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isRoe(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isUrchin(1)) || atom(isRaw(1)) ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  >> atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(isUrchin(1)) >> atom(isFattyFish(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(1)) >> atom(hasPrice(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isMaguro(1))  ; 
  atom(isChewy(1)) >> not atom(hasPrice(0))  >> atom(isUrchin(1)) >> atom(isOctopus(1)) || atom(hasPrice(0)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isChewy(1)) >> atom(isMaguro(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(hasPrice(1)) >> atom(isRaw(1)) >> atom(isRoe(1)) || not atom(isRoe(1))  ; 
  atom(isUnique(1)) >> atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isRoe(1)) || not atom(isChewy(1))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(isUrchin(1)) >> atom(isFattyFish(1)) ; 
  atom(isMaguro(1)) >> not atom(isCreamy(1))  >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) || not atom(isMaguro(1))  ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isRaw(0))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(isSweet(1)) || atom(isRaw(1)) ; 
  atom(isShrimp(1)) >> atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) ; 
  atom(isMaguro(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(0))  ; 
  not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(0)) >> atom(isChewy(1)) >> atom(hasPrice(1)) || not atom(hasMinorGrp(0))  ; 
  not atom(isSweet(1))  >> atom(isCreamy(1)) >> not atom(hasPrice(0))  >> atom(isRoe(1)) || not atom(hasMinorGrp(2))  ; 
  atom(isSweet(1)) || atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> not atom(isCreamy(1))  >> not atom(hasPrice(0))  ; 
  not atom(isRaw(1))  >> atom(isUnique(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRaw(1))  >> not atom(isChewy(1))  >> atom(hasMinorGrp(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(0))  || not atom(isRoe(1))  ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(isUrchin(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> not atom(isCreamy(1))  >> atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> not atom(isCreamy(1))  >> atom(isUrchin(1)) ; 
  not atom(isRaw(1))  >> atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isRaw(0)) >> atom(isUnique(1)) >> atom(isFattyFish(1)) >> not atom(isMaguro(1))  || not atom(isRaw(0))  
}.
