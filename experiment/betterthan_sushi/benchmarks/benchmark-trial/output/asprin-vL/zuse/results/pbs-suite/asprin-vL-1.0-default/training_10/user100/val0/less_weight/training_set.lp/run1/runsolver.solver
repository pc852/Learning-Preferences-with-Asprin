asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(7,eq,2) output(7,eq,1) output(7,eq,8) output(7,eq,3) output(7,eq,6) output(7,eq,9) output(7,eq,4) output(7,eq,5) output(2,eq,1) output(2,eq,8) output(2,eq,3) output(2,eq,6) output(2,eq,9) output(2,eq,4) output(2,eq,5) output(1,eq,8) output(1,eq,3) output(1,eq,6) output(1,eq,9) output(1,eq,4) output(1,eq,5) output(8,eq,3) output(8,eq,6) output(8,eq,9) output(8,eq,4) output(8,eq,5) output(3,eq,6) output(3,eq,9) output(3,eq,4) output(3,eq,5) output(6,eq,9) output(6,eq,4) output(6,eq,5) output(9,eq,4) output(9,eq,5) output(4,eq,5)
Optimization: 36 0
Answer: 2
preference(1,(1,2),1,for(atom(hasOilyLevel(2))),12) preference(1,less(weight)) output(2,better,3) output(2,better,5) output(8,better,3) output(8,better,5) output(1,better,3) output(1,better,5) output(9,better,5) output(6,better,5) output(4,better,5) output(7,better,3) output(7,better,5) output(3,worse,6) output(3,worse,9) output(3,worse,4) output(7,eq,2) output(7,eq,1) output(7,eq,8) output(7,eq,6) output(7,eq,9) output(7,eq,4) output(2,eq,1) output(2,eq,8) output(2,eq,6) output(2,eq,9) output(2,eq,4) output(1,eq,8) output(1,eq,6) output(1,eq,9) output(1,eq,4) output(8,eq,6) output(8,eq,9) output(8,eq,4) output(3,eq,5) output(6,eq,9) output(6,eq,4) output(9,eq,4)
Optimization: 25 1
Answer: 3
preference(1,(1,2),1,for(neg(atom(hasPrice(0)))),4) preference(1,less(weight)) output(2,better,8) output(2,better,6) output(2,better,4) output(1,better,8) output(1,better,6) output(1,better,4) output(3,better,6) output(3,better,4) output(9,better,4) output(7,better,8) output(7,better,6) output(7,better,4) output(8,worse,3) output(8,worse,9) output(8,worse,5) output(6,worse,9) output(6,worse,5) output(4,worse,5) output(7,eq,2) output(7,eq,1) output(7,eq,3) output(7,eq,9) output(7,eq,5) output(2,eq,1) output(2,eq,3) output(2,eq,9) output(2,eq,5) output(1,eq,3) output(1,eq,9) output(1,eq,5) output(8,eq,6) output(8,eq,4) output(3,eq,9) output(3,eq,5) output(6,eq,4) output(9,eq,5)
Optimization: 24 1
Answer: 4
preference(1,(1,2),1,for(atom(hasMinorGrp(1))),12) preference(1,less(weight)) output(2,better,3) output(2,better,9) output(2,better,5) output(8,better,3) output(8,better,9) output(8,better,5) output(1,better,3) output(1,better,9) output(1,better,5) output(6,better,9) output(6,better,5) output(4,better,5) output(7,better,3) output(7,better,9) output(7,better,5) output(3,worse,6) output(3,worse,4) output(9,worse,4) output(7,eq,2) output(7,eq,1) output(7,eq,8) output(7,eq,6) output(7,eq,4) output(2,eq,1) output(2,eq,8) output(2,eq,6) output(2,eq,4) output(1,eq,8) output(1,eq,6) output(1,eq,4) output(8,eq,6) output(8,eq,4) output(3,eq,9) output(3,eq,5) output(6,eq,4) output(9,eq,5)
Optimization: 21 1
Answer: 5
preference(1,(1,3),1,for(neg(atom(hasOiliness(1)))),5) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,7),1,for(atom(hasOilyLevel(2))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(2,better,8) output(2,better,6) output(2,better,4) output(8,better,6) output(8,better,4) output(1,better,8) output(1,better,6) output(1,better,4) output(3,better,6) output(3,better,4) output(9,better,4) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,6) output(7,better,4) output(2,worse,3) output(2,worse,9) output(2,worse,5) output(8,worse,3) output(8,worse,9) output(8,worse,5) output(1,worse,3) output(1,worse,9) output(1,worse,5) output(6,worse,9) output(6,worse,5) output(4,worse,5) output(7,worse,3) output(7,worse,9) output(7,worse,5) output(2,eq,1) output(3,eq,9) output(3,eq,5) output(6,eq,4) output(9,eq,5)
Optimization: 20 7
Answer: 6
preference(1,(1,3),1,for(neg(atom(hasOiliness(1)))),5) preference(1,(1,4),1,for(neg(atom(hasOiliness(0)))),7) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),4) preference(1,(1,2),1,for(atom(hasOiliness(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),2) preference(1,less(weight)) output(2,better,8) output(2,better,6) output(2,better,4) output(8,better,6) output(8,better,4) output(1,better,8) output(1,better,6) output(1,better,4) output(3,better,6) output(3,better,4) output(9,better,4) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(2,worse,3) output(2,worse,9) output(2,worse,5) output(8,worse,3) output(8,worse,9) output(8,worse,5) output(1,worse,3) output(1,worse,9) output(1,worse,5) output(6,worse,9) output(6,worse,5) output(4,worse,5) output(2,eq,1) output(3,eq,9) output(3,eq,5) output(6,eq,4) output(9,eq,5)
Optimization: 17 9
Answer: 7
preference(1,(1,3),1,for(neg(atom(hasOiliness(1)))),5) preference(1,(1,4),1,for(neg(atom(hasOiliness(0)))),7) preference(1,(1,5),1,for(neg(atom(hasOilyLevel(1)))),2) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),4) preference(1,(1,2),1,for(atom(hasOiliness(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,7),1,for(atom(hasPrice(1))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),11) preference(1,less(weight)) output(2,better,1) output(2,better,8) output(2,better,6) output(2,better,4) output(8,better,6) output(8,better,4) output(1,better,8) output(1,better,6) output(1,better,4) output(3,better,6) output(3,better,4) output(9,better,4) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(2,worse,3) output(2,worse,9) output(2,worse,5) output(8,worse,3) output(8,worse,9) output(8,worse,5) output(1,worse,3) output(1,worse,9) output(1,worse,5) output(6,worse,9) output(6,worse,5) output(4,worse,5) output(3,eq,9) output(3,eq,5) output(6,eq,4) output(9,eq,5)
Optimization: 16 10
Answer: 8
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,3),1,for(neg(atom(hasOiliness(1)))),5) preference(1,(1,4),1,for(neg(atom(hasOiliness(0)))),7) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),12) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),4) preference(1,(1,5),1,for(atom(hasOilyLevel(2))),11) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),10) preference(1,(1,10),1,for(atom(hasPrice(1))),2) preference(1,less(weight)) output(2,better,1) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(8,better,6) output(8,better,4) output(1,better,8) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(3,better,6) output(3,better,4) output(9,better,4) output(9,better,5) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(8,worse,3) output(8,worse,9) output(8,worse,5) output(3,worse,9) output(6,worse,9) output(6,worse,5) output(4,worse,5) output(3,eq,5) output(6,eq,4)
Optimization: 9 10
Progression : [1;9] (Error: 8)
Answer: 9
preference(1,(1,2),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),12) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(2)))),10) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),5) preference(1,(1,5),1,for(atom(hasOilyLevel(2))),11) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(2,better,1) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(8,better,3) output(8,better,6) output(8,better,4) output(8,better,5) output(1,better,8) output(1,better,3) output(1,better,6) output(1,better,4) output(1,better,5) output(3,better,6) output(3,better,4) output(9,better,4) output(9,better,5) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(8,worse,9) output(1,worse,9) output(3,worse,9) output(6,worse,9) output(6,worse,5) output(4,worse,5) output(3,eq,5) output(6,eq,4)
Optimization: 8 10
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),12) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(2)))),10) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),11) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),1) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(2,better,1) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(1,better,8) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(3,better,6) output(3,better,9) output(3,better,4) output(9,better,4) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(9,worse,5) output(6,worse,9) output(6,worse,5) output(4,worse,5) output(3,eq,5) output(6,eq,4)
Optimization: 6 10
Progression : [2;6] (Error: 2)
Progression : [3;6] (Error: 1)
Progression : [4;6] (Error: 0.5)
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(2)))),1) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(1)))),2) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),10) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(0)))),9) preference(1,(1,2),1,for(atom(hasOiliness(0))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,8),1,for(atom(hasPrice(0))),7) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),4) preference(1,less(weight)) output(2,better,1) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(1,better,8) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(3,better,6) output(3,better,9) output(3,better,4) output(6,better,9) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(9,worse,4) output(9,worse,5) output(6,worse,5) output(4,worse,5) output(3,eq,5) output(6,eq,4)
Optimization: 6 9
Progression : [5;6] (Error: 0.2)
Progression : [6;6] (Error: 0)
Progression : 6 [1;9] (Error: 8)
Progression : 6 [2;9] (Error: 3.5)
Answer: 12
preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,5),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(1)))),10) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(2)))),6) preference(1,(1,1),1,for(atom(hasOilyLevel(1))),9) preference(1,(1,6),1,for(atom(hasOiliness(0))),8) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),11) preference(1,less(weight)) output(2,better,1) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(1,better,8) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(3,better,6) output(3,better,9) output(3,better,4) output(6,better,9) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(9,worse,4) output(9,worse,5) output(6,worse,5) output(4,worse,5) output(3,eq,5) output(6,eq,4)
Optimization: 6 8
Answer: 13
preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(2)))),6) preference(1,(1,6),1,for(neg(atom(hasOiliness(1)))),8) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(2)))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),12) preference(1,less(weight)) output(2,better,1) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(1,better,8) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(3,better,6) output(3,better,9) output(3,better,4) output(6,better,9) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(9,worse,4) output(9,worse,5) output(6,worse,5) output(4,worse,5) output(3,eq,5) output(6,eq,4)
Optimization: 6 7
Answer: 14
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,7),1,for(neg(atom(hasOiliness(1)))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,9),1,for(atom(hasPriceLevel(2))),2) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),9) preference(1,less(weight)) output(2,better,1) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(1,better,8) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(3,better,6) output(3,better,9) output(3,better,4) output(9,better,4) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(9,worse,5) output(6,worse,9) output(6,worse,5) output(4,worse,5) output(3,eq,5) output(6,eq,4)
Optimization: 6 6
SATISFIABLE

Models       : 14+
  Optimum    : unknown
Optimization : 6 6
Bounds       : 6 [2;6]
Calls        : 1
Time         : 953.312s (Solving: 948.07s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 3797.166s
Threads      : 4        (Winner: 0)

Choices      : 13955547 (Domain: 5077)
Conflicts    : 7352335  (Analyzed: 7352327)
Restarts     : 10490    (Average: 700.89 Last: 270835)
Model-Level  : 578.7   
Problems     : 15       (Average Length: 0.27 Splits: 0)
Lemmas       : 7373945  (Deleted: 6930845)
  Binary     : 3059     (Ratio:   0.04%)
  Ternary    : 709      (Ratio:   0.01%)
  Conflict   : 7352327  (Average Length:  500.1 Ratio:  99.71%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 21618    (Average Length:   73.5 Ratio:   0.29%) 
  Distributed: 7220     (Ratio:   0.10% Average LBD: 3.49) 
  Integrated : 21660    (Ratio: 300.00% Unit: 178 Average Jumps: 30.96)
Backjumps    : 7352327  (Average:  1.65 Max: 2190 Sum: 12114648)
  Executed   : 7352290  (Average:  1.65 Max: 2190 Sum: 12114266 Ratio: 100.00%)
  Bounded    : 37       (Average: 10.32 Max:  37 Sum:    382 Ratio:   0.00%)

Rules        : 1304235 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 372539  
Bodies       : 376772  
  Sum        : 216     
  Count      : 10      
Equivalences : 1106912  (Atom=Atom: 356259 Body=Body: 365068 Other: 385585)
Tight        : Yes
Variables    : 15523    (Eliminated:    0 Frozen: 10563)
Constraints  : 963061   (Binary:  98.8% Ternary:   0.5% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPriceLevel(2)) ; 
  11 :: atom(hasMinorGrp(0)) ; 
  5 :: not atom(hasOiliness(1))  ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  3 :: atom(hasOilyLevel(2)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  7 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPriceLevel(1)) ; 
  2 :: atom(hasOiliness(1)) ; 
  5 :: not atom(hasOiliness(1))  ; 
  7 :: not atom(hasOiliness(0))  ; 
  11 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  7 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPriceLevel(1)) ; 
  2 :: atom(hasOiliness(1)) ; 
  5 :: not atom(hasOiliness(1))  ; 
  7 :: not atom(hasOiliness(0))  ; 
  2 :: not atom(hasOilyLevel(1))  ; 
  1 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  7 :: atom(hasMinorGrp(2)) ; 
  11 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPriceLevel(1)) ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  5 :: not atom(hasOiliness(1))  ; 
  7 :: not atom(hasOiliness(0))  ; 
  11 :: atom(hasOilyLevel(2)) ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  10 :: atom(hasPriceLevel(2)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  12 :: not atom(hasPrice(0))  ; 
  2 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPriceLevel(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  5 :: atom(hasPriceLevel(0)) ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  11 :: atom(hasOilyLevel(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPriceLevel(2)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  12 :: not atom(hasPrice(0))  ; 
  10 :: not atom(hasPriceLevel(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPriceLevel(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  5 :: atom(hasPriceLevel(0)) ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  11 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOilyLevel(2)) ; 
  10 :: atom(hasPriceLevel(2)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  12 :: not atom(hasPrice(0))  ; 
  10 :: not atom(hasPriceLevel(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPriceLevel(2))  ; 
  4 :: atom(hasOiliness(0)) ; 
  2 :: not atom(hasOilyLevel(1))  ; 
  10 :: not atom(hasPrice(0))  ; 
  5 :: atom(hasMinorGrp(2)) ; 
  11 :: not atom(hasMinorGrp(2))  ; 
  7 :: atom(hasPrice(0)) ; 
  9 :: not atom(hasMinorGrp(0))  ; 
  4 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasOilyLevel(1)) ; 
  5 :: not atom(hasPrice(0))  ; 
  4 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasOiliness(0)) ; 
  10 :: not atom(hasOilyLevel(1))  ; 
  12 :: atom(hasMinorGrp(1)) ; 
  6 :: not atom(hasMinorGrp(2))  ; 
  11 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(2)) ; 
  5 :: not atom(hasPrice(0))  ; 
  6 :: not atom(hasMinorGrp(2))  ; 
  8 :: not atom(hasOiliness(1))  ; 
  12 :: atom(hasMinorGrp(1)) ; 
  1 :: not atom(hasOilyLevel(1))  ; 
  4 :: not atom(hasPriceLevel(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasMinorGrp(0))  ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  2 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasOiliness(1))  ; 
  2 :: atom(hasPriceLevel(2)) ; 
  9 :: atom(hasOilyLevel(2)) 
}.
Time limit reached
