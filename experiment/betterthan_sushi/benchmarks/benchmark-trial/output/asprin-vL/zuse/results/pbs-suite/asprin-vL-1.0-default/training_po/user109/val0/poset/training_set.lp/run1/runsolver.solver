asprin_vL version 1.0
Reading from stdin
-:243:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:253:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:268:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:349:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:623:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:800:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:929:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1001:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1005:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1005:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1011:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1110:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1136:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1256:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1290:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1312:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:160:1-16: info: no atoms over signature occur in program:
  output/3

-:152:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:153:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:154:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(1,eq,7) output(1,eq,5) output(1,eq,4) output(1,eq,2) output(1,eq,6) output(1,eq,3) output(1,eq,8) output(1,eq,9) output(7,eq,5) output(7,eq,4) output(7,eq,2) output(7,eq,6) output(7,eq,3) output(7,eq,8) output(7,eq,9) output(5,eq,4) output(5,eq,2) output(5,eq,6) output(5,eq,3) output(5,eq,8) output(5,eq,9) output(4,eq,2) output(4,eq,6) output(4,eq,3) output(4,eq,8) output(4,eq,9) output(2,eq,6) output(2,eq,3) output(2,eq,8) output(2,eq,9) output(6,eq,3) output(6,eq,8) output(6,eq,9) output(3,eq,8) output(3,eq,9) output(8,eq,9)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(2,better,6) output(2,better,3) output(2,better,9) output(1,better,7) output(1,better,5) output(8,better,9) output(1,worse,4) output(7,worse,4) output(5,worse,4) output(1,worse,2) output(7,worse,2) output(5,worse,2) output(4,worse,2) output(1,worse,6) output(7,worse,6) output(5,worse,6) output(1,worse,9) output(7,worse,9) output(5,worse,9) output(7,worse,8) output(5,worse,8) output(4,worse,8) output(6,worse,8) output(3,worse,8) output(1,worse,3) output(7,worse,3) output(1,worse,8) output(5,worse,3) output(7,eq,5) output(4,eq,6) output(4,eq,3) output(4,eq,9) output(2,eq,8) output(6,eq,3) output(6,eq,9) output(3,eq,9)
Optimization: 30 1
Answer: 3
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(1,better,5) output(7,better,5) output(1,worse,4) output(7,worse,4) output(5,worse,4) output(1,worse,2) output(7,worse,2) output(5,worse,2) output(1,worse,6) output(7,worse,6) output(5,worse,6) output(1,worse,9) output(7,worse,9) output(5,worse,9) output(7,worse,8) output(5,worse,8) output(1,worse,3) output(7,worse,3) output(1,worse,8) output(5,worse,3) output(1,eq,7) output(2,eq,6) output(2,eq,3) output(2,eq,8) output(2,eq,9) output(6,eq,3) output(6,eq,8) output(6,eq,9) output(3,eq,8) output(3,eq,9) output(8,eq,9)
Optimization: 29 1
Answer: 4
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(4,better,2) output(4,better,3) output(4,better,8) output(4,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(7,better,5) output(1,worse,4) output(7,worse,4) output(5,worse,4) output(1,worse,2) output(7,worse,2) output(5,worse,2) output(1,worse,6) output(7,worse,6) output(5,worse,6) output(2,worse,6) output(1,worse,9) output(7,worse,9) output(5,worse,9) output(7,worse,8) output(5,worse,8) output(1,worse,3) output(7,worse,3) output(1,worse,7) output(1,worse,8) output(5,worse,3) output(1,eq,5) output(4,eq,6) output(2,eq,3) output(2,eq,8) output(2,eq,9) output(3,eq,8) output(3,eq,9) output(8,eq,9)
Optimization: 28 1
Answer: 5
preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(hasPrice(1))),()) preference(1,poset) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,9) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(8,better,9) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(2,worse,8) output(6,worse,8) output(3,worse,8) output(1,eq,7) output(1,eq,5) output(7,eq,5) output(4,eq,8) output(2,eq,6) output(2,eq,3) output(2,eq,9) output(6,eq,3) output(6,eq,9) output(3,eq,9)
Optimization: 13 1
Answer: 6
preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(4,better,2) output(4,better,3) output(4,better,8) output(4,better,9) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(7,better,5) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(2,worse,6) output(1,worse,7) output(1,eq,5) output(4,eq,6) output(2,eq,3) output(2,eq,8) output(2,eq,9) output(3,eq,8) output(3,eq,9) output(8,eq,9)
Optimization: 10 1
Answer: 7
preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,7),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(5,better,6) output(5,better,3) output(5,better,9) output(2,better,6) output(2,better,3) output(2,better,9) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(8,better,9) output(7,better,5) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(6,worse,8) output(3,worse,8) output(2,eq,8) output(6,eq,3) output(6,eq,9) output(3,eq,9) output(5,unc,4) output(5,unc,2) output(5,unc,8)
Optimization: 9 2
Answer: 8
preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(atom(isCreamy(1))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,(1,9),2,for(atom(hasPrice(1))),()) preference(1,(1,10),2,for(atom(isUnique(1))),()) preference(1,poset) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(5,better,4) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(1,better,4) output(1,better,6) output(1,better,3) output(1,better,9) output(3,better,8) output(7,better,5) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(4,worse,2) output(3,worse,9) output(8,worse,9) output(1,worse,7) output(1,unc,5) output(1,unc,2) output(7,unc,2) output(5,unc,2)
Optimization: 8 8
Answer: 9
preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(atom(isRaw(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(hasPrice(0))),()) preference(1,(1,7),1,for(atom(isSweet(1))),()) preference(1,(1,8),1,for(atom(isRaw(0))),()) preference(1,(1,9),1,for(atom(isUrchin(1))),()) preference(1,(1,10),1,for(atom(isRaw(0))),()) preference(1,(1,11),1,for(atom(isChewy(1))),()) preference(1,(1,12),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isRaw(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,9),2,for(atom(isChewy(1))),()) preference(1,(1,10),2,for(atom(isUrchin(1))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,6) output(2,better,8) output(6,better,8) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(3,better,8) output(3,better,9) output(7,better,5) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(8,worse,9) output(2,worse,3) output(6,worse,3) output(1,worse,7) output(5,unc,4) output(2,unc,9) output(6,unc,9)
Optimization: 7 11
Answer: 10
preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,3),1,for(atom(isRaw(1))),()) preference(1,(1,4),1,for(atom(isRaw(0))),()) preference(1,(1,5),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,9),1,for(atom(isUrchin(1))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,11),1,for(atom(isUrchin(1))),()) preference(1,(1,12),1,for(atom(hasPrice(0))),()) preference(1,(1,1),2,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isCreamy(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,9),2,for(atom(isRoe(1))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(4,better,2) output(4,better,3) output(4,better,8) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,3) output(2,better,8) output(6,better,3) output(6,better,8) output(6,better,9) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(3,better,8) output(7,better,5) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(3,worse,9) output(8,worse,9) output(4,unc,6) output(4,unc,9) output(2,unc,6) output(2,unc,9)
Optimization: 6 12
Answer: 11
preference(1,(1,1),1,for(atom(isUnique(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isRaw(1))),()) preference(1,(1,4),1,for(atom(isRaw(0))),()) preference(1,(1,5),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,9),1,for(atom(isUrchin(1))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,11),1,for(atom(isUrchin(1))),()) preference(1,(1,12),1,for(atom(hasPrice(0))),()) preference(1,(1,1),2,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isUnique(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,9),2,for(atom(isSweet(1))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(4,better,2) output(4,better,3) output(4,better,8) output(4,better,9) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,3) output(2,better,8) output(6,better,3) output(6,better,8) output(6,better,9) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(3,better,8) output(7,better,5) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(3,worse,9) output(8,worse,9) output(4,unc,6) output(2,unc,6) output(2,unc,9)
Optimization: 5 12
Answer: 12
preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isRaw(1))),()) preference(1,(1,4),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,9),1,for(atom(isUrchin(1))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,11),1,for(atom(isUrchin(1))),()) preference(1,(1,12),1,for(atom(hasPrice(0))),()) preference(1,(1,1),2,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isUnique(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,9),2,for(atom(isRoe(1))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,3) output(2,better,8) output(6,better,3) output(6,better,8) output(6,better,9) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(3,better,8) output(7,better,5) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(3,worse,9) output(8,worse,9) output(2,unc,6) output(2,unc,9)
Optimization: 4 12
Answer: 13
preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(atom(isFattyFish(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,11),1,for(atom(isRaw(1))),()) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isSweet(1))),()) preference(1,(1,3),2,for(atom(isChewy(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isRaw(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(hasPrice(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,9),2,for(atom(isMaguro(1))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(isFattyFish(1))),()) preference(1,(1,12),2,for(atom(isFattyFish(1))),()) preference(1,poset) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(8,better,9) output(3,better,9) output(7,better,5) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(2,worse,6) output(3,worse,8) output(1,worse,7)
Optimization: 3 12
Answer: 14
preference(1,(1,1),1,for(atom(hasPrice(0))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),1,for(atom(isRaw(0))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,9),1,for(atom(hasPrice(0))),()) preference(1,(1,10),1,for(atom(isUrchin(1))),()) preference(1,(1,11),1,for(atom(isFattyFish(1))),()) preference(1,(1,12),1,for(atom(isRaw(0))),()) preference(1,(1,1),2,for(atom(hasPrice(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,10),2,for(atom(hasPrice(0))),()) preference(1,(1,11),2,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(3,better,8) output(7,better,5) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(1,better,8) output(7,better,4) output(3,worse,9) output(8,worse,9)
Optimization: 2 12
SATISFIABLE

Models       : 14+
  Optimum    : unknown
Optimization : 2 12
Calls        : 1
Time         : 818.407s (Solving: 813.52s 1st Model: 0.88s Unsat: 0.00s)
CPU Time     : 3257.957s
Threads      : 4        (Winner: 0)

Choices      : 9492235  (Domain: 6051)
Conflicts    : 307623   (Analyzed: 307623)
Restarts     : 365      (Average: 842.80 Last: 17018)
Model-Level  : 32207.6 
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 21647931 (Deleted: 21448994)
  Binary     : 4466     (Ratio:   0.02%)
  Ternary    : 80199    (Ratio:   0.37%)
  Conflict   : 307623   (Average Length:  845.0 Ratio:   1.42%) 
  Loop       : 21230289 (Average Length:  182.1 Ratio:  98.07%) 
  Other      : 110019   (Average Length:    3.6 Ratio:   0.51%) 
  Distributed: 36698    (Ratio:   0.17% Average LBD: 2.85) 
  Integrated : 110094   (Ratio: 300.00% Unit: 428 Average Jumps: 1200.78)
Backjumps    : 307623   (Average: 25.01 Max: 346318 Sum: 7693124)
  Executed   : 307583   (Average: 25.01 Max: 346318 Sum: 7693009 Ratio: 100.00%)
  Bounded    : 40       (Average:  2.88 Max:  38 Sum:    115 Ratio:   0.00%)

Rules        : 1111046 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 24282   
Bodies       : 820640  
  Count      : 48      
Equivalences : 27535    (Atom=Atom: 4633 Body=Body: 6621 Other: 16281)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 774656 Gammas: 0)
Variables    : 785776   (Eliminated:    0 Frozen: 777386)
Constraints  : 4605443  (Binary:  82.5% Ternary:   3.6% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isUrchin(1)) ; 
  atom(isSweet(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) ; 
  atom(isCreamy(1)) >> atom(isSweet(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(2)) >> atom(isSweet(1)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPrice(1)) ; 
  atom(hasPrice(1)) >> atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isCreamy(1)) ; 
  atom(isRaw(1)) >> atom(isRoe(1)) ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) ; 
  atom(isChewy(1)) >> atom(isRaw(1)) ; 
  atom(hasPrice(0)) >> atom(isMaguro(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(isRaw(0)) >> atom(isRaw(1)) ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) ; 
  atom(isRaw(0)) >> atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(hasPrice(0)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isCreamy(1)) ; 
  atom(isUnique(1)) >> atom(isCreamy(1)) ; 
  atom(isRaw(1)) >> atom(isCreamy(1)) ; 
  atom(isRaw(0)) >> atom(isUnique(1)) ; 
  atom(isRaw(0)) >> atom(isRoe(1)) ; 
  atom(hasPrice(1)) >> atom(isRaw(1)) ; 
  atom(isRaw(0)) >> atom(isUrchin(1)) ; 
  atom(isSweet(1)) >> atom(hasPrice(1)) ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(0)) ; 
  atom(hasPrice(0)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUnique(1)) >> atom(isCreamy(1)) ; 
  atom(isUrchin(1)) >> atom(isUnique(1)) ; 
  atom(isRaw(1)) >> atom(isCreamy(1)) ; 
  atom(isRaw(0)) >> atom(isUnique(1)) ; 
  atom(isRaw(0)) >> atom(isRoe(1)) ; 
  atom(hasPrice(1)) >> atom(isRaw(1)) ; 
  atom(isRaw(0)) >> atom(isUrchin(1)) ; 
  atom(isSweet(1)) >> atom(hasPrice(1)) ; 
  atom(isUrchin(1)) >> atom(isSweet(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(0)) ; 
  atom(hasPrice(0)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isCreamy(1)) ; 
  atom(isUrchin(1)) >> atom(isUnique(1)) ; 
  atom(isRaw(1)) >> atom(isCreamy(1)) ; 
  atom(isUnique(1)) >> atom(isCreamy(1)) ; 
  atom(isRaw(0)) >> atom(isRoe(1)) ; 
  atom(hasPrice(1)) >> atom(isRaw(1)) ; 
  atom(isRaw(0)) >> atom(isUrchin(1)) ; 
  atom(isSweet(1)) >> atom(hasPrice(1)) ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(0)) ; 
  atom(hasPrice(0)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isUrchin(1)) ; 
  atom(isFattyFish(1)) >> atom(isSweet(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isChewy(1)) ; 
  atom(isFattyFish(1)) >> atom(hasPrice(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(1)) ; 
  atom(isUrchin(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isRaw(1)) >> atom(hasPrice(1)) ; 
  atom(isMaguro(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasMinorGrp(2)) >> atom(isMaguro(1)) ; 
  atom(hasPrice(1)) >> atom(isSweet(1)) ; 
  atom(isRaw(1)) >> atom(isFattyFish(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(0)) >> atom(hasPrice(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasMinorGrp(2)) ; 
  atom(isRaw(0)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(0)) >> atom(isFattyFish(1)) ; 
  atom(isFattyFish(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(0)) >> atom(isUnique(1)) ; 
  atom(isRaw(0)) >> atom(isFattyFish(1)) ; 
  atom(isSweet(1)) >> atom(hasPrice(1)) ; 
  atom(hasPrice(0)) >> atom(hasMinorGrp(0)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(0)) ; 
  atom(isFattyFish(1)) >> atom(isRaw(1)) ; 
  atom(isRaw(0)) >> atom(isSweet(1)) 
}.
Time limit reached
