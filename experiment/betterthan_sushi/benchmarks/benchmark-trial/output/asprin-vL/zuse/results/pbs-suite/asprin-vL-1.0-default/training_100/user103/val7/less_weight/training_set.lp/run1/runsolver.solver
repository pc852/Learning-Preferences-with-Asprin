asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(38,eq,5) output(38,eq,33) output(38,eq,6) output(38,eq,18) output(38,eq,62) output(38,eq,91) output(38,eq,1) output(38,eq,2) output(5,eq,33) output(5,eq,6) output(5,eq,18) output(5,eq,62) output(5,eq,91) output(5,eq,1) output(5,eq,2) output(33,eq,6) output(33,eq,18) output(33,eq,62) output(33,eq,91) output(33,eq,1) output(33,eq,2) output(6,eq,18) output(6,eq,62) output(6,eq,91) output(6,eq,1) output(6,eq,2) output(18,eq,62) output(18,eq,91) output(18,eq,1) output(18,eq,2) output(62,eq,91) output(62,eq,1) output(62,eq,2) output(91,eq,1) output(91,eq,2) output(1,eq,2)
Optimization: 36 0
Answer: 2
preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,less(weight)) output(18,better,62) output(18,better,91) output(5,better,33) output(5,better,62) output(5,better,91) output(6,better,62) output(6,better,91) output(91,worse,1) output(91,worse,2) output(33,worse,6) output(33,worse,18) output(33,worse,1) output(33,worse,2) output(62,worse,1) output(62,worse,2) output(38,worse,5) output(38,worse,6) output(38,worse,18) output(38,worse,1) output(38,worse,2) output(38,eq,33) output(38,eq,62) output(38,eq,91) output(5,eq,6) output(5,eq,18) output(5,eq,1) output(5,eq,2) output(33,eq,62) output(33,eq,91) output(6,eq,18) output(6,eq,1) output(6,eq,2) output(18,eq,1) output(18,eq,2) output(62,eq,91) output(1,eq,2)
Optimization: 29 1
Answer: 3
preference(1,(1,2),1,for(atom(hasMinorGrp(0))),12) preference(1,less(weight)) output(33,better,18) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,18) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,18) output(38,better,91) output(38,better,1) output(38,better,2) output(18,worse,62) output(38,eq,5) output(38,eq,33) output(38,eq,6) output(38,eq,62) output(5,eq,33) output(5,eq,6) output(5,eq,62) output(33,eq,6) output(33,eq,62) output(6,eq,62) output(18,eq,91) output(18,eq,1) output(18,eq,2) output(91,eq,1) output(91,eq,2) output(1,eq,2)
Optimization: 17 1
Answer: 4
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(2)))),11) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(2)))),11) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),11) preference(1,(1,5),1,for(neg(atom(hasOiliness(1)))),11) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(3)))),2) preference(1,(1,1),1,for(atom(hasPriceLevel(0))),1) preference(1,(1,6),1,for(atom(hasOiliness(0))),11) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,10),1,for(atom(hasOilyLevel(0))),11) preference(1,less(weight)) output(33,better,18) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,18) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,5) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,1) output(38,better,2) output(18,worse,62) output(5,eq,33) output(5,eq,6) output(5,eq,62) output(33,eq,6) output(33,eq,62) output(6,eq,62) output(18,eq,91) output(18,eq,1) output(18,eq,2) output(91,eq,1) output(91,eq,2) output(1,eq,2)
Optimization: 13 10
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(3)))),7) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(2)))),7) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),7) preference(1,(1,9),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,10),1,for(neg(atom(hasOiliness(1)))),11) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),12) preference(1,(1,3),1,for(atom(hasOilyLevel(0))),7) preference(1,(1,4),1,for(atom(hasPriceLevel(0))),7) preference(1,(1,8),1,for(atom(hasOiliness(0))),7) preference(1,less(weight)) output(18,better,91) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,18) output(38,better,91) output(38,better,1) output(38,better,2) output(18,worse,62) output(91,worse,1) output(91,worse,2) output(38,worse,5) output(38,worse,33) output(38,worse,6) output(38,eq,62) output(18,eq,1) output(18,eq,2) output(1,eq,2)
Optimization: 10 10
Answer: 6
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(2)))),9) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(2)))),9) preference(1,(1,5),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),9) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(3)))),9) preference(1,(1,1),1,for(atom(hasPriceLevel(0))),9) preference(1,(1,2),1,for(atom(hasPriceLevel(1))),6) preference(1,(1,9),1,for(atom(hasOilyLevel(0))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),12) preference(1,less(weight)) output(18,better,1) output(18,better,2) output(91,better,1) output(91,better,2) output(33,better,18) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,1) output(38,better,2) output(18,worse,62) output(38,eq,5) output(33,eq,6) output(33,eq,62) output(6,eq,62) output(18,eq,91) output(1,eq,2)
Optimization: 7 9
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(2)))),9) preference(1,(1,2),1,for(neg(atom(hasOilyLevel(2)))),1) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(1)))),9) preference(1,(1,4),1,for(neg(atom(hasOiliness(1)))),9) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(3)))),3) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,6),1,for(atom(hasPriceLevel(1))),2) preference(1,(1,8),1,for(atom(hasOiliness(0))),5) preference(1,(1,9),1,for(atom(hasPriceLevel(0))),12) preference(1,(1,10),1,for(atom(hasOilyLevel(0))),9) preference(1,less(weight)) output(18,better,1) output(18,better,2) output(91,better,1) output(91,better,2) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,1) output(38,better,2) output(18,worse,62) output(38,worse,5) output(38,eq,33) output(6,eq,62) output(18,eq,91) output(1,eq,2)
Optimization: 6 10
Answer: 8
preference(1,(1,3),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(2)))),9) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(3)))),8) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,10),1,for(neg(atom(hasOiliness(1)))),11) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),6) preference(1,(1,2),1,for(atom(hasPriceLevel(0))),10) preference(1,(1,5),1,for(atom(hasPrice(0))),2) preference(1,(1,6),1,for(atom(hasOiliness(0))),3) preference(1,(1,9),1,for(atom(hasPriceLevel(1))),5) preference(1,less(weight)) output(18,better,62) output(18,better,1) output(18,better,2) output(91,better,1) output(91,better,2) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,1) output(62,better,2) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,1) output(38,better,2) output(62,worse,91) output(38,worse,5) output(38,worse,33) output(18,eq,91) output(1,eq,2)
Optimization: 5 10
Answer: 9
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(3)))),11) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,5),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),5) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(2)))),5) preference(1,(1,1),1,for(atom(hasOiliness(0))),8) preference(1,(1,3),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,6),1,for(atom(hasPriceLevel(1))),1) preference(1,(1,7),1,for(atom(hasOilyLevel(0))),5) preference(1,(1,10),1,for(atom(hasPriceLevel(0))),5) preference(1,less(weight)) output(18,better,1) output(18,better,2) output(91,better,1) output(91,better,2) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,5) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,1) output(38,better,2) output(18,worse,62) output(6,eq,62) output(18,eq,91) output(1,eq,2)
Optimization: 4 10
Answer: 10
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),10) preference(1,(1,2),1,for(neg(atom(hasPriceLevel(2)))),5) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(3)))),11) preference(1,(1,7),1,for(neg(atom(hasOiliness(1)))),5) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(1)))),12) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),1) preference(1,(1,5),1,for(atom(hasOilyLevel(0))),3) preference(1,(1,6),1,for(atom(hasPriceLevel(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),3) preference(1,less(weight)) output(18,better,62) output(18,better,91) output(18,better,1) output(18,better,2) output(91,better,1) output(91,better,2) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,1) output(38,better,2) output(33,worse,6) output(38,worse,5) output(1,eq,2)
Optimization: 3 10
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(3)))),11) preference(1,(1,9),1,for(neg(atom(hasOftenSold(0)))),6) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(2)))),7) preference(1,(1,2),1,for(atom(hasOilyLevel(0))),8) preference(1,(1,3),1,for(atom(hasPrice(0))),6) preference(1,(1,4),1,for(atom(hasOiliness(0))),2) preference(1,(1,6),1,for(atom(hasPriceLevel(1))),5) preference(1,(1,7),1,for(atom(hasPriceLevel(0))),9) preference(1,less(weight)) output(18,better,1) output(18,better,2) output(91,better,1) output(91,better,2) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,5) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,1) output(38,better,2) output(18,worse,62) output(18,eq,91) output(1,eq,2)
Optimization: 3 9
Answer: 12
preference(1,(1,4),1,for(neg(atom(hasOftenSold(0)))),4) preference(1,(1,5),1,for(neg(atom(hasOilyLevel(1)))),10) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,1),1,for(atom(hasOilyLevel(2))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,6),1,for(atom(hasPriceLevel(1))),9) preference(1,(1,7),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,9),1,for(atom(hasOiliness(1))),3) preference(1,less(weight)) output(18,better,62) output(18,better,91) output(18,better,1) output(18,better,2) output(91,better,1) output(91,better,2) output(1,better,2) output(33,better,6) output(33,better,18) output(33,better,62) output(33,better,91) output(33,better,1) output(33,better,2) output(5,better,33) output(5,better,6) output(5,better,18) output(5,better,62) output(5,better,91) output(5,better,1) output(5,better,2) output(6,better,18) output(6,better,62) output(6,better,91) output(6,better,1) output(6,better,2) output(62,better,91) output(62,better,1) output(62,better,2) output(38,better,5) output(38,better,33) output(38,better,6) output(38,better,18) output(38,better,62) output(38,better,91) output(38,better,1) output(38,better,2)
Optimization: 0 10
Progression : 0 [ 1;10] (Error: 9)
Progression : 0 [ 2;10] (Error: 4)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.158 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 12+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 1197.081s (Solving: 1192.61s 1st Model: 0.04s Unsat: 0.00s)
CPU Time     : 4774.275s
Threads      : 4        (Winner: 4)

Choices      : 10527758 (Domain: 32093)
Conflicts    : 4610203  (Analyzed: 4610201)
Restarts     : 3525     (Average: 1307.86 Last: 337938)
Model-Level  : 58.5    
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 4615376  (Deleted: 4314220)
  Binary     : 224      (Ratio:   0.00%)
  Ternary    : 197      (Ratio:   0.00%)
  Conflict   : 4610201  (Average Length: 1007.2 Ratio:  99.89%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 5175     (Average Length:  161.0 Ratio:   0.11%) 
  Distributed: 1725     (Ratio:   0.04% Average LBD: 3.61) 
  Integrated : 5175     (Ratio: 300.00% Unit: 2 Average Jumps: 2.00)
Backjumps    : 4610201  (Average:  1.91 Max: 1250 Sum: 8786230)
  Executed   : 4610200  (Average:  1.91 Max: 1250 Sum: 8786210 Ratio: 100.00%)
  Bounded    : 1        (Average: 20.00 Max:  20 Sum:     20 Ratio:   0.00%)

Rules        : 1318635 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 386939  
Bodies       : 391532  
  Sum        : 216     
  Count      : 10      
Equivalences : 1151192  (Atom=Atom: 370659 Body=Body: 379828 Other: 400705)
Tight        : Yes
Variables    : 15523    (Eliminated:    0 Frozen: 10563)
Constraints  : 963061   (Binary:  98.8% Ternary:   0.5% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPriceLevel(0)) ; 
  11 :: not atom(hasOilyLevel(2))  ; 
  11 :: not atom(hasPriceLevel(2))  ; 
  11 :: not atom(hasMinorGrp(1))  ; 
  11 :: not atom(hasOiliness(1))  ; 
  11 :: atom(hasOiliness(0)) ; 
  11 :: not atom(hasMinorGrp(2))  ; 
  2 :: not atom(hasMinorGrp(3))  ; 
  10 :: atom(hasMinorGrp(0)) ; 
  11 :: atom(hasOilyLevel(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasOilyLevel(2))  ; 
  12 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasOilyLevel(0)) ; 
  7 :: atom(hasPriceLevel(0)) ; 
  7 :: not atom(hasMinorGrp(3))  ; 
  7 :: not atom(hasPriceLevel(2))  ; 
  7 :: not atom(hasMinorGrp(2))  ; 
  7 :: atom(hasOiliness(0)) ; 
  4 :: not atom(hasOftenSold(1))  ; 
  11 :: not atom(hasOiliness(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasPriceLevel(0)) ; 
  6 :: atom(hasPriceLevel(1)) ; 
  9 :: not atom(hasMinorGrp(2))  ; 
  9 :: not atom(hasPriceLevel(2))  ; 
  9 :: not atom(hasPrice(1))  ; 
  9 :: not atom(hasOilyLevel(2))  ; 
  9 :: not atom(hasMinorGrp(3))  ; 
  9 :: atom(hasOilyLevel(0)) ; 
  12 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: not atom(hasPriceLevel(2))  ; 
  1 :: not atom(hasOilyLevel(2))  ; 
  9 :: not atom(hasMinorGrp(1))  ; 
  9 :: not atom(hasOiliness(1))  ; 
  3 :: not atom(hasMinorGrp(3))  ; 
  2 :: atom(hasPriceLevel(1)) ; 
  4 :: not atom(hasMinorGrp(2))  ; 
  5 :: atom(hasOiliness(0)) ; 
  12 :: atom(hasPriceLevel(0)) ; 
  9 :: atom(hasOilyLevel(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOilyLevel(0)) ; 
  10 :: atom(hasPriceLevel(0)) ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  9 :: not atom(hasPriceLevel(2))  ; 
  2 :: atom(hasPrice(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  8 :: not atom(hasMinorGrp(3))  ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  5 :: atom(hasPriceLevel(1)) ; 
  11 :: not atom(hasOiliness(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasOiliness(0)) ; 
  11 :: not atom(hasMinorGrp(3))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  2 :: not atom(hasPrice(1))  ; 
  5 :: not atom(hasOilyLevel(2))  ; 
  1 :: atom(hasPriceLevel(1)) ; 
  5 :: atom(hasOilyLevel(0)) ; 
  5 :: not atom(hasMinorGrp(2))  ; 
  5 :: not atom(hasPriceLevel(2))  ; 
  5 :: atom(hasPriceLevel(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMinorGrp(2))  ; 
  5 :: not atom(hasPriceLevel(2))  ; 
  1 :: atom(hasPriceLevel(0)) ; 
  11 :: not atom(hasMinorGrp(3))  ; 
  3 :: atom(hasOilyLevel(0)) ; 
  7 :: atom(hasPriceLevel(1)) ; 
  5 :: not atom(hasOiliness(1))  ; 
  4 :: not atom(hasOftenSold(1))  ; 
  3 :: atom(hasMinorGrp(0)) ; 
  12 :: not atom(hasMinorGrp(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: not atom(hasOilyLevel(2))  ; 
  8 :: atom(hasOilyLevel(0)) ; 
  6 :: atom(hasPrice(0)) ; 
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPriceLevel(1)) ; 
  9 :: atom(hasPriceLevel(0)) ; 
  11 :: not atom(hasMinorGrp(3))  ; 
  6 :: not atom(hasOftenSold(0))  ; 
  7 :: not atom(hasPriceLevel(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasOilyLevel(2)) ; 
  11 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  4 :: not atom(hasOftenSold(0))  ; 
  10 :: not atom(hasOilyLevel(1))  ; 
  9 :: atom(hasPriceLevel(1)) ; 
  12 :: atom(hasOilyLevel(1)) ; 
  6 :: not atom(hasOftenSold(1))  ; 
  3 :: atom(hasOiliness(1)) ; 
  5 :: not atom(hasMinorGrp(1))  
}.
