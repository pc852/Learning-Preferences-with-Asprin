asprin_vL version 1.0
Reading from stdin
-:268:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:293:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:374:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:648:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:825:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1026:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1030:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1030:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1036:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1135:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1161:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1281:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1315:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1337:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:185:1-16: info: no atoms over signature occur in program:
  output/3

-:177:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:178:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:179:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:180:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:210:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,7),3,for(atom(hasMinorGrp(0))),()) preference(1,aso) output(1,better,7) output(1,better,3) output(5,better,3) output(2,better,3) output(1,worse,2) output(7,worse,5) output(7,worse,2) output(7,worse,6) output(3,worse,9) output(8,worse,9)
Optimization: 32 8
Answer: 2
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,7),3,for(atom(hasMinorGrp(0))),()) preference(1,aso) output(1,better,7) output(1,better,3) output(7,better,3) output(5,better,3) output(2,better,3) output(6,better,3) output(1,worse,2) output(7,worse,2) output(7,worse,6) output(3,worse,9) output(8,worse,9)
Optimization: 30 8
Answer: 3
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(1,better,7) output(1,better,8) output(5,better,3) output(5,better,8) output(2,better,8) output(6,better,8) output(3,better,8) output(1,worse,5) output(1,worse,9) output(7,worse,5) output(7,worse,9) output(6,worse,9) output(8,worse,9)
Optimization: 29 8
Answer: 4
preference(1,(1,2),0,for(atom(isRaw(0))),()) preference(1,(1,4),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,5),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isShrimp(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isUnique(1))),()) preference(1,(1,8),2,for(atom(isFattyFish(1))),()) preference(1,(1,1),3,for(atom(isFattyFish(1))),()) preference(1,(1,2),3,for(atom(isShrimp(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,6),3,for(atom(isShrimp(1))),()) preference(1,(1,7),3,for(atom(isShrimp(1))),()) preference(1,(1,8),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),4,for(atom(isRaw(1))),()) preference(1,(1,2),4,for(atom(isMaguro(1))),()) preference(1,(1,3),4,for(atom(isFattyFish(1))),()) preference(1,(1,6),4,for(atom(isCreamy(1))),()) preference(1,(1,7),4,for(atom(isRaw(1))),()) preference(1,(1,8),4,for(atom(isMaguro(1))),()) preference(1,aso) output(1,better,8) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(6,better,8) output(1,worse,5) output(1,worse,6) output(7,worse,5) output(4,eq,2) output(4,eq,3) output(2,eq,3)
Optimization: 28 8
Answer: 5
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,8),3,for(atom(isSweet(1))),()) preference(1,aso) output(1,better,8) output(7,better,3) output(7,better,8) output(5,better,6) output(5,better,3) output(5,better,8) output(2,better,8) output(6,better,3) output(6,better,8) output(3,better,8) output(1,worse,7) output(1,worse,5) output(1,worse,9) output(7,worse,5) output(7,worse,9) output(6,worse,9) output(3,worse,9) output(8,worse,9)
Optimization: 26 8
Answer: 6
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,3),3,for(atom(isRaw(0))),()) preference(1,(1,4),3,for(atom(isUnique(1))),()) preference(1,(1,5),3,for(atom(hasPrice(0))),()) preference(1,(1,7),3,for(atom(isRaw(0))),()) preference(1,(1,8),3,for(atom(isSweet(1))),()) preference(1,aso) output(1,better,8) output(7,better,6) output(7,better,3) output(7,better,8) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(6,better,3) output(6,better,8) output(3,better,8) output(1,worse,7) output(1,worse,5) output(7,worse,5) output(6,worse,9) output(3,worse,9) output(8,worse,9)
Optimization: 22 8
Answer: 7
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,3),3,for(atom(hasPrice(0))),()) preference(1,(1,5),3,for(atom(hasPrice(0))),()) preference(1,(1,7),3,for(atom(isRaw(0))),()) preference(1,(1,8),3,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(1,better,2) output(1,better,8) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,8) output(6,better,3) output(6,better,8) output(3,better,8) output(1,worse,7) output(1,worse,5) output(7,worse,5) output(2,worse,6) output(2,worse,3) output(2,worse,9) output(6,worse,9) output(3,worse,9) output(8,worse,9)
Optimization: 21 8
Answer: 8
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isCreamy(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,4),3,for(atom(hasPrice(0))),()) preference(1,(1,7),3,for(atom(isRaw(0))),()) preference(1,aso) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(2,better,3) output(2,better,8) output(6,better,3) output(6,better,8) output(1,worse,7) output(1,worse,5) output(7,worse,5) output(2,worse,9) output(6,worse,9) output(3,worse,9) output(8,worse,9) output(2,eq,6)
Optimization: 19 8
Answer: 9
preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isCreamy(1))),()) preference(1,aso) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(7,worse,2) output(5,worse,4) output(5,worse,2) output(4,worse,2) output(1,eq,2) output(7,eq,4) output(5,eq,6) output(5,eq,3) output(5,eq,8) output(5,eq,9) output(6,eq,3) output(6,eq,8) output(6,eq,9) output(3,eq,8) output(3,eq,9) output(8,eq,9)
Optimization: 16 1
Answer: 10
preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,aso) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(5,worse,9) output(4,worse,9) output(2,worse,9) output(6,worse,9) output(3,worse,9) output(8,worse,9) output(1,eq,7) output(1,eq,9) output(7,eq,9) output(2,eq,6) output(2,eq,3) output(2,eq,8) output(6,eq,3) output(6,eq,8) output(3,eq,8)
Optimization: 15 1
Answer: 11
preference(1,(1,8),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,aso) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,9) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,9) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,9) output(8,better,9) output(5,worse,8) output(4,worse,8) output(2,worse,8) output(6,worse,8) output(3,worse,8) output(1,eq,7) output(1,eq,8) output(7,eq,8) output(2,eq,6) output(2,eq,3) output(2,eq,9) output(6,eq,3) output(6,eq,9) output(3,eq,9)
Optimization: 14 1
Answer: 12
preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,aso) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,4) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(5,worse,2) output(4,worse,2) output(1,eq,7) output(1,eq,2) output(7,eq,2) output(6,eq,3) output(6,eq,8) output(6,eq,9) output(3,eq,8) output(3,eq,9) output(8,eq,9)
Optimization: 11 1
Answer: 13
preference(1,(1,1),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),0,for(atom(isShrimp(1))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,3),1,for(atom(isShrimp(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,4),3,for(atom(isMaguro(1))),()) preference(1,(1,6),3,for(atom(isShrimp(1))),()) preference(1,(1,7),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),4,for(atom(isRaw(1))),()) preference(1,(1,5),4,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(isCreamy(1))),()) preference(1,(1,8),4,for(atom(isOctopus(1))),()) preference(1,aso) output(1,better,7) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(2,better,3) output(2,better,8) output(6,better,3) output(6,better,8) output(3,better,8) output(1,worse,5) output(7,worse,5)
Optimization: 10 8
Answer: 14
preference(1,(1,2),0,for(atom(isShrimp(1))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,3),1,for(atom(isShrimp(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,4),3,for(atom(isMaguro(1))),()) preference(1,(1,6),3,for(atom(isShrimp(1))),()) preference(1,(1,7),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),4,for(atom(isRaw(1))),()) preference(1,(1,5),4,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(isCreamy(1))),()) preference(1,(1,8),4,for(atom(isOctopus(1))),()) preference(1,aso) output(1,better,7) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(2,better,3) output(2,better,8) output(6,better,3) output(6,better,8) output(3,better,8) output(1,worse,5) output(7,worse,5)
Optimization: 9 8
Answer: 15
preference(1,(1,1),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),2,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,1),1,for(atom(hasPrice(0))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),3,for(atom(isSweet(1))),()) preference(1,aso) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,3) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,9) output(8,better,9) output(3,worse,8)
Optimization: 8 4
Answer: 16
preference(1,(1,1),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),2,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,1),1,for(atom(hasPrice(0))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,(1,5),3,for(atom(isCreamy(1))),()) preference(1,aso) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,3) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,9) output(8,better,9) output(3,worse,8)
Optimization: 7 4
Answer: 17
preference(1,(1,1),0,for(atom(isRaw(1))),()) preference(1,(1,3),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),0,for(atom(isCreamy(1))),()) preference(1,(1,1),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,3) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,9) output(8,better,9) output(3,worse,8) output(1,eq,7)
Optimization: 6 4
Progression : [1;6] (Error: 5)
Answer: 18
preference(1,(1,1),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,2),0,for(atom(isShrimp(1))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,3),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isMaguro(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isShrimp(1))),()) preference(1,(1,7),3,for(atom(isShrimp(1))),()) preference(1,(1,4),4,for(atom(isRaw(1))),()) preference(1,(1,5),4,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(isCreamy(1))),()) preference(1,(1,7),4,for(atom(isMaguro(1))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(1,better,7) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,8) output(3,better,9) output(8,better,9) output(7,worse,5) output(1,eq,5)
Optimization: 4 8
Answer: 19
preference(1,(1,1),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,2),0,for(atom(isShrimp(1))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,3),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(isRaw(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isMaguro(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isShrimp(1))),()) preference(1,(1,7),3,for(atom(isShrimp(1))),()) preference(1,(1,4),4,for(atom(isRaw(1))),()) preference(1,(1,5),4,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(isCreamy(1))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(1,better,7) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,4) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,8) output(3,better,9) output(8,better,9) output(7,worse,5) output(1,eq,5)
Optimization: 3 8
Answer: 20
preference(1,(1,1),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,2),0,for(atom(isShrimp(1))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,3),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isRaw(1))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),3,for(atom(isCreamy(1))),()) preference(1,(1,4),3,for(atom(isMaguro(1))),()) preference(1,(1,5),3,for(atom(hasPrice(1))),()) preference(1,(1,6),3,for(atom(isMaguro(1))),()) preference(1,(1,7),3,for(atom(isShrimp(1))),()) preference(1,(1,4),4,for(atom(isRaw(1))),()) preference(1,(1,5),4,for(atom(isShrimp(1))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(1,better,7) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,8) output(3,better,9) output(8,better,9)
Optimization: 2 8
Progression : [2;2] (Error: 0)
Progression : 2 [1;8] (Error: 7)
Answer: 21
preference(1,(1,1),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),0,for(atom(isShrimp(1))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,3),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isRaw(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),3,for(atom(isCreamy(1))),()) preference(1,(1,5),3,for(atom(hasPrice(1))),()) preference(1,(1,6),3,for(atom(isMaguro(1))),()) preference(1,(1,7),3,for(atom(isShrimp(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isShrimp(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,8) output(3,better,9) output(8,better,9) output(1,eq,7)
Optimization: 2 7
Answer: 22
preference(1,(1,1),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),0,for(atom(isShrimp(1))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isRaw(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),3,for(atom(hasPrice(1))),()) preference(1,(1,6),3,for(atom(isMaguro(1))),()) preference(1,(1,7),3,for(atom(isShrimp(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(isShrimp(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,8) output(3,better,9) output(8,better,9) output(1,eq,7)
Optimization: 2 6
Answer: 23
preference(1,(1,1),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),0,for(atom(isShrimp(1))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isRaw(1))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),3,for(atom(hasPrice(1))),()) preference(1,(1,6),3,for(atom(isMaguro(1))),()) preference(1,(1,7),3,for(atom(isShrimp(1))),()) preference(1,(1,5),4,for(atom(isShrimp(1))),()) preference(1,aso) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,8) output(3,better,9) output(8,better,9) output(1,eq,7)
Optimization: 2 5
Answer: 24
preference(1,(1,1),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(hasPrice(1))),()) preference(1,(1,6),3,for(atom(isMaguro(1))),()) preference(1,(1,7),3,for(atom(isShrimp(1))),()) preference(1,(1,5),4,for(atom(isShrimp(1))),()) preference(1,aso) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,8) output(3,better,9) output(8,better,9) output(1,eq,7)
Optimization: 2 4
Answer: 25
preference(1,(1,1),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(hasPrice(1))),()) preference(1,(1,6),3,for(atom(isMaguro(1))),()) preference(1,(1,5),4,for(atom(isShrimp(1))),()) preference(1,aso) output(1,better,5) output(1,better,4) output(1,better,2) output(1,better,6) output(1,better,3) output(1,better,8) output(1,better,9) output(7,better,5) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,3) output(7,better,8) output(7,better,9) output(5,better,2) output(5,better,6) output(5,better,3) output(5,better,8) output(5,better,9) output(4,better,2) output(4,better,6) output(4,better,3) output(4,better,8) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(6,better,3) output(6,better,8) output(6,better,9) output(3,better,8) output(3,better,9) output(8,better,9) output(1,eq,7)
Optimization: 2 3
Progression : 2 [2;3] (Error: 0.5)
OPTIMUM FOUND

Models       : 25
  Optimum    : yes
Optimization : 2 3
Calls        : 1
Time         : 36.194s (Solving: 31.47s 1st Model: 0.13s Unsat: 29.45s)
CPU Time     : 130.429s
Threads      : 4        (Winner: 1)

Choices      : 384769   (Domain: 11546)
Conflicts    : 114590   (Analyzed: 114584)
Restarts     : 167      (Average: 686.13 Last: 7191)
Model-Level  : 517.8   
Problems     : 12       (Average Length: 0.33 Splits: 0)
Lemmas       : 180453   (Deleted: 98745)
  Binary     : 4515     (Ratio:   2.50%)
  Ternary    : 10559    (Ratio:   5.85%)
  Conflict   : 114583   (Average Length:   91.6 Ratio:  63.50%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 65870    (Average Length:   28.0 Ratio:  36.50%) 
  Distributed: 22175    (Ratio:  19.35% Average LBD: 3.20) 
  Integrated : 66520    (Ratio: 299.98% Unit: 306 Average Jumps: 67.45)
Backjumps    : 114584   (Average:  3.02 Max: 617 Sum: 346100)
  Executed   : 114564   (Average:  3.02 Max: 617 Sum: 345791 Ratio:  99.91%)
  Bounded    : 20       (Average: 15.45 Max:  35 Sum:    309 Ratio:   0.09%)

Rules        : 1976137 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 590648  
Bodies       : 695097  
  Count      : 1768    
Equivalences : 1804008  (Atom=Atom: 516740 Body=Body: 558863 Other: 728405)
Tight        : Yes
Variables    : 77247    (Eliminated:    0 Frozen: 54231)
Constraints  : 1492449  (Binary:  94.9% Ternary:   4.2% Other:   0.9%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isRoe(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isRaw(1))  >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(hasMinorGrp(2))  >> not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> atom(hasMinorGrp(0)) >> not atom(isUrchin(1))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isRoe(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isRaw(1))  >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(hasMinorGrp(1))  >> not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> atom(hasMinorGrp(0)) >> not atom(isUrchin(1))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isRaw(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(1))  >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isOctopus(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(isRaw(1))  >> not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(isShrimp(1))  >> not atom(isUrchin(1))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isCreamy(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isChewy(1)) >> atom(isShrimp(1)) >> atom(isMaguro(1)) || atom(isRaw(0)) ; 
  not atom(isShrimp(1))  >> atom(isChewy(1)) >> not atom(isUrchin(1))  >> not atom(isMaguro(1))  || not atom(isUnique(1))  ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) >> not atom(isMaguro(1))  >> not atom(hasPrice(0))  || not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(isCreamy(1)) || not atom(isMaguro(1))  ; 
  atom(isRoe(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> atom(isMaguro(1)) || not atom(isMaguro(1))  ; 
  atom(isRoe(1)) >> atom(isShrimp(1)) >> atom(isFattyFish(1)) >> atom(isRaw(1)) ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> atom(isUnique(1)) >> atom(isFattyFish(1)) ; 
  atom(isRoe(1)) >> atom(isUnique(1)) >> atom(isShrimp(1)) >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(isRaw(1))  >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(1))  >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(hasMinorGrp(0))  >> not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(isShrimp(1))  >> not atom(isUrchin(1))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(hasPrice(0)) >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(hasMinorGrp(0))  >> not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) >> atom(isSweet(1)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(hasPrice(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(hasPrice(0)) >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(hasMinorGrp(0))  >> not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isShrimp(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isOctopus(1))  >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) >> atom(hasPrice(0)) >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  >> not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isUrchin(1))  >> not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isShrimp(1)) >> atom(isUrchin(1)) >> not atom(isChewy(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isShrimp(1)) >> atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isFattyFish(1)) >> atom(isOctopus(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  || not atom(isFattyFish(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  || not atom(isShrimp(1))  ; 
  atom(isUnique(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  || atom(isShrimp(1)) ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(1)) || not atom(isOctopus(1))  ; 
  atom(isRaw(0)) >> not atom(hasMinorGrp(0))  >> not atom(isMaguro(1))  >> atom(isUrchin(1)) || not atom(isUrchin(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(isCreamy(1)) || not atom(isMaguro(1))  ; 
  atom(isRaw(0)) >> atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> not atom(isShrimp(1))  || not atom(isRaw(0))  ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(2)) >> not atom(isSweet(1))  >> atom(isOctopus(1)) || not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUnique(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  || atom(isShrimp(1)) ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(1)) || not atom(isOctopus(1))  ; 
  atom(isRaw(0)) >> not atom(hasMinorGrp(0))  >> not atom(isMaguro(1))  >> atom(isUrchin(1)) || not atom(isUrchin(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(isCreamy(1)) || not atom(isMaguro(1))  ; 
  atom(isRaw(0)) >> atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> not atom(isShrimp(1))  || not atom(isRaw(0))  ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(2)) >> not atom(isSweet(1))  >> atom(isOctopus(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasPrice(0)) >> not atom(hasMinorGrp(1))  || atom(hasMinorGrp(1)) ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  || not atom(isMaguro(1))  ; 
  not atom(hasMinorGrp(1))  >> not atom(isRoe(1))  >> atom(isSweet(1)) || atom(hasMinorGrp(1)) ; 
  not atom(isRaw(1))  >> atom(hasMinorGrp(2)) >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  || atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasPrice(0)) >> not atom(hasMinorGrp(1))  || atom(hasMinorGrp(1)) ; 
  atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> not atom(isSweet(1))  || not atom(isMaguro(1))  ; 
  not atom(hasMinorGrp(1))  >> not atom(isRoe(1))  >> atom(isCreamy(1)) || atom(hasMinorGrp(1)) ; 
  not atom(isRaw(1))  >> atom(isSweet(1)) >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  || not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRaw(1))  >> atom(isUrchin(1)) >> not atom(isShrimp(1))  >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  atom(isSweet(1)) >> atom(hasMinorGrp(2)) >> not atom(isMaguro(1))  || not atom(isUrchin(1))  ; 
  not atom(hasMinorGrp(1))  >> not atom(isRoe(1))  >> atom(hasMinorGrp(2)) || atom(hasMinorGrp(1)) ; 
  not atom(isRoe(1))  || atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUnique(1))  >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  || not atom(isRoe(1))  ; 
  atom(isUnique(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  || atom(isShrimp(1)) ; 
  not atom(isRaw(1))  >> atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(1)) || not atom(isOctopus(1))  ; 
  not atom(isRaw(0))  >> atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> atom(isUrchin(1)) || not atom(hasPrice(0))  ; 
  atom(hasMinorGrp(2)) >> atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(isCreamy(1)) || not atom(isMaguro(1))  ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(0)) >> atom(isShrimp(1)) >> atom(isMaguro(1)) || not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> not atom(isSweet(1))  >> atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUnique(1))  >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  || not atom(isRoe(1))  ; 
  atom(isUnique(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  || atom(isShrimp(1)) ; 
  not atom(isRaw(1))  >> atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(1)) || not atom(isOctopus(1))  ; 
  not atom(isRaw(0))  >> atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> atom(isUrchin(1)) || not atom(hasPrice(0))  ; 
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) >> atom(isCreamy(1)) || not atom(isRaw(0))  ; 
  atom(isUrchin(1)) >> atom(isRaw(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  || not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> not atom(isSweet(1))  >> atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUnique(1))  >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  || not atom(isRoe(1))  ; 
  atom(isUnique(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  || atom(isShrimp(1)) ; 
  not atom(isRaw(1))  >> atom(isOctopus(1)) >> atom(isCreamy(1)) >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(1)) || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isRaw(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  || not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) >> atom(isMaguro(1)) >> not atom(isSweet(1))  ; 
  atom(isSweet(1)) >> not atom(isRaw(1))  >> not atom(isSweet(1))  >> atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> not atom(isCreamy(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  || not atom(isSweet(1))  ; 
  atom(isUnique(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  || atom(isShrimp(1)) ; 
  not atom(isRaw(1))  >> atom(isOctopus(1)) >> atom(isCreamy(1)) >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isRaw(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  || not atom(isRaw(0))  ; 
  not atom(isRaw(1))  >> atom(hasMinorGrp(2)) >> atom(hasPrice(1)) >> atom(isUnique(1)) || not atom(hasMinorGrp(2))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> not atom(isCreamy(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  || not atom(isSweet(1))  ; 
  atom(isUnique(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  || atom(isShrimp(1)) ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isRaw(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  || not atom(isRaw(0))  ; 
  not atom(isRaw(1))  >> atom(hasMinorGrp(2)) >> atom(hasPrice(1)) >> atom(isUnique(1)) || not atom(hasMinorGrp(2))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> not atom(isCreamy(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  || not atom(isSweet(1))  ; 
  atom(isUnique(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  || atom(isShrimp(1)) ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isRaw(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  || not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> not atom(isCreamy(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  || not atom(isSweet(1))  ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isRaw(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  || not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> not atom(isCreamy(1))  >> not atom(isFattyFish(1))  >> not atom(hasPrice(1))  || not atom(isSweet(1))  ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isSweet(1))  
}.
