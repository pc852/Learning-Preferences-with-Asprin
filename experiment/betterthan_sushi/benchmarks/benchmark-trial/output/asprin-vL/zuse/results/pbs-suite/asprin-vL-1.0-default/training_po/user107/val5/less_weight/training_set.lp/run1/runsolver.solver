asprin_vL version 1.0
Reading from stdin
-:235:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:245:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:260:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:341:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:602:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:615:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:792:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:921:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:993:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:997:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:997:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1003:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1102:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1128:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1248:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1282:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1304:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:152:1-16: info: no atoms over signature occur in program:
  output/3

-:144:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:145:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(1,eq,4) output(1,eq,3) output(1,eq,0) output(1,eq,7) output(1,eq,6) output(1,eq,8) output(1,eq,9) output(1,eq,2) output(4,eq,3) output(4,eq,0) output(4,eq,7) output(4,eq,6) output(4,eq,8) output(4,eq,9) output(4,eq,2) output(3,eq,0) output(3,eq,7) output(3,eq,6) output(3,eq,8) output(3,eq,9) output(3,eq,2) output(0,eq,7) output(0,eq,6) output(0,eq,8) output(0,eq,9) output(0,eq,2) output(7,eq,6) output(7,eq,8) output(7,eq,9) output(7,eq,2) output(6,eq,8) output(6,eq,9) output(6,eq,2) output(8,eq,9) output(8,eq,2) output(9,eq,2)
Optimization: 36 0
Answer: 2
preference(1,(1,10),1,for(atom(isMaguro(1))),15) preference(1,less(weight)) output(4,better,2) output(6,better,2) output(0,better,2) output(9,better,2) output(1,better,2) output(8,better,2) output(3,better,2) output(7,better,2) output(1,eq,4) output(1,eq,3) output(1,eq,0) output(1,eq,7) output(1,eq,6) output(1,eq,8) output(1,eq,9) output(4,eq,3) output(4,eq,0) output(4,eq,7) output(4,eq,6) output(4,eq,8) output(4,eq,9) output(3,eq,0) output(3,eq,7) output(3,eq,6) output(3,eq,8) output(3,eq,9) output(0,eq,7) output(0,eq,6) output(0,eq,8) output(0,eq,9) output(7,eq,6) output(7,eq,8) output(7,eq,9) output(6,eq,8) output(6,eq,9) output(8,eq,9)
Optimization: 28 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),1) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),1) preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),1) preference(1,(1,4),1,for(neg(atom(isRoe(1)))),1) preference(1,(1,5),1,for(neg(atom(isShrimp(1)))),1) preference(1,(1,6),1,for(neg(atom(isFattyFish(1)))),1) preference(1,(1,7),1,for(neg(atom(isChewy(1)))),1) preference(1,(1,8),1,for(neg(atom(isCreamy(1)))),1) preference(1,(1,9),1,for(neg(atom(isUnique(1)))),1) preference(1,(1,10),1,for(neg(atom(isSweet(1)))),2) preference(1,less(weight)) output(4,better,3) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(1,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(0,worse,7) output(3,worse,7) output(1,eq,4) output(1,eq,7) output(4,eq,7) output(3,eq,0) output(3,eq,6) output(3,eq,8) output(3,eq,9) output(3,eq,2) output(0,eq,6) output(0,eq,8) output(0,eq,9) output(0,eq,2) output(6,eq,8) output(6,eq,9) output(6,eq,2) output(8,eq,9) output(8,eq,2) output(9,eq,2)
Optimization: 20 10
Answer: 4
preference(1,(1,1),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,2),1,for(atom(isChewy(1))),10) preference(1,(1,5),1,for(atom(isUnique(1))),15) preference(1,(1,6),1,for(atom(isUrchin(1))),15) preference(1,(1,7),1,for(atom(isShrimp(1))),11) preference(1,(1,10),1,for(atom(isFattyFish(1))),7) preference(1,less(weight)) output(4,better,8) output(4,better,9) output(6,better,8) output(6,better,9) output(0,better,6) output(0,better,8) output(0,better,9) output(1,better,9) output(8,better,9) output(3,better,0) output(3,better,6) output(3,better,8) output(3,better,9) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(4,worse,3) output(4,worse,0) output(4,worse,7) output(4,worse,2) output(6,worse,2) output(0,worse,7) output(0,worse,2) output(9,worse,2) output(1,worse,4) output(1,worse,3) output(1,worse,0) output(1,worse,7) output(1,worse,6) output(1,worse,2) output(8,worse,2) output(3,worse,7) output(1,eq,8) output(4,eq,6) output(3,eq,2)
Optimization: 19 6
Answer: 5
preference(1,(1,1),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,3),1,for(atom(isRoe(1))),1) preference(1,(1,4),1,for(atom(isShrimp(1))),11) preference(1,(1,5),1,for(atom(isUnique(1))),15) preference(1,(1,6),1,for(atom(isChewy(1))),14) preference(1,(1,7),1,for(atom(isUrchin(1))),15) preference(1,(1,8),1,for(atom(isMaguro(1))),3) preference(1,(1,10),1,for(atom(isFattyFish(1))),7) preference(1,less(weight)) output(4,better,6) output(4,better,8) output(4,better,9) output(6,better,8) output(6,better,9) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(1,better,9) output(8,better,9) output(3,better,6) output(3,better,8) output(3,better,9) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(4,worse,3) output(4,worse,0) output(4,worse,7) output(4,worse,2) output(6,worse,2) output(0,worse,7) output(9,worse,2) output(1,worse,4) output(1,worse,3) output(1,worse,0) output(1,worse,7) output(1,worse,6) output(1,worse,2) output(8,worse,2) output(3,worse,0) output(3,worse,7) output(3,worse,2) output(1,eq,8)
Optimization: 18 8
Answer: 6
preference(1,(1,1),1,for(neg(atom(isRoe(1)))),2) preference(1,(1,2),1,for(neg(atom(isFattyFish(1)))),2) preference(1,(1,3),1,for(neg(atom(isRaw(0)))),2) preference(1,(1,5),1,for(neg(atom(isMaguro(1)))),2) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),2) preference(1,(1,8),1,for(neg(atom(isSweet(1)))),15) preference(1,(1,9),1,for(neg(atom(isChewy(1)))),12) preference(1,(1,10),1,for(neg(atom(isOctopus(1)))),14) preference(1,(1,4),1,for(atom(isRaw(1))),2) preference(1,less(weight)) output(4,better,3) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(1,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(3,better,0) output(3,better,6) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(0,worse,7) output(3,worse,7) output(1,eq,4) output(1,eq,7) output(4,eq,7) output(0,eq,6) output(0,eq,8) output(0,eq,9) output(0,eq,2) output(6,eq,8) output(6,eq,9) output(6,eq,2) output(8,eq,9) output(8,eq,2) output(9,eq,2)
Optimization: 15 10
Answer: 7
preference(1,(1,1),1,for(neg(atom(isRoe(1)))),7) preference(1,(1,2),1,for(neg(atom(hasPrice(0)))),8) preference(1,(1,4),1,for(neg(atom(isRaw(0)))),14) preference(1,(1,5),1,for(neg(atom(isUnique(1)))),12) preference(1,(1,7),1,for(neg(atom(isFattyFish(1)))),11) preference(1,(1,9),1,for(neg(atom(isUrchin(1)))),9) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(1)))),6) preference(1,(1,3),1,for(atom(hasPrice(1))),15) preference(1,(1,6),1,for(atom(isCreamy(1))),13) preference(1,(1,8),1,for(atom(isUrchin(1))),2) preference(1,less(weight)) output(6,better,8) output(6,better,9) output(6,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(9,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(3,better,7) output(3,better,8) output(3,better,2) output(7,better,8) output(7,better,2) output(4,worse,3) output(4,worse,0) output(4,worse,7) output(4,worse,6) output(4,worse,8) output(4,worse,9) output(4,worse,2) output(8,worse,9) output(8,worse,2) output(3,worse,0) output(3,worse,6) output(3,worse,9) output(7,worse,6) output(7,worse,9)
Optimization: 14 10
Answer: 8
preference(1,(1,1),1,for(neg(atom(isFattyFish(1)))),3) preference(1,(1,2),1,for(neg(atom(isRoe(1)))),3) preference(1,(1,3),1,for(neg(atom(isRaw(0)))),3) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),5) preference(1,(1,6),1,for(neg(atom(isShrimp(1)))),3) preference(1,(1,7),1,for(neg(atom(isUrchin(1)))),2) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,9),1,for(neg(atom(isSweet(1)))),6) preference(1,(1,10),1,for(neg(atom(isOctopus(1)))),3) preference(1,(1,4),1,for(atom(isRaw(1))),3) preference(1,less(weight)) output(4,better,3) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(1,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(8,better,9) output(8,better,2) output(3,better,0) output(3,better,6) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(6,worse,8) output(0,worse,7) output(0,worse,8) output(1,worse,4) output(3,worse,7) output(1,eq,7) output(0,eq,6) output(0,eq,9) output(0,eq,2) output(6,eq,9) output(6,eq,2) output(9,eq,2)
Optimization: 12 10
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),7) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),7) preference(1,(1,5),1,for(neg(atom(isUnique(1)))),2) preference(1,(1,7),1,for(neg(atom(isRaw(0)))),13) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(1)))),6) preference(1,(1,9),1,for(neg(atom(isMaguro(1)))),1) preference(1,(1,2),1,for(atom(isRaw(1))),15) preference(1,(1,3),1,for(atom(isShrimp(1))),11) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),13) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),12) preference(1,less(weight)) output(4,better,8) output(4,better,9) output(4,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(9,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(4,worse,3) output(4,worse,0) output(4,worse,7) output(4,worse,6) output(0,worse,7) output(1,worse,7) output(8,worse,9) output(8,worse,2) output(3,worse,0) output(3,worse,7) output(3,worse,6)
Optimization: 11 10
Answer: 10
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),7) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),7) preference(1,(1,5),1,for(neg(atom(isUnique(1)))),2) preference(1,(1,7),1,for(neg(atom(isRaw(0)))),13) preference(1,(1,9),1,for(neg(atom(isMaguro(1)))),1) preference(1,(1,2),1,for(atom(isRaw(1))),15) preference(1,(1,3),1,for(atom(isShrimp(1))),11) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),13) preference(1,(1,8),1,for(atom(isRoe(1))),11) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),12) preference(1,less(weight)) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(9,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(3,better,6) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(4,worse,0) output(4,worse,7) output(0,worse,7) output(1,worse,7) output(8,worse,9) output(8,worse,2) output(3,worse,0) output(3,worse,7) output(4,eq,3)
Optimization: 9 10
Answer: 11
preference(1,(1,1),1,for(neg(atom(isRaw(0)))),15) preference(1,(1,3),1,for(neg(atom(isSweet(1)))),13) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,7),1,for(neg(atom(isChewy(1)))),10) preference(1,(1,2),1,for(atom(isRaw(0))),6) preference(1,(1,6),1,for(atom(isShrimp(1))),2) preference(1,(1,8),1,for(atom(isChewy(1))),2) preference(1,(1,9),1,for(atom(isUnique(1))),2) preference(1,(1,10),1,for(atom(isRoe(1))),3) preference(1,less(weight)) output(4,better,3) output(4,better,0) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(1,better,3) output(1,better,0) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(8,better,9) output(3,better,0) output(3,better,6) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(4,worse,7) output(0,worse,7) output(9,worse,2) output(1,worse,4) output(1,worse,7) output(8,worse,2) output(3,worse,7)
Optimization: 7 10
Answer: 12
preference(1,(1,4),1,for(neg(atom(isSweet(1)))),11) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),14) preference(1,(1,2),1,for(atom(isMaguro(1))),10) preference(1,(1,3),1,for(atom(isUnique(1))),14) preference(1,(1,5),1,for(atom(hasPrice(0))),1) preference(1,(1,6),1,for(atom(isUrchin(1))),5) preference(1,(1,7),1,for(atom(isChewy(1))),7) preference(1,(1,8),1,for(atom(isCreamy(1))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),4) preference(1,less(weight)) output(4,better,3) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(6,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(9,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(8,better,9) output(8,better,2) output(3,better,6) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(4,worse,0) output(4,worse,7) output(6,worse,8) output(6,worse,9) output(3,worse,0) output(3,worse,7)
Optimization: 6 10
Answer: 13
preference(1,(1,4),1,for(neg(atom(isSweet(1)))),11) preference(1,(1,1),1,for(atom(isUrchin(1))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),14) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,5),1,for(atom(hasPrice(0))),1) preference(1,(1,6),1,for(atom(isUnique(1))),9) preference(1,(1,7),1,for(atom(isChewy(1))),7) preference(1,(1,8),1,for(atom(isCreamy(1))),8) preference(1,(1,9),1,for(atom(isRoe(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),4) preference(1,less(weight)) output(4,better,3) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(9,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(8,better,2) output(3,better,6) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2) output(4,worse,0) output(4,worse,7) output(3,worse,0) output(3,worse,7) output(8,eq,9)
Optimization: 5 10
Answer: 14
preference(1,(1,6),1,for(neg(atom(isChewy(1)))),4) preference(1,(1,8),1,for(neg(atom(isSweet(1)))),14) preference(1,(1,9),1,for(neg(atom(isRaw(0)))),15) preference(1,(1,1),1,for(atom(isCreamy(1))),15) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,3),1,for(atom(isRaw(0))),1) preference(1,(1,4),1,for(atom(isSweet(1))),14) preference(1,(1,5),1,for(atom(isMaguro(1))),11) preference(1,(1,7),1,for(atom(isShrimp(1))),12) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),8) preference(1,less(weight)) output(4,better,7) output(4,better,8) output(4,better,9) output(4,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(9,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(8,better,9) output(8,better,2) output(3,better,0) output(3,better,7) output(3,better,6) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,8) output(7,better,9) output(7,better,2) output(4,worse,3) output(4,worse,0) output(7,worse,6) output(4,eq,6)
Optimization: 4 10
Answer: 15
preference(1,(1,2),1,for(neg(atom(hasPrice(1)))),15) preference(1,(1,7),1,for(neg(atom(isCreamy(1)))),4) preference(1,(1,1),1,for(atom(isRoe(1))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,4),1,for(atom(isMaguro(1))),14) preference(1,(1,5),1,for(atom(isCreamy(1))),14) preference(1,(1,6),1,for(atom(isUrchin(1))),4) preference(1,(1,8),1,for(atom(isRaw(1))),8) preference(1,(1,9),1,for(atom(isFattyFish(1))),15) preference(1,(1,10),1,for(atom(isShrimp(1))),9) preference(1,less(weight)) output(4,better,3) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(9,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(8,better,9) output(8,better,2) output(3,better,0) output(3,better,7) output(3,better,6) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2)
Optimization: 0 10
Progression : 0 [ 1;10] (Error: 9)
Progression : 0 [ 2;10] (Error: 4)
Answer: 16
preference(1,(1,1),1,for(neg(atom(isOctopus(1)))),14) preference(1,(1,3),1,for(neg(atom(isRoe(1)))),7) preference(1,(1,4),1,for(neg(atom(isFattyFish(1)))),15) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),12) preference(1,(1,6),1,for(neg(atom(isUrchin(1)))),13) preference(1,(1,8),1,for(neg(atom(isMaguro(1)))),6) preference(1,(1,9),1,for(neg(atom(isShrimp(1)))),1) preference(1,(1,10),1,for(neg(atom(isRaw(0)))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),11) preference(1,less(weight)) output(4,better,3) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,8) output(4,better,9) output(4,better,2) output(6,better,8) output(6,better,9) output(6,better,2) output(0,better,7) output(0,better,6) output(0,better,8) output(0,better,9) output(0,better,2) output(9,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,8) output(1,better,9) output(1,better,2) output(8,better,9) output(8,better,2) output(3,better,0) output(3,better,7) output(3,better,6) output(3,better,8) output(3,better,9) output(3,better,2) output(7,better,6) output(7,better,8) output(7,better,9) output(7,better,2)
Optimization: 0 9
SATISFIABLE

Models       : 16+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 663.917s (Solving: 657.07s 1st Model: 0.04s Unsat: 0.00s)
CPU Time     : 2634.467s
Threads      : 4        (Winner: 2)

Choices      : 11888086 (Domain: 2776)
Conflicts    : 2659353  (Analyzed: 2659351)
Restarts     : 3171     (Average: 838.65 Last: 79927)
Model-Level  : 527.4   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 2667829  (Deleted: 2445979)
  Binary     : 1312     (Ratio:   0.05%)
  Ternary    : 321      (Ratio:   0.01%)
  Conflict   : 2659351  (Average Length: 1254.6 Ratio:  99.68%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 8478     (Average Length:   90.5 Ratio:   0.32%) 
  Distributed: 2826     (Ratio:   0.11% Average LBD: 3.32) 
  Integrated : 8478     (Ratio: 300.00% Unit: 11 Average Jumps: 46.00)
Backjumps    : 2659351  (Average:  3.32 Max: 3246 Sum: 8828344)
  Executed   : 2659350  (Average:  3.32 Max: 3246 Sum: 8828312 Ratio: 100.00%)
  Bounded    : 1        (Average: 32.00 Max:  32 Sum:     32 Ratio:   0.00%)

Rules        : 1885841 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 682781  
Bodies       : 696698  
  Sum        : 216     
  Count      : 10      
Equivalences : 2062432  (Atom=Atom: 666348 Body=Body: 682927 Other: 713157)
Tight        : Yes
Variables    : 18647    (Eliminated:    0 Frozen: 13037)
Constraints  : 1239262  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(isUrchin(1))  ; 
  1 :: not atom(isOctopus(1))  ; 
  1 :: not atom(isMaguro(1))  ; 
  1 :: not atom(isRoe(1))  ; 
  1 :: not atom(isShrimp(1))  ; 
  1 :: not atom(isFattyFish(1))  ; 
  1 :: not atom(isChewy(1))  ; 
  1 :: not atom(isCreamy(1))  ; 
  1 :: not atom(isUnique(1))  ; 
  2 :: not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(isChewy(1)) ; 
  15 :: atom(isUnique(1)) ; 
  15 :: atom(isUrchin(1)) ; 
  11 :: atom(isShrimp(1)) ; 
  7 :: atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(isRoe(1)) ; 
  11 :: atom(isShrimp(1)) ; 
  15 :: atom(isUnique(1)) ; 
  14 :: atom(isChewy(1)) ; 
  15 :: atom(isUrchin(1)) ; 
  3 :: atom(isMaguro(1)) ; 
  7 :: atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(isRoe(1))  ; 
  2 :: not atom(isFattyFish(1))  ; 
  2 :: not atom(isRaw(0))  ; 
  2 :: atom(isRaw(1)) ; 
  2 :: not atom(isMaguro(1))  ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  2 :: not atom(isShrimp(1))  ; 
  15 :: not atom(isSweet(1))  ; 
  12 :: not atom(isChewy(1))  ; 
  14 :: not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(isRoe(1))  ; 
  8 :: not atom(hasPrice(0))  ; 
  15 :: atom(hasPrice(1)) ; 
  14 :: not atom(isRaw(0))  ; 
  12 :: not atom(isUnique(1))  ; 
  13 :: atom(isCreamy(1)) ; 
  11 :: not atom(isFattyFish(1))  ; 
  2 :: atom(isUrchin(1)) ; 
  9 :: not atom(isUrchin(1))  ; 
  6 :: not atom(hasMinorGrp(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: not atom(isFattyFish(1))  ; 
  3 :: not atom(isRoe(1))  ; 
  3 :: not atom(isRaw(0))  ; 
  3 :: atom(isRaw(1)) ; 
  5 :: not atom(isChewy(1))  ; 
  3 :: not atom(isShrimp(1))  ; 
  2 :: not atom(isUrchin(1))  ; 
  4 :: not atom(hasPrice(1))  ; 
  6 :: not atom(isSweet(1))  ; 
  3 :: not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasMinorGrp(2))  ; 
  15 :: atom(isRaw(1)) ; 
  11 :: atom(isShrimp(1)) ; 
  7 :: not atom(hasPrice(0))  ; 
  2 :: not atom(isUnique(1))  ; 
  13 :: atom(hasMinorGrp(1)) ; 
  13 :: not atom(isRaw(0))  ; 
  6 :: not atom(hasMinorGrp(1))  ; 
  1 :: not atom(isMaguro(1))  ; 
  12 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasMinorGrp(2))  ; 
  15 :: atom(isRaw(1)) ; 
  11 :: atom(isShrimp(1)) ; 
  7 :: not atom(hasPrice(0))  ; 
  2 :: not atom(isUnique(1))  ; 
  13 :: atom(hasMinorGrp(1)) ; 
  13 :: not atom(isRaw(0))  ; 
  11 :: atom(isRoe(1)) ; 
  1 :: not atom(isMaguro(1))  ; 
  12 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: not atom(isRaw(0))  ; 
  6 :: atom(isRaw(0)) ; 
  13 :: not atom(isSweet(1))  ; 
  1 :: not atom(hasPrice(0))  ; 
  11 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(isShrimp(1)) ; 
  10 :: not atom(isChewy(1))  ; 
  2 :: atom(isChewy(1)) ; 
  2 :: atom(isUnique(1)) ; 
  3 :: atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  14 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(isMaguro(1)) ; 
  14 :: atom(isUnique(1)) ; 
  11 :: not atom(isSweet(1))  ; 
  1 :: atom(hasPrice(0)) ; 
  5 :: atom(isUrchin(1)) ; 
  7 :: atom(isChewy(1)) ; 
  8 :: atom(isCreamy(1)) ; 
  9 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(isUrchin(1)) ; 
  14 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasMinorGrp(2)) ; 
  11 :: not atom(isSweet(1))  ; 
  1 :: atom(hasPrice(0)) ; 
  9 :: atom(isUnique(1)) ; 
  7 :: atom(isChewy(1)) ; 
  8 :: atom(isCreamy(1)) ; 
  3 :: atom(isRoe(1)) ; 
  4 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isCreamy(1)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(isRaw(0)) ; 
  14 :: atom(isSweet(1)) ; 
  11 :: atom(isMaguro(1)) ; 
  4 :: not atom(isChewy(1))  ; 
  12 :: atom(isShrimp(1)) ; 
  14 :: not atom(isSweet(1))  ; 
  15 :: not atom(isRaw(0))  ; 
  8 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(isRoe(1)) ; 
  15 :: not atom(hasPrice(1))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  14 :: atom(isMaguro(1)) ; 
  14 :: atom(isCreamy(1)) ; 
  4 :: atom(isUrchin(1)) ; 
  4 :: not atom(isCreamy(1))  ; 
  8 :: atom(isRaw(1)) ; 
  15 :: atom(isFattyFish(1)) ; 
  9 :: atom(isShrimp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  14 :: not atom(isOctopus(1))  ; 
  11 :: atom(hasMinorGrp(0)) ; 
  7 :: not atom(isRoe(1))  ; 
  15 :: not atom(isFattyFish(1))  ; 
  12 :: not atom(isChewy(1))  ; 
  13 :: not atom(isUrchin(1))  ; 
  6 :: not atom(isMaguro(1))  ; 
  1 :: not atom(isShrimp(1))  ; 
  10 :: not atom(isRaw(0))  
}.
Time limit reached
