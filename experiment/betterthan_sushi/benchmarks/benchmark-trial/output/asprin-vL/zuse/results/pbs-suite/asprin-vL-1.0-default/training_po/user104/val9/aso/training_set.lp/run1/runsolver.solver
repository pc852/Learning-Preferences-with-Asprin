asprin_vL version 1.0
Reading from stdin
-:268:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:293:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:374:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:648:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:825:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1026:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1030:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1030:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1036:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1135:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1161:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1281:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1315:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1337:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:185:1-16: info: no atoms over signature occur in program:
  output/3

-:177:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:178:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:179:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:180:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:210:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,3),1,for(atom(isUnique(1))),()) preference(1,(1,7),1,for(atom(isUnique(1))),()) preference(1,(1,8),1,for(atom(isUnique(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(2,better,5) output(2,better,3) output(7,better,5) output(7,better,3) output(1,better,5) output(1,better,3) output(6,better,8) output(6,better,3) output(6,better,0) output(2,worse,6) output(2,worse,0) output(7,worse,6) output(7,worse,0) output(1,worse,6) output(1,worse,0) output(5,worse,6) output(5,worse,0) output(4,worse,6) output(4,worse,8) output(4,worse,0) output(8,worse,0) output(3,worse,0) output(2,eq,7) output(2,eq,1) output(7,eq,1) output(5,eq,3)
Optimization: 27 5
Answer: 2
preference(1,(1,4),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,aso) output(2,better,7) output(2,better,5) output(2,better,6) output(2,better,0) output(1,better,5) output(1,better,6) output(1,better,0) output(4,better,6) output(4,better,0) output(8,better,0) output(3,better,0) output(7,worse,1) output(7,worse,4) output(7,worse,8) output(7,worse,3) output(5,worse,4) output(5,worse,8) output(5,worse,3) output(6,worse,8) output(6,worse,3) output(2,eq,1) output(2,eq,4) output(2,eq,8) output(2,eq,3) output(7,eq,6) output(7,eq,0) output(1,eq,4) output(1,eq,8) output(1,eq,3) output(4,eq,8) output(4,eq,3) output(6,eq,0) output(8,eq,3)
Optimization: 25 4
Answer: 3
preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,aso) output(2,better,1) output(2,better,5) output(2,better,6) output(2,better,8) output(2,better,0) output(7,better,1) output(7,better,5) output(7,better,6) output(7,better,8) output(7,better,0) output(4,better,6) output(4,better,8) output(4,better,0) output(3,better,0) output(1,worse,4) output(1,worse,3) output(5,worse,4) output(5,worse,3) output(6,worse,3) output(8,worse,3) output(2,eq,7) output(2,eq,4) output(2,eq,3) output(7,eq,4) output(7,eq,3) output(1,eq,6) output(1,eq,8) output(1,eq,0) output(4,eq,3) output(6,eq,8) output(6,eq,0) output(8,eq,0)
Optimization: 22 4
Answer: 4
preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,aso) output(2,better,5) output(2,better,6) output(2,better,8) output(2,better,0) output(7,better,5) output(7,better,6) output(7,better,8) output(7,better,0) output(1,better,5) output(1,better,6) output(1,better,8) output(1,better,0) output(4,better,6) output(4,better,8) output(4,better,0) output(3,better,0) output(5,worse,4) output(5,worse,3) output(6,worse,3) output(8,worse,3) output(2,eq,7) output(2,eq,1) output(2,eq,4) output(2,eq,3) output(7,eq,1) output(7,eq,4) output(7,eq,3) output(1,eq,4) output(1,eq,3) output(4,eq,3) output(6,eq,8) output(6,eq,0) output(8,eq,0)
Optimization: 20 4
Answer: 5
preference(1,(1,4),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,aso) output(2,better,5) output(2,better,6) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,6) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,6) output(1,better,3) output(1,better,0) output(4,better,6) output(4,better,3) output(4,better,0) output(8,better,3) output(8,better,0) output(5,worse,4) output(5,worse,6) output(5,worse,8) output(5,worse,3) output(5,worse,0) output(6,worse,8) output(2,eq,7) output(2,eq,1) output(2,eq,4) output(2,eq,8) output(7,eq,1) output(7,eq,4) output(7,eq,8) output(1,eq,4) output(1,eq,8) output(4,eq,8) output(6,eq,3) output(6,eq,0) output(3,eq,0)
Optimization: 19 3
Answer: 6
preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),0,for(atom(isOctopus(1))),()) preference(1,(1,6),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isCreamy(1))),()) preference(1,aso) output(2,better,5) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(5,worse,4) output(5,worse,6) output(5,worse,8) output(5,worse,3) output(5,worse,0) output(2,eq,7) output(2,eq,1) output(2,eq,4) output(7,eq,1) output(7,eq,4) output(1,eq,4) output(3,eq,0)
Optimization: 12 4
Answer: 7
preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),0,for(atom(isOctopus(1))),()) preference(1,(1,6),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isSweet(1))),()) preference(1,aso) output(2,better,1) output(2,better,5) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,1) output(7,better,5) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,8) output(1,better,3) output(1,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(1,worse,4) output(1,worse,6) output(5,worse,4) output(5,worse,6) output(5,worse,8) output(5,worse,3) output(5,worse,0) output(2,eq,7) output(2,eq,4) output(7,eq,4) output(3,eq,0)
Optimization: 11 4
Answer: 8
preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),0,for(atom(isOctopus(1))),()) preference(1,(1,6),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isSweet(1))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(2,better,1) output(2,better,5) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,1) output(7,better,5) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(1,worse,4) output(5,worse,4) output(5,worse,6) output(5,worse,8) output(5,worse,3) output(5,worse,0) output(2,eq,7) output(2,eq,4) output(7,eq,4) output(3,eq,0)
Optimization: 10 4
Answer: 9
preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isSweet(1))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(5,worse,4) output(5,worse,6) output(5,worse,8) output(5,worse,3) output(5,worse,0) output(7,eq,1) output(7,eq,4) output(1,eq,4) output(3,eq,0)
Optimization: 9 4
Answer: 10
preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,4),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),2,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),2,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),3,for(atom(isRaw(0))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,1) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(8,better,3) output(8,better,0) output(3,better,0) output(1,worse,5) output(6,worse,8)
Optimization: 8 7
Answer: 11
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(atom(isSweet(1))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,4),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,2),3,for(atom(isCreamy(1))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),3,for(atom(isShrimp(1))),()) preference(1,(1,1),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),4,for(atom(isUrchin(1))),()) preference(1,(1,3),4,for(atom(hasPrice(0))),()) preference(1,(1,6),4,for(atom(isUnique(1))),()) preference(1,(1,8),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,1) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(6,better,8) output(6,better,3) output(8,better,3) output(7,worse,5) output(1,worse,5)
Optimization: 7 8
Answer: 12
preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isUrchin(1))),()) preference(1,(1,7),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),1,for(atom(isUnique(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,1),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,1) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,0) output(3,better,0) output(2,eq,7) output(4,eq,6) output(8,eq,3)
Optimization: 7 4
Progression : [1;7] (Error: 6)
Answer: 13
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),0,for(atom(isSweet(1))),()) preference(1,(1,4),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isCreamy(1))),()) preference(1,(1,3),2,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,2),3,for(atom(isSweet(1))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,5),4,for(atom(isChewy(1))),()) preference(1,(1,6),4,for(atom(isUnique(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(6,better,8) output(6,better,3) output(8,better,3) output(3,worse,0) output(7,eq,1)
Optimization: 6 8
Answer: 14
preference(1,(1,1),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isCreamy(1))),()) preference(1,(1,3),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isFattyFish(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,2),3,for(atom(isSweet(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,3),4,for(atom(isShrimp(1))),()) preference(1,(1,5),4,for(atom(isChewy(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,3) output(4,better,0) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(3,better,0) output(7,worse,1)
Optimization: 5 8
Answer: 15
preference(1,(1,1),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isCreamy(1))),()) preference(1,(1,3),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,2),3,for(atom(isSweet(1))),()) preference(1,(1,4),3,for(atom(isCreamy(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,3),4,for(atom(isShrimp(1))),()) preference(1,(1,5),4,for(atom(isChewy(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(3,better,0) output(7,worse,1)
Optimization: 3 8
Answer: 16
preference(1,(1,1),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isCreamy(1))),()) preference(1,(1,3),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,2),3,for(atom(isSweet(1))),()) preference(1,(1,4),3,for(atom(isCreamy(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,3),4,for(atom(isShrimp(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(3,better,0) output(7,worse,1) output(7,worse,5)
Optimization: 2 8
Answer: 17
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,3),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,6),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(3,better,0) output(7,eq,1)
Optimization: 1 8
Progression : 1 [1;8] (Error: 7)
Answer: 18
preference(1,(1,1),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),0,for(atom(isCreamy(1))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,3),3,for(atom(isRaw(0))),()) preference(1,(1,4),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(3,better,0) output(7,eq,1)
Optimization: 1 7
Progression : 1 [2;7] (Error: 2.5)
Answer: 19
preference(1,(1,1),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),0,for(atom(isCreamy(1))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,3),3,for(atom(isRaw(0))),()) preference(1,(1,4),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(3,better,0) output(7,eq,1)
Optimization: 1 6
Answer: 20
preference(1,(1,1),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),0,for(atom(isCreamy(1))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,3),3,for(atom(isRaw(0))),()) preference(1,(1,4),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(3,better,0) output(7,eq,1)
Optimization: 1 5
Answer: 21
preference(1,(1,4),0,for(atom(isCreamy(1))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isShrimp(1))),()) preference(1,(1,4),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,(1,1),4,for(atom(isChewy(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(3,better,0) output(7,eq,1)
Optimization: 1 4
Answer: 22
preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,8) output(2,better,3) output(2,better,0) output(7,better,5) output(7,better,4) output(7,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(1,better,5) output(1,better,4) output(1,better,6) output(1,better,8) output(1,better,3) output(1,better,0) output(5,better,4) output(5,better,6) output(5,better,8) output(5,better,3) output(5,better,0) output(4,better,6) output(4,better,8) output(4,better,3) output(4,better,0) output(6,better,8) output(6,better,3) output(6,better,0) output(8,better,3) output(8,better,0) output(3,better,0) output(7,eq,1)
Optimization: 1 3
OPTIMUM FOUND

Models       : 22
  Optimum    : yes
Optimization : 1 3
Calls        : 1
Time         : 18.368s (Solving: 13.10s 1st Model: 0.14s Unsat: 10.07s)
CPU Time     : 57.508s
Threads      : 4        (Winner: 1)

Choices      : 267518   (Domain: 3074)
Conflicts    : 55348    (Analyzed: 55343)
Restarts     : 90       (Average: 614.92 Last: 2440)
Model-Level  : 355.3   
Problems     : 9        (Average Length: 0.44 Splits: 0)
Lemmas       : 106618   (Deleted: 40069)
  Binary     : 3671     (Ratio:   3.44%)
  Ternary    : 7648     (Ratio:   7.17%)
  Conflict   : 55341    (Average Length:   98.1 Ratio:  51.91%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 51277    (Average Length:   34.6 Ratio:  48.09%) 
  Distributed: 17109    (Ratio:  30.92% Average LBD: 3.21) 
  Integrated : 51327    (Ratio: 300.00% Unit: 359 Average Jumps: 74.16)
Backjumps    : 55343    (Average:  4.03 Max: 718 Sum: 223090)
  Executed   : 55325    (Average:  4.03 Max: 718 Sum: 222836 Ratio:  99.89%)
  Bounded    : 18       (Average: 14.11 Max:  34 Sum:    254 Ratio:   0.11%)

Rules        : 1978057 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 591608  
Bodies       : 696346  
  Count      : 1768    
Equivalences : 1807193  (Atom=Atom: 517643 Body=Body: 559999 Other: 729551)
Tight        : Yes
Variables    : 77167    (Eliminated:    0 Frozen: 54151)
Constraints  : 1492209  (Binary:  94.9% Ternary:   4.2% Other:   0.9%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isChewy(1))  || atom(isUrchin(1)) ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(hasMinorGrp(1))  >> not atom(isUrchin(1))  ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> not atom(isUnique(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(0))  >> not atom(isChewy(1))  || not atom(hasMinorGrp(0))  ; 
  not atom(isOctopus(1))  >> atom(isCreamy(1)) >> not atom(isRoe(1))  >> not atom(isMaguro(1))  || atom(isOctopus(1)) ; 
  not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isRoe(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isRoe(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isCreamy(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  not atom(isOctopus(1))  >> atom(isCreamy(1)) >> not atom(isRoe(1))  >> not atom(isMaguro(1))  || atom(isOctopus(1)) ; 
  not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isRoe(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isRoe(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSweet(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  not atom(isOctopus(1))  >> atom(isCreamy(1)) >> not atom(isRoe(1))  >> not atom(isMaguro(1))  || atom(isOctopus(1)) ; 
  not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isRoe(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isRoe(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSweet(1)) >> not atom(isMaguro(1))  || not atom(hasPrice(1))  ; 
  not atom(isOctopus(1))  >> atom(isCreamy(1)) >> not atom(isRoe(1))  >> not atom(isMaguro(1))  || atom(isOctopus(1)) ; 
  not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isRoe(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasMinorGrp(1))  >> not atom(isMaguro(1))  || not atom(hasMinorGrp(2))  ; 
  not atom(isOctopus(1))  >> atom(isCreamy(1)) >> not atom(isRoe(1))  >> not atom(isMaguro(1))  || atom(isOctopus(1)) ; 
  atom(isSweet(1)) >> atom(hasMinorGrp(2)) >> atom(isCreamy(1)) >> not atom(isMaguro(1))  || not atom(isSweet(1))  ; 
  not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isRoe(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasMinorGrp(1))  >> not atom(isMaguro(1))  || not atom(hasMinorGrp(2))  ; 
  not atom(isOctopus(1))  >> atom(isCreamy(1)) >> not atom(isRoe(1))  >> not atom(isMaguro(1))  || atom(isOctopus(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(2)) >> atom(isSweet(1)) >> not atom(isMaguro(1))  || not atom(isCreamy(1))  ; 
  not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isRoe(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasMinorGrp(1))  >> not atom(isMaguro(1))  || not atom(hasMinorGrp(2))  ; 
  not atom(isOctopus(1))  >> atom(isCreamy(1)) >> not atom(isRoe(1))  >> not atom(isMaguro(1))  || atom(isOctopus(1)) ; 
  atom(isCreamy(1)) >> atom(isSweet(1)) >> atom(hasMinorGrp(2)) >> not atom(isMaguro(1))  || not atom(isCreamy(1))  ; 
  not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isRoe(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasMinorGrp(1))  >> not atom(isMaguro(1))  || not atom(hasMinorGrp(2))  ; 
  not atom(isOctopus(1))  >> atom(isCreamy(1)) >> not atom(isRoe(1))  >> not atom(isMaguro(1))  || atom(isOctopus(1)) ; 
  not atom(isChewy(1))  >> not atom(isOctopus(1))  >> not atom(isRoe(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) >> atom(hasMinorGrp(2)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> not atom(isRaw(0))  >> not atom(isOctopus(1))  >> not atom(isChewy(1))  || not atom(isSweet(1))  ; 
  atom(hasPrice(0)) >> not atom(hasMinorGrp(2))  >> atom(isRaw(0)) || atom(isUrchin(1)) ; 
  not atom(hasMinorGrp(1))  >> not atom(isMaguro(1))  || not atom(isChewy(1))  ; 
  atom(isMaguro(1)) >> not atom(hasMinorGrp(2))  >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> not atom(isOctopus(1))  >> not atom(isUrchin(1))  || atom(hasMinorGrp(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(1)) >> not atom(isRoe(1))  >> not atom(isMaguro(1))  || atom(hasMinorGrp(2)) ; 
  atom(isMaguro(1)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isFattyFish(1)) >> atom(isChewy(1)) >> atom(hasMinorGrp(1)) || not atom(isRaw(0))  ; 
  atom(hasMinorGrp(2)) >> atom(isMaguro(1)) >> atom(isCreamy(1)) >> atom(isUrchin(1)) || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isShrimp(1))  >> atom(hasPrice(0)) || not atom(isMaguro(1))  ; 
  not atom(isUnique(1))  >> not atom(isShrimp(1))  >> not atom(isMaguro(1))  || atom(isSweet(1)) ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(1)) >> atom(isUnique(1)) || not atom(isRoe(1))  ; 
  atom(hasMinorGrp(1)) >> atom(isMaguro(1)) >> not atom(hasMinorGrp(2))  || not atom(hasMinorGrp(0))  ; 
  atom(isOctopus(1)) >> not atom(isCreamy(1))  >> atom(isShrimp(1)) >> atom(isFattyFish(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  atom(isUnique(1)) >> not atom(isMaguro(1))  || not atom(isCreamy(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(isRaw(1)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isFattyFish(1)) >> atom(isChewy(1)) >> atom(hasMinorGrp(1)) || not atom(isRaw(0))  ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) >> atom(isSweet(1)) || not atom(isSweet(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  >> atom(isMaguro(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isSweet(1))  >> atom(isChewy(1)) || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(1)) >> atom(isUnique(1)) || not atom(isRoe(1))  ; 
  atom(hasMinorGrp(1)) >> atom(isMaguro(1)) >> not atom(hasMinorGrp(2))  || not atom(hasMinorGrp(0))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> atom(isUnique(1)) || atom(isSweet(1)) ; 
  atom(isMaguro(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isShrimp(1)) >> atom(isChewy(1)) >> atom(isUnique(1)) || not atom(isChewy(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) >> atom(isSweet(1)) || not atom(isSweet(1))  ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  >> atom(isShrimp(1)) || not atom(isOctopus(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) >> atom(isOctopus(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isSweet(1))  >> atom(isChewy(1)) || not atom(isMaguro(1))  ; 
  atom(hasMinorGrp(1)) >> atom(isMaguro(1)) >> not atom(hasMinorGrp(2))  || not atom(hasMinorGrp(0))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  ; 
  atom(isMaguro(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isShrimp(1)) >> atom(isChewy(1)) >> atom(isUnique(1)) || not atom(isChewy(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) >> atom(isSweet(1)) || not atom(isSweet(1))  ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  >> atom(isShrimp(1)) || not atom(isOctopus(1))  ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) >> atom(isCreamy(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isSweet(1))  >> atom(isChewy(1)) || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  || not atom(isMaguro(1))  ; 
  atom(hasMinorGrp(1)) >> atom(isMaguro(1)) >> not atom(hasMinorGrp(2))  || not atom(hasMinorGrp(0))  ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) >> atom(isUrchin(1)) >> not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isShrimp(1)) >> atom(isChewy(1)) >> atom(isUnique(1)) || not atom(isChewy(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) >> atom(isSweet(1)) || not atom(isSweet(1))  ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  >> atom(isShrimp(1)) || not atom(isOctopus(1))  ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) >> atom(isCreamy(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isCreamy(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  || not atom(isMaguro(1))  ; 
  atom(hasMinorGrp(1)) >> atom(isMaguro(1)) >> not atom(hasMinorGrp(2))  || not atom(hasMinorGrp(0))  ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(hasMinorGrp(2)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRaw(0))  || not atom(isRaw(1))  ; 
  not atom(hasMinorGrp(2))  >> atom(isMaguro(1)) >> not atom(isRoe(1))  || not atom(isCreamy(1))  ; 
  atom(isMaguro(1)) >> not atom(isShrimp(1))  >> atom(isUrchin(1)) >> not atom(isSweet(1))  || not atom(isMaguro(1))  ; 
  atom(isSweet(1)) >> atom(isRoe(1)) >> atom(isFattyFish(1)) >> not atom(isOctopus(1))  || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  ; 
  atom(isMaguro(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isShrimp(1)) >> atom(isChewy(1)) >> atom(isUnique(1)) || not atom(isChewy(1))  ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) >> atom(hasMinorGrp(0)) || atom(isCreamy(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isRoe(1)) >> not atom(isSweet(1))  || not atom(isMaguro(1))  ; 
  atom(isFattyFish(1)) >> atom(hasMinorGrp(1)) || not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  >> atom(isRaw(0)) ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isShrimp(1)) >> atom(isChewy(1)) >> atom(isUnique(1)) || not atom(isChewy(1))  ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) >> atom(hasMinorGrp(0)) || atom(isCreamy(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isRoe(1)) >> not atom(isSweet(1))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  >> atom(isRaw(0)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isShrimp(1)) >> atom(isChewy(1)) >> atom(isUnique(1)) || not atom(isChewy(1))  ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) >> atom(hasMinorGrp(0)) || atom(isCreamy(1)) ; 
  atom(isSweet(1)) >> atom(isFattyFish(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) || not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  >> atom(isRaw(0)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) >> atom(hasMinorGrp(0)) || atom(isCreamy(1)) ; 
  atom(isSweet(1)) >> atom(isFattyFish(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) || not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> not atom(isShrimp(1))  >> atom(isShrimp(1)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  || not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> not atom(isShrimp(1))  >> atom(isUrchin(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  
}.
