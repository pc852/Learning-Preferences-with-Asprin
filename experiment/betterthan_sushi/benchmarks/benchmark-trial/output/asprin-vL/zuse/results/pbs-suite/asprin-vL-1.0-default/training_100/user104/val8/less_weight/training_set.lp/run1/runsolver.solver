asprin_vL version 1.0
Reading from stdin
-:314:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:324:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:339:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:420:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:681:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:694:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:871:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1000:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1072:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1076:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1076:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1082:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1181:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1207:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1327:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1361:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1383:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:231:1-16: info: no atoms over signature occur in program:
  output/3

-:223:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:224:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(11,eq,2) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(2,eq,6) output(2,eq,16) output(2,eq,20) output(2,eq,29) output(2,eq,51) output(2,eq,35) output(2,eq,59) output(2,eq,9) output(6,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(20,eq,29) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 45 0
Answer: 2
preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(11,better,6) output(11,better,20) output(16,better,20) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(6,worse,16) output(6,worse,29) output(6,worse,51) output(6,worse,35) output(6,worse,59) output(6,worse,9) output(11,eq,2) output(11,eq,16) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(2,eq,16) output(2,eq,29) output(2,eq,51) output(2,eq,35) output(2,eq,59) output(2,eq,9) output(6,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 40 1
Answer: 3
preference(1,(1,6),1,for(atom(hasMinorGrp(3))),12) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(11,better,6) output(11,better,20) output(11,better,29) output(16,better,20) output(16,better,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(6,worse,16) output(6,worse,51) output(6,worse,35) output(6,worse,59) output(6,worse,9) output(29,worse,51) output(29,worse,35) output(29,worse,59) output(29,worse,9) output(11,eq,2) output(11,eq,16) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(2,eq,16) output(2,eq,51) output(2,eq,35) output(2,eq,59) output(2,eq,9) output(6,eq,20) output(6,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(20,eq,29) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 37 2
Answer: 4
preference(1,(1,5),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,51) output(2,better,9) output(11,better,6) output(11,better,20) output(11,better,51) output(11,better,9) output(16,better,20) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,9) output(20,worse,29) output(20,worse,35) output(20,worse,59) output(51,worse,35) output(51,worse,59) output(6,worse,16) output(6,worse,29) output(6,worse,35) output(6,worse,59) output(11,eq,2) output(11,eq,16) output(11,eq,29) output(11,eq,35) output(11,eq,59) output(2,eq,16) output(2,eq,29) output(2,eq,35) output(2,eq,59) output(6,eq,20) output(6,eq,51) output(6,eq,9) output(16,eq,29) output(16,eq,35) output(16,eq,59) output(20,eq,51) output(20,eq,9) output(29,eq,35) output(29,eq,59) output(51,eq,9) output(35,eq,59)
Optimization: 30 2
Answer: 5
preference(1,(1,5),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,14),1,for(atom(hasMinorGrp(3))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,9) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(20,worse,35) output(20,worse,59) output(51,worse,35) output(51,worse,59) output(6,worse,16) output(6,worse,35) output(6,worse,59) output(29,worse,35) output(29,worse,59) output(11,eq,2) output(11,eq,16) output(11,eq,35) output(11,eq,59) output(2,eq,16) output(2,eq,35) output(2,eq,59) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(6,eq,9) output(16,eq,35) output(16,eq,59) output(20,eq,29) output(20,eq,51) output(20,eq,9) output(29,eq,51) output(29,eq,9) output(51,eq,9) output(35,eq,59)
Optimization: 29 3
Answer: 6
preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),12) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,11),1,for(atom(hasOftenSold(0))),12) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),12) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(20,worse,29) output(6,worse,29) output(16,worse,29) output(11,eq,2) output(11,eq,29) output(2,eq,29) output(6,eq,16) output(6,eq,20) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,20) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 27 6
Answer: 7
preference(1,(1,8),1,for(neg(atom(hasOilyLevel(1)))),12) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,9),1,for(atom(hasOftenSold(0))),12) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),12) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,6) output(11,better,20) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(16,better,20) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(20,worse,29) output(6,worse,16) output(6,worse,29) output(11,eq,2) output(11,eq,16) output(11,eq,29) output(2,eq,16) output(2,eq,29) output(6,eq,20) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,29) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 24 5
Answer: 8
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),12) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,14),1,for(neg(atom(hasPrice(0)))),12) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,3),1,for(atom(hasPrice(0))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,9),1,for(atom(hasPriceLevel(2))),3) preference(1,(1,10),1,for(atom(hasPrice(1))),12) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),4) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,59) output(20,better,29) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,59) output(35,better,59) output(2,worse,9) output(11,worse,2) output(11,worse,6) output(11,worse,51) output(11,worse,35) output(11,worse,9) output(20,worse,51) output(20,worse,35) output(20,worse,9) output(51,worse,9) output(6,worse,51) output(6,worse,35) output(6,worse,9) output(16,worse,51) output(16,worse,35) output(16,worse,9) output(35,worse,9) output(59,worse,9) output(29,worse,51) output(29,worse,35) output(29,worse,59) output(29,worse,9) output(20,eq,59)
Optimization: 23 10
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(0)))),12) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),6) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,14),1,for(neg(atom(hasOilyLevel(0)))),2) preference(1,(1,3),1,for(atom(hasOftenSold(0))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),4) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,59) output(35,better,59) output(29,better,59) output(2,worse,9) output(11,worse,2) output(11,worse,6) output(11,worse,51) output(11,worse,35) output(11,worse,9) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(51,worse,9) output(6,worse,9) output(16,worse,29) output(16,worse,51) output(16,worse,35) output(16,worse,9) output(35,worse,9) output(59,worse,9) output(29,worse,51) output(29,worse,35) output(29,worse,9)
Optimization: 22 14
Answer: 10
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(0)))),11) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),6) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,14),1,for(neg(atom(hasOftenSold(0)))),7) preference(1,(1,3),1,for(atom(hasOftenSold(0))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),4) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,59) output(35,better,59) output(29,better,59) output(11,worse,2) output(11,worse,6) output(11,worse,51) output(11,worse,35) output(11,worse,9) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(51,worse,9) output(6,worse,9) output(16,worse,29) output(16,worse,51) output(16,worse,35) output(16,worse,9) output(35,worse,9) output(59,worse,9) output(29,worse,51) output(29,worse,35) output(29,worse,9)
Optimization: 21 14
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,3),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),6) preference(1,(1,12),1,for(neg(atom(hasPriceLevel(1)))),6) preference(1,(1,14),1,for(neg(atom(hasOftenSold(0)))),7) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,7),1,for(atom(hasOftenSold(0))),11) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),1) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,35) output(11,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,59) output(35,better,59) output(29,better,59) output(11,worse,2) output(11,worse,6) output(11,worse,51) output(11,worse,9) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(51,worse,9) output(16,worse,51) output(16,worse,9) output(35,worse,9) output(59,worse,9) output(29,worse,51) output(29,worse,9) output(6,eq,9) output(16,eq,29) output(16,eq,35) output(29,eq,35)
Optimization: 20 13
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(0)))),8) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),10) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,12),1,for(neg(atom(hasOiliness(0)))),10) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,5),1,for(atom(hasOftenSold(0))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,9),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,14),1,for(atom(hasOiliness(0))),7) preference(1,less(weight)) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,59) output(2,worse,6) output(2,worse,9) output(11,worse,6) output(11,worse,9) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(51,worse,9) output(16,worse,9) output(35,worse,9) output(59,worse,9) output(29,worse,51) output(29,worse,35) output(29,worse,9) output(11,eq,2)
Optimization: 17 14
Answer: 13
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,3),1,for(neg(atom(hasOilyLevel(1)))),12) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),10) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,12),1,for(neg(atom(hasOiliness(0)))),10) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,14),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,5),1,for(atom(hasOftenSold(0))),3) preference(1,(1,6),1,for(atom(hasOiliness(0))),7) preference(1,(1,9),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),4) preference(1,less(weight)) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,35) output(29,better,59) output(2,worse,6) output(11,worse,2) output(11,worse,6) output(11,worse,9) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(51,worse,9) output(16,worse,9) output(35,worse,9) output(59,worse,9) output(29,worse,51) output(29,worse,9) output(2,eq,9)
Optimization: 16 14
Answer: 14
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),10) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,12),1,for(neg(atom(hasOiliness(0)))),10) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),5) preference(1,(1,5),1,for(atom(hasOftenSold(0))),3) preference(1,(1,6),1,for(atom(hasOiliness(0))),7) preference(1,(1,9),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,14),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,35) output(29,better,59) output(2,worse,9) output(11,worse,9) output(20,worse,51) output(20,worse,9) output(51,worse,9) output(6,worse,9) output(16,worse,9) output(35,worse,9) output(59,worse,9) output(29,worse,51) output(29,worse,9) output(11,eq,2) output(11,eq,6) output(2,eq,6) output(20,eq,29)
Optimization: 15 14
Answer: 15
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),10) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,12),1,for(neg(atom(hasOiliness(0)))),10) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,3),1,for(atom(hasOiliness(0))),7) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),3) preference(1,(1,5),1,for(atom(hasOftenSold(0))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,9),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,14),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,35) output(29,better,59) output(2,worse,6) output(2,worse,9) output(11,worse,6) output(11,worse,9) output(20,worse,9) output(51,worse,9) output(6,worse,9) output(16,worse,9) output(35,worse,9) output(59,worse,9) output(29,worse,51) output(29,worse,9) output(11,eq,2) output(20,eq,51)
Optimization: 14 14
Answer: 16
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),10) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,12),1,for(neg(atom(hasOiliness(0)))),10) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(0)))),12) preference(1,(1,3),1,for(atom(hasOiliness(0))),2) preference(1,(1,4),1,for(atom(hasPriceLevel(1))),7) preference(1,(1,5),1,for(atom(hasOftenSold(0))),3) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),3) preference(1,(1,9),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),4) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,29) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,35) output(29,better,59) output(11,worse,2) output(11,worse,9) output(20,worse,9) output(51,worse,9) output(6,worse,9) output(16,worse,9) output(35,worse,9) output(59,worse,9) output(29,worse,51) output(29,worse,9) output(11,eq,6) output(2,eq,9) output(20,eq,51)
Optimization: 13 14
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,3),1,for(neg(atom(hasOiliness(1)))),4) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),11) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),12) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,2),1,for(atom(hasPriceLevel(1))),10) preference(1,(1,5),1,for(atom(hasPrice(0))),3) preference(1,(1,7),1,for(atom(hasPrice(1))),4) preference(1,(1,9),1,for(atom(hasOilyLevel(2))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),12) preference(1,less(weight)) output(2,better,6) output(2,better,29) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,2) output(11,better,6) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,29) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(59,better,9) output(29,better,35) output(29,better,9) output(2,worse,16) output(2,worse,20) output(11,worse,16) output(6,worse,16) output(6,worse,20) output(6,worse,51) output(35,worse,59) output(35,worse,9) output(29,worse,51) output(29,worse,59) output(11,eq,20) output(2,eq,51)
Optimization: 12 14
Answer: 18
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,3),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),11) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),12) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,2),1,for(atom(hasOftenSold(1))),10) preference(1,(1,5),1,for(atom(hasOilyLevel(2))),1) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),9) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,12),1,for(atom(hasOftenSold(0))),8) preference(1,(1,14),1,for(atom(hasOilyLevel(1))),3) preference(1,less(weight)) output(2,better,6) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(2,worse,16) output(11,worse,2) output(11,worse,16) output(6,worse,16) output(11,eq,6) output(11,eq,20) output(6,eq,20) output(35,eq,59)
Optimization: 8 14
Answer: 19
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,3),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),11) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),12) preference(1,(1,2),1,for(atom(hasOftenSold(1))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),9) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),4) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),1) preference(1,(1,12),1,for(atom(hasOftenSold(0))),8) preference(1,(1,13),1,for(atom(hasPrice(0))),5) preference(1,(1,14),1,for(atom(hasOilyLevel(1))),3) preference(1,less(weight)) output(2,better,20) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,2) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(2,worse,6) output(2,worse,16) output(2,worse,29) output(11,worse,16) output(20,worse,29) output(6,worse,16) output(35,eq,59)
Optimization: 7 14
Answer: 20
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(1)))),4) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,3),1,for(neg(atom(hasOilyLevel(1)))),2) preference(1,(1,5),1,for(neg(atom(hasOiliness(1)))),1) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,6),1,for(atom(hasPriceLevel(1))),3) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,9),1,for(atom(hasOiliness(1))),4) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,13),1,for(atom(hasOftenSold(0))),6) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Progression : 0 [ 2;14] (Error: 6)
Answer: 21
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,3),1,for(neg(atom(hasOiliness(0)))),3) preference(1,(1,4),1,for(neg(atom(hasOiliness(1)))),10) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,13),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(2)))),6) preference(1,(1,6),1,for(atom(hasOftenSold(0))),4) preference(1,(1,7),1,for(atom(hasOiliness(1))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),6) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),10) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 13
Answer: 22
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,3),1,for(neg(atom(hasOiliness(0)))),3) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,13),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,4),1,for(atom(hasOiliness(0))),10) preference(1,(1,5),1,for(atom(hasOilyLevel(1))),6) preference(1,(1,6),1,for(atom(hasOiliness(1))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),10) preference(1,(1,14),1,for(atom(hasOftenSold(0))),4) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 12
Answer: 23
preference(1,(1,3),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),1) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(1)))),8) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(1)))),4) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),8) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasOilyLevel(2))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),4) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 11
Answer: 24
preference(1,(1,5),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(1)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,2),1,for(atom(hasPrice(0))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,9),1,for(atom(hasPriceLevel(1))),5) preference(1,(1,10),1,for(atom(hasOftenSold(0))),1) preference(1,(1,11),1,for(atom(hasOiliness(1))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,14),1,for(atom(hasPriceLevel(2))),6) preference(1,less(weight)) output(2,better,6) output(2,better,16) output(2,better,20) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(11,better,2) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 10
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.080 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 24+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 598.067s (Solving: 591.08s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 2370.874s
Threads      : 4        (Winner: 4)

Choices      : 10327551 (Domain: 3867)
Conflicts    : 2197065  (Analyzed: 2197063)
Restarts     : 2548     (Average: 862.27 Last: 102565)
Model-Level  : 776.3   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 2209417  (Deleted: 2063277)
  Binary     : 1304     (Ratio:   0.06%)
  Ternary    : 453      (Ratio:   0.02%)
  Conflict   : 2197063  (Average Length: 1392.1 Ratio:  99.44%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 12354    (Average Length:  121.8 Ratio:   0.56%) 
  Distributed: 4118     (Ratio:   0.19% Average LBD: 3.40) 
  Integrated : 12354    (Ratio: 300.00% Unit: 19 Average Jumps: 19.11)
Backjumps    : 2197063  (Average:  3.39 Max: 2328 Sum: 7439373)
  Executed   : 2197062  (Average:  3.39 Max: 2328 Sum: 7439332 Ratio: 100.00%)
  Bounded    : 1        (Average: 41.00 Max:  41 Sum:     41 Ratio:   0.00%)

Rules        : 2238036 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 626437  
Bodies       : 636459  
  Sum        : 270     
  Count      : 14      
Equivalences : 1873638  (Atom=Atom: 605917 Body=Body: 619268 Other: 648453)
Tight        : Yes
Variables    : 20979    (Eliminated:    0 Frozen: 14035)
Constraints  : 1652803  (Binary:  99.1% Ternary:   0.4% Other:   0.5%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(3)) ; 
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: not atom(hasOilyLevel(1))  ; 
  12 :: not atom(hasOftenSold(1))  ; 
  12 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasOftenSold(0)) ; 
  12 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: not atom(hasOilyLevel(1))  ; 
  12 :: atom(hasOftenSold(0)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: not atom(hasOftenSold(1))  ; 
  12 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(0)) ; 
  12 :: not atom(hasOilyLevel(1))  ; 
  6 :: atom(hasPrice(0)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasPrice(1)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  12 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: not atom(hasPriceLevel(0))  ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  6 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  2 :: not atom(hasOftenSold(1))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  6 :: not atom(hasPrice(0))  ; 
  12 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasOilyLevel(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasPriceLevel(0))  ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  6 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  2 :: not atom(hasOftenSold(1))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  6 :: not atom(hasPrice(0))  ; 
  12 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  7 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(2))  ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  2 :: not atom(hasOftenSold(1))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  11 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  6 :: not atom(hasPrice(0))  ; 
  12 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  6 :: not atom(hasPriceLevel(1))  ; 
  1 :: atom(hasMinorGrp(3)) ; 
  7 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(2))  ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  8 :: not atom(hasPriceLevel(0))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  10 :: not atom(hasOilyLevel(2))  ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOilyLevel(2)) ; 
  10 :: not atom(hasOiliness(0))  ; 
  6 :: not atom(hasOftenSold(1))  ; 
  7 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(2))  ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  12 :: not atom(hasOilyLevel(1))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasOiliness(0)) ; 
  10 :: not atom(hasOilyLevel(2))  ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOilyLevel(2)) ; 
  10 :: not atom(hasOiliness(0))  ; 
  6 :: not atom(hasOftenSold(1))  ; 
  2 :: not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(2))  ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  4 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasPriceLevel(2)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasOiliness(0)) ; 
  10 :: not atom(hasOilyLevel(2))  ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOilyLevel(2)) ; 
  10 :: not atom(hasOiliness(0))  ; 
  6 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(2))  ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasPriceLevel(2)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  10 :: not atom(hasOilyLevel(2))  ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOilyLevel(2)) ; 
  10 :: not atom(hasOiliness(0))  ; 
  6 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(2))  ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  2 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasPriceLevel(1)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPriceLevel(2)) ; 
  10 :: not atom(hasOilyLevel(2))  ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasOilyLevel(2)) ; 
  10 :: not atom(hasOiliness(0))  ; 
  6 :: not atom(hasOftenSold(1))  ; 
  12 :: not atom(hasPriceLevel(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(2))  ; 
  10 :: atom(hasPriceLevel(1)) ; 
  4 :: not atom(hasOiliness(1))  ; 
  11 :: not atom(hasPrice(1))  ; 
  3 :: atom(hasPrice(0)) ; 
  12 :: not atom(hasOilyLevel(1))  ; 
  4 :: atom(hasPrice(1)) ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  2 :: atom(hasOilyLevel(2)) ; 
  12 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasMinorGrp(3)) ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  12 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(2))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  11 :: not atom(hasPrice(1))  ; 
  1 :: atom(hasOilyLevel(2)) ; 
  12 :: not atom(hasOilyLevel(1))  ; 
  4 :: atom(hasPriceLevel(1)) ; 
  9 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  3 :: atom(hasOilyLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(2))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  11 :: not atom(hasPrice(1))  ; 
  9 :: atom(hasMinorGrp(1)) ; 
  12 :: not atom(hasOilyLevel(1))  ; 
  4 :: atom(hasPriceLevel(1)) ; 
  5 :: atom(hasPriceLevel(2)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasOilyLevel(2)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasPrice(0)) ; 
  3 :: atom(hasOilyLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasPriceLevel(1))  ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  2 :: not atom(hasOilyLevel(1))  ; 
  6 :: atom(hasMinorGrp(3)) ; 
  1 :: not atom(hasOiliness(1))  ; 
  3 :: atom(hasPriceLevel(1)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  4 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPriceLevel(2)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  4 :: not atom(hasMinorGrp(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(0))  ; 
  3 :: not atom(hasOiliness(0))  ; 
  10 :: not atom(hasOiliness(1))  ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  4 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasOilyLevel(2)) ; 
  10 :: atom(hasPriceLevel(2)) ; 
  2 :: not atom(hasPrice(1))  ; 
  6 :: not atom(hasMinorGrp(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(0))  ; 
  3 :: not atom(hasOiliness(0))  ; 
  10 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasOilyLevel(1)) ; 
  4 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  3 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasPriceLevel(2)) ; 
  2 :: not atom(hasPrice(1))  ; 
  4 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPriceLevel(1)) ; 
  6 :: not atom(hasPrice(1))  ; 
  11 :: atom(hasPriceLevel(2)) ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  1 :: not atom(hasOilyLevel(2))  ; 
  8 :: not atom(hasOilyLevel(1))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOilyLevel(2)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  11 :: not atom(hasMinorGrp(0))  ; 
  4 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  7 :: not atom(hasPriceLevel(1))  ; 
  5 :: atom(hasPriceLevel(1)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPriceLevel(2)) 
}.
