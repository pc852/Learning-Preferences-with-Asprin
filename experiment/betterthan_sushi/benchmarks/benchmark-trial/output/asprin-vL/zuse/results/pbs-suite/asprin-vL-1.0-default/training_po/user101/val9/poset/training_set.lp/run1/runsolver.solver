asprin_vL version 1.0
Reading from stdin
-:243:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:253:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:268:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:349:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:623:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:800:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:929:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1001:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1005:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1005:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1011:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1110:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1136:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1256:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1290:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1312:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:160:1-16: info: no atoms over signature occur in program:
  output/3

-:152:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:153:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:154:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(2,eq,7) output(2,eq,4) output(2,eq,3) output(2,eq,0) output(2,eq,1) output(2,eq,8) output(2,eq,5) output(2,eq,6) output(7,eq,4) output(7,eq,3) output(7,eq,0) output(7,eq,1) output(7,eq,8) output(7,eq,5) output(7,eq,6) output(4,eq,3) output(4,eq,0) output(4,eq,1) output(4,eq,8) output(4,eq,5) output(4,eq,6) output(3,eq,0) output(3,eq,1) output(3,eq,8) output(3,eq,5) output(3,eq,6) output(0,eq,1) output(0,eq,8) output(0,eq,5) output(0,eq,6) output(1,eq,8) output(1,eq,5) output(1,eq,6) output(8,eq,5) output(8,eq,6) output(5,eq,6)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isUnique(1))),()) preference(1,poset) output(4,better,0) output(4,better,1) output(4,better,5) output(2,better,7) output(2,better,0) output(2,better,1) output(2,better,5) output(8,better,5) output(3,better,0) output(3,better,1) output(3,better,5) output(7,worse,4) output(2,worse,6) output(7,worse,6) output(4,worse,6) output(3,worse,6) output(0,worse,6) output(1,worse,6) output(8,worse,6) output(5,worse,6) output(7,worse,8) output(0,worse,8) output(7,worse,3) output(1,worse,8) output(2,eq,4) output(2,eq,3) output(2,eq,8) output(7,eq,0) output(7,eq,1) output(7,eq,5) output(4,eq,3) output(4,eq,8) output(3,eq,8) output(0,eq,1) output(0,eq,5) output(1,eq,5)
Optimization: 25 1
Answer: 3
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,1) output(4,better,8) output(4,better,5) output(4,better,6) output(2,better,7) output(2,better,0) output(2,better,1) output(2,better,5) output(8,better,5) output(3,better,0) output(3,better,1) output(3,better,5) output(2,worse,4) output(7,worse,4) output(7,worse,6) output(0,worse,6) output(1,worse,6) output(5,worse,6) output(7,worse,8) output(0,worse,8) output(7,worse,3) output(1,worse,8) output(2,eq,3) output(2,eq,8) output(2,eq,6) output(7,eq,0) output(7,eq,1) output(7,eq,5) output(3,eq,8) output(3,eq,6) output(0,eq,1) output(0,eq,5) output(1,eq,5) output(8,eq,6)
Optimization: 22 1
Answer: 4
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(4,better,0) output(4,better,1) output(4,better,5) output(2,better,7) output(2,better,4) output(2,better,3) output(2,better,0) output(2,better,1) output(2,better,5) output(2,better,6) output(1,better,5) output(8,better,5) output(8,better,6) output(3,better,0) output(3,better,1) output(3,better,5) output(7,worse,4) output(7,worse,6) output(0,worse,6) output(1,worse,6) output(5,worse,6) output(7,worse,1) output(7,worse,8) output(4,worse,8) output(3,worse,8) output(0,worse,1) output(0,worse,8) output(7,worse,3) output(1,worse,8) output(2,eq,8) output(7,eq,0) output(7,eq,5) output(4,eq,3) output(4,eq,6) output(3,eq,6) output(0,eq,5)
Optimization: 20 1
Answer: 5
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,1) output(4,better,8) output(4,better,5) output(4,better,6) output(2,better,7) output(2,better,0) output(2,better,1) output(2,better,5) output(8,better,5) output(3,better,0) output(3,better,1) output(7,better,0) output(7,better,1) output(7,better,5) output(3,better,5) output(2,worse,4) output(7,worse,4) output(7,worse,6) output(0,worse,6) output(1,worse,6) output(5,worse,6) output(7,worse,8) output(0,worse,8) output(7,worse,3) output(1,worse,8) output(2,eq,3) output(2,eq,8) output(2,eq,6) output(3,eq,8) output(3,eq,6) output(0,eq,1) output(0,eq,5) output(1,eq,5) output(8,eq,6)
Optimization: 19 1
Answer: 6
preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,5) output(4,better,6) output(2,better,7) output(2,better,4) output(2,better,3) output(2,better,0) output(2,better,5) output(2,better,6) output(1,better,5) output(1,better,6) output(8,better,5) output(8,better,6) output(7,better,3) output(7,better,0) output(7,better,5) output(7,better,6) output(7,worse,1) output(7,worse,8) output(4,worse,1) output(4,worse,8) output(3,worse,1) output(3,worse,8) output(0,worse,1) output(0,worse,8) output(2,eq,1) output(2,eq,8) output(7,eq,4) output(3,eq,0) output(3,eq,5) output(3,eq,6) output(0,eq,5) output(0,eq,6) output(1,eq,8) output(5,eq,6)
Optimization: 18 1
Answer: 7
preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,5) output(4,better,6) output(2,better,7) output(2,better,4) output(2,better,3) output(2,better,0) output(2,better,5) output(2,better,6) output(1,better,5) output(1,better,6) output(8,better,5) output(8,better,6) output(7,better,3) output(7,better,0) output(7,better,5) output(7,better,6) output(1,better,8) output(2,worse,1) output(7,worse,1) output(7,worse,8) output(4,worse,1) output(4,worse,8) output(3,worse,1) output(3,worse,8) output(0,worse,1) output(0,worse,8) output(2,eq,8) output(7,eq,4) output(3,eq,0) output(3,eq,5) output(3,eq,6) output(0,eq,5) output(0,eq,6) output(5,eq,6)
Optimization: 17 1
Answer: 8
preference(1,(1,7),1,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,1) output(4,better,8) output(4,better,5) output(4,better,6) output(2,better,3) output(2,better,0) output(2,better,5) output(2,better,6) output(1,better,5) output(1,better,6) output(8,better,5) output(8,better,6) output(7,better,3) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,5) output(7,better,6) output(2,worse,4) output(3,worse,1) output(3,worse,8) output(0,worse,1) output(0,worse,8) output(2,worse,7) output(2,eq,1) output(2,eq,8) output(7,eq,4) output(3,eq,0) output(3,eq,5) output(3,eq,6) output(0,eq,5) output(0,eq,6) output(1,eq,8) output(5,eq,6)
Optimization: 16 1
Answer: 9
preference(1,(1,1),1,for(atom(hasPrice(0))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isRaw(1))),()) preference(1,(1,5),1,for(atom(hasPrice(0))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,9),1,for(atom(isCreamy(1))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,11),1,for(atom(isCreamy(1))),()) preference(1,(1,12),1,for(atom(isCreamy(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isRaw(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,10),2,for(atom(isRaw(1))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,1) output(4,better,8) output(4,better,5) output(4,better,6) output(5,better,6) output(2,better,8) output(2,better,6) output(0,better,1) output(0,better,8) output(0,better,5) output(0,better,6) output(1,better,6) output(3,better,6) output(7,better,3) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,5) output(7,better,6) output(2,worse,4) output(2,worse,0) output(3,worse,0) output(2,worse,7) output(2,unc,3) output(2,unc,1) output(2,unc,5) output(7,unc,4) output(3,unc,1) output(3,unc,8) output(3,unc,5) output(1,unc,8) output(1,unc,5) output(8,unc,5) output(8,unc,6)
Optimization: 15 12
Answer: 10
preference(1,(1,1),1,for(atom(isRaw(1))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),1,for(atom(isCreamy(1))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(isCreamy(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,9),1,for(atom(isMaguro(1))),()) preference(1,(1,10),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(isShrimp(1))),()) preference(1,(1,12),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(hasPrice(0))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,9),2,for(atom(isRaw(0))),()) preference(1,(1,10),2,for(atom(isRaw(0))),()) preference(1,(1,11),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,1) output(4,better,8) output(4,better,5) output(4,better,6) output(5,better,6) output(2,better,3) output(2,better,0) output(2,better,5) output(2,better,6) output(0,better,5) output(0,better,6) output(1,better,5) output(1,better,6) output(3,better,6) output(7,better,3) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,5) output(7,better,6) output(3,worse,0) output(3,worse,1) output(0,worse,1) output(2,unc,7) output(2,unc,4) output(2,unc,1) output(2,unc,8) output(7,unc,4) output(3,unc,8) output(3,unc,5) output(0,unc,8) output(1,unc,8) output(8,unc,5) output(8,unc,6)
Optimization: 14 12
Answer: 11
preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),1,for(atom(isShrimp(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,9),1,for(atom(isMaguro(1))),()) preference(1,(1,10),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(isShrimp(1))),()) preference(1,(1,12),1,for(atom(isCreamy(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),2,for(atom(isRaw(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,9),2,for(atom(isRaw(1))),()) preference(1,(1,10),2,for(atom(hasPrice(1))),()) preference(1,(1,11),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,1) output(4,better,8) output(4,better,5) output(4,better,6) output(2,better,3) output(2,better,0) output(2,better,5) output(2,better,6) output(0,better,5) output(0,better,6) output(1,better,5) output(1,better,6) output(7,better,3) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,5) output(7,better,6) output(1,better,8) output(7,better,4) output(3,better,5) output(2,worse,4) output(3,worse,0) output(3,worse,1) output(0,worse,1) output(2,worse,7) output(2,unc,1) output(2,unc,8) output(3,unc,8) output(3,unc,6) output(0,unc,8) output(8,unc,5) output(8,unc,6) output(5,unc,6)
Optimization: 13 12
Answer: 12
preference(1,(1,1),1,for(atom(isShrimp(1))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),1,for(atom(isCreamy(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,9),1,for(atom(isMaguro(1))),()) preference(1,(1,10),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(isShrimp(1))),()) preference(1,(1,12),1,for(atom(isCreamy(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isRaw(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,9),2,for(atom(isRaw(1))),()) preference(1,(1,10),2,for(atom(hasPrice(1))),()) preference(1,(1,11),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,1) output(4,better,8) output(4,better,5) output(4,better,6) output(5,better,6) output(2,better,3) output(2,better,0) output(2,better,5) output(2,better,6) output(0,better,5) output(0,better,6) output(1,better,5) output(1,better,6) output(3,better,6) output(7,better,3) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,5) output(7,better,6) output(1,better,8) output(7,better,4) output(3,better,5) output(2,worse,4) output(3,worse,0) output(3,worse,1) output(0,worse,1) output(2,worse,7) output(2,unc,1) output(2,unc,8) output(3,unc,8) output(0,unc,8) output(8,unc,5) output(8,unc,6)
Optimization: 11 12
Answer: 13
preference(1,(1,1),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),1,for(atom(isShrimp(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,9),1,for(atom(isMaguro(1))),()) preference(1,(1,10),1,for(atom(isSweet(1))),()) preference(1,(1,11),1,for(atom(isShrimp(1))),()) preference(1,(1,12),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(isRaw(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,9),2,for(atom(isRaw(1))),()) preference(1,(1,10),2,for(atom(hasPrice(1))),()) preference(1,(1,11),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(4,better,3) output(4,better,0) output(4,better,1) output(4,better,8) output(4,better,5) output(4,better,6) output(5,better,6) output(2,better,3) output(2,better,0) output(2,better,5) output(2,better,6) output(0,better,5) output(0,better,6) output(1,better,5) output(1,better,6) output(8,better,5) output(8,better,6) output(3,better,6) output(7,better,3) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,5) output(7,better,6) output(1,better,8) output(3,better,5) output(2,worse,4) output(7,worse,4) output(3,worse,0) output(2,worse,1) output(2,worse,8) output(3,worse,1) output(3,worse,8) output(0,worse,1) output(0,worse,8) output(2,worse,7)
Optimization: 10 12
Answer: 14
preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,9),1,for(atom(isCreamy(1))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,11),1,for(atom(isRaw(1))),()) preference(1,(1,12),1,for(atom(isRaw(0))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isRaw(0))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,9),2,for(atom(hasPrice(1))),()) preference(1,(1,10),2,for(atom(isRaw(1))),()) preference(1,(1,11),2,for(atom(hasPrice(1))),()) preference(1,(1,12),2,for(atom(isRaw(1))),()) preference(1,poset) output(4,better,0) output(4,better,1) output(4,better,8) output(4,better,6) output(5,better,6) output(2,better,7) output(2,better,4) output(2,better,3) output(2,better,0) output(2,better,1) output(2,better,8) output(2,better,5) output(2,better,6) output(0,better,1) output(0,better,8) output(0,better,6) output(1,better,6) output(8,better,6) output(3,better,0) output(3,better,1) output(3,better,8) output(3,better,6) output(7,better,0) output(7,better,1) output(7,better,8) output(7,better,6) output(1,better,8) output(7,worse,4) output(3,worse,5) output(0,worse,5) output(1,worse,5) output(8,worse,5) output(7,unc,3) output(7,unc,5) output(4,unc,3) output(4,unc,5)
Optimization: 9 10
Answer: 15
preference(1,(1,1),1,for(atom(hasPrice(0))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,10),1,for(atom(isSweet(1))),()) preference(1,(1,11),1,for(atom(isRaw(0))),()) preference(1,(1,12),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),2,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isRaw(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,(1,9),2,for(atom(hasPrice(1))),()) preference(1,(1,10),2,for(atom(isUrchin(1))),()) preference(1,(1,11),2,for(atom(isFattyFish(1))),()) preference(1,(1,12),2,for(atom(isRaw(0))),()) preference(1,poset) output(4,better,3) output(4,better,1) output(4,better,8) output(4,better,5) output(4,better,6) output(5,better,6) output(2,better,7) output(2,better,4) output(2,better,3) output(2,better,1) output(2,better,8) output(2,better,5) output(2,better,6) output(0,better,1) output(0,better,8) output(0,better,5) output(0,better,6) output(1,better,6) output(3,better,1) output(3,better,8) output(3,better,6) output(7,better,3) output(7,better,1) output(7,better,8) output(7,better,5) output(7,better,6) output(1,better,8) output(7,better,4) output(3,worse,5) output(1,worse,5) output(8,worse,5) output(8,worse,6) output(3,worse,0) output(2,unc,0) output(7,unc,0) output(4,unc,0)
Optimization: 8 12
SATISFIABLE

Models       : 15+
  Optimum    : unknown
Optimization : 8 12
Calls        : 1
Time         : 762.297s (Solving: 757.41s 1st Model: 0.96s Unsat: 0.00s)
CPU Time     : 3033.486s
Threads      : 4        (Winner: 0)

Choices      : 8147518  (Domain: 6298)
Conflicts    : 340837   (Analyzed: 340837)
Restarts     : 405      (Average: 841.57 Last: 15349)
Model-Level  : 26908.3 
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 25547513 (Deleted: 25309124)
  Binary     : 6140     (Ratio:   0.02%)
  Ternary    : 88413    (Ratio:   0.35%)
  Conflict   : 340837   (Average Length:  834.0 Ratio:   1.33%) 
  Loop       : 25095229 (Average Length:  165.3 Ratio:  98.23%) 
  Other      : 111447   (Average Length:    3.6 Ratio:   0.44%) 
  Distributed: 37174    (Ratio:   0.15% Average LBD: 2.80) 
  Integrated : 111519   (Ratio: 299.99% Unit: 268 Average Jumps: 1597.12)
Backjumps    : 340837   (Average: 20.39 Max: 212988 Sum: 6948556)
  Executed   : 340808   (Average: 20.39 Max: 212988 Sum: 6948467 Ratio: 100.00%)
  Bounded    : 29       (Average:  3.07 Max:  38 Sum:     89 Ratio:   0.00%)

Rules        : 1111001 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 24251   
Bodies       : 820605  
  Count      : 48      
Equivalences : 27457    (Atom=Atom: 4617 Body=Body: 6601 Other: 16239)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 774656 Gammas: 0)
Variables    : 785761   (Eliminated:    0 Frozen: 777373)
Constraints  : 4605387  (Binary:  82.5% Ternary:   3.6% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(0)) >> atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isCreamy(1)) >> atom(isShrimp(1)) ; 
  atom(isRaw(1)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(0)) >> atom(isRaw(0)) ; 
  atom(isCreamy(1)) >> atom(isRaw(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isRaw(1)) ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasMinorGrp(1)) >> atom(isRaw(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> atom(hasPrice(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isShrimp(1)) ; 
  atom(isCreamy(1)) >> atom(isFattyFish(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(1)) >> atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(0)) ; 
  atom(hasPrice(0)) >> atom(isRaw(0)) ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(2)) >> atom(isMaguro(1)) ; 
  atom(isShrimp(1)) >> atom(hasPrice(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(0)) >> atom(isRaw(1)) ; 
  atom(isCreamy(1)) >> atom(isFattyFish(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isShrimp(1)) ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(1)) >> atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(1)) ; 
  atom(hasPrice(0)) >> atom(hasPrice(1)) ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isShrimp(1)) >> atom(isMaguro(1)) ; 
  atom(isShrimp(1)) >> atom(hasPrice(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasPrice(0)) >> atom(isRaw(1)) ; 
  atom(isCreamy(1)) >> atom(isFattyFish(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isShrimp(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasMinorGrp(1)) >> atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(1)) ; 
  atom(hasPrice(0)) >> atom(hasPrice(1)) ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(1)) >> atom(isRaw(1)) ; 
  atom(isShrimp(1)) >> atom(hasPrice(1)) ; 
  atom(isUrchin(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isCreamy(1)) >> atom(isFattyFish(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isShrimp(1)) ; 
  atom(isShrimp(1)) >> atom(isMaguro(1)) ; 
  atom(isUrchin(1)) >> atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(1)) ; 
  atom(isSweet(1)) >> atom(hasPrice(1)) ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isChewy(1)) >> atom(isUrchin(1)) ; 
  atom(isUrchin(1)) >> atom(isRaw(0)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isCreamy(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(1)) ; 
  atom(hasMinorGrp(1)) >> atom(isRaw(1)) ; 
  atom(isRaw(1)) >> atom(hasPrice(1)) ; 
  atom(isRaw(0)) >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(0)) >> atom(hasMinorGrp(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(hasPrice(1)) >> atom(isRaw(0)) ; 
  atom(hasMinorGrp(1)) >> atom(isSweet(1)) ; 
  atom(isShrimp(1)) >> atom(isFattyFish(1)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isMaguro(1)) >> atom(isCreamy(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isSweet(1)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPrice(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(isRaw(0)) >> atom(isFattyFish(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(0)) 
}.
Time limit reached
