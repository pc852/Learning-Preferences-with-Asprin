asprin_vL version 1.0
Reading from stdin
-:243:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:253:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:268:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:349:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:623:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:800:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:929:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1001:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1005:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1005:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1011:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1110:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1136:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1256:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1290:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1312:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:160:1-16: info: no atoms over signature occur in program:
  output/3

-:152:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:153:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:154:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(2,eq,7) output(2,eq,1) output(2,eq,5) output(2,eq,4) output(2,eq,8) output(2,eq,3) output(2,eq,9) output(2,eq,0) output(7,eq,1) output(7,eq,5) output(7,eq,4) output(7,eq,8) output(7,eq,3) output(7,eq,9) output(7,eq,0) output(1,eq,5) output(1,eq,4) output(1,eq,8) output(1,eq,3) output(1,eq,9) output(1,eq,0) output(5,eq,4) output(5,eq,8) output(5,eq,3) output(5,eq,9) output(5,eq,0) output(4,eq,8) output(4,eq,3) output(4,eq,9) output(4,eq,0) output(8,eq,3) output(8,eq,9) output(8,eq,0) output(3,eq,9) output(3,eq,0) output(9,eq,0)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,poset) output(4,better,0) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,0) output(8,better,0) output(3,better,0) output(9,better,0) output(7,worse,4) output(1,worse,4) output(5,worse,4) output(2,worse,9) output(7,worse,9) output(7,worse,0) output(1,worse,9) output(1,worse,0) output(5,worse,9) output(5,worse,0) output(4,worse,9) output(8,worse,9) output(3,worse,9) output(7,worse,8) output(5,worse,8) output(7,worse,3) output(1,worse,3) output(1,worse,8) output(5,worse,3) output(2,eq,4) output(2,eq,8) output(2,eq,3) output(7,eq,1) output(7,eq,5) output(1,eq,5) output(4,eq,8) output(4,eq,3) output(8,eq,3)
Optimization: 28 1
Answer: 3
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,poset) output(4,better,8) output(4,better,3) output(4,better,9) output(4,better,0) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,0) output(8,better,0) output(3,better,0) output(9,better,0) output(2,worse,4) output(7,worse,4) output(1,worse,4) output(5,worse,4) output(7,worse,9) output(1,worse,9) output(5,worse,9) output(7,worse,8) output(5,worse,8) output(7,worse,3) output(1,worse,3) output(1,worse,8) output(5,worse,3) output(2,eq,8) output(2,eq,3) output(2,eq,9) output(7,eq,1) output(7,eq,5) output(7,eq,0) output(1,eq,5) output(1,eq,0) output(5,eq,0) output(8,eq,3) output(8,eq,9) output(3,eq,9)
Optimization: 25 1
Answer: 4
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(4,better,0) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,5) output(1,better,0) output(8,better,3) output(8,better,9) output(8,better,0) output(3,better,0) output(9,better,0) output(7,worse,4) output(1,worse,4) output(5,worse,4) output(7,worse,9) output(1,worse,9) output(5,worse,9) output(7,worse,1) output(7,worse,8) output(5,worse,8) output(4,worse,8) output(7,worse,3) output(1,worse,3) output(1,worse,8) output(5,worse,3) output(2,eq,8) output(7,eq,5) output(7,eq,0) output(5,eq,0) output(4,eq,3) output(4,eq,9) output(3,eq,9)
Optimization: 21 1
Answer: 5
preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,poset) output(4,better,3) output(4,better,9) output(4,better,0) output(2,better,7) output(2,better,5) output(2,better,4) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,5) output(1,better,4) output(1,better,3) output(1,better,9) output(1,better,0) output(8,better,3) output(8,better,9) output(8,better,0) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,0) output(5,worse,4) output(7,worse,1) output(7,worse,8) output(5,worse,8) output(4,worse,8) output(2,eq,1) output(2,eq,8) output(7,eq,4) output(1,eq,8) output(5,eq,3) output(5,eq,9) output(5,eq,0) output(3,eq,9) output(3,eq,0) output(9,eq,0)
Optimization: 15 1
Answer: 6
preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,3) output(4,better,9) output(4,better,0) output(2,better,7) output(2,better,5) output(2,better,4) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,5) output(1,better,4) output(1,better,3) output(1,better,9) output(1,better,0) output(8,better,3) output(8,better,9) output(8,better,0) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,0) output(1,better,8) output(5,worse,4) output(2,worse,1) output(7,worse,1) output(7,worse,8) output(5,worse,8) output(4,worse,8) output(2,eq,8) output(7,eq,4) output(5,eq,3) output(5,eq,9) output(5,eq,0) output(3,eq,9) output(3,eq,0) output(9,eq,0)
Optimization: 14 1
Answer: 7
preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isRaw(0))),()) preference(1,poset) output(4,better,3) output(4,better,9) output(5,better,4) output(5,better,3) output(5,better,9) output(2,better,7) output(2,better,5) output(2,better,4) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,5) output(1,better,4) output(1,better,3) output(1,better,9) output(1,better,0) output(8,better,3) output(8,better,9) output(8,better,0) output(7,better,3) output(7,better,9) output(1,better,8) output(7,better,4) output(4,worse,0) output(3,worse,0) output(2,worse,1) output(7,worse,1) output(7,worse,8) output(5,worse,8) output(4,worse,8) output(9,worse,0) output(2,eq,8) output(7,eq,5) output(7,eq,0) output(5,eq,0) output(3,eq,9)
Optimization: 13 2
Answer: 8
preference(1,(1,1),1,for(atom(isCreamy(1))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isUnique(1))),()) preference(1,(1,4),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isCreamy(1))),()) preference(1,(1,9),1,for(atom(isSweet(1))),()) preference(1,(1,10),1,for(atom(isSweet(1))),()) preference(1,(1,11),1,for(atom(isRoe(1))),()) preference(1,(1,12),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isRaw(0))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isRaw(0))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),2,for(atom(isRaw(0))),()) preference(1,(1,11),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,12),2,for(atom(isRaw(0))),()) preference(1,poset) output(4,better,8) output(4,better,3) output(4,better,9) output(4,better,0) output(5,better,8) output(5,better,3) output(5,better,0) output(2,better,5) output(2,better,8) output(2,better,3) output(2,better,0) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,0) output(7,better,1) output(7,better,5) output(7,better,8) output(7,better,3) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,better,4) output(2,worse,4) output(1,worse,4) output(5,worse,4) output(2,worse,9) output(5,worse,9) output(8,worse,9) output(8,worse,0) output(3,worse,9) output(3,worse,0) output(2,worse,1) output(2,worse,7) output(8,eq,3)
Optimization: 12 12
Answer: 9
preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,9),1,for(atom(isOctopus(1))),()) preference(1,(1,10),1,for(atom(isSweet(1))),()) preference(1,(1,11),1,for(atom(isRoe(1))),()) preference(1,(1,12),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(isRaw(0))),()) preference(1,(1,8),2,for(atom(isRaw(0))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),2,for(atom(isRaw(0))),()) preference(1,(1,11),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,12),2,for(atom(isRaw(0))),()) preference(1,poset) output(4,better,8) output(4,better,3) output(4,better,9) output(4,better,0) output(5,better,8) output(5,better,3) output(5,better,0) output(2,better,5) output(2,better,8) output(2,better,3) output(2,better,0) output(1,better,5) output(1,better,4) output(1,better,3) output(1,better,9) output(1,better,0) output(7,better,1) output(7,better,5) output(7,better,8) output(7,better,3) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,better,4) output(2,worse,4) output(5,worse,4) output(2,worse,9) output(5,worse,9) output(8,worse,9) output(8,worse,0) output(3,worse,9) output(3,worse,0) output(2,worse,1) output(2,worse,7) output(8,eq,3)
Optimization: 11 11
Answer: 10
preference(1,(1,1),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),1,for(atom(isSweet(1))),()) preference(1,(1,4),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(isChewy(1))),()) preference(1,(1,11),1,for(atom(isUnique(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isUnique(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,9),2,for(atom(isRaw(0))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(isOctopus(1))),()) preference(1,poset) output(4,better,3) output(4,better,9) output(4,better,0) output(5,better,3) output(5,better,9) output(5,better,0) output(2,better,7) output(2,better,5) output(2,better,4) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,5) output(1,better,4) output(1,better,3) output(1,better,9) output(1,better,0) output(8,better,3) output(8,better,9) output(8,better,0) output(3,better,9) output(3,better,0) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,worse,4) output(5,worse,4) output(7,worse,5) output(7,worse,1) output(7,worse,8) output(5,worse,8) output(4,worse,8) output(7,worse,3) output(2,unc,1) output(2,unc,8)
Optimization: 10 11
Answer: 11
preference(1,(1,1),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),1,for(atom(isSweet(1))),()) preference(1,(1,4),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(isChewy(1))),()) preference(1,(1,11),1,for(atom(isUnique(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isUnique(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,9),2,for(atom(isRaw(0))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(isOctopus(1))),()) preference(1,poset) output(4,better,3) output(4,better,9) output(4,better,0) output(5,better,3) output(5,better,9) output(5,better,0) output(2,better,7) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,5) output(1,better,4) output(1,better,3) output(1,better,9) output(1,better,0) output(8,better,3) output(8,better,9) output(8,better,0) output(3,better,9) output(3,better,0) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,worse,4) output(5,worse,4) output(7,worse,5) output(7,worse,1) output(7,worse,8) output(5,worse,8) output(4,worse,8) output(7,worse,3) output(2,unc,1)
Optimization: 9 11
Answer: 12
preference(1,(1,1),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),1,for(atom(isUnique(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,9),1,for(atom(isRoe(1))),()) preference(1,(1,10),1,for(atom(isChewy(1))),()) preference(1,(1,11),1,for(atom(isUnique(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isRaw(0))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(isChewy(1))),()) preference(1,(1,9),2,for(atom(isRaw(0))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(isOctopus(1))),()) preference(1,poset) output(4,better,3) output(4,better,9) output(4,better,0) output(5,better,3) output(5,better,9) output(5,better,0) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,5) output(1,better,4) output(1,better,3) output(1,better,9) output(1,better,0) output(8,better,3) output(8,better,9) output(8,better,0) output(3,better,9) output(3,better,0) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,worse,4) output(5,worse,4) output(7,worse,5) output(7,worse,1) output(7,worse,8) output(5,worse,8) output(4,worse,8) output(7,worse,3)
Optimization: 8 11
Answer: 13
preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(isOctopus(1))),()) preference(1,(1,11),1,for(atom(isFattyFish(1))),()) preference(1,(1,12),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isChewy(1))),()) preference(1,(1,9),2,for(atom(hasPrice(0))),()) preference(1,(1,10),2,for(atom(isFattyFish(1))),()) preference(1,(1,11),2,for(atom(isUnique(1))),()) preference(1,(1,12),2,for(atom(isCreamy(1))),()) preference(1,poset) output(4,better,8) output(4,better,3) output(4,better,9) output(4,better,0) output(5,better,8) output(5,better,3) output(5,better,9) output(5,better,0) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,3) output(1,better,9) output(1,better,0) output(3,better,0) output(7,better,1) output(7,better,5) output(7,better,8) output(7,better,3) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,better,4) output(1,worse,4) output(5,worse,4) output(1,unc,5) output(8,unc,3) output(8,unc,9) output(8,unc,0) output(3,unc,9)
Optimization: 7 12
Answer: 14
preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(isChewy(1))),()) preference(1,(1,11),1,for(atom(isFattyFish(1))),()) preference(1,(1,12),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,(1,9),2,for(atom(hasPrice(0))),()) preference(1,(1,10),2,for(atom(isFattyFish(1))),()) preference(1,(1,11),2,for(atom(isUnique(1))),()) preference(1,(1,12),2,for(atom(isCreamy(1))),()) preference(1,poset) output(4,better,8) output(4,better,3) output(4,better,9) output(4,better,0) output(5,better,8) output(5,better,3) output(5,better,9) output(5,better,0) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,3) output(1,better,9) output(1,better,0) output(3,better,9) output(3,better,0) output(7,better,1) output(7,better,5) output(7,better,8) output(7,better,3) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,better,4) output(1,worse,4) output(5,worse,4) output(1,worse,5) output(8,unc,3) output(8,unc,9) output(8,unc,0)
Optimization: 6 12
Answer: 15
preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),1,for(atom(hasPrice(0))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(isUnique(1))),()) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,12),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(isSweet(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,10),2,for(atom(isCreamy(1))),()) preference(1,(1,11),2,for(atom(isChewy(1))),()) preference(1,(1,12),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,8) output(4,better,3) output(4,better,9) output(4,better,0) output(5,better,3) output(5,better,0) output(2,better,7) output(2,better,1) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,9) output(2,better,0) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,0) output(8,better,3) output(8,better,9) output(8,better,0) output(3,better,0) output(7,better,1) output(7,better,5) output(7,better,8) output(7,better,3) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,better,4) output(1,worse,4) output(5,worse,4) output(5,worse,8) output(5,unc,9) output(3,unc,9)
Optimization: 5 12
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.034 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 15+
  Optimum    : unknown
Optimization : 5 12
Calls        : 1
Time         : 1198.070s (Solving: 1192.53s 1st Model: 0.97s Unsat: 0.00s)
CPU Time     : 4774.707s
Threads      : 4        (Winner: 4)

Choices      : 9014616  (Domain: 6535)
Conflicts    : 450425   (Analyzed: 450425)
Restarts     : 464      (Average: 970.74 Last: 19878)
Model-Level  : 8392.2  
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 38677373 (Deleted: 38435142)
  Binary     : 8566     (Ratio:   0.02%)
  Ternary    : 120104   (Ratio:   0.31%)
  Conflict   : 450425   (Average Length: 1187.8 Ratio:   1.16%) 
  Loop       : 38063617 (Average Length:  192.1 Ratio:  98.41%) 
  Other      : 163331   (Average Length:    3.6 Ratio:   0.42%) 
  Distributed: 54486    (Ratio:   0.14% Average LBD: 2.83) 
  Integrated : 163458   (Ratio: 300.00% Unit: 547 Average Jumps: 1046.15)
Backjumps    : 450425   (Average: 16.42 Max: 99767 Sum: 7395641)
  Executed   : 450369   (Average: 16.42 Max: 99767 Sum: 7395494 Ratio: 100.00%)
  Bounded    : 56       (Average:  2.62 Max:  38 Sum:    147 Ratio:   0.00%)

Rules        : 1110936 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 24202   
Bodies       : 820548  
  Count      : 48      
Equivalences : 27344    (Atom=Atom: 4599 Body=Body: 6575 Other: 16170)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 774656 Gammas: 0)
Variables    : 785729   (Eliminated:    0 Frozen: 777347)
Constraints  : 4605280  (Binary:  82.5% Ternary:   3.6% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isShrimp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isUrchin(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isCreamy(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) ; 
  atom(isUnique(1)) >> atom(isMaguro(1)) ; 
  atom(isRoe(1)) >> atom(isRaw(0)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(2)) ; 
  atom(isSweet(1)) >> atom(isUnique(1)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isCreamy(1)) >> atom(isRaw(0)) ; 
  atom(isSweet(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isSweet(1)) >> atom(isRaw(0)) ; 
  atom(isRoe(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isMaguro(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) ; 
  atom(isUnique(1)) >> atom(isMaguro(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(2)) ; 
  atom(isSweet(1)) >> atom(isUnique(1)) ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) ; 
  atom(isMaguro(1)) >> atom(isRaw(0)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isSweet(1)) >> atom(isRaw(0)) ; 
  atom(isRoe(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isRoe(1)) >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(isUrchin(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isMaguro(1)) ; 
  atom(isSweet(1)) >> atom(isUnique(1)) ; 
  atom(isUnique(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isFattyFish(1)) >> atom(isRoe(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isRaw(0)) ; 
  atom(isChewy(1)) >> atom(isSweet(1)) ; 
  atom(isUnique(1)) >> atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(isUrchin(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isMaguro(1)) ; 
  atom(isSweet(1)) >> atom(isUnique(1)) ; 
  atom(isUnique(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isRoe(1)) >> atom(isRaw(0)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isRaw(0)) ; 
  atom(isChewy(1)) >> atom(isSweet(1)) ; 
  atom(isUnique(1)) >> atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(isUrchin(1)) ; 
  atom(isUnique(1)) >> atom(isRaw(0)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isUnique(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isRoe(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isSweet(1)) >> atom(isUnique(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) ; 
  atom(isRoe(1)) >> atom(isRaw(0)) ; 
  atom(isChewy(1)) >> atom(isSweet(1)) ; 
  atom(isUnique(1)) >> atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isMaguro(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(0)) >> atom(isSweet(1)) ; 
  atom(isCreamy(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) ; 
  atom(isOctopus(1)) >> atom(isChewy(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPrice(0)) ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) ; 
  atom(isFattyFish(1)) >> atom(isUnique(1)) ; 
  atom(isMaguro(1)) >> atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isMaguro(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(0)) >> atom(isSweet(1)) ; 
  atom(isCreamy(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) ; 
  atom(isOctopus(1)) >> atom(isSweet(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPrice(0)) ; 
  atom(isChewy(1)) >> atom(isFattyFish(1)) ; 
  atom(isFattyFish(1)) >> atom(isUnique(1)) ; 
  atom(isMaguro(1)) >> atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isMaguro(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isOctopus(1)) >> atom(isSweet(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) ; 
  atom(isMaguro(1)) >> atom(isCreamy(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasPrice(0)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isUnique(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(0)) ; 
  atom(isUnique(1)) >> atom(isCreamy(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) 
}.
