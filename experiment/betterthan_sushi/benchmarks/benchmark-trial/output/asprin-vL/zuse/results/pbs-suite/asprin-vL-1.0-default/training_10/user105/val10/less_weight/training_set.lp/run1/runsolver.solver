asprin_vL version 1.0
Reading from stdin
-:314:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:324:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:339:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:420:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:681:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:694:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:871:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1000:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1072:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1076:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1076:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1082:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1181:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1207:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1327:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1361:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1383:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:231:1-16: info: no atoms over signature occur in program:
  output/3

-:223:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:224:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(4,eq,0) output(4,eq,3) output(4,eq,2) output(4,eq,8) output(4,eq,5) output(4,eq,1) output(4,eq,9) output(4,eq,6) output(4,eq,7) output(0,eq,3) output(0,eq,2) output(0,eq,8) output(0,eq,5) output(0,eq,1) output(0,eq,9) output(0,eq,6) output(0,eq,7) output(3,eq,2) output(3,eq,8) output(3,eq,5) output(3,eq,1) output(3,eq,9) output(3,eq,6) output(3,eq,7) output(2,eq,8) output(2,eq,5) output(2,eq,1) output(2,eq,9) output(2,eq,6) output(2,eq,7) output(8,eq,5) output(8,eq,1) output(8,eq,9) output(8,eq,6) output(8,eq,7) output(5,eq,1) output(5,eq,9) output(5,eq,6) output(5,eq,7) output(1,eq,9) output(1,eq,6) output(1,eq,7) output(9,eq,6) output(9,eq,7) output(6,eq,7)
Optimization: 45 0
Answer: 2
preference(1,(1,7),1,for(atom(hasPrice(1))),12) preference(1,less(weight)) output(2,better,8) output(2,better,6) output(1,better,6) output(3,better,8) output(3,better,6) output(5,better,6) output(0,better,8) output(0,better,6) output(9,better,6) output(8,worse,5) output(8,worse,1) output(8,worse,9) output(8,worse,7) output(6,worse,7) output(4,worse,0) output(4,worse,3) output(4,worse,2) output(4,worse,5) output(4,worse,1) output(4,worse,9) output(4,worse,7) output(4,eq,8) output(4,eq,6) output(0,eq,3) output(0,eq,2) output(0,eq,5) output(0,eq,1) output(0,eq,9) output(0,eq,7) output(3,eq,2) output(3,eq,5) output(3,eq,1) output(3,eq,9) output(3,eq,7) output(2,eq,5) output(2,eq,1) output(2,eq,9) output(2,eq,7) output(8,eq,6) output(5,eq,1) output(5,eq,9) output(5,eq,7) output(1,eq,9) output(1,eq,7) output(9,eq,7)
Optimization: 36 1
Answer: 3
preference(1,(1,6),1,for(atom(hasPrice(1))),12) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),12) preference(1,less(weight)) output(2,better,8) output(2,better,6) output(2,better,7) output(1,better,6) output(1,better,7) output(3,better,8) output(3,better,6) output(3,better,7) output(5,better,6) output(5,better,7) output(0,better,8) output(0,better,6) output(0,better,7) output(9,better,6) output(9,better,7) output(8,worse,5) output(8,worse,1) output(8,worse,9) output(4,worse,0) output(4,worse,3) output(4,worse,2) output(4,worse,5) output(4,worse,1) output(4,worse,9) output(4,eq,8) output(4,eq,6) output(4,eq,7) output(0,eq,3) output(0,eq,2) output(0,eq,5) output(0,eq,1) output(0,eq,9) output(3,eq,2) output(3,eq,5) output(3,eq,1) output(3,eq,9) output(2,eq,5) output(2,eq,1) output(2,eq,9) output(8,eq,6) output(8,eq,7) output(5,eq,1) output(5,eq,9) output(1,eq,9) output(6,eq,7)
Optimization: 30 2
Progression : [ 1;30] (Error: 29)
Answer: 4
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(3)))),2) preference(1,(1,5),1,for(neg(atom(hasOftenSold(0)))),2) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,10),1,for(neg(atom(hasOiliness(0)))),11) preference(1,(1,11),1,for(neg(atom(hasPriceLevel(2)))),2) preference(1,(1,14),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),2) preference(1,(1,2),1,for(atom(hasPriceLevel(0))),2) preference(1,(1,3),1,for(atom(hasOftenSold(1))),2) preference(1,(1,7),1,for(atom(hasPrice(0))),2) preference(1,(1,9),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,12),1,for(atom(hasOiliness(1))),2) preference(1,(1,13),1,for(atom(hasOilyLevel(2))),2) preference(1,less(weight)) output(2,better,5) output(2,better,7) output(8,better,5) output(8,better,1) output(8,better,9) output(8,better,7) output(1,better,7) output(9,better,7) output(6,better,7) output(4,better,0) output(4,better,3) output(4,better,2) output(4,better,5) output(4,better,1) output(4,better,9) output(4,better,7) output(2,worse,8) output(2,worse,6) output(1,worse,6) output(3,worse,2) output(3,worse,8) output(3,worse,1) output(3,worse,9) output(3,worse,6) output(5,worse,1) output(5,worse,9) output(5,worse,6) output(0,worse,2) output(0,worse,8) output(0,worse,1) output(0,worse,9) output(0,worse,6) output(9,worse,6) output(4,eq,8) output(4,eq,6) output(0,eq,3) output(0,eq,5) output(0,eq,7) output(3,eq,5) output(3,eq,7) output(2,eq,1) output(2,eq,9) output(8,eq,6) output(5,eq,7) output(1,eq,9)
Optimization: 29 14
Answer: 5
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(3)))),2) preference(1,(1,5),1,for(neg(atom(hasOftenSold(0)))),2) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,11),1,for(neg(atom(hasPriceLevel(2)))),2) preference(1,(1,14),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),2) preference(1,(1,2),1,for(atom(hasPriceLevel(0))),2) preference(1,(1,3),1,for(atom(hasOftenSold(1))),2) preference(1,(1,7),1,for(atom(hasPrice(0))),2) preference(1,(1,9),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,12),1,for(atom(hasOiliness(1))),2) preference(1,(1,13),1,for(atom(hasOilyLevel(2))),2) preference(1,less(weight)) output(2,better,5) output(2,better,7) output(8,better,5) output(8,better,1) output(8,better,9) output(8,better,7) output(1,better,7) output(0,better,3) output(0,better,5) output(0,better,7) output(9,better,7) output(6,better,7) output(4,better,0) output(4,better,3) output(4,better,2) output(4,better,5) output(4,better,1) output(4,better,9) output(4,better,7) output(2,worse,8) output(2,worse,6) output(1,worse,6) output(3,worse,2) output(3,worse,8) output(3,worse,1) output(3,worse,9) output(3,worse,6) output(5,worse,1) output(5,worse,9) output(5,worse,6) output(0,worse,8) output(0,worse,6) output(9,worse,6) output(4,eq,8) output(4,eq,6) output(0,eq,2) output(0,eq,1) output(0,eq,9) output(3,eq,5) output(3,eq,7) output(2,eq,1) output(2,eq,9) output(8,eq,6) output(5,eq,7) output(1,eq,9)
Optimization: 26 14
Answer: 6
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(3)))),2) preference(1,(1,5),1,for(neg(atom(hasOftenSold(0)))),2) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,10),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,11),1,for(neg(atom(hasPriceLevel(2)))),2) preference(1,(1,14),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),2) preference(1,(1,2),1,for(atom(hasPriceLevel(0))),2) preference(1,(1,3),1,for(atom(hasOftenSold(1))),2) preference(1,(1,7),1,for(atom(hasPrice(0))),2) preference(1,(1,9),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,12),1,for(atom(hasOiliness(1))),2) preference(1,(1,13),1,for(atom(hasOilyLevel(2))),2) preference(1,less(weight)) output(8,better,1) output(8,better,9) output(8,better,7) output(3,better,2) output(3,better,8) output(3,better,1) output(3,better,9) output(3,better,6) output(3,better,7) output(5,better,1) output(5,better,9) output(5,better,6) output(5,better,7) output(0,better,2) output(0,better,8) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(6,better,7) output(4,better,2) output(4,better,1) output(4,better,9) output(4,better,7) output(2,worse,8) output(2,worse,5) output(2,worse,6) output(8,worse,5) output(1,worse,6) output(9,worse,6) output(4,worse,0) output(4,worse,3) output(4,worse,5) output(4,eq,8) output(4,eq,6) output(0,eq,3) output(0,eq,5) output(3,eq,5) output(2,eq,1) output(2,eq,9) output(2,eq,7) output(8,eq,6) output(1,eq,9) output(1,eq,7) output(9,eq,7)
Optimization: 21 14
Answer: 7
preference(1,(1,5),1,for(neg(atom(hasPriceLevel(1)))),7) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),12) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(2)))),3) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(2)))),9) preference(1,(1,14),1,for(neg(atom(hasOilyLevel(1)))),11) preference(1,(1,1),1,for(atom(hasPrice(1))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,4),1,for(atom(hasOilyLevel(0))),10) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),4) preference(1,less(weight)) output(2,better,8) output(2,better,5) output(2,better,1) output(2,better,9) output(2,better,6) output(2,better,7) output(1,better,6) output(1,better,7) output(3,better,8) output(3,better,1) output(3,better,6) output(3,better,7) output(5,better,1) output(5,better,6) output(5,better,7) output(0,better,3) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(9,better,6) output(9,better,7) output(4,better,8) output(8,worse,5) output(8,worse,1) output(8,worse,9) output(8,worse,6) output(8,worse,7) output(1,worse,9) output(3,worse,2) output(3,worse,9) output(5,worse,9) output(0,worse,2) output(6,worse,7) output(4,worse,0) output(4,worse,3) output(4,worse,2) output(4,worse,5) output(4,worse,1) output(4,worse,9) output(4,worse,7) output(4,eq,6) output(3,eq,5)
Optimization: 20 11
Answer: 8
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),2) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,6),1,for(neg(atom(hasOiliness(1)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,9),1,for(neg(atom(hasOftenSold(0)))),9) preference(1,(1,11),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,4),1,for(atom(hasOilyLevel(0))),10) preference(1,(1,7),1,for(atom(hasPrice(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,13),1,for(atom(hasOiliness(0))),5) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),1) preference(1,less(weight)) output(2,better,8) output(2,better,5) output(2,better,1) output(2,better,9) output(2,better,7) output(8,better,5) output(8,better,9) output(8,better,7) output(1,better,9) output(1,better,7) output(0,better,3) output(0,better,2) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(6,better,7) output(4,better,3) output(4,better,2) output(4,better,8) output(4,better,5) output(4,better,1) output(4,better,9) output(4,better,7) output(2,worse,6) output(8,worse,6) output(1,worse,6) output(3,worse,2) output(3,worse,8) output(3,worse,1) output(3,worse,9) output(3,worse,6) output(3,worse,7) output(5,worse,1) output(5,worse,9) output(5,worse,6) output(5,worse,7) output(9,worse,6) output(9,worse,7) output(4,worse,0) output(4,eq,6) output(3,eq,5) output(8,eq,1)
Optimization: 19 14
Answer: 9
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(3)))),6) preference(1,(1,3),1,for(neg(atom(hasOftenSold(0)))),6) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(2)))),6) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,10),1,for(neg(atom(hasOiliness(1)))),10) preference(1,(1,11),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,12),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(2)))),6) preference(1,(1,14),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,1),1,for(atom(hasPriceLevel(0))),6) preference(1,(1,5),1,for(atom(hasPrice(0))),6) preference(1,(1,7),1,for(atom(hasOilyLevel(0))),6) preference(1,(1,8),1,for(atom(hasOftenSold(1))),6) preference(1,(1,9),1,for(atom(hasOilyLevel(2))),1) preference(1,less(weight)) output(2,better,8) output(2,better,1) output(2,better,6) output(2,better,7) output(8,better,7) output(1,better,7) output(3,better,2) output(3,better,8) output(3,better,1) output(3,better,9) output(3,better,6) output(3,better,7) output(5,better,1) output(5,better,9) output(5,better,6) output(5,better,7) output(0,better,3) output(0,better,2) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(9,better,6) output(9,better,7) output(6,better,7) output(4,better,7) output(2,worse,5) output(8,worse,5) output(8,worse,9) output(1,worse,9) output(4,worse,0) output(4,worse,3) output(4,worse,2) output(4,worse,5) output(4,worse,9) output(4,eq,8) output(4,eq,1) output(4,eq,6) output(3,eq,5) output(2,eq,9) output(8,eq,1) output(8,eq,6) output(1,eq,6)
Optimization: 17 14
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(3)))),6) preference(1,(1,3),1,for(neg(atom(hasOftenSold(0)))),6) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(2)))),6) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,11),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,12),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(2)))),6) preference(1,(1,14),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,1),1,for(atom(hasPriceLevel(0))),6) preference(1,(1,5),1,for(atom(hasPrice(0))),6) preference(1,(1,7),1,for(atom(hasOilyLevel(0))),6) preference(1,(1,8),1,for(atom(hasOftenSold(1))),6) preference(1,(1,9),1,for(atom(hasOilyLevel(2))),1) preference(1,less(weight)) output(2,better,8) output(2,better,5) output(2,better,1) output(2,better,9) output(2,better,6) output(2,better,7) output(8,better,5) output(8,better,9) output(8,better,6) output(8,better,7) output(1,better,9) output(1,better,6) output(1,better,7) output(3,better,7) output(5,better,7) output(0,better,3) output(0,better,2) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(9,better,6) output(9,better,7) output(6,better,7) output(4,better,3) output(4,better,5) output(4,better,7) output(3,worse,2) output(3,worse,8) output(3,worse,1) output(3,worse,9) output(3,worse,6) output(5,worse,1) output(5,worse,9) output(5,worse,6) output(4,worse,0) output(4,worse,2) output(4,worse,8) output(4,worse,1) output(4,worse,9) output(4,eq,6) output(3,eq,5) output(8,eq,1)
Optimization: 16 14
Answer: 11
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(3)))),4) preference(1,(1,3),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,4),1,for(neg(atom(hasOftenSold(0)))),12) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),12) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(2)))),11) preference(1,(1,10),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,12),1,for(neg(atom(hasPriceLevel(2)))),6) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,1),1,for(atom(hasPriceLevel(0))),5) preference(1,(1,5),1,for(atom(hasPrice(0))),4) preference(1,(1,6),1,for(atom(hasOftenSold(1))),8) preference(1,(1,8),1,for(atom(hasOilyLevel(0))),2) preference(1,(1,11),1,for(atom(hasPriceLevel(1))),12) preference(1,less(weight)) output(2,better,9) output(2,better,6) output(2,better,7) output(8,better,1) output(8,better,9) output(8,better,6) output(8,better,7) output(1,better,9) output(1,better,6) output(1,better,7) output(3,better,2) output(3,better,8) output(3,better,1) output(3,better,9) output(3,better,6) output(3,better,7) output(5,better,1) output(5,better,9) output(5,better,6) output(5,better,7) output(0,better,2) output(0,better,8) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(9,better,6) output(9,better,7) output(6,better,7) output(4,better,7) output(2,worse,8) output(2,worse,5) output(8,worse,5) output(4,worse,0) output(4,worse,3) output(4,worse,2) output(4,worse,8) output(4,worse,5) output(4,worse,1) output(4,worse,9) output(4,eq,6) output(0,eq,3) output(0,eq,5) output(3,eq,5) output(2,eq,1)
Optimization: 15 14
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),8) preference(1,(1,3),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,5),1,for(neg(atom(hasOilyLevel(1)))),7) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(0)))),3) preference(1,(1,11),1,for(neg(atom(hasOilyLevel(0)))),3) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(2)))),12) preference(1,(1,2),1,for(atom(hasPrice(1))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,7),1,for(atom(hasOftenSold(0))),10) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,12),1,for(atom(hasOiliness(0))),7) preference(1,(1,14),1,for(atom(hasOiliness(1))),6) preference(1,less(weight)) output(2,better,9) output(2,better,7) output(8,better,5) output(8,better,1) output(8,better,9) output(8,better,6) output(8,better,7) output(1,better,9) output(1,better,7) output(3,better,2) output(3,better,1) output(3,better,9) output(3,better,7) output(5,better,1) output(5,better,9) output(5,better,7) output(0,better,3) output(0,better,2) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(9,better,7) output(6,better,7) output(4,better,3) output(4,better,2) output(4,better,5) output(4,better,1) output(4,better,9) output(4,better,7) output(2,worse,8) output(2,worse,5) output(2,worse,6) output(1,worse,6) output(3,worse,8) output(3,worse,6) output(5,worse,6) output(9,worse,6) output(4,worse,0) output(4,worse,8) output(4,eq,6) output(3,eq,5) output(2,eq,1)
Optimization: 13 14
Answer: 13
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),8) preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,10),1,for(neg(atom(hasOilyLevel(0)))),8) preference(1,(1,12),1,for(neg(atom(hasPriceLevel(0)))),8) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(2)))),12) preference(1,(1,3),1,for(atom(hasPrice(1))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,14),1,for(atom(hasOftenSold(0))),4) preference(1,less(weight)) output(2,better,1) output(2,better,9) output(2,better,6) output(2,better,7) output(8,better,5) output(8,better,1) output(8,better,9) output(8,better,6) output(8,better,7) output(1,better,9) output(1,better,6) output(1,better,7) output(3,better,2) output(3,better,1) output(3,better,9) output(3,better,6) output(3,better,7) output(5,better,1) output(5,better,9) output(5,better,6) output(5,better,7) output(0,better,3) output(0,better,2) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(9,better,7) output(6,better,7) output(4,better,9) output(4,better,7) output(2,worse,8) output(2,worse,5) output(3,worse,8) output(9,worse,6) output(4,worse,0) output(4,worse,3) output(4,worse,2) output(4,worse,8) output(4,worse,5) output(4,worse,1) output(4,eq,6) output(3,eq,5)
Optimization: 12 14
Answer: 14
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(2)))),10) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(3)))),3) preference(1,(1,5),1,for(neg(atom(hasOftenSold(0)))),9) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),11) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(1))),7) preference(1,(1,3),1,for(atom(hasPriceLevel(1))),11) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,11),1,for(atom(hasPriceLevel(0))),1) preference(1,(1,13),1,for(atom(hasOilyLevel(0))),6) preference(1,less(weight)) output(2,better,8) output(2,better,1) output(2,better,9) output(2,better,6) output(2,better,7) output(8,better,9) output(8,better,6) output(8,better,7) output(1,better,9) output(1,better,6) output(1,better,7) output(3,better,2) output(3,better,8) output(3,better,1) output(3,better,9) output(3,better,6) output(3,better,7) output(5,better,1) output(5,better,9) output(5,better,6) output(5,better,7) output(0,better,3) output(0,better,2) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(9,better,6) output(9,better,7) output(6,better,7) output(4,better,7) output(2,worse,5) output(8,worse,5) output(4,worse,0) output(4,worse,3) output(4,worse,2) output(4,worse,8) output(4,worse,5) output(4,worse,1) output(4,worse,9) output(4,eq,6) output(3,eq,5) output(8,eq,1)
Optimization: 12 12
Progression : [ 2;12] (Error: 5)
Answer: 15
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(2)))),2) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(1)))),6) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(2)))),3) preference(1,(1,3),1,for(atom(hasOiliness(1))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),12) preference(1,(1,7),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,10),1,for(atom(hasOftenSold(0))),3) preference(1,(1,11),1,for(atom(hasPriceLevel(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(2,better,8) output(2,better,5) output(2,better,1) output(2,better,9) output(2,better,7) output(8,better,5) output(8,better,1) output(8,better,9) output(8,better,7) output(1,better,9) output(1,better,7) output(3,better,1) output(3,better,9) output(3,better,7) output(5,better,1) output(5,better,9) output(5,better,7) output(0,better,3) output(0,better,2) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,7) output(4,better,0) output(4,better,3) output(4,better,2) output(4,better,8) output(4,better,5) output(4,better,1) output(4,better,9) output(4,better,7) output(2,worse,6) output(8,worse,6) output(1,worse,6) output(3,worse,2) output(3,worse,8) output(3,worse,6) output(5,worse,6) output(0,worse,6) output(9,worse,6) output(4,eq,6) output(3,eq,5)
Optimization: 11 14
Progression : [ 3;11] (Error: 2.66667)
Answer: 16
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(3)))),6) preference(1,(1,6),1,for(neg(atom(hasOftenSold(0)))),7) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(1)))),9) preference(1,(1,10),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,12),1,for(neg(atom(hasOilyLevel(2)))),12) preference(1,(1,14),1,for(neg(atom(hasOilyLevel(1)))),9) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),10) preference(1,(1,4),1,for(atom(hasOftenSold(1))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,8),1,for(atom(hasPrice(0))),4) preference(1,(1,11),1,for(atom(hasOilyLevel(0))),5) preference(1,(1,13),1,for(atom(hasOiliness(0))),8) preference(1,less(weight)) output(2,better,8) output(2,better,5) output(2,better,1) output(2,better,9) output(2,better,6) output(2,better,7) output(8,better,5) output(8,better,1) output(8,better,9) output(8,better,6) output(8,better,7) output(1,better,9) output(1,better,6) output(1,better,7) output(3,better,1) output(3,better,9) output(3,better,6) output(3,better,7) output(5,better,1) output(5,better,9) output(5,better,6) output(5,better,7) output(0,better,3) output(0,better,2) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(9,better,6) output(9,better,7) output(6,better,7) output(4,better,7) output(3,worse,2) output(3,worse,8) output(4,worse,0) output(4,worse,3) output(4,worse,2) output(4,worse,8) output(4,worse,5) output(4,worse,1) output(4,worse,9) output(4,eq,6) output(3,eq,5)
Optimization: 11 13
Progression : [ 4;11] (Error: 1.75)
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasOftenSold(0)))),2) preference(1,(1,2),1,for(neg(atom(hasOiliness(1)))),11) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,5),1,for(neg(atom(hasOiliness(0)))),10) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(1)))),5) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(1)))),11) preference(1,(1,11),1,for(neg(atom(hasOilyLevel(2)))),6) preference(1,(1,13),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,7),1,for(atom(hasOiliness(0))),11) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(2,better,8) output(2,better,1) output(2,better,9) output(2,better,7) output(8,better,1) output(8,better,9) output(8,better,7) output(1,better,9) output(1,better,7) output(3,better,2) output(3,better,8) output(3,better,1) output(3,better,9) output(3,better,6) output(3,better,7) output(5,better,1) output(5,better,9) output(5,better,6) output(5,better,7) output(0,better,3) output(0,better,2) output(0,better,8) output(0,better,5) output(0,better,1) output(0,better,9) output(0,better,6) output(0,better,7) output(9,better,7) output(6,better,7) output(4,better,2) output(4,better,8) output(4,better,1) output(4,better,9) output(4,better,7) output(2,worse,5) output(2,worse,6) output(8,worse,5) output(8,worse,6) output(1,worse,6) output(9,worse,6) output(4,worse,0) output(4,worse,3) output(4,worse,5) output(4,eq,6) output(3,eq,5)
Optimization: 11 12
Progression : [ 5;11] (Error: 1.2)
Progression : [ 6;11] (Error: 0.833333)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.089 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 17+
  Optimum    : unknown
Optimization : 11 12
Bounds       : [6;11] [0;12]
Calls        : 1
Time         : 597.752s (Solving: 590.50s 1st Model: 0.06s Unsat: 0.00s)
CPU Time     : 2368.885s
Threads      : 4        (Winner: 4)

Choices      : 6393584  (Domain: 7088)
Conflicts    : 3970724  (Analyzed: 3970718)
Restarts     : 5189     (Average: 765.22 Last: 144678)
Model-Level  : 489.4   
Problems     : 11       (Average Length: 0.36 Splits: 0)
Lemmas       : 4005724  (Deleted: 3672148)
  Binary     : 6040     (Ratio:   0.15%)
  Ternary    : 710      (Ratio:   0.02%)
  Conflict   : 3970716  (Average Length:  307.9 Ratio:  99.13%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 35008    (Average Length:   89.7 Ratio:   0.87%) 
  Distributed: 11689    (Ratio:   0.29% Average LBD: 3.43) 
  Integrated : 35067    (Ratio: 300.00% Unit: 300 Average Jumps: 6.52)
Backjumps    : 3970718  (Average:  1.53 Max: 1476 Sum: 6060216)
  Executed   : 3970669  (Average:  1.53 Max: 1476 Sum: 6059819 Ratio:  99.99%)
  Bounded    : 49       (Average:  8.10 Max:  41 Sum:    397 Ratio:   0.01%)

Rules        : 2245596 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 633997  
Bodies       : 644187  
  Sum        : 270     
  Count      : 14      
Equivalences : 1896822  (Atom=Atom: 613477 Body=Body: 626996 Other: 656349)
Tight        : Yes
Variables    : 20979    (Eliminated:    0 Frozen: 14035)
Constraints  : 1652803  (Binary:  99.1% Ternary:   0.4% Other:   0.5%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPrice(1)) ; 
  12 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOilyLevel(0)) ; 
  2 :: atom(hasPriceLevel(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  2 :: not atom(hasMinorGrp(3))  ; 
  2 :: not atom(hasOftenSold(0))  ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  11 :: not atom(hasOiliness(0))  ; 
  2 :: not atom(hasPriceLevel(2))  ; 
  2 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOilyLevel(2)) ; 
  4 :: not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOilyLevel(0)) ; 
  2 :: atom(hasPriceLevel(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  2 :: not atom(hasMinorGrp(3))  ; 
  2 :: not atom(hasOftenSold(0))  ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasPriceLevel(2))  ; 
  2 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOilyLevel(2)) ; 
  4 :: not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOilyLevel(0)) ; 
  2 :: atom(hasPriceLevel(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  2 :: not atom(hasMinorGrp(3))  ; 
  2 :: not atom(hasOftenSold(0))  ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  5 :: not atom(hasOilyLevel(2))  ; 
  2 :: not atom(hasPriceLevel(2))  ; 
  2 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOilyLevel(2)) ; 
  4 :: not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(1)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOilyLevel(0)) ; 
  7 :: not atom(hasPriceLevel(1))  ; 
  9 :: not atom(hasPrice(1))  ; 
  12 :: not atom(hasPrice(0))  ; 
  3 :: not atom(hasOilyLevel(2))  ; 
  9 :: not atom(hasMinorGrp(2))  ; 
  4 :: atom(hasPriceLevel(2)) ; 
  11 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPriceLevel(1)) ; 
  2 :: not atom(hasOilyLevel(1))  ; 
  8 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOilyLevel(0)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  3 :: not atom(hasOiliness(1))  ; 
  1 :: atom(hasPrice(1)) ; 
  11 :: not atom(hasMinorGrp(2))  ; 
  9 :: not atom(hasOftenSold(0))  ; 
  7 :: atom(hasMinorGrp(1)) ; 
  12 :: not atom(hasPriceLevel(1))  ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  5 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPriceLevel(0)) ; 
  6 :: not atom(hasMinorGrp(3))  ; 
  6 :: not atom(hasOftenSold(0))  ; 
  6 :: not atom(hasMinorGrp(2))  ; 
  6 :: atom(hasPrice(0)) ; 
  6 :: not atom(hasPrice(1))  ; 
  6 :: atom(hasOilyLevel(0)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOilyLevel(2)) ; 
  10 :: not atom(hasOiliness(1))  ; 
  12 :: not atom(hasPriceLevel(1))  ; 
  5 :: not atom(hasOilyLevel(2))  ; 
  6 :: not atom(hasPriceLevel(2))  ; 
  1 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPriceLevel(0)) ; 
  6 :: not atom(hasMinorGrp(3))  ; 
  6 :: not atom(hasOftenSold(0))  ; 
  6 :: not atom(hasMinorGrp(2))  ; 
  6 :: atom(hasPrice(0)) ; 
  6 :: not atom(hasPrice(1))  ; 
  6 :: atom(hasOilyLevel(0)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOilyLevel(2)) ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  12 :: not atom(hasPriceLevel(1))  ; 
  5 :: not atom(hasOilyLevel(2))  ; 
  6 :: not atom(hasPriceLevel(2))  ; 
  1 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPriceLevel(0)) ; 
  4 :: not atom(hasMinorGrp(3))  ; 
  4 :: not atom(hasPrice(1))  ; 
  12 :: not atom(hasOftenSold(0))  ; 
  4 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  12 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasOilyLevel(0)) ; 
  11 :: not atom(hasOilyLevel(2))  ; 
  12 :: not atom(hasOiliness(1))  ; 
  12 :: atom(hasPriceLevel(1)) ; 
  6 :: not atom(hasPriceLevel(2))  ; 
  9 :: not atom(hasMinorGrp(0))  ; 
  7 :: not atom(hasMinorGrp(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: not atom(hasOilyLevel(2))  ; 
  6 :: atom(hasPrice(1)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  1 :: atom(hasMinorGrp(2)) ; 
  7 :: not atom(hasOilyLevel(1))  ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  10 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasPriceLevel(2)) ; 
  3 :: not atom(hasPriceLevel(0))  ; 
  2 :: atom(hasMinorGrp(1)) ; 
  3 :: not atom(hasOilyLevel(0))  ; 
  7 :: atom(hasOiliness(0)) ; 
  12 :: not atom(hasPriceLevel(2))  ; 
  6 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: not atom(hasOilyLevel(2))  ; 
  1 :: not atom(hasOilyLevel(1))  ; 
  5 :: atom(hasPrice(1)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  3 :: not atom(hasPriceLevel(1))  ; 
  5 :: not atom(hasPrice(0))  ; 
  7 :: atom(hasPriceLevel(2)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  8 :: not atom(hasOilyLevel(0))  ; 
  2 :: atom(hasMinorGrp(1)) ; 
  8 :: not atom(hasPriceLevel(0))  ; 
  12 :: not atom(hasPriceLevel(2))  ; 
  4 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(1)) ; 
  10 :: not atom(hasOilyLevel(2))  ; 
  11 :: atom(hasPriceLevel(1)) ; 
  3 :: not atom(hasMinorGrp(3))  ; 
  9 :: not atom(hasOftenSold(0))  ; 
  11 :: not atom(hasPrice(1))  ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  4 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasPriceLevel(0)) ; 
  6 :: atom(hasOilyLevel(0)) ; 
  2 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPriceLevel(2))  ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  10 :: atom(hasOiliness(1)) ; 
  12 :: atom(hasMinorGrp(0)) ; 
  6 :: not atom(hasPriceLevel(1))  ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  12 :: atom(hasOilyLevel(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  3 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasPriceLevel(1)) ; 
  3 :: not atom(hasMinorGrp(2))  ; 
  4 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(0))  ; 
  6 :: not atom(hasMinorGrp(3))  ; 
  10 :: atom(hasPriceLevel(0)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  7 :: not atom(hasOftenSold(0))  ; 
  4 :: atom(hasPrice(0)) ; 
  9 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasPrice(1))  ; 
  5 :: atom(hasOilyLevel(0)) ; 
  12 :: not atom(hasOilyLevel(2))  ; 
  8 :: atom(hasOiliness(0)) ; 
  9 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasOftenSold(0))  ; 
  11 :: not atom(hasOiliness(1))  ; 
  1 :: not atom(hasPriceLevel(1))  ; 
  10 :: not atom(hasOiliness(0))  ; 
  5 :: not atom(hasOilyLevel(1))  ; 
  11 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  11 :: not atom(hasMinorGrp(1))  ; 
  3 :: atom(hasMinorGrp(0)) ; 
  6 :: not atom(hasOilyLevel(2))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  4 :: not atom(hasPrice(1))  
}.
