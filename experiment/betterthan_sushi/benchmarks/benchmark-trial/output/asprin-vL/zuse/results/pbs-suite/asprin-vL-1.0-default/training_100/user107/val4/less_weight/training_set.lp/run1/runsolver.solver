asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(1,eq,3) output(1,eq,23) output(1,eq,5) output(1,eq,17) output(1,eq,78) output(1,eq,19) output(1,eq,8) output(1,eq,59) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(3,eq,78) output(3,eq,19) output(3,eq,8) output(3,eq,59) output(23,eq,5) output(23,eq,17) output(23,eq,78) output(23,eq,19) output(23,eq,8) output(23,eq,59) output(5,eq,17) output(5,eq,78) output(5,eq,19) output(5,eq,8) output(5,eq,59) output(17,eq,78) output(17,eq,19) output(17,eq,8) output(17,eq,59) output(78,eq,19) output(78,eq,8) output(78,eq,59) output(19,eq,8) output(19,eq,59) output(8,eq,59)
Optimization: 36 0
Answer: 2
preference(1,(1,2),1,for(neg(atom(hasPrice(0)))),4) preference(1,less(weight)) output(23,better,19) output(23,better,8) output(1,better,19) output(1,better,8) output(3,better,19) output(3,better,8) output(5,better,19) output(5,better,8) output(17,better,19) output(17,better,8) output(78,better,19) output(78,better,8) output(8,worse,59) output(19,worse,59) output(1,eq,3) output(1,eq,23) output(1,eq,5) output(1,eq,17) output(1,eq,78) output(1,eq,59) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(3,eq,78) output(3,eq,59) output(23,eq,5) output(23,eq,17) output(23,eq,78) output(23,eq,59) output(5,eq,17) output(5,eq,78) output(5,eq,59) output(17,eq,78) output(17,eq,59) output(78,eq,59) output(19,eq,8)
Optimization: 24 1
Answer: 3
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,less(weight)) output(23,better,19) output(23,better,8) output(23,better,59) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(1,worse,3) output(1,worse,23) output(1,worse,5) output(1,worse,17) output(1,worse,78) output(1,eq,19) output(1,eq,8) output(1,eq,59) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(3,eq,78) output(23,eq,5) output(23,eq,17) output(23,eq,78) output(5,eq,17) output(5,eq,78) output(17,eq,78) output(19,eq,8) output(19,eq,59) output(8,eq,59)
Optimization: 21 1
Answer: 4
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,1),1,for(atom(hasPrice(1))),5) preference(1,less(weight)) output(23,better,19) output(23,better,8) output(23,better,59) output(1,better,19) output(1,better,8) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(8,worse,59) output(19,worse,59) output(1,worse,3) output(1,worse,23) output(1,worse,5) output(1,worse,17) output(1,worse,78) output(1,eq,59) output(3,eq,23) output(3,eq,5) output(3,eq,17) output(3,eq,78) output(23,eq,5) output(23,eq,17) output(23,eq,78) output(5,eq,17) output(5,eq,78) output(17,eq,78) output(19,eq,8)
Optimization: 19 2
Answer: 5
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,9),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),5) preference(1,less(weight)) output(23,better,19) output(23,better,8) output(23,better,59) output(1,better,19) output(1,better,8) output(3,better,23) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(23,worse,5) output(23,worse,17) output(23,worse,78) output(8,worse,59) output(19,worse,59) output(1,worse,3) output(1,worse,23) output(1,worse,5) output(1,worse,17) output(1,worse,78) output(1,eq,59) output(3,eq,5) output(3,eq,17) output(3,eq,78) output(5,eq,17) output(5,eq,78) output(17,eq,78) output(19,eq,8)
Optimization: 18 4
Answer: 6
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(0)))),10) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(0)))),10) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,6),1,for(atom(hasPriceLevel(1))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),11) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),6) preference(1,less(weight)) output(23,better,5) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(8,worse,59) output(19,worse,59) output(1,worse,3) output(1,worse,23) output(1,worse,5) output(1,worse,17) output(1,worse,78) output(3,worse,23) output(3,worse,78) output(5,worse,78) output(17,worse,78) output(3,eq,5) output(3,eq,17) output(5,eq,17) output(19,eq,8)
Optimization: 15 10
Answer: 7
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),12) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(0)))),1) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),11) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,7),1,for(atom(hasPrice(1))),5) preference(1,(1,8),1,for(atom(hasOilyLevel(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),6) preference(1,less(weight)) output(23,better,5) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,19) output(3,better,8) output(5,better,19) output(5,better,8) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(23,worse,17) output(8,worse,59) output(19,worse,59) output(3,worse,23) output(3,worse,17) output(3,worse,59) output(5,worse,17) output(5,worse,59) output(78,worse,59) output(3,eq,5) output(3,eq,78) output(5,eq,78) output(19,eq,8)
Optimization: 13 10
Answer: 8
preference(1,(1,1),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(0)))),1) preference(1,(1,10),1,for(neg(atom(hasPrice(0)))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),11) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),6) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,7),1,for(atom(hasPrice(1))),5) preference(1,(1,8),1,for(atom(hasOilyLevel(1))),3) preference(1,less(weight)) output(23,better,5) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(23,worse,17) output(8,worse,59) output(19,worse,59) output(3,worse,23) output(3,worse,17) output(5,worse,17) output(3,eq,5) output(3,eq,78) output(5,eq,78) output(19,eq,8)
Optimization: 10 10
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(0)))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,7),1,for(atom(hasPrice(1))),5) preference(1,(1,8),1,for(atom(hasOilyLevel(1))),3) preference(1,(1,10),1,for(atom(hasOftenSold(0))),6) preference(1,less(weight)) output(23,better,5) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(23,worse,17) output(3,worse,23) output(3,worse,17) output(5,worse,17) output(3,eq,5) output(3,eq,78) output(5,eq,78) output(19,eq,8)
Optimization: 8 10
Answer: 10
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(0)))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,6),1,for(atom(hasOiliness(1))),10) preference(1,(1,7),1,for(atom(hasPrice(1))),5) preference(1,(1,8),1,for(atom(hasOilyLevel(2))),3) preference(1,(1,10),1,for(atom(hasOftenSold(0))),6) preference(1,less(weight)) output(23,better,5) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(3,worse,23) output(3,worse,17) output(5,worse,17) output(3,eq,5) output(3,eq,78) output(5,eq,78) output(19,eq,8)
Optimization: 7 10
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,7),1,for(atom(hasPrice(1))),5) preference(1,(1,8),1,for(atom(hasOilyLevel(1))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,10),1,for(atom(hasOftenSold(0))),6) preference(1,less(weight)) output(23,better,5) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(23,worse,17) output(3,worse,23) output(3,worse,17) output(5,worse,17) output(3,eq,5) output(19,eq,8)
Optimization: 6 10
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),10) preference(1,(1,7),1,for(atom(hasPrice(1))),5) preference(1,(1,8),1,for(atom(hasOilyLevel(1))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(23,better,5) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(3,worse,23) output(3,eq,5) output(3,eq,17) output(5,eq,17) output(19,eq,8)
Optimization: 5 10
Progression : [1;5] (Error: 4)
Progression : [2;5] (Error: 1.5)
Answer: 13
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),12) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),10) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),9) preference(1,(1,10),1,for(neg(atom(hasOiliness(1)))),3) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),6) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,8),1,for(atom(hasOftenSold(0))),12) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),6) preference(1,less(weight)) output(23,better,5) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(1,worse,23) output(3,worse,23) output(3,eq,5) output(19,eq,8)
Optimization: 4 10
Answer: 14
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),12) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),10) preference(1,(1,7),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,8),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,10),1,for(neg(atom(hasOilyLevel(2)))),9) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),6) preference(1,(1,2),1,for(atom(hasOftenSold(0))),11) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),8) preference(1,(1,5),1,for(atom(hasOilyLevel(2))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),6) preference(1,less(weight)) output(23,better,5) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(3,worse,23) output(3,eq,5) output(19,eq,8)
Optimization: 3 10
Progression : [3;3] (Error: 0)
Progression : 3 [ 1;10] (Error: 9)
Answer: 15
preference(1,(1,4),1,for(neg(atom(hasOilyLevel(2)))),6) preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),12) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,1),1,for(atom(hasPrice(1))),11) preference(1,(1,2),1,for(atom(hasOftenSold(0))),10) preference(1,(1,6),1,for(atom(hasPriceLevel(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),8) preference(1,less(weight)) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,23) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(23,worse,5) output(3,eq,5) output(19,eq,8)
Optimization: 3 9
Answer: 16
preference(1,(1,5),1,for(neg(atom(hasOiliness(0)))),2) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,10),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,8),1,for(atom(hasOilyLevel(1))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),4) preference(1,less(weight)) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,23) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(23,worse,5) output(3,eq,5) output(19,eq,8)
Optimization: 3 8
Progression : 3 [2;8] (Error: 3)
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),4) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,3),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,10),1,for(atom(hasPriceLevel(2))),11) preference(1,less(weight)) output(23,better,5) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(3,worse,23) output(3,eq,5) output(19,eq,8)
Optimization: 3 7
Answer: 18
preference(1,(1,5),1,for(neg(atom(hasOiliness(0)))),6) preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasPriceLevel(1))),2) preference(1,less(weight)) output(23,better,17) output(23,better,78) output(23,better,19) output(23,better,8) output(23,better,59) output(8,better,59) output(19,better,59) output(1,better,3) output(1,better,23) output(1,better,5) output(1,better,17) output(1,better,78) output(1,better,19) output(1,better,8) output(1,better,59) output(3,better,23) output(3,better,17) output(3,better,78) output(3,better,19) output(3,better,8) output(3,better,59) output(5,better,17) output(5,better,78) output(5,better,19) output(5,better,8) output(5,better,59) output(17,better,78) output(17,better,19) output(17,better,8) output(17,better,59) output(78,better,19) output(78,better,8) output(78,better,59) output(23,worse,5) output(3,eq,5) output(19,eq,8)
Optimization: 3 6
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.150 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 18+
  Optimum    : unknown
Optimization : 3 6
Bounds       : 3 [2;6]
Calls        : 1
Time         : 1198.218s (Solving: 1192.90s 1st Model: 0.04s Unsat: 0.00s)
CPU Time     : 4776.403s
Threads      : 4        (Winner: 4)

Choices      : 22379858 (Domain: 19169)
Conflicts    : 5047018  (Analyzed: 5047011)
Restarts     : 6515     (Average: 774.68 Last: 297349)
Model-Level  : 886.9   
Problems     : 12       (Average Length: 0.33 Splits: 0)
Lemmas       : 5059045  (Deleted: 4728775)
  Binary     : 1000     (Ratio:   0.02%)
  Ternary    : 749      (Ratio:   0.01%)
  Conflict   : 5047006  (Average Length:  957.6 Ratio:  99.76%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 12039    (Average Length:  117.6 Ratio:   0.24%) 
  Distributed: 4026     (Ratio:   0.08% Average LBD: 3.54) 
  Integrated : 12078    (Ratio: 300.00% Unit: 154 Average Jumps: 24.06)
Backjumps    : 5047011  (Average:  3.40 Max: 3234 Sum: 17178704)
  Executed   : 5046998  (Average:  3.40 Max: 3234 Sum: 17178419 Ratio: 100.00%)
  Bounded    : 13       (Average: 21.92 Max:  28 Sum:    285 Ratio:   0.00%)

Rules        : 1309035 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 377339  
Bodies       : 381692  
  Sum        : 216     
  Count      : 10      
Equivalences : 1121672  (Atom=Atom: 361059 Body=Body: 369988 Other: 390625)
Tight        : Yes
Variables    : 15523    (Eliminated:    0 Frozen: 10563)
Constraints  : 963061   (Binary:  98.8% Ternary:   0.5% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrice(1)) ; 
  4 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(2)) ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPriceLevel(2)) ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  3 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  10 :: not atom(hasPriceLevel(0))  ; 
  6 :: atom(hasPriceLevel(1)) ; 
  5 :: not atom(hasPrice(0))  ; 
  11 :: atom(hasMinorGrp(2)) ; 
  10 :: not atom(hasOilyLevel(0))  ; 
  6 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPriceLevel(2)) ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  12 :: not atom(hasPrice(0))  ; 
  11 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  5 :: atom(hasPrice(1)) ; 
  3 :: atom(hasOilyLevel(1)) ; 
  1 :: not atom(hasOilyLevel(0))  ; 
  6 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasOftenSold(1))  ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  11 :: atom(hasMinorGrp(2)) ; 
  6 :: atom(hasPriceLevel(2)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  5 :: atom(hasPrice(1)) ; 
  3 :: atom(hasOilyLevel(1)) ; 
  1 :: not atom(hasOilyLevel(0))  ; 
  10 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPrice(0))  ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  11 :: atom(hasPriceLevel(2)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  5 :: atom(hasPrice(1)) ; 
  3 :: atom(hasOilyLevel(1)) ; 
  1 :: not atom(hasPriceLevel(0))  ; 
  6 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPrice(0))  ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  11 :: atom(hasPriceLevel(2)) ; 
  10 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPrice(1)) ; 
  3 :: atom(hasOilyLevel(2)) ; 
  1 :: not atom(hasPriceLevel(0))  ; 
  6 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPrice(0))  ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  11 :: atom(hasPriceLevel(2)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  5 :: atom(hasPrice(1)) ; 
  3 :: atom(hasOilyLevel(1)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPrice(0))  ; 
  4 :: not atom(hasOilyLevel(1))  ; 
  1 :: atom(hasMinorGrp(3)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  11 :: atom(hasPriceLevel(2)) ; 
  10 :: atom(hasOilyLevel(2)) ; 
  5 :: atom(hasPrice(1)) ; 
  3 :: atom(hasOilyLevel(1)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  6 :: not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPriceLevel(1)) ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  12 :: not atom(hasPrice(0))  ; 
  8 :: atom(hasPriceLevel(2)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasMinorGrp(0))  ; 
  9 :: not atom(hasOilyLevel(2))  ; 
  12 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOiliness(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPriceLevel(1)) ; 
  11 :: atom(hasOftenSold(0)) ; 
  12 :: not atom(hasPrice(0))  ; 
  8 :: atom(hasPriceLevel(2)) ; 
  3 :: atom(hasOilyLevel(2)) ; 
  10 :: not atom(hasMinorGrp(0))  ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  1 :: not atom(hasOiliness(0))  ; 
  6 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(hasOilyLevel(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasPrice(1)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  6 :: not atom(hasOilyLevel(2))  ; 
  12 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPriceLevel(2)) ; 
  12 :: not atom(hasPrice(0))  ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasOiliness(0))  ; 
  5 :: not atom(hasOilyLevel(2))  ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  1 :: atom(hasOilyLevel(1)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  9 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasOilyLevel(2))  ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  12 :: not atom(hasOftenSold(1))  ; 
  1 :: atom(hasOilyLevel(1)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  11 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  6 :: not atom(hasOiliness(0))  ; 
  7 :: not atom(hasPrice(0))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasPriceLevel(1)) 
}.
