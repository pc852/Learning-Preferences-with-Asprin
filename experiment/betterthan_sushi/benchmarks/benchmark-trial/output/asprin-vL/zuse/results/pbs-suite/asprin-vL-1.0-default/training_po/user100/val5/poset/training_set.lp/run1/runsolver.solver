asprin_vL version 1.0
Reading from stdin
-:243:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:253:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:268:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:349:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:623:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:800:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:929:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1001:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1005:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1005:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1011:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1110:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1136:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1256:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1290:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1312:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:160:1-16: info: no atoms over signature occur in program:
  output/3

-:152:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:153:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:154:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(7,eq,2) output(7,eq,1) output(7,eq,8) output(7,eq,3) output(7,eq,6) output(7,eq,9) output(7,eq,0) output(7,eq,4) output(2,eq,1) output(2,eq,8) output(2,eq,3) output(2,eq,6) output(2,eq,9) output(2,eq,0) output(2,eq,4) output(1,eq,8) output(1,eq,3) output(1,eq,6) output(1,eq,9) output(1,eq,0) output(1,eq,4) output(8,eq,3) output(8,eq,6) output(8,eq,9) output(8,eq,0) output(8,eq,4) output(3,eq,6) output(3,eq,9) output(3,eq,0) output(3,eq,4) output(6,eq,9) output(6,eq,0) output(6,eq,4) output(9,eq,0) output(9,eq,4) output(0,eq,4)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,poset) output(2,better,1) output(2,better,0) output(6,better,0) output(8,better,0) output(3,better,0) output(9,better,0) output(7,worse,4) output(2,worse,4) output(1,worse,4) output(8,worse,4) output(3,worse,4) output(6,worse,4) output(9,worse,4) output(0,worse,4) output(7,worse,2) output(7,worse,6) output(1,worse,6) output(7,worse,9) output(1,worse,9) output(7,worse,8) output(7,worse,3) output(1,worse,3) output(1,worse,8) output(7,eq,1) output(7,eq,0) output(2,eq,8) output(2,eq,3) output(2,eq,6) output(2,eq,9) output(1,eq,0) output(8,eq,3) output(8,eq,6) output(8,eq,9) output(3,eq,6) output(3,eq,9) output(6,eq,9)
Optimization: 30 1
Answer: 3
preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(2,better,1) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(6,better,0) output(1,better,0) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,0) output(8,better,4) output(3,better,0) output(9,better,0) output(7,worse,4) output(1,worse,4) output(0,worse,4) output(7,worse,2) output(7,worse,6) output(1,worse,6) output(7,worse,9) output(1,worse,9) output(7,worse,1) output(7,worse,8) output(7,worse,3) output(1,worse,3) output(1,worse,8) output(7,eq,0) output(2,eq,8) output(3,eq,6) output(3,eq,9) output(3,eq,4) output(6,eq,9) output(6,eq,4) output(9,eq,4)
Optimization: 21 1
Answer: 4
preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,poset) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,0) output(8,better,4) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,0) output(3,worse,4) output(6,worse,4) output(9,worse,4) output(0,worse,4) output(7,worse,2) output(7,worse,1) output(7,worse,8) output(7,eq,4) output(2,eq,1) output(2,eq,8) output(1,eq,8) output(3,eq,6) output(3,eq,9) output(3,eq,0) output(6,eq,9) output(6,eq,0) output(9,eq,0)
Optimization: 17 1
Answer: 5
preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isRaw(0))),()) preference(1,poset) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(0,better,4) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,0) output(8,better,4) output(7,better,3) output(7,better,6) output(7,better,9) output(1,better,8) output(7,better,4) output(7,worse,2) output(3,worse,0) output(6,worse,0) output(7,worse,1) output(7,worse,8) output(2,worse,1) output(9,worse,0) output(7,eq,0) output(2,eq,8) output(3,eq,6) output(3,eq,9) output(3,eq,4) output(6,eq,9) output(6,eq,4) output(9,eq,4)
Optimization: 15 1
Answer: 6
preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(hasPrice(0))),()) preference(1,poset) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(6,better,4) output(9,better,4) output(0,better,4) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,0) output(8,better,4) output(3,better,4) output(1,better,8) output(7,better,4) output(7,worse,2) output(7,worse,1) output(7,worse,8) output(7,eq,3) output(7,eq,6) output(7,eq,9) output(7,eq,0) output(2,eq,1) output(3,eq,6) output(3,eq,9) output(3,eq,0) output(6,eq,9) output(6,eq,0) output(9,eq,0)
Optimization: 14 1
Answer: 7
preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(hasPrice(0))),()) preference(1,poset) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,4) output(6,better,4) output(9,better,4) output(0,better,4) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,4) output(3,better,4) output(7,better,3) output(7,better,6) output(7,better,9) output(1,better,8) output(7,better,4) output(3,worse,0) output(6,worse,0) output(7,worse,1) output(2,worse,1) output(9,worse,0) output(7,eq,0) output(3,eq,6) output(3,eq,9) output(6,eq,9) output(7,unc,2) output(7,unc,8) output(2,unc,0) output(8,unc,0)
Optimization: 13 2
Answer: 8
preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(hasPrice(0))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,9),1,for(atom(isChewy(1))),()) preference(1,(1,10),1,for(atom(isCreamy(1))),()) preference(1,(1,12),1,for(atom(isCreamy(1))),()) preference(1,(1,1),2,for(atom(hasPrice(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,9),2,for(atom(isUrchin(1))),()) preference(1,(1,10),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(2,better,1) output(2,better,8) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(6,better,4) output(9,better,4) output(0,better,4) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(3,better,6) output(3,better,9) output(3,better,0) output(3,better,4) output(7,better,1) output(7,better,8) output(7,better,6) output(7,better,9) output(7,better,0) output(1,better,8) output(7,better,4) output(8,worse,4) output(8,worse,6) output(8,worse,9) output(8,worse,0) output(2,worse,3) output(1,worse,3) output(8,worse,3) output(6,eq,9) output(6,eq,0) output(9,eq,0) output(7,unc,2) output(7,unc,3)
Optimization: 12 10
Answer: 9
preference(1,(1,1),1,for(atom(isCreamy(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(hasPrice(0))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,9),1,for(atom(isChewy(1))),()) preference(1,(1,10),1,for(atom(isCreamy(1))),()) preference(1,(1,12),1,for(atom(isCreamy(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,9),2,for(atom(isUrchin(1))),()) preference(1,(1,10),2,for(atom(isMaguro(1))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(2,better,1) output(2,better,8) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(6,better,4) output(9,better,4) output(0,better,4) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(3,better,6) output(3,better,9) output(3,better,0) output(3,better,4) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,6) output(7,better,9) output(7,better,0) output(1,better,8) output(7,better,4) output(8,worse,4) output(8,worse,6) output(8,worse,9) output(8,worse,0) output(2,worse,3) output(1,worse,3) output(8,worse,3) output(6,eq,9) output(6,eq,0) output(9,eq,0) output(7,unc,3)
Optimization: 11 10
Answer: 10
preference(1,(1,1),1,for(atom(isFattyFish(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isRaw(1))),()) preference(1,(1,4),1,for(atom(isCreamy(1))),()) preference(1,(1,5),1,for(atom(hasPrice(0))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,9),1,for(atom(isCreamy(1))),()) preference(1,(1,10),1,for(atom(isSweet(1))),()) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,10),2,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isChewy(1))),()) preference(1,poset) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(6,better,0) output(6,better,4) output(9,better,4) output(0,better,4) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(3,better,6) output(3,better,9) output(3,better,0) output(3,better,4) output(7,better,2) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,better,4) output(6,worse,9) output(7,unc,1) output(7,unc,8) output(2,unc,1) output(2,unc,8) output(8,unc,3) output(8,unc,6) output(8,unc,9) output(8,unc,0) output(8,unc,4)
Optimization: 10 11
Answer: 11
preference(1,(1,1),1,for(atom(isFattyFish(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isRaw(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,9),1,for(atom(hasPrice(0))),()) preference(1,(1,10),1,for(atom(isSweet(1))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,9),2,for(atom(isCreamy(1))),()) preference(1,(1,10),2,for(atom(isRaw(1))),()) preference(1,(1,11),2,for(atom(isSweet(1))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(6,better,0) output(6,better,4) output(9,better,4) output(0,better,4) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(3,better,0) output(3,better,4) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,better,4) output(8,worse,4) output(8,worse,6) output(3,worse,6) output(8,worse,9) output(8,worse,0) output(3,worse,9) output(2,worse,1) output(8,worse,3) output(6,unc,9)
Optimization: 9 11
Answer: 12
preference(1,(1,1),1,for(atom(isFattyFish(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isRaw(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,9),1,for(atom(hasPrice(0))),()) preference(1,(1,10),1,for(atom(isSweet(1))),()) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isSweet(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,9),2,for(atom(isCreamy(1))),()) preference(1,(1,10),2,for(atom(isRaw(1))),()) preference(1,(1,11),2,for(atom(isChewy(1))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(6,better,0) output(6,better,4) output(9,better,4) output(0,better,4) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(3,better,6) output(3,better,0) output(3,better,4) output(7,better,2) output(7,better,1) output(7,better,8) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,better,4) output(8,worse,4) output(8,worse,6) output(8,worse,9) output(8,worse,0) output(2,worse,1) output(8,worse,3) output(3,unc,9) output(6,unc,9)
Optimization: 8 12
Answer: 13
preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),1,for(atom(hasPrice(0))),()) preference(1,(1,9),1,for(atom(isUrchin(1))),()) preference(1,(1,10),1,for(atom(isChewy(1))),()) preference(1,(1,11),1,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(hasPrice(0))),()) preference(1,(1,8),2,for(atom(isCreamy(1))),()) preference(1,(1,9),2,for(atom(isRaw(0))),()) preference(1,(1,10),2,for(atom(isUrchin(1))),()) preference(1,(1,11),2,for(atom(isRaw(0))),()) preference(1,poset) output(2,better,1) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(6,better,4) output(9,better,4) output(0,better,4) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,0) output(8,better,4) output(3,better,6) output(3,better,9) output(3,better,0) output(3,better,4) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,0) output(1,better,8) output(7,better,4) output(7,worse,2) output(6,worse,0) output(7,worse,1) output(7,worse,8) output(9,worse,0) output(6,eq,9)
Optimization: 6 7
Answer: 14
preference(1,(1,2),1,for(atom(isSweet(1))),()) preference(1,(1,3),1,for(atom(hasPrice(0))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(hasPrice(0))),()) preference(1,(1,8),1,for(atom(isFattyFish(1))),()) preference(1,(1,9),1,for(atom(isFattyFish(1))),()) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,12),1,for(atom(isSweet(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,9),2,for(atom(isOctopus(1))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,(1,12),2,for(atom(isUnique(1))),()) preference(1,poset) output(2,better,1) output(2,better,8) output(2,better,3) output(2,better,6) output(2,better,9) output(2,better,0) output(2,better,4) output(6,better,9) output(6,better,0) output(6,better,4) output(9,better,4) output(0,better,4) output(1,better,3) output(1,better,6) output(1,better,9) output(1,better,0) output(1,better,4) output(8,better,3) output(8,better,6) output(8,better,9) output(8,better,0) output(8,better,4) output(3,better,0) output(3,better,4) output(7,better,3) output(7,better,6) output(7,better,9) output(7,better,0) output(9,better,0) output(1,better,8) output(7,better,4) output(7,worse,2) output(7,worse,1) output(7,worse,8) output(3,unc,6) output(3,unc,9)
Optimization: 5 10
SATISFIABLE

Models       : 14+
  Optimum    : unknown
Optimization : 5 10
Calls        : 1
Time         : 682.146s (Solving: 676.32s 1st Model: 1.06s Unsat: 0.00s)
CPU Time     : 2710.028s
Threads      : 4        (Winner: 0)

Choices      : 10416550 (Domain: 4269)
Conflicts    : 244426   (Analyzed: 244426)
Restarts     : 297      (Average: 822.98 Last: 15375)
Model-Level  : 2368.4  
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 23044750 (Deleted: 22862762)
  Binary     : 2943     (Ratio:   0.01%)
  Ternary    : 66302    (Ratio:   0.29%)
  Conflict   : 244426   (Average Length:  764.7 Ratio:   1.06%) 
  Loop       : 22719294 (Average Length:  184.7 Ratio:  98.59%) 
  Other      : 81030    (Average Length:    3.9 Ratio:   0.35%) 
  Distributed: 27036    (Ratio:   0.12% Average LBD: 2.86) 
  Integrated : 81108    (Ratio: 300.00% Unit: 278 Average Jumps: 1425.76)
Backjumps    : 244426   (Average: 37.84 Max: 144790 Sum: 9249359)
  Executed   : 244392   (Average: 37.84 Max: 144790 Sum: 9249111 Ratio: 100.00%)
  Bounded    : 34       (Average:  7.29 Max:  38 Sum:    248 Ratio:   0.00%)

Rules        : 1110838 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 24138   
Bodies       : 820480  
  Count      : 48      
Equivalences : 27172    (Atom=Atom: 4561 Body=Body: 6533 Other: 16078)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 774656 Gammas: 0)
Variables    : 785705   (Eliminated:    0 Frozen: 777323)
Constraints  : 4605172  (Binary:  82.5% Ternary:   3.6% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(0)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isChewy(1)) >> atom(hasPrice(1)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) ; 
  atom(hasPrice(0)) >> atom(isCreamy(1)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isCreamy(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isMaguro(1)) >> atom(hasPrice(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) ; 
  atom(hasPrice(0)) >> atom(isCreamy(1)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) ; 
  atom(isCreamy(1)) >> atom(isMaguro(1)) ; 
  atom(isCreamy(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isFattyFish(1)) >> atom(isShrimp(1)) ; 
  atom(isCreamy(1)) >> atom(isMaguro(1)) ; 
  atom(isRaw(1)) >> atom(isShrimp(1)) ; 
  atom(isCreamy(1)) >> atom(isSweet(1)) ; 
  atom(hasPrice(0)) >> atom(isCreamy(1)) ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isShrimp(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isSweet(1)) >> atom(isRaw(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isFattyFish(1)) >> atom(isShrimp(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isRaw(1)) >> atom(isShrimp(1)) ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isFattyFish(1)) ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) ; 
  atom(hasPrice(0)) >> atom(isCreamy(1)) ; 
  atom(isSweet(1)) >> atom(isRaw(1)) ; 
  atom(hasPrice(0)) >> atom(isSweet(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isFattyFish(1)) >> atom(isShrimp(1)) ; 
  atom(isCreamy(1)) >> atom(isSweet(1)) ; 
  atom(isRaw(1)) >> atom(isShrimp(1)) ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isFattyFish(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(0)) >> atom(isCreamy(1)) ; 
  atom(isSweet(1)) >> atom(isRaw(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isChewy(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(0)) >> atom(hasPrice(1)) ; 
  atom(isCreamy(1)) >> atom(isChewy(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(0)) ; 
  atom(hasPrice(0)) >> atom(isCreamy(1)) ; 
  atom(isUrchin(1)) >> atom(isRaw(0)) ; 
  atom(isChewy(1)) >> atom(isUrchin(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(0)) >> atom(isOctopus(1)) ; 
  atom(isOctopus(1)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isFattyFish(1)) ; 
  atom(hasPrice(0)) >> atom(hasMinorGrp(2)) ; 
  atom(isFattyFish(1)) >> atom(isUrchin(1)) ; 
  atom(isFattyFish(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(0)) ; 
  atom(isSweet(1)) >> atom(isUnique(1)) 
}.
Time limit reached
