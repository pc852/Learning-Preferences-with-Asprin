asprin_vL version 1.0
Reading from stdin
-:322:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:332:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:347:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:428:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:702:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:879:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1008:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1080:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1084:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1084:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1090:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1189:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1215:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1335:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1369:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1391:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:239:1-16: info: no atoms over signature occur in program:
  output/3

-:231:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:232:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:233:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(11,eq,2) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(2,eq,6) output(2,eq,16) output(2,eq,20) output(2,eq,29) output(2,eq,51) output(2,eq,35) output(2,eq,59) output(2,eq,9) output(6,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(20,eq,29) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 45 0
Answer: 2
preference(1,(1,8),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(6,better,51) output(16,better,51) output(29,better,51) output(29,better,35) output(29,better,59) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(35,worse,9) output(59,worse,9) output(51,worse,9) output(11,eq,2) output(11,eq,20) output(2,eq,20) output(6,eq,16) output(6,eq,29) output(6,eq,9) output(16,eq,29) output(16,eq,9) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(35,eq,59)
Optimization: 17 1
Answer: 3
preference(1,(1,4),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(6,better,29) output(6,better,51) output(16,better,29) output(16,better,51) output(29,better,51) output(29,better,59) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(35,better,59) output(6,worse,20) output(16,worse,20) output(29,worse,9) output(35,worse,9) output(59,worse,9) output(51,worse,35) output(51,worse,9) output(11,eq,2) output(11,eq,20) output(2,eq,20) output(6,eq,16) output(6,eq,9) output(16,eq,9) output(51,eq,59) output(29,unc,35)
Optimization: 15 2
Answer: 4
preference(1,(1,4),1,for(atom(hasOftenSold(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(0))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(11,better,2) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(35,worse,9) output(59,worse,9) output(2,worse,6) output(2,worse,16) output(51,worse,9) output(2,worse,20) output(11,eq,20) output(6,eq,16) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(35,eq,59)
Optimization: 14 2
Answer: 5
preference(1,(1,1),1,for(atom(hasOftenSold(1))),()) preference(1,(1,2),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(6,better,16) output(11,better,2) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(29,worse,9) output(35,worse,9) output(59,worse,9) output(11,worse,6) output(2,worse,6) output(51,worse,9) output(2,worse,20) output(11,worse,20) output(35,eq,59) output(2,unc,16) output(2,unc,9)
Optimization: 13 3
Answer: 6
preference(1,(1,1),1,for(atom(hasOftenSold(1))),()) preference(1,(1,2),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(6,better,16) output(11,better,2) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(6,worse,20) output(16,worse,20) output(29,worse,9) output(35,worse,9) output(59,worse,9) output(11,worse,6) output(2,worse,6) output(2,worse,16) output(51,worse,9) output(2,worse,20) output(11,worse,20) output(35,eq,59)
Optimization: 12 4
Answer: 7
preference(1,(1,1),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),1,for(atom(hasPrice(0))),()) preference(1,(1,6),1,for(atom(hasPriceLevel(0))),()) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,9),1,for(atom(hasOiliness(1))),()) preference(1,(1,10),1,for(atom(hasOftenSold(0))),()) preference(1,(1,11),1,for(atom(hasOftenSold(0))),()) preference(1,(1,12),1,for(atom(hasOilyLevel(2))),()) preference(1,(1,1),2,for(atom(hasPrice(0))),()) preference(1,(1,2),2,for(atom(hasOilyLevel(2))),()) preference(1,(1,3),2,for(atom(hasOiliness(1))),()) preference(1,(1,4),2,for(atom(hasOftenSold(0))),()) preference(1,(1,5),2,for(atom(hasPriceLevel(1))),()) preference(1,(1,6),2,for(atom(hasOftenSold(0))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(3))),()) preference(1,(1,8),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,10),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,11),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,35) output(29,better,59) output(29,better,9) output(11,better,2) output(16,better,35) output(16,better,59) output(51,better,9) output(6,better,35) output(6,better,59) output(35,better,59) output(6,worse,20) output(16,worse,20) output(2,worse,51) output(2,worse,6) output(2,worse,16) output(2,worse,29) output(2,worse,20) output(6,worse,16) output(11,worse,20) output(29,unc,51)
Optimization: 10 12
Answer: 8
preference(1,(1,1),1,for(atom(hasOilyLevel(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),1,for(atom(hasOilyLevel(1))),()) preference(1,(1,6),1,for(atom(hasOiliness(1))),()) preference(1,(1,7),1,for(atom(hasPrice(1))),()) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,9),1,for(atom(hasPrice(0))),()) preference(1,(1,10),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(hasOiliness(0))),()) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,1),2,for(atom(hasOftenSold(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(3))),()) preference(1,(1,4),2,for(atom(hasPriceLevel(1))),()) preference(1,(1,5),2,for(atom(hasOiliness(1))),()) preference(1,(1,6),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,7),2,for(atom(hasOilyLevel(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,9),2,for(atom(hasOftenSold(0))),()) preference(1,(1,10),2,for(atom(hasOilyLevel(2))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,(1,12),2,for(atom(hasOiliness(0))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(29,better,35) output(29,better,59) output(29,better,9) output(11,better,2) output(16,better,35) output(16,better,59) output(6,better,35) output(6,better,59) output(35,better,59) output(6,worse,20) output(16,worse,20) output(35,worse,9) output(59,worse,9) output(2,worse,20) output(6,worse,16) output(11,worse,20) output(29,unc,51) output(51,unc,9)
Optimization: 9 12
Answer: 9
preference(1,(1,1),1,for(atom(hasPrice(0))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasOiliness(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,10),1,for(atom(hasPriceLevel(0))),()) preference(1,(1,11),1,for(atom(hasPrice(1))),()) preference(1,(1,12),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,1),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,2),2,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(hasOilyLevel(0))),()) preference(1,(1,4),2,for(atom(hasPriceLevel(0))),()) preference(1,(1,5),2,for(atom(hasPriceLevel(1))),()) preference(1,(1,6),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,7),2,for(atom(hasOilyLevel(2))),()) preference(1,(1,8),2,for(atom(hasOiliness(1))),()) preference(1,(1,9),2,for(atom(hasPrice(1))),()) preference(1,(1,10),2,for(atom(hasOilyLevel(2))),()) preference(1,(1,11),2,for(atom(hasOilyLevel(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,better,2) output(16,better,35) output(16,better,59) output(51,better,9) output(6,better,35) output(6,better,59) output(35,better,59) output(6,worse,20) output(16,worse,20) output(2,worse,20) output(6,worse,16) output(11,worse,20) output(6,unc,29) output(6,unc,51)
Optimization: 7 12
Answer: 10
preference(1,(1,1),1,for(atom(hasPrice(0))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasOiliness(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,8),1,for(atom(hasOiliness(1))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,10),1,for(atom(hasPriceLevel(0))),()) preference(1,(1,11),1,for(atom(hasPrice(1))),()) preference(1,(1,12),1,for(atom(hasOilyLevel(0))),()) preference(1,(1,1),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,2),2,for(atom(hasOiliness(1))),()) preference(1,(1,3),2,for(atom(hasOilyLevel(0))),()) preference(1,(1,4),2,for(atom(hasPriceLevel(0))),()) preference(1,(1,5),2,for(atom(hasPriceLevel(1))),()) preference(1,(1,6),2,for(atom(hasPriceLevel(2))),()) preference(1,(1,7),2,for(atom(hasOilyLevel(2))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,9),2,for(atom(hasPrice(1))),()) preference(1,(1,10),2,for(atom(hasOilyLevel(2))),()) preference(1,(1,11),2,for(atom(hasOilyLevel(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(11,better,6) output(11,better,16) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(2,better,6) output(2,better,16) output(2,better,29) output(2,better,51) output(2,better,35) output(2,better,59) output(2,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(6,better,29) output(6,better,51) output(6,better,9) output(16,better,29) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,better,2) output(16,better,35) output(16,better,59) output(51,better,9) output(6,better,35) output(6,better,59) output(35,better,59) output(6,worse,20) output(16,worse,20) output(2,worse,20) output(6,worse,16) output(11,worse,20)
Optimization: 5 12
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.032 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 10+
  Optimum    : unknown
Optimization : 5 12
Calls        : 1
Time         : 597.844s (Solving: 592.31s 1st Model: 0.92s Unsat: 0.00s)
CPU Time     : 2373.338s
Threads      : 4        (Winner: 4)

Choices      : 3627241  (Domain: 3705)
Conflicts    : 211505   (Analyzed: 211505)
Restarts     : 229      (Average: 923.60 Last: 12588)
Model-Level  : 414.7   
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 15047025 (Deleted: 14924020)
  Binary     : 2095     (Ratio:   0.01%)
  Ternary    : 43754    (Ratio:   0.29%)
  Conflict   : 211505   (Average Length:  849.0 Ratio:   1.41%) 
  Loop       : 14771272 (Average Length:  192.0 Ratio:  98.17%) 
  Other      : 64248    (Average Length:    3.6 Ratio:   0.43%) 
  Distributed: 21432    (Ratio:   0.14% Average LBD: 2.85) 
  Integrated : 64296    (Ratio: 300.00% Unit: 155 Average Jumps: 1576.70)
Backjumps    : 211505   (Average: 13.50 Max: 52855 Sum: 2854552)
  Executed   : 211481   (Average: 13.50 Max: 52855 Sum: 2854463 Ratio: 100.00%)
  Bounded    : 24       (Average:  3.71 Max:  46 Sum:     89 Ratio:   0.00%)

Rules        : 1031713 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 28146   
Bodies       : 716652  
  Count      : 48      
Equivalences : 28499    (Atom=Atom: 5034 Body=Body: 6677 Other: 16788)
Tight        : No       (SCCs: 46 Non-Hcfs: 0 Nodes: 675360 Gammas: 0)
Variables    : 687128   (Eliminated:    0 Frozen: 678563)
Constraints  : 4021393  (Binary:  82.5% Ternary:   4.2% Other:  13.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPriceLevel(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOftenSold(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasMinorGrp(0)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPriceLevel(2)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(0)) >> atom(hasOilyLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasOiliness(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(0)) >> atom(hasPriceLevel(1)) ; 
  atom(hasPriceLevel(0)) >> atom(hasOftenSold(0)) ; 
  atom(hasPriceLevel(1)) >> atom(hasMinorGrp(3)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPriceLevel(2)) ; 
  atom(hasOiliness(1)) >> atom(hasMinorGrp(0)) ; 
  atom(hasOftenSold(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasOftenSold(0)) >> atom(hasPriceLevel(2)) ; 
  atom(hasOilyLevel(2)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasOilyLevel(1)) >> atom(hasOftenSold(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(1)) ; 
  atom(hasMinorGrp(1)) >> atom(hasMinorGrp(3)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPriceLevel(1)) ; 
  atom(hasOilyLevel(1)) >> atom(hasOiliness(1)) ; 
  atom(hasOiliness(1)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasOilyLevel(1)) ; 
  atom(hasPriceLevel(2)) >> atom(hasMinorGrp(1)) ; 
  atom(hasPrice(0)) >> atom(hasOftenSold(0)) ; 
  atom(hasPrice(0)) >> atom(hasOilyLevel(2)) ; 
  atom(hasOiliness(0)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(1)) >> atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(0)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) ; 
  atom(hasOiliness(1)) >> atom(hasOilyLevel(0)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasPriceLevel(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPriceLevel(2)) ; 
  atom(hasOilyLevel(0)) >> atom(hasOilyLevel(2)) ; 
  atom(hasMinorGrp(0)) >> atom(hasOiliness(1)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(1)) ; 
  atom(hasPriceLevel(0)) >> atom(hasOilyLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasOilyLevel(0)) ; 
  atom(hasOilyLevel(0)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(0)) >> atom(hasPriceLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasOiliness(1)) ; 
  atom(hasOiliness(1)) >> atom(hasOilyLevel(0)) ; 
  atom(hasPrice(1)) >> atom(hasPriceLevel(0)) ; 
  atom(hasPriceLevel(2)) >> atom(hasPriceLevel(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPriceLevel(2)) ; 
  atom(hasOilyLevel(0)) >> atom(hasOilyLevel(2)) ; 
  atom(hasOiliness(1)) >> atom(hasPrice(0)) ; 
  atom(hasMinorGrp(0)) >> atom(hasPrice(1)) ; 
  atom(hasPriceLevel(0)) >> atom(hasOilyLevel(2)) ; 
  atom(hasPrice(1)) >> atom(hasOilyLevel(0)) ; 
  atom(hasOilyLevel(0)) >> atom(hasMinorGrp(2)) 
}.
