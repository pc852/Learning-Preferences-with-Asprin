asprin_vL version 1.0
Reading from stdin
-:268:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:293:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:374:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:648:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:825:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1026:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1030:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1030:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1036:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1135:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1161:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1281:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1315:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1337:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:185:1-16: info: no atoms over signature occur in program:
  output/3

-:177:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:178:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:179:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:180:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:210:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,9) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,9) output(3,better,9) output(0,better,9) output(7,better,9) output(6,better,9) output(3,worse,0) output(3,worse,7) output(3,worse,2) output(9,worse,2) output(0,eq,7)
Optimization: 24 6
Answer: 2
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,9) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,9) output(3,better,9) output(0,better,9) output(7,better,9) output(6,better,9) output(6,better,2) output(1,worse,6) output(3,worse,7) output(3,worse,6) output(3,worse,2) output(0,worse,7) output(0,worse,6) output(7,worse,6) output(9,worse,2)
Optimization: 23 6
Answer: 3
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,8),3,for(atom(hasPrice(0))),()) preference(1,aso) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,9) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,9) output(3,better,0) output(3,better,9) output(7,better,9) output(6,better,9) output(3,worse,2) output(0,worse,7) output(0,worse,6) output(0,worse,2) output(7,worse,2) output(6,worse,2) output(9,worse,2) output(3,eq,7) output(3,eq,6) output(0,eq,9) output(7,eq,6)
Optimization: 22 6
Answer: 4
preference(1,(1,1),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isCreamy(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,6),3,for(atom(isSweet(1))),()) preference(1,(1,8),3,for(atom(isRaw(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,aso) output(5,better,3) output(5,better,6) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,3) output(1,better,7) output(1,better,6) output(1,better,9) output(1,better,2) output(4,better,3) output(4,better,6) output(4,better,9) output(4,better,2) output(3,better,9) output(0,better,7) output(0,better,6) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,9) output(7,better,2) output(6,better,9) output(5,worse,1) output(5,worse,0) output(4,worse,0) output(3,worse,0) output(3,worse,7) output(9,worse,2) output(1,eq,0) output(4,eq,7) output(3,eq,6) output(3,eq,2) output(6,eq,2)
Optimization: 13 3
Answer: 5
preference(1,(1,1),0,for(atom(isOctopus(1))),()) preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(atom(hasPrice(0))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,3),2,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(isRaw(1))),()) preference(1,(1,2),3,for(atom(hasPrice(0))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,9) output(1,better,2) output(4,better,6) output(3,better,2) output(0,better,6) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,9) output(7,better,2) output(9,better,2) output(4,worse,0) output(4,worse,7) output(4,worse,9) output(3,worse,0) output(3,worse,7) output(3,worse,9) output(6,worse,9) output(0,eq,7)
Optimization: 12 8
Answer: 6
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),0,for(atom(isRoe(1))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,5),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,2),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(atom(isFattyFish(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isUnique(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(hasPrice(0))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,2),3,for(atom(hasPrice(0))),()) preference(1,(1,1),4,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,9) output(1,better,2) output(4,better,6) output(3,better,2) output(0,better,7) output(0,better,6) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,9) output(7,better,2) output(9,better,2) output(4,worse,0) output(4,worse,7) output(3,worse,0) output(6,worse,9)
Optimization: 11 7
Answer: 7
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),0,for(atom(isRaw(1))),()) preference(1,(1,3),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(atom(hasPrice(0))),()) preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isCreamy(1))),()) preference(1,(1,2),3,for(atom(isShrimp(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isFattyFish(1))),()) preference(1,(1,7),3,for(atom(isChewy(1))),()) preference(1,(1,8),3,for(atom(isRoe(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,9) output(1,better,2) output(4,better,3) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,9) output(4,better,2) output(3,better,0) output(3,better,7) output(3,better,6) output(3,better,9) output(3,better,2) output(0,better,7) output(0,better,6) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,9) output(7,better,2) output(6,better,9) output(6,better,2) output(9,better,2)
Optimization: 0 8
Progression : 0 [1;8] (Error: 7)
Answer: 8
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),4,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),1,for(atom(isFattyFish(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isFattyFish(1))),()) preference(1,(1,4),2,for(atom(hasPrice(0))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(isOctopus(1))),()) preference(1,(1,6),4,for(atom(isMaguro(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,9) output(1,better,2) output(4,better,3) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,9) output(4,better,2) output(3,better,0) output(3,better,7) output(3,better,6) output(3,better,9) output(3,better,2) output(0,better,7) output(0,better,6) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,9) output(7,better,2) output(6,better,9) output(6,better,2) output(9,better,2)
Optimization: 0 6
Answer: 9
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),4,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(isOctopus(1))),()) preference(1,(1,6),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(hasPrice(0))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,9) output(1,better,2) output(4,better,3) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,9) output(4,better,2) output(3,better,0) output(3,better,7) output(3,better,6) output(3,better,9) output(3,better,2) output(0,better,7) output(0,better,6) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,9) output(7,better,2) output(6,better,9) output(6,better,2) output(9,better,2)
Optimization: 0 5
Answer: 10
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,8),2,for(atom(isFattyFish(1))),()) preference(1,(1,1),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(hasPrice(0))),()) preference(1,(1,6),4,for(atom(isMaguro(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,9) output(1,better,2) output(4,better,3) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,9) output(4,better,2) output(3,better,0) output(3,better,7) output(3,better,6) output(3,better,9) output(3,better,2) output(0,better,7) output(0,better,6) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,9) output(7,better,2) output(6,better,9) output(6,better,2) output(9,better,2)
Optimization: 0 4
Progression : 0 [2;4] (Error: 1)
Answer: 11
preference(1,(1,6),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,7),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(hasPrice(1))),()) preference(1,(1,6),3,for(atom(isRoe(1))),()) preference(1,(1,7),3,for(atom(isChewy(1))),()) preference(1,(1,6),4,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,0) output(5,better,7) output(5,better,6) output(5,better,9) output(5,better,2) output(1,better,4) output(1,better,3) output(1,better,0) output(1,better,7) output(1,better,6) output(1,better,9) output(1,better,2) output(4,better,3) output(4,better,0) output(4,better,7) output(4,better,6) output(4,better,9) output(4,better,2) output(3,better,0) output(3,better,7) output(3,better,6) output(3,better,9) output(3,better,2) output(0,better,7) output(0,better,6) output(0,better,9) output(0,better,2) output(7,better,6) output(7,better,9) output(7,better,2) output(6,better,9) output(6,better,2) output(9,better,2)
Optimization: 0 3
OPTIMUM FOUND

Models       : 11
  Optimum    : yes
Optimization : 0 3
Calls        : 1
Time         : 10.123s (Solving: 4.53s 1st Model: 0.15s Unsat: 1.92s)
CPU Time     : 23.571s
Threads      : 4        (Winner: 1)

Choices      : 116102   (Domain: 538)
Conflicts    : 17673    (Analyzed: 17669)
Restarts     : 45       (Average: 392.64 Last: 1565)
Model-Level  : 510.3   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 40714    (Deleted: 3094)
  Binary     : 1961     (Ratio:   4.82%)
  Ternary    : 3209     (Ratio:   7.88%)
  Conflict   : 17668    (Average Length:   70.3 Ratio:  43.40%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 23046    (Average Length:   25.2 Ratio:  56.60%) 
  Distributed: 7713     (Ratio:  43.66% Average LBD: 3.12) 
  Integrated : 23132    (Ratio: 299.91% Unit: 228 Average Jumps: 58.83)
Backjumps    : 17669    (Average:  5.41 Max: 674 Sum:  95572)
  Executed   : 17658    (Average:  5.40 Max: 674 Sum:  95385 Ratio:  99.80%)
  Bounded    : 11       (Average: 17.00 Max:  35 Sum:    187 Ratio:   0.20%)

Rules        : 1976121 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 590648  
Bodies       : 694609  
  Count      : 1768    
Equivalences : 1803760  (Atom=Atom: 517140 Body=Body: 559183 Other: 727437)
Tight        : Yes
Variables    : 76839    (Eliminated:    0 Frozen: 53823)
Constraints  : 1491105  (Binary:  94.9% Ternary:   4.2% Other:   0.9%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(hasPrice(1)) >> atom(isFattyFish(1)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(2))  ; 
  not atom(hasPrice(0))  >> atom(isMaguro(1)) >> not atom(isRaw(1))  >> not atom(isRoe(1))  ; 
  atom(hasPrice(1)) >> not atom(hasPrice(0))  >> not atom(isUnique(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(hasPrice(1)) >> atom(isFattyFish(1)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(2))  ; 
  not atom(hasPrice(0))  >> atom(isMaguro(1)) >> not atom(isRaw(1))  >> not atom(isRoe(1))  ; 
  atom(hasPrice(1)) >> not atom(hasPrice(0))  >> not atom(isShrimp(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> atom(isRaw(1)) >> not atom(isRaw(0))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(1))  >> not atom(isChewy(1))  ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  ; 
  atom(hasPrice(1)) >> atom(isFattyFish(1)) >> not atom(hasPrice(1))  >> not atom(hasMinorGrp(2))  ; 
  not atom(hasPrice(0))  >> atom(isMaguro(1)) >> not atom(isShrimp(1))  >> not atom(isRoe(1))  ; 
  atom(hasPrice(1)) >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isFattyFish(1)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) || not atom(isSweet(1))  ; 
  atom(isFattyFish(1)) >> atom(isCreamy(1)) >> atom(isSweet(1)) >> not atom(isRaw(0))  || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isRaw(1)) >> not atom(isRaw(0))  || not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasPrice(0)) || atom(isOctopus(1)) ; 
  not atom(isUnique(1))  >> not atom(isFattyFish(1))  >> atom(hasPrice(0)) >> not atom(isRoe(1))  || atom(isUrchin(1)) ; 
  atom(isCreamy(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  || not atom(isShrimp(1))  ; 
  atom(hasMinorGrp(1)) >> not atom(isRaw(0))  >> not atom(isRaw(1))  || not atom(isSweet(1))  ; 
  atom(isCreamy(1)) >> atom(isRaw(1)) || not atom(isShrimp(1))  ; 
  not atom(hasMinorGrp(2))  >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  || not atom(isRaw(0))  ; 
  not atom(isRaw(1))  >> not atom(isOctopus(1))  || not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isFattyFish(1)) >> atom(isChewy(1)) >> atom(isSweet(1)) >> atom(isRaw(1)) || not atom(isOctopus(1))  ; 
  not atom(isUnique(1))  >> not atom(isFattyFish(1))  >> atom(hasPrice(0)) >> not atom(isRoe(1))  || atom(isUrchin(1)) ; 
  atom(isCreamy(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  || not atom(isShrimp(1))  ; 
  not atom(isUrchin(1))  >> atom(hasPrice(0)) >> not atom(isRaw(1))  || not atom(isChewy(1))  ; 
  not atom(isRoe(1))  >> not atom(isRaw(1))  >> not atom(isOctopus(1))  || atom(isRoe(1)) ; 
  not atom(hasMinorGrp(2))  >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  || not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(0))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  || not atom(isOctopus(1))  ; 
  atom(isChewy(1)) >> not atom(isCreamy(1))  >> atom(isShrimp(1)) >> not atom(isRaw(1))  || atom(isRaw(1)) ; 
  not atom(hasPrice(0))  >> atom(isSweet(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(1))  || not atom(isFattyFish(1))  ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) || not atom(isFattyFish(1))  ; 
  atom(isOctopus(1)) >> not atom(hasPrice(0))  >> not atom(isMaguro(1))  >> not atom(hasMinorGrp(2))  || not atom(isFattyFish(1))  ; 
  atom(isFattyFish(1)) >> atom(isUrchin(1)) >> atom(isChewy(1)) >> not atom(hasPrice(1))  || not atom(isOctopus(1))  ; 
  atom(isChewy(1)) >> atom(isCreamy(1)) >> atom(isRoe(1)) >> not atom(isRaw(0))  || atom(hasPrice(0)) ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isFattyFish(1)) >> not atom(isMaguro(1))  >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isOctopus(1))  ; 
  atom(isFattyFish(1)) >> atom(hasPrice(0)) || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isRaw(0))  || not atom(isChewy(1))  ; 
  atom(isFattyFish(1)) >> atom(isRaw(0)) >> atom(isUnique(1)) >> atom(isMaguro(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(isMaguro(1))  >> not atom(hasMinorGrp(1))  || not atom(isOctopus(1))  ; 
  atom(isFattyFish(1)) >> atom(isRoe(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(1))  || not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isFattyFish(1)) >> not atom(isMaguro(1))  >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isRaw(0))  || not atom(isChewy(1))  ; 
  atom(isFattyFish(1)) >> atom(isRaw(0)) >> atom(isUnique(1)) >> atom(isMaguro(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> atom(hasPrice(0)) || not atom(isOctopus(1))  ; 
  atom(isFattyFish(1)) >> atom(isRoe(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(1))  || not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isFattyFish(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(hasPrice(0)) || not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> not atom(isRaw(0))  || not atom(isChewy(1))  ; 
  atom(isFattyFish(1)) >> atom(isRaw(0)) >> atom(isUnique(1)) >> atom(isMaguro(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(isMaguro(1))  >> not atom(hasMinorGrp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(0))  >> atom(isCreamy(1)) >> atom(isRoe(1)) >> atom(isRaw(1)) || not atom(isChewy(1))  ; 
  atom(isOctopus(1)) >> atom(hasPrice(1)) >> atom(isChewy(1)) >> not atom(isFattyFish(1))  ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(hasMinorGrp(1))  
}.
