asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(2,eq,5) output(2,eq,4) output(2,eq,8) output(2,eq,0) output(2,eq,6) output(2,eq,3) output(2,eq,9) output(2,eq,7) output(5,eq,4) output(5,eq,8) output(5,eq,0) output(5,eq,6) output(5,eq,3) output(5,eq,9) output(5,eq,7) output(4,eq,8) output(4,eq,0) output(4,eq,6) output(4,eq,3) output(4,eq,9) output(4,eq,7) output(8,eq,0) output(8,eq,6) output(8,eq,3) output(8,eq,9) output(8,eq,7) output(0,eq,6) output(0,eq,3) output(0,eq,9) output(0,eq,7) output(6,eq,3) output(6,eq,9) output(6,eq,7) output(3,eq,9) output(3,eq,7) output(9,eq,7)
Optimization: 36 0
Answer: 2
preference(1,(1,2),1,for(atom(hasMinorGrp(0))),12) preference(1,less(weight)) output(5,better,8) output(4,better,8) output(2,worse,5) output(2,worse,4) output(2,worse,0) output(2,worse,6) output(2,worse,3) output(2,worse,9) output(2,worse,7) output(8,worse,0) output(8,worse,6) output(8,worse,3) output(8,worse,9) output(8,worse,7) output(2,eq,8) output(5,eq,4) output(5,eq,0) output(5,eq,6) output(5,eq,3) output(5,eq,9) output(5,eq,7) output(4,eq,0) output(4,eq,6) output(4,eq,3) output(4,eq,9) output(4,eq,7) output(0,eq,6) output(0,eq,3) output(0,eq,9) output(0,eq,7) output(6,eq,3) output(6,eq,9) output(6,eq,7) output(3,eq,9) output(3,eq,7) output(9,eq,7)
Optimization: 34 1
Answer: 3
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),4) preference(1,less(weight)) output(2,better,4) output(2,better,8) output(2,better,6) output(5,better,4) output(5,better,8) output(5,better,6) output(0,better,6) output(8,worse,0) output(8,worse,3) output(8,worse,9) output(8,worse,7) output(6,worse,3) output(6,worse,9) output(6,worse,7) output(4,worse,0) output(4,worse,3) output(4,worse,9) output(4,worse,7) output(2,eq,5) output(2,eq,0) output(2,eq,3) output(2,eq,9) output(2,eq,7) output(5,eq,0) output(5,eq,3) output(5,eq,9) output(5,eq,7) output(4,eq,8) output(4,eq,6) output(8,eq,6) output(0,eq,3) output(0,eq,9) output(0,eq,7) output(3,eq,9) output(3,eq,7) output(9,eq,7)
Optimization: 29 1
Answer: 4
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(0)))),4) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(1)))),4) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,3),1,for(atom(hasPrice(1))),12) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),10) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),1) preference(1,less(weight)) output(2,better,4) output(2,better,8) output(2,better,6) output(2,better,7) output(3,better,7) output(5,better,4) output(5,better,8) output(5,better,6) output(5,better,7) output(0,better,6) output(0,better,3) output(0,better,7) output(9,better,7) output(4,better,8) output(2,worse,0) output(2,worse,9) output(8,worse,0) output(8,worse,6) output(8,worse,3) output(8,worse,9) output(8,worse,7) output(3,worse,9) output(5,worse,0) output(5,worse,9) output(0,worse,9) output(6,worse,3) output(6,worse,9) output(6,worse,7) output(4,worse,0) output(4,worse,3) output(4,worse,9) output(4,worse,7) output(2,eq,5) output(2,eq,3) output(5,eq,3) output(4,eq,6)
Optimization: 22 7
Progression : [ 1;22] (Error: 21)
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(3)))),9) preference(1,(1,2),1,for(neg(atom(hasOftenSold(0)))),9) preference(1,(1,6),1,for(neg(atom(hasOilyLevel(2)))),9) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),9) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(1)))),9) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,3),1,for(atom(hasOilyLevel(0))),9) preference(1,(1,4),1,for(atom(hasPriceLevel(0))),9) preference(1,(1,5),1,for(atom(hasOftenSold(1))),9) preference(1,(1,9),1,for(atom(hasPriceLevel(1))),6) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(5,better,4) output(5,better,0) output(5,better,6) output(5,better,9) output(5,worse,8) output(0,worse,3) output(0,worse,7) output(9,worse,7) output(6,worse,3) output(6,worse,7) output(4,worse,8) output(4,worse,3) output(4,worse,7) output(2,eq,8) output(5,eq,3) output(5,eq,7) output(4,eq,0) output(4,eq,6) output(4,eq,9) output(0,eq,6) output(0,eq,9) output(6,eq,9) output(3,eq,7)
Optimization: 19 10
Answer: 6
preference(1,(1,1),1,for(neg(atom(hasOiliness(0)))),5) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(1)))),10) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,5),1,for(neg(atom(hasPrice(1)))),8) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),3) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),10) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,4),1,for(atom(hasPriceLevel(1))),7) preference(1,(1,6),1,for(atom(hasOilyLevel(0))),10) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),1) preference(1,less(weight)) output(2,better,0) output(2,better,7) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,0) output(5,better,9) output(5,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,9) output(4,better,7) output(2,worse,5) output(2,worse,4) output(2,worse,8) output(2,worse,6) output(2,worse,3) output(8,worse,6) output(5,worse,4) output(5,worse,8) output(5,worse,6) output(0,worse,6) output(0,worse,3) output(0,worse,9) output(0,worse,7) output(2,eq,9) output(5,eq,3) output(4,eq,6)
Optimization: 16 10
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(3)))),10) preference(1,(1,2),1,for(neg(atom(hasOftenSold(0)))),10) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(1)))),9) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),10) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),11) preference(1,(1,3),1,for(atom(hasOilyLevel(0))),10) preference(1,(1,4),1,for(atom(hasOftenSold(1))),10) preference(1,(1,10),1,for(atom(hasPriceLevel(0))),10) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,4) output(5,better,6) output(5,better,9) output(5,better,7) output(0,better,6) output(0,better,3) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,7) output(4,better,7) output(2,worse,0) output(8,worse,0) output(5,worse,8) output(5,worse,0) output(6,worse,3) output(4,worse,8) output(4,worse,0) output(4,worse,3) output(2,eq,8) output(5,eq,3) output(4,eq,6) output(4,eq,9) output(6,eq,9)
Optimization: 13 9
Answer: 8
preference(1,(1,3),1,for(neg(atom(hasPrice(1)))),8) preference(1,(1,7),1,for(neg(atom(hasOftenSold(0)))),10) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(0)))),7) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(1)))),4) preference(1,(1,1),1,for(atom(hasOilyLevel(0))),12) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),11) preference(1,(1,5),1,for(atom(hasPrice(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),9) preference(1,(1,8),1,for(atom(hasPriceLevel(0))),5) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,7) output(5,better,7) output(0,better,3) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,0) output(4,better,3) output(4,better,9) output(4,better,7) output(2,worse,8) output(3,worse,9) output(5,worse,4) output(5,worse,8) output(5,worse,0) output(5,worse,6) output(5,worse,9) output(0,worse,6) output(4,worse,8) output(5,eq,3) output(4,eq,6) output(0,eq,9)
Optimization: 12 10
Answer: 9
preference(1,(1,3),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(2)))),2) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(3)))),2) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,10),1,for(neg(atom(hasOftenSold(0)))),10) preference(1,(1,1),1,for(atom(hasOftenSold(1))),6) preference(1,(1,2),1,for(atom(hasOilyLevel(0))),8) preference(1,(1,4),1,for(atom(hasPrice(0))),5) preference(1,(1,5),1,for(atom(hasPriceLevel(0))),12) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,9) output(5,better,7) output(0,better,9) output(0,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,0) output(4,better,3) output(4,better,9) output(4,better,7) output(2,worse,8) output(5,worse,4) output(5,worse,8) output(5,worse,6) output(0,worse,6) output(4,worse,8) output(5,eq,0) output(5,eq,3) output(4,eq,6) output(0,eq,3) output(9,eq,7)
Optimization: 11 10
Progression : [ 2;11] (Error: 4.5)
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,3),1,for(neg(atom(hasOftenSold(0)))),7) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(3)))),12) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),1) preference(1,(1,4),1,for(atom(hasPriceLevel(0))),3) preference(1,(1,5),1,for(atom(hasPrice(0))),6) preference(1,(1,7),1,for(atom(hasOilyLevel(0))),11) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,9),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,0) output(5,better,9) output(5,better,7) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,0) output(4,better,3) output(4,better,9) output(4,better,7) output(2,worse,8) output(5,worse,4) output(5,worse,8) output(5,worse,6) output(0,worse,6) output(0,worse,3) output(4,worse,8) output(5,eq,3) output(4,eq,6) output(0,eq,9)
Optimization: 10 10
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),4) preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),3) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(0)))),4) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),9) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,3),1,for(atom(hasOiliness(0))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,6),1,for(atom(hasOiliness(1))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasPriceLevel(1))),1) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,0) output(5,better,9) output(5,better,7) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,9) output(4,better,7) output(8,worse,6) output(5,worse,4) output(5,worse,8) output(5,worse,6) output(0,worse,6) output(0,worse,3) output(5,eq,3) output(4,eq,6)
Optimization: 8 10
Progression : [3;8] (Error: 1.66667)
Progression : [4;8] (Error: 1)
Progression : [5;8] (Error: 0.6)
Progression : [6;8] (Error: 0.333333)
Progression : [7;8] (Error: 0.142857)
Progression : [8;8] (Error: 0)
Progression : 8 [ 1;10] (Error: 9)
Progression : 8 [ 2;10] (Error: 4)
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(1)))),7) preference(1,(1,2),1,for(neg(atom(hasOiliness(1)))),3) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,8),1,for(neg(atom(hasOiliness(0)))),2) preference(1,(1,3),1,for(atom(hasPrice(1))),1) preference(1,(1,4),1,for(atom(hasOiliness(1))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,10),1,for(atom(hasPriceLevel(1))),9) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,4) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,7) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,9) output(6,better,7) output(4,better,0) output(4,better,9) output(4,better,7) output(5,worse,8) output(0,worse,6) output(0,worse,3) output(6,worse,3) output(4,worse,8) output(4,worse,3) output(5,eq,3) output(4,eq,6)
Optimization: 8 9
SATISFIABLE

Models       : 12+
  Optimum    : unknown
Optimization : 8 9
Bounds       : 8 [2;9]
Calls        : 1
Time         : 910.332s (Solving: 906.19s 1st Model: 0.06s Unsat: 0.00s)
CPU Time     : 3628.227s
Threads      : 4        (Winner: 0)

Choices      : 9368844  (Domain: 6542)
Conflicts    : 6389346  (Analyzed: 6389336)
Restarts     : 8888     (Average: 718.87 Last: 170331)
Model-Level  : 486.8   
Problems     : 18       (Average Length: 0.22 Splits: 0)
Lemmas       : 6414622  (Deleted: 6054042)
  Binary     : 3351     (Ratio:   0.05%)
  Ternary    : 826      (Ratio:   0.01%)
  Conflict   : 6389333  (Average Length:  308.8 Ratio:  99.61%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 25289    (Average Length:   55.0 Ratio:   0.39%) 
  Distributed: 8435     (Ratio:   0.13% Average LBD: 3.51) 
  Integrated : 25305    (Ratio: 300.00% Unit: 287 Average Jumps: 19.97)
Backjumps    : 6389336  (Average:  1.34 Max: 2162 Sum: 8591036)
  Executed   : 6389278  (Average:  1.34 Max: 2162 Sum: 8590575 Ratio:  99.99%)
  Bounded    : 58       (Average:  7.95 Max:  34 Sum:    461 Ratio:   0.01%)

Rules        : 1294635 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 362939  
Bodies       : 366932  
  Sum        : 216     
  Count      : 10      
Equivalences : 1077392  (Atom=Atom: 346659 Body=Body: 355228 Other: 375505)
Tight        : Yes
Variables    : 15523    (Eliminated:    0 Frozen: 10563)
Constraints  : 963061   (Binary:  98.8% Ternary:   0.5% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(0)) ; 
  4 :: not atom(hasPriceLevel(0))  ; 
  12 :: atom(hasPrice(1)) ; 
  10 :: atom(hasPriceLevel(2)) ; 
  4 :: not atom(hasMinorGrp(1))  ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  1 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: not atom(hasMinorGrp(3))  ; 
  9 :: not atom(hasOftenSold(0))  ; 
  9 :: atom(hasOilyLevel(0)) ; 
  9 :: atom(hasPriceLevel(0)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  9 :: not atom(hasOilyLevel(2))  ; 
  9 :: not atom(hasMinorGrp(2))  ; 
  9 :: not atom(hasMinorGrp(1))  ; 
  6 :: atom(hasPriceLevel(1)) ; 
  11 :: not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasOiliness(0))  ; 
  10 :: not atom(hasMinorGrp(1))  ; 
  5 :: not atom(hasPrice(0))  ; 
  7 :: atom(hasPriceLevel(1)) ; 
  8 :: not atom(hasPrice(1))  ; 
  10 :: atom(hasOilyLevel(0)) ; 
  3 :: not atom(hasMinorGrp(2))  ; 
  10 :: not atom(hasPriceLevel(1))  ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  1 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMinorGrp(3))  ; 
  10 :: not atom(hasOftenSold(0))  ; 
  10 :: atom(hasOilyLevel(0)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  9 :: not atom(hasPriceLevel(1))  ; 
  10 :: not atom(hasMinorGrp(2))  ; 
  11 :: not atom(hasOilyLevel(2))  ; 
  10 :: atom(hasPriceLevel(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOilyLevel(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  8 :: not atom(hasPrice(1))  ; 
  11 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasPrice(1)) ; 
  9 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasOftenSold(0))  ; 
  5 :: atom(hasPriceLevel(0)) ; 
  7 :: not atom(hasMinorGrp(0))  ; 
  4 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOftenSold(1)) ; 
  8 :: atom(hasOilyLevel(0)) ; 
  4 :: not atom(hasPrice(1))  ; 
  5 :: atom(hasPrice(0)) ; 
  12 :: atom(hasPriceLevel(0)) ; 
  2 :: not atom(hasPriceLevel(2))  ; 
  2 :: not atom(hasMinorGrp(3))  ; 
  11 :: not atom(hasMinorGrp(0))  ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  10 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPriceLevel(1)) ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  7 :: not atom(hasOftenSold(0))  ; 
  3 :: atom(hasPriceLevel(0)) ; 
  6 :: atom(hasPrice(0)) ; 
  7 :: not atom(hasPrice(1))  ; 
  11 :: atom(hasOilyLevel(0)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  12 :: not atom(hasMinorGrp(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasPrice(0))  ; 
  3 :: not atom(hasOftenSold(1))  ; 
  1 :: atom(hasOiliness(0)) ; 
  4 :: not atom(hasOilyLevel(0))  ; 
  12 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(hasOilyLevel(2))  ; 
  1 :: atom(hasPriceLevel(1)) ; 
  12 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasPriceLevel(1))  ; 
  3 :: not atom(hasOiliness(1))  ; 
  1 :: atom(hasPrice(1)) ; 
  10 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasPrice(0))  ; 
  2 :: not atom(hasOiliness(0))  ; 
  5 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasPriceLevel(1)) 
}.
Time limit reached
