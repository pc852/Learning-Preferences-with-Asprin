asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(2,eq,5) output(2,eq,4) output(2,eq,8) output(2,eq,0) output(2,eq,6) output(2,eq,3) output(2,eq,9) output(2,eq,7) output(5,eq,4) output(5,eq,8) output(5,eq,0) output(5,eq,6) output(5,eq,3) output(5,eq,9) output(5,eq,7) output(4,eq,8) output(4,eq,0) output(4,eq,6) output(4,eq,3) output(4,eq,9) output(4,eq,7) output(8,eq,0) output(8,eq,6) output(8,eq,3) output(8,eq,9) output(8,eq,7) output(0,eq,6) output(0,eq,3) output(0,eq,9) output(0,eq,7) output(6,eq,3) output(6,eq,9) output(6,eq,7) output(3,eq,9) output(3,eq,7) output(9,eq,7)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(hasPrice(1))),12) preference(1,less(weight)) output(2,better,4) output(2,better,8) output(2,better,6) output(5,better,4) output(5,better,8) output(5,better,6) output(0,better,6) output(8,worse,0) output(8,worse,3) output(8,worse,9) output(8,worse,7) output(6,worse,3) output(6,worse,9) output(6,worse,7) output(4,worse,0) output(4,worse,3) output(4,worse,9) output(4,worse,7) output(2,eq,5) output(2,eq,0) output(2,eq,3) output(2,eq,9) output(2,eq,7) output(5,eq,0) output(5,eq,3) output(5,eq,9) output(5,eq,7) output(4,eq,8) output(4,eq,6) output(8,eq,6) output(0,eq,3) output(0,eq,9) output(0,eq,7) output(3,eq,9) output(3,eq,7) output(9,eq,7)
Optimization: 29 1
Answer: 3
preference(1,(1,10),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,6) output(2,better,3) output(2,better,7) output(0,better,6) output(0,better,3) output(0,better,7) output(9,better,7) output(8,worse,0) output(8,worse,9) output(3,worse,9) output(5,worse,0) output(5,worse,9) output(6,worse,9) output(4,worse,0) output(4,worse,9) output(2,eq,0) output(2,eq,9) output(5,eq,4) output(5,eq,8) output(5,eq,6) output(5,eq,3) output(5,eq,7) output(4,eq,8) output(4,eq,6) output(4,eq,3) output(4,eq,7) output(8,eq,6) output(8,eq,3) output(8,eq,7) output(0,eq,9) output(6,eq,3) output(6,eq,7) output(3,eq,7)
Optimization: 26 2
Answer: 4
preference(1,(1,6),1,for(atom(hasPrice(1))),12) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),12) preference(1,less(weight)) output(2,better,4) output(2,better,8) output(2,better,6) output(2,better,7) output(3,better,7) output(5,better,4) output(5,better,8) output(5,better,6) output(5,better,7) output(0,better,6) output(0,better,7) output(9,better,7) output(8,worse,0) output(8,worse,3) output(8,worse,9) output(6,worse,3) output(6,worse,9) output(4,worse,0) output(4,worse,3) output(4,worse,9) output(2,eq,5) output(2,eq,0) output(2,eq,3) output(2,eq,9) output(5,eq,0) output(5,eq,3) output(5,eq,9) output(4,eq,8) output(4,eq,6) output(4,eq,7) output(8,eq,6) output(8,eq,7) output(0,eq,3) output(0,eq,9) output(6,eq,7) output(3,eq,9)
Optimization: 24 2
Progression : [ 1;24] (Error: 23)
Answer: 5
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(3)))),5) preference(1,(1,5),1,for(neg(atom(hasOftenSold(0)))),5) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(2)))),5) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),5) preference(1,(1,8),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(1)))),10) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(2)))),5) preference(1,(1,1),1,for(atom(hasPriceLevel(0))),5) preference(1,(1,2),1,for(atom(hasOilyLevel(0))),5) preference(1,(1,3),1,for(atom(hasOftenSold(1))),5) preference(1,(1,10),1,for(atom(hasOilyLevel(1))),5) preference(1,(1,12),1,for(atom(hasPrice(0))),5) preference(1,(1,14),1,for(atom(hasOiliness(1))),5) preference(1,less(weight)) output(2,better,5) output(2,better,0) output(2,better,3) output(2,better,7) output(8,better,0) output(8,better,3) output(8,better,7) output(0,better,3) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,7) output(4,better,0) output(4,better,3) output(4,better,7) output(3,worse,9) output(5,worse,4) output(5,worse,8) output(5,worse,0) output(5,worse,6) output(5,worse,9) output(0,worse,6) output(0,worse,9) output(2,eq,4) output(2,eq,8) output(2,eq,6) output(2,eq,9) output(5,eq,3) output(5,eq,7) output(4,eq,8) output(4,eq,6) output(4,eq,9) output(8,eq,6) output(8,eq,9) output(6,eq,9) output(3,eq,7)
Optimization: 21 14
Answer: 6
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(3)))),5) preference(1,(1,5),1,for(neg(atom(hasOftenSold(0)))),5) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(2)))),5) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),5) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(1)))),10) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(2)))),5) preference(1,(1,1),1,for(atom(hasPriceLevel(0))),5) preference(1,(1,2),1,for(atom(hasOilyLevel(0))),5) preference(1,(1,3),1,for(atom(hasOftenSold(1))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,10),1,for(atom(hasOilyLevel(1))),5) preference(1,(1,12),1,for(atom(hasPrice(0))),5) preference(1,(1,14),1,for(atom(hasOiliness(1))),5) preference(1,less(weight)) output(2,better,5) output(2,better,0) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,3) output(8,better,9) output(8,better,7) output(0,better,3) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,0) output(4,better,3) output(4,better,9) output(4,better,7) output(3,worse,9) output(3,worse,7) output(5,worse,4) output(5,worse,8) output(5,worse,0) output(5,worse,6) output(5,worse,9) output(5,worse,7) output(0,worse,6) output(2,eq,4) output(2,eq,8) output(2,eq,6) output(5,eq,3) output(4,eq,8) output(4,eq,6) output(8,eq,6) output(0,eq,9)
Optimization: 17 14
Progression : [ 2;17] (Error: 7.5)
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(1)))),6) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(1)))),10) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,11),1,for(neg(atom(hasOiliness(1)))),3) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(2)))),11) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),12) preference(1,(1,5),1,for(atom(hasOiliness(0))),6) preference(1,(1,6),1,for(atom(hasPriceLevel(1))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),9) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,3) output(8,better,9) output(0,better,3) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,9) output(4,better,7) output(8,worse,6) output(8,worse,7) output(3,worse,9) output(3,worse,7) output(5,worse,4) output(5,worse,8) output(5,worse,0) output(5,worse,6) output(5,worse,9) output(5,worse,7) output(0,worse,6) output(0,worse,9) output(0,worse,7) output(9,worse,7) output(5,eq,3) output(4,eq,6)
Optimization: 16 14
Answer: 8
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,11),1,for(neg(atom(hasOiliness(1)))),4) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasOilyLevel(1)))),8) preference(1,(1,1),1,for(atom(hasOilyLevel(1))),11) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),1) preference(1,(1,5),1,for(atom(hasPrice(0))),10) preference(1,(1,6),1,for(atom(hasOiliness(0))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,8),1,for(atom(hasPrice(1))),3) preference(1,(1,9),1,for(atom(hasPriceLevel(2))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),2) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(0,better,6) output(0,better,3) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,3) output(4,better,9) output(4,better,7) output(2,worse,8) output(3,worse,9) output(3,worse,7) output(5,worse,4) output(5,worse,8) output(5,worse,0) output(5,worse,6) output(5,worse,9) output(5,worse,7) output(4,worse,8) output(4,worse,0) output(5,eq,3) output(4,eq,6)
Optimization: 13 14
Answer: 9
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),7) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,11),1,for(neg(atom(hasOiliness(1)))),7) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(0)))),9) preference(1,(1,13),1,for(neg(atom(hasOilyLevel(2)))),2) preference(1,(1,14),1,for(neg(atom(hasOilyLevel(1)))),8) preference(1,(1,1),1,for(atom(hasOilyLevel(1))),11) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,6),1,for(atom(hasOiliness(0))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,8),1,for(atom(hasPrice(1))),3) preference(1,(1,9),1,for(atom(hasOilyLevel(2))),1) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(5,better,9) output(0,better,6) output(0,better,3) output(0,better,9) output(0,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,3) output(4,better,9) output(4,better,7) output(8,worse,0) output(3,worse,7) output(5,worse,4) output(5,worse,8) output(5,worse,0) output(5,worse,6) output(5,worse,7) output(9,worse,7) output(4,worse,8) output(4,worse,0) output(5,eq,3) output(4,eq,6)
Optimization: 12 14
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(0)))),2) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(2)))),8) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(1)))),9) preference(1,(1,7),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),10) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(2)))),7) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(1)))),12) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),9) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,4),1,for(atom(hasPrice(1))),11) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),4) preference(1,(1,11),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,8) output(5,better,9) output(5,better,7) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,9) output(4,better,7) output(8,worse,0) output(8,worse,6) output(8,worse,3) output(5,worse,4) output(5,worse,6) output(0,worse,6) output(5,eq,0) output(5,eq,3) output(4,eq,6) output(0,eq,3)
Optimization: 10 14
Answer: 11
preference(1,(1,2),1,for(neg(atom(hasOiliness(0)))),9) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),10) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(2)))),7) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,12),1,for(neg(atom(hasPriceLevel(1)))),4) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),5) preference(1,(1,3),1,for(atom(hasPrice(1))),12) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,6),1,for(atom(hasOilyLevel(2))),1) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,11),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,8) output(5,better,0) output(5,better,9) output(5,better,7) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,8) output(4,better,0) output(4,better,3) output(4,better,9) output(4,better,7) output(8,worse,6) output(8,worse,3) output(5,worse,4) output(5,worse,6) output(0,worse,6) output(0,worse,3) output(5,eq,3) output(4,eq,6) output(8,eq,0)
Optimization: 9 14
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(2)))),1) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,7),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),10) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,11),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,12),1,for(neg(atom(hasOiliness(0)))),4) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),2) preference(1,(1,3),1,for(atom(hasPrice(1))),12) preference(1,(1,4),1,for(atom(hasPriceLevel(1))),5) preference(1,(1,5),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,9),1,for(atom(hasOiliness(1))),9) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,4) output(5,better,0) output(5,better,6) output(5,better,9) output(5,better,7) output(0,better,6) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,9) output(6,better,7) output(4,better,9) output(4,better,7) output(5,worse,8) output(0,worse,3) output(6,worse,3) output(4,worse,8) output(4,worse,0) output(4,worse,3) output(5,eq,3) output(4,eq,6)
Optimization: 8 14
Progression : [3;8] (Error: 1.66667)
Progression : [4;8] (Error: 1)
Answer: 13
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(3)))),3) preference(1,(1,7),1,for(neg(atom(hasPriceLevel(1)))),7) preference(1,(1,8),1,for(neg(atom(hasOftenSold(0)))),8) preference(1,(1,9),1,for(neg(atom(hasOilyLevel(2)))),9) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),5) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(2)))),6) preference(1,(1,12),1,for(neg(atom(hasOiliness(0)))),10) preference(1,(1,2),1,for(atom(hasOftenSold(1))),1) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,13),1,for(atom(hasOilyLevel(0))),12) preference(1,(1,14),1,for(atom(hasPrice(1))),4) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,9) output(5,better,7) output(0,better,6) output(0,better,3) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,3) output(4,better,9) output(4,better,7) output(5,worse,4) output(5,worse,8) output(5,worse,0) output(5,worse,6) output(4,worse,8) output(4,worse,0) output(5,eq,3) output(4,eq,6)
Optimization: 8 13
Answer: 14
preference(1,(1,4),1,for(neg(atom(hasOilyLevel(2)))),4) preference(1,(1,6),1,for(neg(atom(hasOiliness(1)))),4) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(1)))),8) preference(1,(1,11),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),5) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),1) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,13),1,for(atom(hasOiliness(0))),4) preference(1,(1,14),1,for(atom(hasPrice(1))),4) preference(1,less(weight)) output(2,better,5) output(2,better,4) output(2,better,8) output(2,better,0) output(2,better,6) output(2,better,3) output(2,better,9) output(2,better,7) output(8,better,0) output(8,better,6) output(8,better,3) output(8,better,9) output(8,better,7) output(3,better,9) output(3,better,7) output(5,better,9) output(5,better,7) output(0,better,6) output(0,better,3) output(0,better,9) output(0,better,7) output(9,better,7) output(6,better,3) output(6,better,9) output(6,better,7) output(4,better,3) output(4,better,9) output(4,better,7) output(5,worse,4) output(5,worse,8) output(5,worse,0) output(5,worse,6) output(4,worse,8) output(4,worse,0) output(5,eq,3) output(4,eq,6)
Optimization: 8 12
Progression : [5;8] (Error: 0.6)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.108 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 14+
  Optimum    : unknown
Optimization : 8 12
Bounds       : [5;8] [0;12]
Calls        : 1
Time         : 597.970s (Solving: 590.88s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 2370.148s
Threads      : 4        (Winner: 4)

Choices      : 6321218  (Domain: 5462)
Conflicts    : 4060581  (Analyzed: 4060576)
Restarts     : 5824     (Average: 697.21 Last: 80867)
Model-Level  : 757.0   
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 4106503  (Deleted: 3816061)
  Binary     : 6140     (Ratio:   0.15%)
  Ternary    : 3889     (Ratio:   0.09%)
  Conflict   : 4060573  (Average Length:  291.3 Ratio:  98.88%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 45930    (Average Length:  102.0 Ratio:   1.12%) 
  Distributed: 15318    (Ratio:   0.38% Average LBD: 3.38) 
  Integrated : 45954    (Ratio: 300.00% Unit: 1107 Average Jumps: 12.83)
Backjumps    : 4060576  (Average:  1.50 Max: 927 Sum: 6072484)
  Executed   : 4060545  (Average:  1.50 Max: 927 Sum: 6072245 Ratio: 100.00%)
  Bounded    : 31       (Average:  7.71 Max:  33 Sum:    239 Ratio:   0.00%)

Rules        : 1811787 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 503515  
Bodies       : 514020  
  Sum        : 216     
  Count      : 14      
Equivalences : 1506348  (Atom=Atom: 484903 Body=Body: 496928 Other: 524517)
Tight        : Yes
Variables    : 19827    (Eliminated:    0 Frozen: 12883)
Constraints  : 1347217  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPrice(1)) ; 
  12 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPriceLevel(0)) ; 
  5 :: atom(hasOilyLevel(0)) ; 
  5 :: atom(hasOftenSold(1)) ; 
  5 :: not atom(hasMinorGrp(3))  ; 
  5 :: not atom(hasOftenSold(0))  ; 
  5 :: not atom(hasMinorGrp(2))  ; 
  5 :: not atom(hasPrice(1))  ; 
  1 :: not atom(hasOiliness(0))  ; 
  10 :: not atom(hasPriceLevel(1))  ; 
  5 :: atom(hasOilyLevel(1)) ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  5 :: atom(hasPrice(0)) ; 
  5 :: not atom(hasPriceLevel(2))  ; 
  5 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPriceLevel(0)) ; 
  5 :: atom(hasOilyLevel(0)) ; 
  5 :: atom(hasOftenSold(1)) ; 
  5 :: not atom(hasMinorGrp(3))  ; 
  5 :: not atom(hasOftenSold(0))  ; 
  5 :: not atom(hasMinorGrp(2))  ; 
  5 :: not atom(hasPrice(1))  ; 
  3 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasPriceLevel(1))  ; 
  5 :: atom(hasOilyLevel(1)) ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  5 :: atom(hasPrice(0)) ; 
  5 :: not atom(hasPriceLevel(2))  ; 
  5 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasPriceLevel(1))  ; 
  12 :: atom(hasOilyLevel(2)) ; 
  2 :: not atom(hasPrice(0))  ; 
  10 :: not atom(hasOilyLevel(1))  ; 
  6 :: atom(hasOiliness(0)) ; 
  4 :: atom(hasPriceLevel(1)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  3 :: not atom(hasOiliness(1))  ; 
  9 :: not atom(hasMinorGrp(0))  ; 
  9 :: atom(hasPriceLevel(2)) ; 
  11 :: not atom(hasPriceLevel(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasOilyLevel(1)) ; 
  1 :: atom(hasOilyLevel(2)) ; 
  5 :: not atom(hasPrice(0))  ; 
  12 :: not atom(hasPriceLevel(1))  ; 
  10 :: atom(hasPrice(0)) ; 
  6 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasPriceLevel(2)) ; 
  4 :: not atom(hasMinorGrp(2))  ; 
  4 :: not atom(hasOiliness(1))  ; 
  9 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasMinorGrp(2)) ; 
  8 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasOilyLevel(1)) ; 
  12 :: not atom(hasPriceLevel(1))  ; 
  5 :: not atom(hasPrice(0))  ; 
  7 :: not atom(hasMinorGrp(1))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOilyLevel(2)) ; 
  4 :: not atom(hasMinorGrp(2))  ; 
  7 :: not atom(hasOiliness(1))  ; 
  9 :: not atom(hasMinorGrp(0))  ; 
  2 :: not atom(hasOilyLevel(2))  ; 
  8 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasOilyLevel(0))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  11 :: atom(hasPrice(1)) ; 
  8 :: not atom(hasPriceLevel(2))  ; 
  9 :: not atom(hasPriceLevel(1))  ; 
  1 :: not atom(hasOiliness(0))  ; 
  10 :: not atom(hasOilyLevel(2))  ; 
  7 :: not atom(hasMinorGrp(2))  ; 
  4 :: atom(hasOilyLevel(2)) ; 
  12 :: atom(hasOilyLevel(1)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  12 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPriceLevel(1)) ; 
  9 :: not atom(hasOiliness(0))  ; 
  12 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  11 :: atom(hasPriceLevel(2)) ; 
  1 :: atom(hasOilyLevel(2)) ; 
  2 :: atom(hasOiliness(1)) ; 
  10 :: not atom(hasOilyLevel(2))  ; 
  7 :: not atom(hasMinorGrp(2))  ; 
  11 :: not atom(hasMinorGrp(0))  ; 
  12 :: atom(hasOilyLevel(1)) ; 
  4 :: not atom(hasPriceLevel(1))  ; 
  9 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPriceLevel(2))  ; 
  2 :: atom(hasOilyLevel(2)) ; 
  12 :: atom(hasPrice(1)) ; 
  5 :: atom(hasPriceLevel(1)) ; 
  12 :: atom(hasOilyLevel(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  10 :: not atom(hasOilyLevel(2))  ; 
  9 :: atom(hasOiliness(1)) ; 
  11 :: not atom(hasMinorGrp(0))  ; 
  9 :: not atom(hasPrice(0))  ; 
  4 :: not atom(hasOiliness(0))  ; 
  9 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: not atom(hasMinorGrp(3))  ; 
  1 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasPriceLevel(0)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  7 :: not atom(hasPriceLevel(1))  ; 
  8 :: not atom(hasOftenSold(0))  ; 
  9 :: not atom(hasOilyLevel(2))  ; 
  5 :: not atom(hasMinorGrp(0))  ; 
  6 :: not atom(hasMinorGrp(2))  ; 
  10 :: not atom(hasOiliness(0))  ; 
  12 :: atom(hasOilyLevel(0)) ; 
  4 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasPriceLevel(0)) ; 
  4 :: not atom(hasOilyLevel(2))  ; 
  1 :: atom(hasPriceLevel(2)) ; 
  4 :: not atom(hasOiliness(1))  ; 
  8 :: atom(hasPriceLevel(1)) ; 
  8 :: not atom(hasMinorGrp(1))  ; 
  3 :: atom(hasMinorGrp(2)) ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasOiliness(0)) ; 
  4 :: atom(hasPrice(1)) 
}.
