asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(6,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(20,eq,29) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 36 0
Answer: 2
preference(1,(1,2),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(11,better,6) output(11,better,20) output(16,better,20) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(6,worse,16) output(6,worse,29) output(6,worse,51) output(6,worse,35) output(6,worse,59) output(6,worse,9) output(11,eq,16) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(6,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 33 1
Answer: 3
preference(1,(1,2),1,for(atom(hasMinorGrp(3))),12) preference(1,less(weight)) output(11,better,29) output(20,better,29) output(6,better,29) output(16,better,29) output(29,worse,51) output(29,worse,35) output(29,worse,59) output(29,worse,9) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(6,eq,16) output(6,eq,20) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,20) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 32 1
Answer: 4
preference(1,(1,2),1,for(atom(hasMinorGrp(1))),12) preference(1,less(weight)) output(11,better,51) output(11,better,9) output(20,better,51) output(20,better,9) output(6,better,51) output(6,better,9) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,9) output(51,worse,35) output(51,worse,59) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,29) output(11,eq,35) output(11,eq,59) output(6,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,35) output(6,eq,59) output(16,eq,20) output(16,eq,29) output(16,eq,35) output(16,eq,59) output(20,eq,29) output(20,eq,35) output(20,eq,59) output(29,eq,35) output(29,eq,59) output(51,eq,9) output(35,eq,59)
Optimization: 24 1
Answer: 5
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),4) preference(1,less(weight)) output(11,better,29) output(11,better,51) output(11,better,59) output(20,better,29) output(20,better,51) output(20,better,59) output(6,better,29) output(6,better,51) output(6,better,59) output(16,better,29) output(16,better,51) output(16,better,59) output(35,better,59) output(51,worse,35) output(51,worse,9) output(59,worse,9) output(29,worse,35) output(29,worse,9) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,35) output(11,eq,9) output(6,eq,16) output(6,eq,20) output(6,eq,35) output(6,eq,9) output(16,eq,20) output(16,eq,35) output(16,eq,9) output(20,eq,35) output(20,eq,9) output(29,eq,51) output(29,eq,59) output(51,eq,59) output(35,eq,9)
Optimization: 23 1
Answer: 6
preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,less(weight)) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,51) output(20,better,35) output(20,better,59) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,51) output(16,better,35) output(16,better,59) output(29,better,51) output(29,better,35) output(29,better,59) output(51,worse,9) output(35,worse,9) output(59,worse,9) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,29) output(11,eq,9) output(6,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,9) output(16,eq,20) output(16,eq,29) output(16,eq,9) output(20,eq,29) output(20,eq,9) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(35,eq,59)
Optimization: 21 1
Answer: 7
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,7),1,for(neg(atom(hasOiliness(1)))),1) preference(1,(1,10),1,for(neg(atom(hasOftenSold(1)))),3) preference(1,(1,4),1,for(atom(hasPrice(1))),1) preference(1,(1,5),1,for(atom(hasOiliness(0))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,worse,16) output(11,worse,29) output(20,worse,29) output(51,worse,9) output(6,worse,16) output(6,worse,29) output(35,worse,9) output(59,worse,9) output(11,eq,6) output(11,eq,20) output(11,eq,9) output(6,eq,20) output(6,eq,9) output(16,eq,29) output(20,eq,9) output(35,eq,59)
Optimization: 16 6
Answer: 8
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,10),1,for(neg(atom(hasOftenSold(1)))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,4),1,for(atom(hasPrice(1))),1) preference(1,(1,8),1,for(atom(hasOiliness(0))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(11,better,51) output(11,better,35) output(11,better,59) output(20,better,51) output(20,better,35) output(20,better,59) output(51,better,35) output(51,better,59) output(6,better,51) output(6,better,35) output(6,better,59) output(16,better,20) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,worse,16) output(11,worse,29) output(20,worse,29) output(51,worse,9) output(6,worse,16) output(6,worse,29) output(35,worse,9) output(59,worse,9) output(11,eq,6) output(11,eq,20) output(11,eq,9) output(6,eq,20) output(6,eq,9) output(16,eq,29) output(20,eq,9)
Optimization: 15 6
Answer: 9
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(2)))),9) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,8),1,for(atom(hasOiliness(0))),11) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(11,better,20) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,20) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,worse,16) output(11,worse,29) output(20,worse,29) output(20,worse,51) output(6,worse,16) output(6,worse,29) output(11,eq,6)
Optimization: 7 6
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,5),1,for(neg(atom(hasPriceLevel(2)))),9) preference(1,(1,6),1,for(neg(atom(hasOiliness(1)))),11) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(0)))),7) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(11,better,6) output(11,better,20) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,worse,16) output(11,worse,29) output(20,worse,29) output(6,worse,16) output(6,worse,20) output(6,worse,29)
Optimization: 6 8
Answer: 11
preference(1,(1,5),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,6),1,for(neg(atom(hasOiliness(1)))),11) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(0)))),1) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,2),1,for(atom(hasPrice(0))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,worse,16) output(20,worse,29) output(6,worse,16) output(6,worse,20) output(6,worse,29)
Optimization: 5 8
Answer: 12
preference(1,(1,5),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,6),1,for(neg(atom(hasOiliness(1)))),11) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(0)))),5) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,10),1,for(atom(hasPriceLevel(1))),3) preference(1,less(weight)) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,20) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(11,worse,16) output(20,worse,29) output(6,worse,16) output(6,worse,29)
Optimization: 4 9
Answer: 13
preference(1,(1,5),1,for(neg(atom(hasPriceLevel(2)))),9) preference(1,(1,6),1,for(neg(atom(hasOiliness(1)))),11) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(1)))),3) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),3) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(6,worse,16) output(6,worse,20) output(6,eq,29)
Optimization: 3 9
Answer: 14
preference(1,(1,5),1,for(neg(atom(hasPriceLevel(2)))),9) preference(1,(1,6),1,for(neg(atom(hasOiliness(1)))),11) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,8),1,for(neg(atom(hasPriceLevel(1)))),5) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),11) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,10),1,for(atom(hasOiliness(0))),3) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(6,worse,16) output(6,worse,20)
Optimization: 2 10
Answer: 15
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(2)))),1) preference(1,(1,6),1,for(neg(atom(hasOftenSold(0)))),8) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(3)))),7) preference(1,(1,2),1,for(atom(hasOftenSold(0))),8) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,8),1,for(atom(hasOiliness(0))),4) preference(1,(1,10),1,for(atom(hasPrice(0))),6) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(35,eq,59)
Optimization: 1 10
Answer: 16
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,2),1,for(neg(atom(hasPriceLevel(0)))),1) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(0)))),2) preference(1,(1,3),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,8),1,for(atom(hasOiliness(0))),4) preference(1,(1,9),1,for(atom(hasPrice(0))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 10
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,2),1,for(neg(atom(hasOilyLevel(0)))),1) preference(1,(1,3),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,8),1,for(atom(hasOiliness(0))),4) preference(1,(1,9),1,for(atom(hasPrice(0))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 9
Answer: 18
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,3),1,for(atom(hasOilyLevel(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,8),1,for(atom(hasOiliness(0))),4) preference(1,(1,9),1,for(atom(hasPrice(0))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 8
Progression : 0 [1;8] (Error: 7)
Progression : 0 [2;8] (Error: 3)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.171 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 18+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 1198.119s (Solving: 1193.07s 1st Model: 0.04s Unsat: 0.00s)
CPU Time     : 4776.525s
Threads      : 4        (Winner: 4)

Choices      : 21732437 (Domain: 18210)
Conflicts    : 5660049  (Analyzed: 5660047)
Restarts     : 6226     (Average: 909.10 Last: 215832)
Model-Level  : 663.1   
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 5677165  (Deleted: 5297034)
  Binary     : 1412     (Ratio:   0.02%)
  Ternary    : 656      (Ratio:   0.01%)
  Conflict   : 5660047  (Average Length: 1022.1 Ratio:  99.70%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 17118    (Average Length:  101.8 Ratio:   0.30%) 
  Distributed: 5706     (Ratio:   0.10% Average LBD: 3.45) 
  Integrated : 17118    (Ratio: 300.00% Unit: 11 Average Jumps: 97.09)
Backjumps    : 5660047  (Average:  2.97 Max: 2228 Sum: 16809570)
  Executed   : 5660046  (Average:  2.97 Max: 2228 Sum: 16809541 Ratio: 100.00%)
  Bounded    : 1        (Average: 29.00 Max:  29 Sum:     29 Ratio:   0.00%)

Rules        : 1294635 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 362939  
Bodies       : 366932  
  Sum        : 216     
  Count      : 10      
Equivalences : 1077392  (Atom=Atom: 346659 Body=Body: 355228 Other: 375505)
Tight        : Yes
Variables    : 15523    (Eliminated:    0 Frozen: 10563)
Constraints  : 963061   (Binary:  98.8% Ternary:   0.5% Other:   0.7%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPriceLevel(1))  ; 
  1 :: atom(hasPrice(1)) ; 
  2 :: atom(hasOiliness(0)) ; 
  1 :: not atom(hasOiliness(1))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPriceLevel(1))  ; 
  1 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  2 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasPriceLevel(2)) ; 
  1 :: not atom(hasPriceLevel(1))  ; 
  9 :: not atom(hasPriceLevel(2))  ; 
  2 :: atom(hasMinorGrp(1)) ; 
  11 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasPriceLevel(2)) ; 
  1 :: not atom(hasPriceLevel(1))  ; 
  7 :: atom(hasMinorGrp(1)) ; 
  9 :: not atom(hasPriceLevel(2))  ; 
  11 :: not atom(hasOiliness(1))  ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  7 :: not atom(hasOilyLevel(0))  ; 
  2 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasPriceLevel(2)) ; 
  9 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  1 :: not atom(hasPriceLevel(1))  ; 
  11 :: not atom(hasOiliness(1))  ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  1 :: not atom(hasOilyLevel(0))  ; 
  2 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasPriceLevel(2)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  9 :: not atom(hasPrice(1))  ; 
  11 :: not atom(hasOiliness(1))  ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  5 :: not atom(hasOilyLevel(0))  ; 
  1 :: not atom(hasPriceLevel(1))  ; 
  3 :: atom(hasPriceLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasPriceLevel(2)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  9 :: not atom(hasPriceLevel(2))  ; 
  11 :: not atom(hasOiliness(1))  ; 
  3 :: not atom(hasOilyLevel(1))  ; 
  3 :: atom(hasMinorGrp(2)) ; 
  1 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasPriceLevel(2)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  9 :: not atom(hasPriceLevel(2))  ; 
  11 :: not atom(hasOiliness(1))  ; 
  1 :: not atom(hasOftenSold(1))  ; 
  5 :: not atom(hasPriceLevel(1))  ; 
  1 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPriceLevel(2))  ; 
  8 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  8 :: not atom(hasOftenSold(0))  ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  4 :: atom(hasOiliness(0)) ; 
  7 :: not atom(hasMinorGrp(3))  ; 
  6 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPriceLevel(1))  ; 
  1 :: not atom(hasPriceLevel(0))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasOilyLevel(0))  ; 
  4 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPriceLevel(1))  ; 
  1 :: not atom(hasOilyLevel(0))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPriceLevel(1))  ; 
  2 :: atom(hasOilyLevel(1)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(0)) 
}.
