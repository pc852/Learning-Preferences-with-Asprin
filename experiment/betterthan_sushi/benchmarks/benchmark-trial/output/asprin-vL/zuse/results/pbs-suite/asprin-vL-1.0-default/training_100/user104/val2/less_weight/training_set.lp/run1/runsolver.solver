asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(6,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,51) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(20,eq,29) output(20,eq,51) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(11,better,6) output(11,better,20) output(16,better,20) output(20,worse,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(6,worse,16) output(6,worse,29) output(6,worse,51) output(6,worse,35) output(6,worse,59) output(6,worse,9) output(11,eq,16) output(11,eq,29) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(6,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(29,eq,51) output(29,eq,35) output(29,eq,59) output(29,eq,9) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 33 1
Answer: 3
preference(1,(1,6),1,for(atom(hasMinorGrp(3))),12) preference(1,(1,7),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(11,better,6) output(11,better,20) output(11,better,29) output(16,better,20) output(16,better,29) output(20,worse,51) output(20,worse,35) output(20,worse,59) output(20,worse,9) output(6,worse,16) output(6,worse,51) output(6,worse,35) output(6,worse,59) output(6,worse,9) output(29,worse,51) output(29,worse,35) output(29,worse,59) output(29,worse,9) output(11,eq,16) output(11,eq,51) output(11,eq,35) output(11,eq,59) output(11,eq,9) output(6,eq,20) output(6,eq,29) output(16,eq,51) output(16,eq,35) output(16,eq,59) output(16,eq,9) output(20,eq,29) output(51,eq,35) output(51,eq,59) output(51,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 31 2
Answer: 4
preference(1,(1,5),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),12) preference(1,less(weight)) output(11,better,6) output(11,better,20) output(11,better,51) output(11,better,9) output(16,better,20) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,9) output(20,worse,29) output(20,worse,35) output(20,worse,59) output(51,worse,35) output(51,worse,59) output(6,worse,16) output(6,worse,29) output(6,worse,35) output(6,worse,59) output(11,eq,16) output(11,eq,29) output(11,eq,35) output(11,eq,59) output(6,eq,20) output(6,eq,51) output(6,eq,9) output(16,eq,29) output(16,eq,35) output(16,eq,59) output(20,eq,51) output(20,eq,9) output(29,eq,35) output(29,eq,59) output(51,eq,9) output(35,eq,59)
Optimization: 25 2
Answer: 5
preference(1,(1,7),1,for(atom(hasMinorGrp(1))),12) preference(1,less(weight)) output(11,better,51) output(11,better,9) output(20,better,51) output(20,better,9) output(6,better,51) output(6,better,9) output(16,better,51) output(16,better,9) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,9) output(51,worse,35) output(51,worse,59) output(11,eq,6) output(11,eq,16) output(11,eq,20) output(11,eq,29) output(11,eq,35) output(11,eq,59) output(6,eq,16) output(6,eq,20) output(6,eq,29) output(6,eq,35) output(6,eq,59) output(16,eq,20) output(16,eq,29) output(16,eq,35) output(16,eq,59) output(20,eq,29) output(20,eq,35) output(20,eq,59) output(29,eq,35) output(29,eq,59) output(51,eq,9) output(35,eq,59)
Optimization: 24 1
Answer: 6
preference(1,(1,10),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,6),1,for(atom(hasOiliness(0))),12) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,14),1,for(atom(hasMinorGrp(3))),12) preference(1,less(weight)) output(11,better,6) output(11,better,20) output(11,better,29) output(11,better,35) output(11,better,59) output(11,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(16,better,20) output(16,better,29) output(16,better,35) output(16,better,59) output(16,better,9) output(20,worse,51) output(6,worse,16) output(6,worse,51) output(29,worse,51) output(11,eq,16) output(11,eq,51) output(6,eq,20) output(6,eq,29) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,51) output(20,eq,29) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(29,eq,35) output(29,eq,59) output(29,eq,9) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 22 4
Answer: 7
preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),12) preference(1,(1,6),1,for(atom(hasOiliness(0))),12) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(11,better,6) output(11,better,20) output(11,better,35) output(11,better,59) output(11,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(16,better,20) output(16,better,35) output(16,better,59) output(16,better,9) output(29,better,35) output(29,better,59) output(29,better,9) output(20,worse,29) output(20,worse,51) output(6,worse,16) output(6,worse,29) output(6,worse,51) output(11,eq,16) output(11,eq,29) output(11,eq,51) output(6,eq,20) output(6,eq,35) output(6,eq,59) output(6,eq,9) output(16,eq,29) output(16,eq,51) output(20,eq,35) output(20,eq,59) output(20,eq,9) output(29,eq,51) output(35,eq,59) output(35,eq,9) output(59,eq,9)
Optimization: 21 3
Answer: 8
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,5),1,for(neg(atom(hasOilyLevel(2)))),12) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),12) preference(1,(1,9),1,for(neg(atom(hasOiliness(0)))),11) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),12) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,1),1,for(atom(hasOiliness(1))),11) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),11) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),12) preference(1,(1,7),1,for(atom(hasPrice(0))),12) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,14),1,for(atom(hasOilyLevel(1))),11) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,59) output(6,better,9) output(35,better,59) output(35,better,9) output(20,worse,35) output(51,worse,35) output(16,worse,35) output(29,worse,35) output(6,eq,35) output(16,eq,20) output(16,eq,29) output(16,eq,51) output(16,eq,59) output(16,eq,9) output(20,eq,29) output(20,eq,51) output(20,eq,59) output(20,eq,9) output(29,eq,51) output(29,eq,59) output(29,eq,9) output(51,eq,59) output(51,eq,9) output(59,eq,9)
Optimization: 20 14
Answer: 9
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),12) preference(1,(1,9),1,for(neg(atom(hasOiliness(0)))),11) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(1)))),11) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,1),1,for(atom(hasOiliness(1))),11) preference(1,(1,2),1,for(atom(hasOilyLevel(2))),11) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),11) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,11),1,for(atom(hasOftenSold(0))),12) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,14),1,for(atom(hasOilyLevel(1))),11) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(6,better,16) output(6,better,20) output(6,better,51) output(6,better,59) output(6,better,9) output(35,better,59) output(35,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(20,worse,29) output(20,worse,35) output(51,worse,35) output(6,worse,29) output(16,worse,29) output(16,worse,35) output(11,eq,29) output(6,eq,35) output(16,eq,20) output(16,eq,51) output(16,eq,59) output(16,eq,9) output(20,eq,51) output(20,eq,59) output(20,eq,9) output(51,eq,59) output(51,eq,9) output(59,eq,9)
Optimization: 18 12
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasOilyLevel(1)))),12) preference(1,(1,6),1,for(neg(atom(hasPriceLevel(1)))),10) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,13),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,1),1,for(atom(hasPrice(0))),1) preference(1,(1,4),1,for(atom(hasPriceLevel(1))),8) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),3) preference(1,(1,7),1,for(atom(hasOilyLevel(2))),12) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),11) preference(1,(1,9),1,for(atom(hasOftenSold(0))),12) preference(1,(1,11),1,for(atom(hasPrice(1))),7) preference(1,(1,14),1,for(atom(hasOiliness(0))),7) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(6,better,51) output(16,better,51) output(16,better,35) output(16,better,59) output(35,better,59) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9) output(20,worse,29) output(51,worse,35) output(51,worse,59) output(51,worse,9) output(6,worse,16) output(6,worse,20) output(6,worse,29) output(6,worse,35) output(6,worse,9) output(16,worse,20) output(16,worse,29) output(35,worse,9) output(59,worse,9) output(11,eq,29) output(6,eq,59) output(16,eq,9)
Optimization: 16 12
Answer: 11
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(2)))),1) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),3) preference(1,(1,11),1,for(neg(atom(hasOiliness(1)))),9) preference(1,(1,14),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,1),1,for(atom(hasPriceLevel(2))),9) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,7),1,for(atom(hasOftenSold(0))),1) preference(1,(1,8),1,for(atom(hasOiliness(0))),9) preference(1,(1,9),1,for(atom(hasOiliness(1))),1) preference(1,(1,10),1,for(atom(hasPrice(0))),10) preference(1,(1,12),1,for(atom(hasOilyLevel(2))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),5) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 12
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,6),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,13),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,1),1,for(atom(hasPrice(0))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,7),1,for(atom(hasPrice(1))),2) preference(1,(1,8),1,for(atom(hasOiliness(0))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,11),1,for(atom(hasOftenSold(0))),8) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(3))),7) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 13
Progression : 0 [ 2;13] (Error: 5.5)
Answer: 13
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(2)))),2) preference(1,(1,3),1,for(neg(atom(hasOftenSold(1)))),12) preference(1,(1,4),1,for(neg(atom(hasOiliness(1)))),8) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(2)))),6) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),5) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,8),1,for(atom(hasPriceLevel(2))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,11),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),3) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 12
Answer: 14
preference(1,(1,1),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(2)))),2) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),11) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,5),1,for(atom(hasOftenSold(1))),8) preference(1,(1,8),1,for(atom(hasOiliness(0))),8) preference(1,(1,9),1,for(atom(hasPriceLevel(2))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,11),1,for(atom(hasOftenSold(0))),2) preference(1,(1,13),1,for(atom(hasOilyLevel(2))),1) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 11
Answer: 15
preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),1) preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,7),1,for(neg(atom(hasOiliness(0)))),2) preference(1,(1,8),1,for(atom(hasOilyLevel(2))),6) preference(1,(1,9),1,for(atom(hasPrice(0))),11) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,11),1,for(atom(hasOiliness(0))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,14),1,for(atom(hasPriceLevel(2))),5) preference(1,less(weight)) output(11,better,6) output(11,better,16) output(11,better,20) output(11,better,29) output(11,better,51) output(11,better,35) output(11,better,59) output(11,better,9) output(20,better,29) output(20,better,51) output(20,better,35) output(20,better,59) output(20,better,9) output(51,better,35) output(51,better,59) output(51,better,9) output(6,better,16) output(6,better,20) output(6,better,29) output(6,better,51) output(6,better,35) output(6,better,59) output(6,better,9) output(16,better,20) output(16,better,29) output(16,better,51) output(16,better,35) output(16,better,59) output(16,better,9) output(35,better,59) output(35,better,9) output(59,better,9) output(29,better,51) output(29,better,35) output(29,better,59) output(29,better,9)
Optimization: 0 10
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.138 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 15+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 598.213s (Solving: 591.52s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 2372.288s
Threads      : 4        (Winner: 4)

Choices      : 11422297 (Domain: 12282)
Conflicts    : 2560151  (Analyzed: 2560149)
Restarts     : 2663     (Average: 961.38 Last: 207518)
Model-Level  : 452.5   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 2569089  (Deleted: 2346565)
  Binary     : 924      (Ratio:   0.04%)
  Ternary    : 402      (Ratio:   0.02%)
  Conflict   : 2560149  (Average Length: 1280.2 Ratio:  99.65%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 8940     (Average Length:  127.7 Ratio:   0.35%) 
  Distributed: 2980     (Ratio:   0.12% Average LBD: 3.42) 
  Integrated : 8940     (Ratio: 300.00% Unit: 44 Average Jumps: 28.34)
Backjumps    : 2560149  (Average:  3.27 Max: 2790 Sum: 8381322)
  Executed   : 2560148  (Average:  3.27 Max: 2790 Sum: 8381315 Ratio: 100.00%)
  Bounded    : 1        (Average:  7.00 Max:   7 Sum:      7 Ratio:   0.00%)

Rules        : 1811787 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 503515  
Bodies       : 514020  
  Sum        : 216     
  Count      : 14      
Equivalences : 1506348  (Atom=Atom: 484903 Body=Body: 496928 Other: 524517)
Tight        : Yes
Variables    : 19827    (Eliminated:    0 Frozen: 12883)
Constraints  : 1347217  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(3)) ; 
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOiliness(0)) ; 
  12 :: not atom(hasOiliness(1))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOiliness(0)) ; 
  12 :: not atom(hasOiliness(1))  ; 
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasOiliness(1)) ; 
  11 :: atom(hasOilyLevel(2)) ; 
  11 :: not atom(hasMinorGrp(2))  ; 
  11 :: atom(hasMinorGrp(0)) ; 
  12 :: not atom(hasOilyLevel(2))  ; 
  12 :: atom(hasMinorGrp(3)) ; 
  12 :: atom(hasPrice(0)) ; 
  12 :: not atom(hasPrice(1))  ; 
  11 :: not atom(hasOiliness(0))  ; 
  12 :: not atom(hasMinorGrp(0))  ; 
  12 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  11 :: atom(hasOilyLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: atom(hasOiliness(1)) ; 
  11 :: atom(hasOilyLevel(2)) ; 
  11 :: not atom(hasMinorGrp(2))  ; 
  11 :: atom(hasMinorGrp(0)) ; 
  12 :: atom(hasMinorGrp(2)) ; 
  12 :: not atom(hasOilyLevel(2))  ; 
  11 :: not atom(hasOiliness(0))  ; 
  11 :: not atom(hasPriceLevel(1))  ; 
  12 :: atom(hasOftenSold(0)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: not atom(hasOftenSold(1))  ; 
  11 :: atom(hasOilyLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(0)) ; 
  12 :: not atom(hasOilyLevel(1))  ; 
  8 :: atom(hasPriceLevel(1)) ; 
  3 :: atom(hasPriceLevel(2)) ; 
  10 :: not atom(hasPriceLevel(1))  ; 
  12 :: atom(hasOilyLevel(2)) ; 
  11 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasPrice(1)) ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  12 :: not atom(hasOftenSold(1))  ; 
  7 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasPriceLevel(2)) ; 
  1 :: not atom(hasMinorGrp(2))  ; 
  9 :: atom(hasMinorGrp(2)) ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  3 :: not atom(hasPrice(1))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  9 :: not atom(hasOiliness(1))  ; 
  1 :: atom(hasOilyLevel(2)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: not atom(hasOiliness(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrice(0)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasMinorGrp(0))  ; 
  1 :: not atom(hasOiliness(0))  ; 
  2 :: atom(hasPrice(1)) ; 
  4 :: atom(hasOiliness(0)) ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  8 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  1 :: not atom(hasPriceLevel(1))  ; 
  7 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPriceLevel(2))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  12 :: not atom(hasOftenSold(1))  ; 
  8 :: not atom(hasOiliness(1))  ; 
  4 :: not atom(hasMinorGrp(2))  ; 
  6 :: not atom(hasOilyLevel(2))  ; 
  7 :: atom(hasPriceLevel(2)) ; 
  5 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasOilyLevel(1)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  1 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasMinorGrp(2))  ; 
  11 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPriceLevel(2)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPriceLevel(1))  ; 
  2 :: not atom(hasOftenSold(1))  ; 
  2 :: not atom(hasOiliness(0))  ; 
  6 :: atom(hasOilyLevel(2)) ; 
  11 :: atom(hasPrice(0)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasPriceLevel(2)) 
}.
