asprin_vL version 1.0
Reading from stdin
-:305:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:315:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:330:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:411:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:672:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:685:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:862:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:991:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1063:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1067:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1073:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1172:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1198:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1318:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1352:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1374:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:222:1-16: info: no atoms over signature occur in program:
  output/3

-:214:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:215:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(37,eq,1) output(37,eq,18) output(37,eq,11) output(37,eq,5) output(37,eq,35) output(37,eq,3) output(37,eq,52) output(37,eq,14) output(1,eq,18) output(1,eq,11) output(1,eq,5) output(1,eq,35) output(1,eq,3) output(1,eq,52) output(1,eq,14) output(18,eq,11) output(18,eq,5) output(18,eq,35) output(18,eq,3) output(18,eq,52) output(18,eq,14) output(11,eq,5) output(11,eq,35) output(11,eq,3) output(11,eq,52) output(11,eq,14) output(5,eq,35) output(5,eq,3) output(5,eq,52) output(5,eq,14) output(35,eq,3) output(35,eq,52) output(35,eq,14) output(3,eq,52) output(3,eq,14) output(52,eq,14)
Optimization: 36 0
Answer: 2
preference(1,(1,7),1,for(atom(hasOilyLevel(2))),12) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,3) output(37,better,11) output(37,better,5) output(37,better,3) output(1,better,11) output(1,better,5) output(1,better,3) output(35,better,3) output(11,worse,35) output(11,worse,52) output(11,worse,14) output(3,worse,52) output(3,worse,14) output(5,worse,35) output(5,worse,52) output(5,worse,14) output(37,eq,1) output(37,eq,18) output(37,eq,35) output(37,eq,52) output(37,eq,14) output(1,eq,18) output(1,eq,35) output(1,eq,52) output(1,eq,14) output(18,eq,35) output(18,eq,52) output(18,eq,14) output(11,eq,5) output(11,eq,3) output(5,eq,3) output(35,eq,52) output(35,eq,14) output(52,eq,14)
Optimization: 26 1
Answer: 3
preference(1,(1,6),1,for(atom(hasMinorGrp(2))),12) preference(1,(1,7),1,for(atom(hasOilyLevel(2))),12) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(11,worse,52) output(11,worse,14) output(3,worse,52) output(3,worse,14) output(5,worse,52) output(5,worse,14) output(35,worse,52) output(35,worse,14) output(37,eq,1) output(37,eq,18) output(37,eq,52) output(37,eq,14) output(1,eq,18) output(1,eq,52) output(1,eq,14) output(18,eq,52) output(18,eq,14) output(11,eq,5) output(11,eq,35) output(11,eq,3) output(5,eq,35) output(5,eq,3) output(35,eq,3) output(52,eq,14)
Optimization: 24 2
Answer: 4
preference(1,(1,6),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,7),1,for(atom(hasOftenSold(0))),12) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),12) preference(1,less(weight)) output(18,better,35) output(18,better,52) output(18,better,14) output(11,better,35) output(11,better,52) output(11,better,14) output(1,better,35) output(1,better,52) output(1,better,14) output(3,better,52) output(3,better,14) output(5,better,35) output(5,better,52) output(5,better,14) output(37,worse,1) output(37,worse,18) output(37,worse,11) output(37,worse,5) output(37,worse,3) output(35,worse,3) output(37,eq,35) output(37,eq,52) output(37,eq,14) output(1,eq,18) output(1,eq,11) output(1,eq,5) output(1,eq,3) output(18,eq,11) output(18,eq,5) output(18,eq,3) output(11,eq,5) output(11,eq,3) output(5,eq,3) output(35,eq,52) output(35,eq,14) output(52,eq,14)
Optimization: 22 3
Answer: 5
preference(1,(1,6),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,7),1,for(atom(hasOilyLevel(2))),12) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,3) output(18,better,14) output(37,better,11) output(37,better,5) output(37,better,3) output(37,better,14) output(1,better,11) output(1,better,5) output(1,better,3) output(1,better,14) output(52,better,14) output(35,better,3) output(35,better,14) output(11,worse,35) output(11,worse,52) output(3,worse,52) output(5,worse,35) output(5,worse,52) output(37,eq,1) output(37,eq,18) output(37,eq,35) output(37,eq,52) output(1,eq,18) output(1,eq,35) output(1,eq,52) output(18,eq,35) output(18,eq,52) output(11,eq,5) output(11,eq,3) output(11,eq,14) output(5,eq,3) output(5,eq,14) output(35,eq,52) output(3,eq,14)
Optimization: 21 2
Answer: 6
preference(1,(1,7),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(18,better,5) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,5) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,5) output(1,better,3) output(1,better,52) output(1,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(5,worse,35) output(37,eq,1) output(37,eq,18) output(37,eq,11) output(37,eq,35) output(1,eq,18) output(1,eq,11) output(1,eq,35) output(18,eq,11) output(18,eq,35) output(11,eq,35) output(5,eq,3) output(5,eq,52) output(5,eq,14) output(3,eq,52) output(3,eq,14) output(52,eq,14)
Optimization: 17 2
Answer: 7
preference(1,(1,7),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),12) preference(1,less(weight)) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(37,eq,1) output(37,eq,18) output(37,eq,11) output(1,eq,18) output(1,eq,11) output(18,eq,11) output(5,eq,35) output(5,eq,3) output(5,eq,52) output(5,eq,14) output(35,eq,3) output(35,eq,52) output(35,eq,14) output(3,eq,52) output(3,eq,14) output(52,eq,14)
Optimization: 16 3
Progression : [ 1;16] (Error: 15)
Answer: 8
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(3)))),7) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),7) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(1)))),9) preference(1,(1,12),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(2)))),7) preference(1,(1,1),1,for(atom(hasPriceLevel(1))),7) preference(1,(1,3),1,for(atom(hasPriceLevel(0))),7) preference(1,(1,5),1,for(atom(hasOftenSold(0))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,7),1,for(atom(hasOilyLevel(0))),7) preference(1,(1,11),1,for(atom(hasPrice(0))),7) preference(1,(1,13),1,for(atom(hasOilyLevel(1))),11) preference(1,less(weight)) output(18,better,5) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,3) output(1,better,52) output(1,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(18,worse,35) output(11,worse,35) output(5,worse,35) output(37,eq,1) output(37,eq,35) output(1,eq,35) output(18,eq,11) output(5,eq,3) output(5,eq,52) output(5,eq,14) output(3,eq,52) output(3,eq,14) output(52,eq,14)
Optimization: 13 13
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(3)))),11) preference(1,(1,2),1,for(neg(atom(hasPriceLevel(2)))),11) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(2)))),11) preference(1,(1,5),1,for(neg(atom(hasOftenSold(0)))),11) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(0)))),11) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),11) preference(1,(1,9),1,for(neg(atom(hasOiliness(0)))),9) preference(1,(1,11),1,for(neg(atom(hasPrice(1)))),12) preference(1,(1,4),1,for(atom(hasOilyLevel(1))),11) preference(1,(1,6),1,for(atom(hasOftenSold(1))),11) preference(1,(1,10),1,for(atom(hasOiliness(1))),4) preference(1,(1,12),1,for(atom(hasPriceLevel(0))),8) preference(1,(1,13),1,for(atom(hasPrice(0))),12) preference(1,(1,14),1,for(atom(hasOilyLevel(0))),11) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,3) output(11,better,52) output(1,better,11) output(1,better,5) output(1,better,3) output(1,better,52) output(1,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(11,worse,35) output(52,worse,14) output(3,worse,14) output(5,worse,35) output(5,worse,14) output(1,eq,18) output(1,eq,35) output(18,eq,35) output(11,eq,14) output(5,eq,3) output(5,eq,52) output(3,eq,52)
Optimization: 12 14
Answer: 10
preference(1,(1,3),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(2)))),8) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),7) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),12) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,2),1,for(atom(hasOilyLevel(1))),7) preference(1,(1,5),1,for(atom(hasPriceLevel(1))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),11) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,11),1,for(atom(hasOftenSold(0))),11) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),9) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,14),1,for(atom(hasPrice(0))),4) preference(1,less(weight)) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,35) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(3,better,52) output(3,better,14) output(5,better,35) output(5,better,52) output(5,better,14) output(18,worse,11) output(37,worse,1) output(37,worse,18) output(37,worse,11) output(37,worse,5) output(37,worse,3) output(35,worse,3) output(5,eq,3) output(35,eq,52) output(35,eq,14) output(52,eq,14)
Optimization: 11 14
Answer: 11
preference(1,(1,3),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(2)))),8) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),7) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),12) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,2),1,for(atom(hasOilyLevel(1))),7) preference(1,(1,5),1,for(atom(hasPriceLevel(1))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),11) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,11),1,for(atom(hasOftenSold(0))),11) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),8) preference(1,(1,13),1,for(atom(hasPrice(1))),5) preference(1,(1,14),1,for(atom(hasPrice(0))),4) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,35) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(3,better,52) output(3,better,14) output(5,better,35) output(5,better,52) output(5,better,14) output(37,worse,1) output(37,worse,18) output(37,worse,11) output(37,worse,5) output(37,worse,3) output(52,worse,14) output(35,worse,3) output(35,worse,14) output(5,eq,3) output(35,eq,52)
Optimization: 10 14
Answer: 12
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),4) preference(1,(1,4),1,for(neg(atom(hasPriceLevel(2)))),8) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),11) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),12) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,12),1,for(neg(atom(hasOilyLevel(2)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,2),1,for(atom(hasOilyLevel(1))),7) preference(1,(1,5),1,for(atom(hasPriceLevel(1))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),11) preference(1,(1,9),1,for(atom(hasPrice(1))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),5) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),10) preference(1,(1,14),1,for(atom(hasPrice(0))),4) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,35) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,35) output(5,better,52) output(5,better,14) output(35,better,14) output(37,worse,1) output(37,worse,18) output(37,worse,11) output(37,worse,5) output(37,worse,3) output(1,worse,18) output(35,worse,3) output(5,eq,3) output(35,eq,52)
Optimization: 9 14
Answer: 13
preference(1,(1,4),1,for(neg(atom(hasPriceLevel(2)))),8) preference(1,(1,7),1,for(neg(atom(hasOftenSold(1)))),7) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),12) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,12),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,2),1,for(atom(hasOilyLevel(1))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,5),1,for(atom(hasPriceLevel(1))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),11) preference(1,(1,9),1,for(atom(hasPrice(1))),4) preference(1,(1,11),1,for(atom(hasOftenSold(0))),11) preference(1,(1,13),1,for(atom(hasPrice(0))),4) preference(1,(1,14),1,for(atom(hasPriceLevel(2))),8) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,35) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,35) output(5,better,52) output(5,better,14) output(35,better,14) output(37,worse,1) output(37,worse,18) output(37,worse,11) output(37,worse,5) output(37,worse,3) output(35,worse,3) output(5,eq,3) output(35,eq,52)
Optimization: 8 14
Answer: 14
preference(1,(1,2),1,for(neg(atom(hasPrice(1)))),3) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,5),1,for(neg(atom(hasOiliness(0)))),6) preference(1,(1,7),1,for(neg(atom(hasOilyLevel(1)))),11) preference(1,(1,11),1,for(neg(atom(hasOftenSold(0)))),4) preference(1,(1,12),1,for(neg(atom(hasPriceLevel(1)))),7) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,1),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,3),1,for(atom(hasOftenSold(0))),4) preference(1,(1,6),1,for(atom(hasOiliness(0))),5) preference(1,(1,8),1,for(atom(hasOilyLevel(2))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),11) preference(1,(1,10),1,for(atom(hasPrice(0))),8) preference(1,(1,14),1,for(atom(hasPriceLevel(1))),7) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(52,worse,14) output(3,worse,14) output(5,worse,35) output(5,worse,14) output(5,eq,3) output(5,eq,52) output(3,eq,52)
Optimization: 7 14
Answer: 15
preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),5) preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,7),1,for(neg(atom(hasOiliness(1)))),9) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,11),1,for(neg(atom(hasOftenSold(1)))),11) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,2),1,for(atom(hasPrice(0))),3) preference(1,(1,3),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,5),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,8),1,for(atom(hasOftenSold(0))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,12),1,for(atom(hasOiliness(1))),11) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),8) preference(1,less(weight)) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,35) output(5,better,52) output(5,better,14) output(35,better,52) output(35,better,14) output(37,worse,1) output(35,worse,3) output(18,eq,11) output(5,eq,3)
Optimization: 4 14
Answer: 16
preference(1,(1,2),1,for(neg(atom(hasPriceLevel(2)))),3) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),5) preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,7),1,for(neg(atom(hasOiliness(1)))),9) preference(1,(1,9),1,for(neg(atom(hasPriceLevel(1)))),8) preference(1,(1,11),1,for(neg(atom(hasOftenSold(1)))),11) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,3),1,for(atom(hasPriceLevel(2))),4) preference(1,(1,5),1,for(atom(hasOilyLevel(1))),12) preference(1,(1,8),1,for(atom(hasOftenSold(0))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,12),1,for(atom(hasOiliness(1))),11) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),8) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,35) output(5,better,52) output(5,better,14) output(35,better,52) output(35,better,14) output(37,worse,1) output(35,worse,3) output(5,eq,3)
Optimization: 3 14
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,5),1,for(neg(atom(hasOiliness(1)))),1) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,8),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,14),1,for(neg(atom(hasOiliness(0)))),11) preference(1,(1,2),1,for(atom(hasOiliness(1))),4) preference(1,(1,4),1,for(atom(hasOftenSold(1))),8) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,9),1,for(atom(hasOiliness(0))),7) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasOftenSold(0))),3) preference(1,(1,13),1,for(atom(hasPriceLevel(2))),12) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,52) output(5,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(5,worse,35) output(5,eq,3)
Optimization: 2 14
Progression : [2;2] (Error: 0)
Progression : 2 [ 1;14] (Error: 13)
Answer: 18
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,2),1,for(neg(atom(hasOiliness(1)))),4) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,4),1,for(neg(atom(hasOilyLevel(0)))),1) preference(1,(1,6),1,for(neg(atom(hasOftenSold(0)))),11) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,13),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,5),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,9),1,for(atom(hasOiliness(0))),5) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),6) preference(1,(1,11),1,for(atom(hasOftenSold(0))),9) preference(1,(1,12),1,for(atom(hasOiliness(1))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),7) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,52) output(5,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(5,worse,35) output(5,eq,3)
Optimization: 2 13
Answer: 19
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,2),1,for(neg(atom(hasOiliness(1)))),4) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,6),1,for(neg(atom(hasOftenSold(0)))),11) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,13),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,9),1,for(atom(hasOiliness(0))),5) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),6) preference(1,(1,11),1,for(atom(hasOftenSold(0))),9) preference(1,(1,12),1,for(atom(hasOiliness(1))),8) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,52) output(5,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(5,worse,35) output(5,eq,3)
Optimization: 2 12
Answer: 20
preference(1,(1,1),1,for(neg(atom(hasOilyLevel(2)))),5) preference(1,(1,2),1,for(neg(atom(hasOiliness(1)))),4) preference(1,(1,3),1,for(neg(atom(hasPriceLevel(1)))),2) preference(1,(1,6),1,for(neg(atom(hasOftenSold(0)))),11) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,13),1,for(neg(atom(hasOilyLevel(1)))),1) preference(1,(1,4),1,for(atom(hasPriceLevel(2))),12) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,10),1,for(atom(hasOilyLevel(2))),6) preference(1,(1,11),1,for(atom(hasOftenSold(0))),9) preference(1,(1,12),1,for(atom(hasOiliness(1))),8) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,52) output(5,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(5,worse,35) output(5,eq,3)
Optimization: 2 11
Answer: 21
preference(1,(1,1),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,7),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,11),1,for(neg(atom(hasOiliness(0)))),9) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(0)))),12) preference(1,(1,14),1,for(neg(atom(hasOftenSold(0)))),4) preference(1,(1,3),1,for(atom(hasOftenSold(0))),5) preference(1,(1,4),1,for(atom(hasPrice(1))),3) preference(1,(1,5),1,for(atom(hasOiliness(1))),8) preference(1,(1,8),1,for(atom(hasPriceLevel(1))),6) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,35) output(5,better,52) output(5,better,14) output(35,better,52) output(35,better,14) output(35,worse,3) output(5,eq,3)
Optimization: 2 10
Answer: 22
preference(1,(1,1),1,for(neg(atom(hasOftenSold(1)))),2) preference(1,(1,4),1,for(neg(atom(hasOiliness(0)))),8) preference(1,(1,7),1,for(neg(atom(hasPriceLevel(1)))),12) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(0)))),12) preference(1,(1,14),1,for(neg(atom(hasOftenSold(0)))),4) preference(1,(1,2),1,for(atom(hasOftenSold(0))),3) preference(1,(1,8),1,for(atom(hasPriceLevel(1))),6) preference(1,(1,11),1,for(atom(hasOiliness(1))),9) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,52) output(5,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(5,worse,35) output(5,eq,3)
Optimization: 2 9
Progression : 2 [2;9] (Error: 3.5)
Answer: 23
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),9) preference(1,(1,5),1,for(neg(atom(hasOiliness(0)))),7) preference(1,(1,10),1,for(neg(atom(hasPriceLevel(1)))),7) preference(1,(1,11),1,for(neg(atom(hasOftenSold(0)))),1) preference(1,(1,4),1,for(atom(hasOiliness(0))),4) preference(1,(1,7),1,for(atom(hasPriceLevel(1))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasOftenSold(0))),4) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,35) output(5,better,52) output(5,better,14) output(35,better,52) output(35,better,14) output(35,worse,3) output(5,eq,3)
Optimization: 2 8
Answer: 24
preference(1,(1,5),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,9),1,for(atom(hasOilyLevel(2))),6) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),8) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,52) output(5,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(5,worse,35) output(5,eq,3)
Optimization: 2 7
Answer: 25
preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,9),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,14),1,for(neg(atom(hasPriceLevel(1)))),3) preference(1,(1,5),1,for(atom(hasOiliness(1))),6) preference(1,(1,12),1,for(atom(hasPriceLevel(2))),8) preference(1,less(weight)) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(52,better,14) output(3,better,52) output(3,better,14) output(5,better,52) output(5,better,14) output(35,better,3) output(35,better,52) output(35,better,14) output(5,worse,35) output(5,eq,3)
Optimization: 2 6
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.104 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 25+
  Optimum    : unknown
Optimization : 2 6
Bounds       : 2 [2;6]
Calls        : 1
Time         : 598.214s (Solving: 591.03s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 2370.687s
Threads      : 4        (Winner: 4)

Choices      : 12844978 (Domain: 3897)
Conflicts    : 2479633  (Analyzed: 2479627)
Restarts     : 4075     (Average: 608.50 Last: 24657)
Model-Level  : 1195.1  
Problems     : 11       (Average Length: 0.36 Splits: 0)
Lemmas       : 2490015  (Deleted: 2291927)
  Binary     : 855      (Ratio:   0.03%)
  Ternary    : 558      (Ratio:   0.02%)
  Conflict   : 2479617  (Average Length: 1185.4 Ratio:  99.58%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 10398    (Average Length:  120.3 Ratio:   0.42%) 
  Distributed: 3469     (Ratio:   0.14% Average LBD: 3.56) 
  Integrated : 10407    (Ratio: 300.00% Unit: 168 Average Jumps: 25.09)
Backjumps    : 2479627  (Average:  3.58 Max: 3978 Sum: 8865339)
  Executed   : 2479611  (Average:  3.58 Max: 3978 Sum: 8865207 Ratio: 100.00%)
  Bounded    : 16       (Average:  8.25 Max:  37 Sum:    132 Ratio:   0.00%)

Rules        : 1831947 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 523675  
Bodies       : 534684  
  Sum        : 216     
  Count      : 14      
Equivalences : 1568340  (Atom=Atom: 505063 Body=Body: 517592 Other: 545685)
Tight        : Yes
Variables    : 19827    (Eliminated:    0 Frozen: 12883)
Constraints  : 1347217  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(2)) ; 
  12 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasOftenSold(0)) ; 
  12 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasOilyLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasMinorGrp(1)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  12 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPriceLevel(1)) ; 
  7 :: not atom(hasMinorGrp(3))  ; 
  7 :: atom(hasPriceLevel(0)) ; 
  7 :: not atom(hasPrice(1))  ; 
  7 :: atom(hasOftenSold(0)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasOilyLevel(0)) ; 
  7 :: not atom(hasMinorGrp(0))  ; 
  9 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(hasPrice(0)) ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  11 :: atom(hasOilyLevel(1)) ; 
  7 :: not atom(hasPriceLevel(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  11 :: not atom(hasMinorGrp(3))  ; 
  11 :: not atom(hasPriceLevel(2))  ; 
  11 :: not atom(hasMinorGrp(2))  ; 
  11 :: atom(hasOilyLevel(1)) ; 
  11 :: not atom(hasOftenSold(0))  ; 
  11 :: atom(hasOftenSold(1)) ; 
  11 :: not atom(hasMinorGrp(0))  ; 
  11 :: not atom(hasOilyLevel(2))  ; 
  9 :: not atom(hasOiliness(0))  ; 
  4 :: atom(hasOiliness(1)) ; 
  12 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasPriceLevel(0)) ; 
  12 :: atom(hasPrice(0)) ; 
  11 :: atom(hasOilyLevel(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasOilyLevel(1)) ; 
  5 :: not atom(hasOilyLevel(2))  ; 
  8 :: not atom(hasPriceLevel(2))  ; 
  3 :: atom(hasPriceLevel(1)) ; 
  11 :: atom(hasMinorGrp(1)) ; 
  7 :: not atom(hasOftenSold(1))  ; 
  12 :: not atom(hasMinorGrp(2))  ; 
  4 :: atom(hasMinorGrp(0)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  11 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasPriceLevel(2)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasOilyLevel(1)) ; 
  5 :: not atom(hasOilyLevel(2))  ; 
  8 :: not atom(hasPriceLevel(2))  ; 
  3 :: atom(hasPriceLevel(1)) ; 
  11 :: atom(hasMinorGrp(1)) ; 
  7 :: not atom(hasOftenSold(1))  ; 
  12 :: not atom(hasMinorGrp(2))  ; 
  4 :: atom(hasMinorGrp(0)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  11 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasPriceLevel(2)) ; 
  5 :: atom(hasPrice(1)) ; 
  4 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasOilyLevel(1)) ; 
  4 :: not atom(hasPrice(0))  ; 
  8 :: not atom(hasPriceLevel(2))  ; 
  3 :: atom(hasPriceLevel(1)) ; 
  11 :: atom(hasMinorGrp(1)) ; 
  11 :: not atom(hasOftenSold(1))  ; 
  12 :: not atom(hasMinorGrp(2))  ; 
  1 :: atom(hasPrice(1)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  5 :: atom(hasOftenSold(0)) ; 
  7 :: not atom(hasOilyLevel(2))  ; 
  10 :: atom(hasPriceLevel(2)) ; 
  4 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasOilyLevel(1)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  8 :: not atom(hasPriceLevel(2))  ; 
  3 :: atom(hasPriceLevel(1)) ; 
  11 :: atom(hasMinorGrp(1)) ; 
  7 :: not atom(hasOftenSold(1))  ; 
  12 :: not atom(hasMinorGrp(2))  ; 
  4 :: atom(hasPrice(1)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  11 :: atom(hasOftenSold(0)) ; 
  5 :: not atom(hasOilyLevel(2))  ; 
  4 :: atom(hasPrice(0)) ; 
  8 :: atom(hasPriceLevel(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(hasOilyLevel(1)) ; 
  3 :: not atom(hasPrice(1))  ; 
  4 :: atom(hasOftenSold(0)) ; 
  5 :: not atom(hasPrice(0))  ; 
  6 :: not atom(hasOiliness(0))  ; 
  5 :: atom(hasOiliness(0)) ; 
  11 :: not atom(hasOilyLevel(1))  ; 
  8 :: atom(hasOilyLevel(2)) ; 
  11 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasPrice(0)) ; 
  4 :: not atom(hasOftenSold(0))  ; 
  7 :: not atom(hasPriceLevel(1))  ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  7 :: atom(hasPriceLevel(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasPrice(0)) ; 
  4 :: atom(hasPriceLevel(2)) ; 
  5 :: not atom(hasPrice(1))  ; 
  12 :: atom(hasOilyLevel(1)) ; 
  9 :: not atom(hasPrice(0))  ; 
  9 :: not atom(hasOiliness(1))  ; 
  4 :: atom(hasOftenSold(0)) ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  11 :: not atom(hasOftenSold(1))  ; 
  11 :: atom(hasOiliness(1)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  8 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(1)) ; 
  3 :: not atom(hasPriceLevel(2))  ; 
  4 :: atom(hasPriceLevel(2)) ; 
  5 :: not atom(hasPrice(1))  ; 
  12 :: atom(hasOilyLevel(1)) ; 
  9 :: not atom(hasPrice(0))  ; 
  9 :: not atom(hasOiliness(1))  ; 
  4 :: atom(hasOftenSold(0)) ; 
  8 :: not atom(hasPriceLevel(1))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  11 :: not atom(hasOftenSold(1))  ; 
  11 :: atom(hasOiliness(1)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  8 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasOftenSold(1))  ; 
  4 :: atom(hasOiliness(1)) ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  1 :: not atom(hasOiliness(1))  ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  4 :: atom(hasMinorGrp(2)) ; 
  5 :: not atom(hasOilyLevel(2))  ; 
  7 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasOilyLevel(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  12 :: atom(hasPriceLevel(2)) ; 
  11 :: not atom(hasOiliness(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasOilyLevel(2))  ; 
  4 :: not atom(hasOiliness(1))  ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  1 :: not atom(hasOilyLevel(0))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  11 :: not atom(hasOftenSold(0))  ; 
  4 :: not atom(hasOftenSold(1))  ; 
  5 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasOilyLevel(2)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasOilyLevel(1))  ; 
  7 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasOilyLevel(2))  ; 
  4 :: not atom(hasOiliness(1))  ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  11 :: not atom(hasOftenSold(0))  ; 
  4 :: not atom(hasOftenSold(1))  ; 
  5 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasOilyLevel(2)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasOilyLevel(2))  ; 
  4 :: not atom(hasOiliness(1))  ; 
  2 :: not atom(hasPriceLevel(1))  ; 
  12 :: atom(hasPriceLevel(2)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  11 :: not atom(hasOftenSold(0))  ; 
  4 :: not atom(hasOftenSold(1))  ; 
  6 :: atom(hasOilyLevel(2)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  1 :: not atom(hasOilyLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasOftenSold(1))  ; 
  5 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  8 :: atom(hasOiliness(1)) ; 
  12 :: not atom(hasPriceLevel(1))  ; 
  6 :: atom(hasPriceLevel(1)) ; 
  9 :: not atom(hasPrice(1))  ; 
  9 :: not atom(hasOiliness(0))  ; 
  12 :: not atom(hasMinorGrp(0))  ; 
  4 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasOftenSold(1))  ; 
  3 :: atom(hasOftenSold(0)) ; 
  8 :: not atom(hasOiliness(0))  ; 
  12 :: not atom(hasPriceLevel(1))  ; 
  6 :: atom(hasPriceLevel(1)) ; 
  9 :: not atom(hasPrice(1))  ; 
  9 :: atom(hasOiliness(1)) ; 
  12 :: not atom(hasMinorGrp(0))  ; 
  4 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: not atom(hasMinorGrp(0))  ; 
  4 :: atom(hasOiliness(0)) ; 
  7 :: not atom(hasOiliness(0))  ; 
  6 :: atom(hasPriceLevel(1)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  7 :: not atom(hasPriceLevel(1))  ; 
  1 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOftenSold(1))  ; 
  2 :: not atom(hasPrice(1))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  6 :: atom(hasOilyLevel(2)) ; 
  8 :: atom(hasPriceLevel(2)) ; 
  3 :: not atom(hasPriceLevel(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOiliness(1)) ; 
  2 :: not atom(hasPrice(1))  ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  1 :: not atom(hasOftenSold(1))  ; 
  8 :: atom(hasPriceLevel(2)) ; 
  3 :: not atom(hasPriceLevel(1))  
}.
