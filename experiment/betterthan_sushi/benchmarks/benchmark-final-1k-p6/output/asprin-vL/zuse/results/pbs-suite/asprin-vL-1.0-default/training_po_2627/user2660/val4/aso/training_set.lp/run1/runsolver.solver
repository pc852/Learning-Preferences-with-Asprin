asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,4),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isUrchin(1))),()) preference(1,(1,6),0,for(atom(isUrchin(1))),()) preference(1,(1,7),0,for(atom(isUrchin(1))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isSweet(1))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(3,eq,1) output(3,eq,0) output(3,eq,6) output(3,eq,9) output(3,eq,8) output(3,eq,7) output(3,eq,2) output(3,eq,5) output(1,eq,0) output(1,eq,6) output(1,eq,9) output(1,eq,8) output(1,eq,7) output(1,eq,2) output(1,eq,5) output(0,eq,6) output(0,eq,9) output(0,eq,8) output(0,eq,7) output(0,eq,2) output(0,eq,5) output(6,eq,9) output(6,eq,8) output(6,eq,7) output(6,eq,2) output(6,eq,5) output(9,eq,8) output(9,eq,7) output(9,eq,2) output(9,eq,5) output(8,eq,7) output(8,eq,2) output(8,eq,5) output(7,eq,2) output(7,eq,5) output(2,eq,5)
Optimization: 36 8
Answer: 2
preference(1,(1,2),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(isButtery(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isTamago(1))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isButtery(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isCreamy(1))),()) preference(1,(1,5),4,for(atom(isUnique(1))),()) preference(1,aso) output(6,better,9) output(3,worse,6) output(3,worse,8) output(1,worse,0) output(1,worse,6) output(1,worse,7) output(1,worse,2) output(1,worse,5)
Optimization: 35 8
Answer: 3
preference(1,(1,2),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(isButtery(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isTamago(1))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isButtery(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isCreamy(1))),()) preference(1,aso) output(1,better,0) output(6,better,9) output(3,worse,6) output(3,worse,8) output(1,worse,6) output(1,worse,7) output(1,worse,2) output(1,worse,5) output(0,worse,6) output(0,worse,7) output(0,worse,2) output(0,worse,5)
Optimization: 34 8
Answer: 4
preference(1,(1,2),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(isButtery(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isTamago(1))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isButtery(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isCreamy(1))),()) preference(1,aso) output(1,better,0) output(6,better,9) output(2,better,5) output(3,worse,6) output(3,worse,9) output(3,worse,8) output(1,worse,2) output(0,worse,6) output(0,worse,7) output(0,worse,2) output(0,worse,5)
Optimization: 33 8
Answer: 5
preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(atom(isUnique(1))),()) preference(1,(1,7),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,6),3,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isButtery(1))),()) preference(1,(1,2),4,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,8),4,for(atom(hasPrice(1))),()) preference(1,aso) output(3,better,9) output(3,better,2) output(1,better,9) output(1,better,2) output(0,better,9) output(0,better,2) output(6,better,9) output(7,better,2) output(7,better,5) output(3,worse,7) output(3,worse,5) output(1,worse,7) output(1,worse,5) output(0,worse,7) output(0,worse,5) output(6,worse,7) output(9,worse,7) output(9,worse,5) output(2,worse,5) output(3,eq,1) output(3,eq,0) output(1,eq,0)
Optimization: 27 8
Answer: 6
preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(atom(isUnique(1))),()) preference(1,(1,7),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,6),3,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isButtery(1))),()) preference(1,(1,2),4,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,6),4,for(atom(isMaguro(1))),()) preference(1,(1,8),4,for(atom(hasPrice(1))),()) preference(1,aso) output(3,better,9) output(3,better,2) output(1,better,9) output(1,better,2) output(0,better,9) output(0,better,2) output(6,better,9) output(6,better,2) output(7,better,2) output(7,better,5) output(3,worse,7) output(3,worse,5) output(1,worse,7) output(1,worse,5) output(0,worse,7) output(0,worse,5) output(6,worse,7) output(9,worse,7) output(9,worse,5) output(2,worse,5) output(3,eq,1) output(3,eq,0) output(1,eq,0)
Optimization: 26 8
Answer: 7
preference(1,(1,1),0,for(atom(isMaguro(1))),()) preference(1,(1,2),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isTamago(1))),()) preference(1,(1,6),0,for(atom(isMaguro(1))),()) preference(1,(1,8),0,for(atom(isShrimp(1))),()) preference(1,(1,2),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasPrice(0))),()) preference(1,(1,6),4,for(atom(isUnique(1))),()) preference(1,aso) output(3,better,2) output(1,better,0) output(1,better,6) output(1,better,9) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,2) output(6,better,2) output(9,better,2) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(3,worse,1) output(3,worse,8) output(0,worse,8) output(6,worse,8) output(9,worse,8) output(2,worse,5) output(3,eq,0) output(3,eq,6) output(3,eq,9) output(3,eq,7) output(3,eq,5) output(1,eq,8) output(0,eq,6) output(0,eq,9) output(0,eq,7) output(0,eq,5) output(6,eq,9) output(6,eq,7) output(6,eq,5) output(9,eq,7) output(9,eq,5) output(7,eq,5)
Optimization: 22 7
Answer: 8
preference(1,(1,1),0,for(atom(isMaguro(1))),()) preference(1,(1,2),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isTamago(1))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),0,for(atom(isShrimp(1))),()) preference(1,(1,2),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,3),3,for(atom(hasPrice(0))),()) preference(1,aso) output(3,better,2) output(1,better,0) output(1,better,6) output(1,better,9) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(3,worse,1) output(3,worse,0) output(3,worse,6) output(3,worse,9) output(3,worse,8) output(0,worse,8) output(6,worse,8) output(9,worse,8) output(2,worse,5) output(3,eq,7) output(3,eq,5) output(1,eq,8) output(6,eq,9) output(7,eq,5)
Optimization: 14 7
Answer: 9
preference(1,(1,1),0,for(atom(isMaguro(1))),()) preference(1,(1,2),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isTamago(1))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),0,for(atom(isShrimp(1))),()) preference(1,(1,2),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasPrice(0))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,aso) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,0) output(1,better,6) output(1,better,9) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(3,worse,1) output(3,worse,0) output(3,worse,8) output(0,worse,8) output(6,worse,8) output(9,worse,8) output(3,eq,6) output(3,eq,9) output(1,eq,8) output(6,eq,9) output(7,eq,5)
Optimization: 13 7
Answer: 10
preference(1,(1,1),0,for(atom(isMaguro(1))),()) preference(1,(1,2),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isTamago(1))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),0,for(atom(isShrimp(1))),()) preference(1,(1,2),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasPrice(0))),()) preference(1,(1,6),3,for(atom(isRaw(0))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,aso) output(3,better,6) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,0) output(1,better,6) output(1,better,9) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,2) output(6,better,5) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(3,worse,1) output(3,worse,8) output(0,worse,8) output(6,worse,9) output(6,worse,8) output(9,worse,8) output(3,eq,0) output(3,eq,9) output(1,eq,8) output(0,eq,9) output(6,eq,7)
Optimization: 12 7
Answer: 11
preference(1,(1,1),0,for(atom(isMaguro(1))),()) preference(1,(1,2),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isTamago(1))),()) preference(1,(1,8),0,for(atom(isShrimp(1))),()) preference(1,(1,2),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),1,for(atom(isButtery(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasPrice(0))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,aso) output(3,better,6) output(3,better,9) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,0) output(1,better,6) output(1,better,9) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,2) output(6,better,5) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(3,worse,1) output(3,worse,8) output(0,worse,8) output(6,worse,8) output(9,worse,8) output(3,eq,0) output(1,eq,8) output(6,eq,9) output(6,eq,7) output(9,eq,7)
Optimization: 11 7
Progression : [ 1;11] (Error: 10)
Answer: 12
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),0,for(atom(isOctopus(1))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(atom(isShrimp(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,1),3,for(atom(isRaw(0))),()) preference(1,(1,3),3,for(atom(isShrimp(1))),()) preference(1,aso) output(3,better,6) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,0) output(1,better,6) output(1,better,9) output(1,better,8) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(3,worse,1) output(3,worse,0) output(3,worse,9) output(3,worse,8) output(0,worse,8) output(6,worse,9) output(6,worse,8) output(9,worse,8) output(0,eq,9)
Optimization: 10 4
Progression : [ 2;10] (Error: 4)
Answer: 13
preference(1,(1,1),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(atom(isRaw(0))),()) preference(1,(1,6),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isSweet(1))),()) preference(1,(1,3),1,for(atom(isSweet(1))),()) preference(1,(1,4),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUnique(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,4),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isTamago(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,aso) output(3,better,6) output(3,better,9) output(3,better,8) output(3,better,2) output(3,better,5) output(1,better,0) output(1,better,6) output(1,better,9) output(1,better,8) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,8) output(0,better,2) output(0,better,5) output(6,better,8) output(6,better,2) output(6,better,5) output(9,better,8) output(9,better,2) output(9,better,5) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(2,better,5) output(3,worse,1) output(3,worse,7) output(1,worse,7) output(0,worse,7) output(6,worse,7) output(9,worse,7) output(8,worse,7) output(3,eq,0)
Optimization: 9 8
Answer: 14
preference(1,(1,2),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),2,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isFattyFish(1))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isRoe(1))),()) preference(1,(1,2),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isTamago(1))),()) preference(1,(1,1),4,for(atom(isOctopus(1))),()) preference(1,(1,2),4,for(atom(isCreamy(1))),()) preference(1,(1,3),4,for(atom(isRaw(0))),()) preference(1,(1,4),4,for(atom(isOctopus(1))),()) preference(1,aso) output(3,better,1) output(3,better,6) output(3,better,8) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,6) output(1,better,8) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,8) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,8) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(3,worse,0) output(1,worse,0) output(1,worse,9) output(6,worse,9)
Optimization: 8 8
Answer: 15
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isButtery(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,1),4,for(atom(isOctopus(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isOctopus(1))),()) preference(1,aso) output(3,better,1) output(3,better,8) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,8) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,9) output(6,better,8) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,8) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(2,better,5) output(3,worse,0) output(1,worse,0) output(1,worse,6) output(1,worse,9) output(1,worse,8)
Optimization: 7 8
Answer: 16
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isUnique(1))),()) preference(1,(1,2),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isButtery(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isTamago(1))),()) preference(1,(1,1),4,for(atom(isOctopus(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isOctopus(1))),()) preference(1,aso) output(3,better,1) output(3,better,6) output(3,better,9) output(3,better,8) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,8) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,9) output(6,better,8) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(2,better,5) output(1,worse,0) output(1,worse,6) output(1,worse,9) output(1,worse,8) output(3,eq,0)
Optimization: 6 8
Answer: 17
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isUnique(1))),()) preference(1,(1,2),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isButtery(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isTamago(1))),()) preference(1,(1,1),4,for(atom(isOctopus(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isOctopus(1))),()) preference(1,aso) output(3,better,1) output(3,better,6) output(3,better,9) output(3,better,8) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,8) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,9) output(6,better,8) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,8) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(2,better,5) output(1,worse,0) output(1,worse,6) output(1,worse,9) output(1,worse,8) output(3,eq,0)
Optimization: 5 8
Progression : [3;5] (Error: 0.666667)
Progression : [4;5] (Error: 0.25)
Progression : [5;5] (Error: 0)
Progression : 5 [1;8] (Error: 7)
Answer: 18
preference(1,(1,2),0,for(atom(isTamago(1))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,2),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),2,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isShrimp(1))),()) preference(1,(1,8),1,for(atom(isFattyFish(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isCreamy(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,4),4,for(atom(isRaw(0))),()) preference(1,(1,7),4,for(atom(isRaw(0))),()) preference(1,(1,8),4,for(atom(isOctopus(1))),()) preference(1,aso) output(3,better,1) output(3,better,0) output(3,better,6) output(3,better,9) output(3,better,8) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,8) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,8) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(2,better,5) output(1,worse,0) output(1,worse,9) output(1,worse,8) output(6,worse,9) output(6,worse,8)
Optimization: 5 7
Answer: 19
preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,8),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),2,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(isSweet(1))),()) preference(1,(1,2),3,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),3,for(atom(hasPrice(0))),()) preference(1,(1,2),4,for(atom(isSweet(1))),()) preference(1,(1,4),4,for(atom(isRaw(0))),()) preference(1,(1,5),4,for(atom(isRaw(0))),()) preference(1,(1,7),4,for(atom(isOctopus(1))),()) preference(1,(1,8),4,for(atom(isRaw(0))),()) preference(1,aso) output(3,better,1) output(3,better,0) output(3,better,6) output(3,better,9) output(3,better,8) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,8) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,8) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(2,better,5) output(1,worse,0) output(1,worse,9) output(1,worse,8) output(6,worse,9) output(6,worse,8)
Optimization: 5 6
Answer: 20
preference(1,(1,7),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,8),0,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isButtery(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(isCreamy(1))),()) preference(1,(1,7),3,for(atom(isMaguro(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,7),4,for(atom(isOctopus(1))),()) preference(1,(1,8),4,for(atom(isSweet(1))),()) preference(1,aso) output(3,better,1) output(3,better,0) output(3,better,6) output(3,better,9) output(3,better,8) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,9) output(0,better,8) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,9) output(6,better,8) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,8) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(2,better,5) output(1,worse,0) output(1,worse,6) output(1,worse,9) output(1,eq,8)
Optimization: 5 4
Progression : 5 [2;4] (Error: 1)
Answer: 21
preference(1,(1,2),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,2),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isTamago(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,2),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(isMaguro(1))),()) preference(1,(1,5),4,for(atom(isOctopus(1))),()) preference(1,(1,6),4,for(atom(isOctopus(1))),()) preference(1,aso) output(3,better,1) output(3,better,6) output(3,better,9) output(3,better,8) output(3,better,7) output(3,better,2) output(3,better,5) output(1,better,7) output(1,better,2) output(1,better,5) output(0,better,6) output(0,better,9) output(0,better,8) output(0,better,7) output(0,better,2) output(0,better,5) output(6,better,9) output(6,better,8) output(6,better,7) output(6,better,2) output(6,better,5) output(9,better,8) output(9,better,7) output(9,better,2) output(9,better,5) output(8,better,7) output(8,better,2) output(8,better,5) output(7,better,2) output(7,better,5) output(2,better,5) output(1,worse,0) output(1,worse,6) output(1,worse,9) output(3,eq,0) output(1,eq,8)
Optimization: 5 3
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.063 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 21+
  Optimum    : unknown
Optimization : 5 3
Bounds       : 5 [2;3]
Calls        : 1
Time         : 597.270s (Solving: 590.63s 1st Model: 0.31s Unsat: 0.00s)
CPU Time     : 2368.745s
Threads      : 4        (Winner: 4)

Choices      : 7462916  (Domain: 156242)
Conflicts    : 1817467  (Analyzed: 1817460)
Restarts     : 1557     (Average: 1167.28 Last: 167576)
Model-Level  : 454.2   
Problems     : 15       (Average Length: 0.27 Splits: 0)
Lemmas       : 2380321  (Deleted: 2031892)
  Binary     : 22263    (Ratio:   0.94%)
  Ternary    : 72528    (Ratio:   3.05%)
  Conflict   : 1817456  (Average Length:  356.1 Ratio:  76.35%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 562865   (Average Length:   48.9 Ratio:  23.65%) 
  Distributed: 187809   (Ratio:  10.33% Average LBD: 3.33) 
  Integrated : 563423   (Ratio: 300.00% Unit: 1690 Average Jumps: 72.17)
Backjumps    : 1817460  (Average:  3.98 Max: 984 Sum: 7225295)
  Executed   : 1817438  (Average:  3.98 Max: 984 Sum: 7225004 Ratio: 100.00%)
  Bounded    : 22       (Average: 13.23 Max:  35 Sum:    291 Ratio:   0.00%)

Rules        : 2321827 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 660402  
Bodies       : 781746  
  Count      : 1768    
Equivalences : 2023233  (Atom=Atom: 580979 Body=Body: 628879 Other: 813375)
Tight        : Yes
Variables    : 86031    (Eliminated:    0 Frozen: 57335)
Constraints  : 1777809  (Binary:  95.2% Ternary:   4.0% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(isCreamy(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(isSweet(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(0)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  || not atom(hasPrice(0))  ; 
  atom(hasPrice(1)) >> atom(isButtery(1)) >> not atom(isRaw(1))  >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> not atom(isRaw(0))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isButtery(1)) >> atom(isCreamy(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  || not atom(hasPrice(0))  ; 
  atom(hasPrice(1)) >> atom(isButtery(1)) >> not atom(isRaw(1))  >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> not atom(isRaw(0))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isButtery(1)) >> atom(isCreamy(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  || not atom(hasPrice(0))  ; 
  atom(hasPrice(1)) >> atom(isButtery(1)) >> not atom(isRaw(1))  >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(0))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> not atom(isRaw(0))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isButtery(1)) >> atom(isCreamy(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isUrchin(1)) >> not atom(isRaw(1))  >> atom(hasPrice(1)) || not atom(isSweet(1))  ; 
  atom(isRoe(1)) >> atom(isUrchin(1)) >> not atom(isRaw(0))  >> not atom(isRaw(1))  || atom(isUnique(1)) ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isOctopus(1))  >> not atom(isShrimp(1))  || not atom(isCreamy(1))  ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> atom(isUnique(1)) >> atom(isMaguro(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(1))  >> not atom(isSweet(1))  ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> atom(isUnique(1)) >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> atom(isButtery(1)) >> atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isUrchin(1)) >> not atom(isRaw(1))  >> atom(hasPrice(1)) || not atom(isSweet(1))  ; 
  atom(isRoe(1)) >> atom(isUrchin(1)) >> not atom(isRaw(0))  >> not atom(isRaw(1))  || atom(isUnique(1)) ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isOctopus(1))  >> not atom(isShrimp(1))  || not atom(isCreamy(1))  ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> atom(isUnique(1)) >> atom(isMaguro(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(1))  >> not atom(isSweet(1))  ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> atom(isUnique(1)) >> atom(isMaguro(1)) ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> atom(isButtery(1)) >> atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isMaguro(1)) >> not atom(isRaw(1))  || atom(hasMinorGrp(0)) ; 
  not atom(isUrchin(1))  >> not atom(isTamago(1))  >> atom(hasPrice(0)) >> not atom(isRoe(1))  || atom(isUrchin(1)) ; 
  not atom(isChewy(1))  >> not atom(isCreamy(1))  >> not atom(isShrimp(1))  || atom(isTamago(1)) ; 
  not atom(isMaguro(1))  >> not atom(isRoe(1))  >> not atom(isUrchin(1))  >> atom(isUnique(1)) || atom(isMaguro(1)) ; 
  not atom(hasPrice(1))  >> not atom(isTamago(1))  >> not atom(isUrchin(1))  || atom(isShrimp(1)) ; 
  atom(isFattyFish(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isMaguro(1)) >> not atom(isRaw(1))  || atom(hasMinorGrp(0)) ; 
  not atom(isUrchin(1))  >> not atom(isTamago(1))  >> atom(hasPrice(0)) >> not atom(isRoe(1))  || atom(isUrchin(1)) ; 
  not atom(isChewy(1))  >> not atom(isCreamy(1))  >> not atom(isShrimp(1))  || atom(isTamago(1)) ; 
  atom(isFattyFish(1)) >> atom(isUnique(1)) >> not atom(isShrimp(1))  || not atom(isFattyFish(1))  ; 
  not atom(hasPrice(1))  >> not atom(isTamago(1))  >> not atom(isUrchin(1))  || atom(isShrimp(1)) ; 
  atom(isFattyFish(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isMaguro(1)) >> not atom(isRaw(1))  || atom(hasMinorGrp(0)) ; 
  not atom(isUrchin(1))  >> not atom(isTamago(1))  >> atom(hasPrice(0)) >> atom(isRaw(1)) || atom(isUrchin(1)) ; 
  not atom(isChewy(1))  >> not atom(isCreamy(1))  >> not atom(isShrimp(1))  || atom(isTamago(1)) ; 
  atom(isUrchin(1)) >> not atom(isRaw(0))  >> not atom(isShrimp(1))  || not atom(isFattyFish(1))  ; 
  not atom(hasPrice(1))  >> not atom(isTamago(1))  >> not atom(isUrchin(1))  || atom(isShrimp(1)) ; 
  atom(isFattyFish(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isMaguro(1)) >> not atom(isRaw(1))  || atom(hasMinorGrp(0)) ; 
  not atom(isUrchin(1))  >> not atom(isTamago(1))  >> atom(hasPrice(0)) >> atom(isRaw(1)) || atom(isUrchin(1)) ; 
  not atom(isChewy(1))  >> not atom(isCreamy(1))  >> not atom(isShrimp(1))  || atom(isTamago(1)) ; 
  atom(isShrimp(1)) >> not atom(isChewy(1))  >> atom(isRaw(0)) || not atom(isFattyFish(1))  ; 
  not atom(hasPrice(1))  >> not atom(isTamago(1))  >> not atom(isUrchin(1))  || atom(isShrimp(1)) ; 
  atom(isFattyFish(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) || atom(isMaguro(1)) ; 
  not atom(isMaguro(1))  >> atom(isMaguro(1)) >> not atom(isRaw(1))  || atom(hasMinorGrp(0)) ; 
  not atom(isUrchin(1))  >> not atom(isTamago(1))  >> atom(hasPrice(0)) >> atom(isRaw(1)) || atom(isUrchin(1)) ; 
  not atom(isChewy(1))  >> not atom(isCreamy(1))  >> not atom(isShrimp(1))  || atom(isTamago(1)) ; 
  not atom(hasPrice(1))  >> not atom(isTamago(1))  >> not atom(isUrchin(1))  || atom(isShrimp(1)) ; 
  atom(isFattyFish(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  ; 
  atom(isFattyFish(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isShrimp(1)) >> atom(isRoe(1)) >> atom(isRaw(0)) >> not atom(hasMinorGrp(1))  || not atom(isFattyFish(1))  ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  || atom(isOctopus(1)) ; 
  not atom(isShrimp(1))  >> not atom(isOctopus(1))  >> not atom(isUrchin(1))  || atom(hasMinorGrp(0)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) >> not atom(isFattyFish(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  || not atom(isSweet(1))  ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isRoe(1))  ; 
  atom(isSweet(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isShrimp(1))  ; 
  atom(isTamago(1)) >> atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> not atom(hasPrice(0))  || atom(isRaw(0)) ; 
  atom(isUnique(1)) >> atom(isMaguro(1)) >> atom(isOctopus(1)) || not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isTamago(1)) || not atom(isTamago(1))  ; 
  atom(isUrchin(1)) >> not atom(isTamago(1))  >> atom(hasPrice(1)) || not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> not atom(isOctopus(1))  >> not atom(isRoe(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) >> atom(isCreamy(1)) || not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isFattyFish(1)) >> not atom(isChewy(1))  >> atom(isRaw(0)) || not atom(isShrimp(1))  ; 
  atom(isFattyFish(1)) >> atom(isSweet(1)) >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> not atom(isOctopus(1))  >> not atom(isRoe(1))  || not atom(isUrchin(1))  ; 
  atom(isSweet(1)) >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isUnique(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isTamago(1)) || not atom(isTamago(1))  ; 
  atom(isShrimp(1)) >> atom(isUrchin(1)) >> not atom(isMaguro(1))  >> not atom(isTamago(1))  || not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> not atom(hasMinorGrp(1))  >> atom(isRoe(1)) >> atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> not atom(isChewy(1))  >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> atom(isButtery(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isUnique(1)) >> not atom(isShrimp(1))  || not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> not atom(isOctopus(1))  >> not atom(isRoe(1))  || not atom(isUrchin(1))  ; 
  atom(isSweet(1)) >> atom(hasMinorGrp(2)) >> atom(isOctopus(1)) || not atom(isUnique(1))  ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isOctopus(1)) || not atom(isTamago(1))  ; 
  atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(isShrimp(1))  >> not atom(isTamago(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(hasPrice(1))  ; 
  atom(isRoe(1)) >> atom(isButtery(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isShrimp(1))  ; 
  not atom(hasPrice(0))  >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> not atom(isOctopus(1))  >> not atom(isRoe(1))  || not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> atom(isOctopus(1)) || not atom(isUnique(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isTamago(1)) || not atom(isTamago(1))  ; 
  not atom(isChewy(1))  >> not atom(isShrimp(1))  >> not atom(isTamago(1))  >> not atom(isUrchin(1))  || not atom(hasMinorGrp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(hasPrice(1))  ; 
  atom(isRoe(1)) >> atom(isButtery(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isShrimp(1))  ; 
  atom(isRoe(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> not atom(isOctopus(1))  >> not atom(isRoe(1))  || not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> atom(isOctopus(1)) || not atom(isUnique(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isTamago(1)) || not atom(isTamago(1))  ; 
  not atom(isChewy(1))  >> not atom(isShrimp(1))  >> not atom(isTamago(1))  >> not atom(isUrchin(1))  || not atom(hasMinorGrp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isShrimp(1))  >> not atom(hasPrice(1))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || atom(isTamago(1)) ; 
  not atom(hasPrice(0))  >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isShrimp(1))  ; 
  atom(isShrimp(1)) >> not atom(isChewy(1))  >> atom(isRaw(0)) || not atom(isShrimp(1))  ; 
  atom(isShrimp(1)) >> not atom(isChewy(1))  >> not atom(isRaw(1))  >> atom(isRaw(0)) || not atom(isFattyFish(1))  ; 
  atom(isFattyFish(1)) >> atom(isCreamy(1)) >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(isChewy(1))  >> atom(isRaw(0)) ; 
  atom(isUrchin(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(0))  >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isShrimp(1))  ; 
  atom(isShrimp(1)) >> atom(isFattyFish(1)) >> not atom(isChewy(1))  >> atom(isRaw(0)) || not atom(isShrimp(1))  ; 
  atom(isFattyFish(1)) >> atom(isSweet(1)) >> atom(hasMinorGrp(0)) >> atom(isOctopus(1)) || not atom(isUnique(1))  ; 
  not atom(isChewy(1))  >> not atom(isOctopus(1))  >> atom(hasPrice(0)) >> atom(isRaw(0)) || atom(hasMinorGrp(0)) ; 
  atom(isUrchin(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(isChewy(1))  >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) >> atom(isCreamy(1)) >> atom(isMaguro(1)) >> atom(isOctopus(1)) || not atom(hasPrice(1))  ; 
  not atom(isOctopus(1))  >> not atom(isUrchin(1))  >> not atom(isUnique(1))  >> atom(isSweet(1)) || atom(isOctopus(1)) ; 
  atom(isRoe(1)) >> atom(isShrimp(1)) >> not atom(isChewy(1))  >> not atom(isRaw(1))  ; 
  atom(isUrchin(1)) >> not atom(isChewy(1))  >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(1))  >> atom(isOctopus(1)) || not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isMaguro(1)) >> atom(isOctopus(1)) 
}.
