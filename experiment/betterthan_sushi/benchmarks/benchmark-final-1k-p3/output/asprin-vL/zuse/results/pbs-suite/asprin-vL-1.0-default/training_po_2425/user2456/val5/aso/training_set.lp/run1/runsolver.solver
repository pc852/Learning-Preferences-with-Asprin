asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,3),0,for(atom(isChewy(1))),()) preference(1,(1,7),0,for(atom(isChewy(1))),()) preference(1,(1,8),0,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,8),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isOctopus(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(isChewy(1))),()) preference(1,(1,7),3,for(atom(isFattyFish(1))),()) preference(1,(1,2),4,for(atom(isRoe(1))),()) preference(1,aso) output(0,better,3) output(8,worse,1) output(8,worse,4) output(2,worse,1) output(2,worse,4) output(7,worse,1) output(7,worse,4) output(9,worse,1) output(9,worse,4) output(2,eq,7) output(2,eq,9) output(7,eq,9) output(1,eq,4)
Optimization: 35 8
Answer: 2
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,4),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isUrchin(1))),()) preference(1,(1,6),0,for(atom(isUrchin(1))),()) preference(1,(1,7),0,for(atom(isUrchin(1))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isSweet(1))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(0,better,4) output(8,better,4) output(2,better,4) output(7,better,4) output(9,better,4) output(3,better,4) output(6,better,4) output(1,better,4) output(0,eq,8) output(0,eq,2) output(0,eq,7) output(0,eq,9) output(0,eq,3) output(0,eq,6) output(0,eq,1) output(8,eq,2) output(8,eq,7) output(8,eq,9) output(8,eq,3) output(8,eq,6) output(8,eq,1) output(2,eq,7) output(2,eq,9) output(2,eq,3) output(2,eq,6) output(2,eq,1) output(7,eq,9) output(7,eq,3) output(7,eq,6) output(7,eq,1) output(9,eq,3) output(9,eq,6) output(9,eq,1) output(3,eq,6) output(3,eq,1) output(6,eq,1)
Optimization: 28 8
Answer: 3
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,3),3,for(atom(isSweet(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,8),3,for(atom(isChewy(1))),()) preference(1,(1,3),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,8) output(0,better,9) output(0,better,3) output(0,better,1) output(8,better,9) output(2,better,7) output(2,better,9) output(2,better,3) output(2,better,1) output(0,worse,2) output(8,worse,2) output(8,worse,3) output(9,worse,3) output(9,worse,6) output(9,worse,4)
Optimization: 27 8
Answer: 4
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,aso) output(0,better,8) output(0,better,9) output(0,better,3) output(0,better,1) output(8,better,9) output(8,better,3) output(2,better,7) output(2,better,9) output(2,better,3) output(2,better,1) output(8,worse,2) output(8,worse,6) output(8,worse,4) output(9,worse,6) output(9,worse,4) output(3,worse,6) output(3,worse,4) output(9,eq,3)
Optimization: 26 8
Answer: 5
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,aso) output(0,better,8) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,1) output(8,better,9) output(8,better,3) output(2,better,9) output(2,better,3) output(2,better,1) output(9,better,3) output(8,worse,2) output(8,worse,4) output(9,worse,4) output(3,worse,4) output(1,worse,4)
Optimization: 25 8
Answer: 6
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(isSweet(1))),()) preference(1,(1,7),4,for(atom(isUrchin(1))),()) preference(1,(1,8),4,for(atom(isRaw(1))),()) preference(1,aso) output(0,better,8) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,1) output(8,better,9) output(8,better,3) output(2,better,7) output(2,better,9) output(2,better,3) output(2,better,1) output(9,better,3) output(8,worse,2) output(8,worse,6) output(9,worse,6) output(3,worse,6) output(1,worse,4)
Optimization: 24 8
Answer: 7
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,3),3,for(atom(isShrimp(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,8),3,for(atom(isTamago(1))),()) preference(1,(1,8),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(8,better,9) output(8,better,3) output(8,better,6) output(2,better,9) output(2,better,3) output(2,better,6) output(2,better,1) output(9,better,3) output(9,better,6) output(3,better,6) output(0,worse,2)
Optimization: 22 8
Answer: 8
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,3),3,for(atom(isShrimp(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,8),3,for(atom(isTamago(1))),()) preference(1,(1,8),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(8,better,9) output(8,better,3) output(8,better,6) output(2,better,7) output(2,better,9) output(2,better,3) output(2,better,6) output(2,better,1) output(9,better,3) output(9,better,6) output(3,better,6) output(0,worse,2) output(1,worse,4)
Optimization: 21 8
Answer: 9
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(isSweet(1))),()) preference(1,(1,8),3,for(atom(isShrimp(1))),()) preference(1,(1,7),4,for(atom(isUrchin(1))),()) preference(1,aso) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(8,better,9) output(8,better,3) output(8,better,6) output(2,better,7) output(2,better,9) output(2,better,3) output(2,better,6) output(2,better,1) output(9,better,3) output(9,better,6) output(3,better,6) output(0,worse,2) output(1,worse,4)
Optimization: 20 8
Answer: 10
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,aso) output(0,better,2) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(8,better,2) output(8,better,7) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,3) output(2,better,6) output(9,better,3) output(9,better,6) output(3,better,6) output(2,worse,9) output(7,worse,4) output(3,worse,4) output(6,worse,4)
Optimization: 19 8
Answer: 11
preference(1,(1,1),0,for(atom(isUrchin(1))),()) preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,3),0,for(atom(isUrchin(1))),()) preference(1,(1,4),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isUrchin(1))),()) preference(1,(1,7),0,for(atom(isUrchin(1))),()) preference(1,(1,8),0,for(atom(isUrchin(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),1,for(atom(isChewy(1))),()) preference(1,(1,6),3,for(atom(isRaw(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isSweet(1))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(0,better,8) output(0,better,2) output(0,better,9) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,4) output(2,better,4) output(7,better,9) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,4) output(1,better,4) output(8,worse,7) output(8,worse,3) output(2,worse,7) output(2,worse,3) output(9,worse,3) output(0,eq,7) output(0,eq,3) output(8,eq,2) output(8,eq,9) output(8,eq,6) output(8,eq,1) output(2,eq,9) output(2,eq,6) output(2,eq,1) output(7,eq,3) output(9,eq,6) output(9,eq,1) output(6,eq,1)
Optimization: 18 8
Answer: 12
preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,aso) output(0,better,8) output(0,better,2) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,4) output(2,better,4) output(7,better,9) output(7,better,3) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,3) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,4) output(6,better,4) output(1,better,4) output(0,worse,7) output(8,worse,7) output(8,worse,9) output(2,worse,7) output(2,worse,9) output(0,eq,9) output(8,eq,2) output(8,eq,3) output(8,eq,6) output(8,eq,1) output(2,eq,3) output(2,eq,6) output(2,eq,1) output(3,eq,6) output(3,eq,1) output(6,eq,1)
Optimization: 16 1
Answer: 13
preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,aso) output(0,better,8) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,4) output(2,better,9) output(2,better,3) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,9) output(7,better,3) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,3) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,4) output(6,better,4) output(1,better,4) output(0,worse,2) output(0,worse,7) output(8,worse,2) output(8,worse,7) output(8,worse,9) output(0,eq,9) output(8,eq,3) output(8,eq,6) output(8,eq,1) output(2,eq,7) output(3,eq,6) output(3,eq,1) output(6,eq,1)
Optimization: 13 1
Answer: 14
preference(1,(1,3),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,2) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,9) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,4) output(7,better,9) output(7,better,3) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,4) output(1,better,4) output(0,worse,8) output(0,worse,7) output(2,worse,7) output(2,worse,9) output(2,worse,3) output(0,eq,9) output(0,eq,3) output(8,eq,7) output(2,eq,6) output(2,eq,1) output(9,eq,3) output(6,eq,1)
Optimization: 12 1
Answer: 15
preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,9) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,9) output(2,better,3) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,9) output(7,better,3) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,4) output(1,better,4) output(0,worse,8) output(0,worse,2) output(0,worse,7) output(0,eq,9) output(0,eq,3) output(8,eq,2) output(8,eq,7) output(2,eq,7) output(9,eq,3) output(6,eq,1)
Optimization: 10 1
Answer: 16
preference(1,(1,1),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),0,for(atom(isUnique(1))),()) preference(1,(1,6),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,4),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,4),3,for(atom(isRoe(1))),()) preference(1,(1,5),3,for(atom(isUnique(1))),()) preference(1,(1,7),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isRoe(1))),()) preference(1,(1,3),4,for(atom(isRoe(1))),()) preference(1,(1,5),4,for(atom(isRoe(1))),()) preference(1,(1,6),4,for(atom(isCreamy(1))),()) preference(1,(1,7),4,for(atom(isSweet(1))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(0,better,2) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,3) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,3) output(7,better,6) output(7,better,1) output(7,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(1,better,4)
Optimization: 9 8
Answer: 17
preference(1,(1,1),0,for(atom(isUnique(1))),()) preference(1,(1,2),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),0,for(atom(isMaguro(1))),()) preference(1,(1,4),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),1,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,4),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,1),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),3,for(atom(isRoe(1))),()) preference(1,(1,5),3,for(atom(isUnique(1))),()) preference(1,(1,7),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isRoe(1))),()) preference(1,(1,3),4,for(atom(isRoe(1))),()) preference(1,(1,5),4,for(atom(isRoe(1))),()) preference(1,(1,6),4,for(atom(isCreamy(1))),()) preference(1,(1,7),4,for(atom(isSweet(1))),()) preference(1,(1,8),4,for(atom(isRoe(1))),()) preference(1,aso) output(0,better,2) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,3) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,3) output(7,better,6) output(7,better,1) output(7,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,1) output(6,better,4) output(1,better,4)
Optimization: 7 8
Progression : [1;7] (Error: 6)
Answer: 18
preference(1,(1,2),0,for(atom(isSweet(1))),()) preference(1,(1,3),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),0,for(atom(isRaw(1))),()) preference(1,(1,6),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,1),1,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isUnique(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,1),3,for(atom(isUrchin(1))),()) preference(1,(1,2),3,for(atom(isChewy(1))),()) preference(1,(1,3),3,for(atom(isRoe(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(isCreamy(1))),()) preference(1,(1,3),4,for(atom(isSweet(1))),()) preference(1,(1,4),4,for(atom(isSweet(1))),()) preference(1,(1,5),4,for(atom(isRoe(1))),()) preference(1,(1,6),4,for(atom(isCreamy(1))),()) preference(1,(1,7),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,2) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,3) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,3) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,3) output(9,better,6) output(9,better,4) output(3,better,6) output(3,better,4) output(6,better,4) output(1,better,4) output(0,eq,8)
Optimization: 6 8
Answer: 19
preference(1,(1,2),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),0,for(atom(isRaw(1))),()) preference(1,(1,6),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,1),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,8),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isUnique(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,2),3,for(atom(isSweet(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(hasPrice(0))),()) preference(1,(1,8),3,for(atom(isOctopus(1))),()) preference(1,(1,4),4,for(atom(isSweet(1))),()) preference(1,(1,6),4,for(atom(isChewy(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,9) output(2,better,3) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,3) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,1) output(6,better,4) output(0,worse,8) output(0,eq,2)
Optimization: 5 8
Progression : [2;5] (Error: 1.5)
Answer: 20
preference(1,(1,1),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(atom(isShrimp(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),1,for(atom(isSweet(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(hasPrice(0))),()) preference(1,(1,6),2,for(atom(hasPrice(0))),()) preference(1,(1,7),2,for(atom(isUnique(1))),()) preference(1,(1,1),3,for(atom(isUnique(1))),()) preference(1,(1,2),3,for(atom(isSweet(1))),()) preference(1,(1,3),3,for(atom(isTamago(1))),()) preference(1,(1,4),3,for(atom(hasPrice(0))),()) preference(1,(1,5),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isSweet(1))),()) preference(1,(1,8),3,for(atom(isUrchin(1))),()) preference(1,(1,1),4,for(atom(isSweet(1))),()) preference(1,(1,4),4,for(atom(isUrchin(1))),()) preference(1,(1,5),4,for(atom(isMaguro(1))),()) preference(1,(1,8),4,for(atom(hasPrice(0))),()) preference(1,aso) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,9) output(2,better,3) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,3) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,1) output(6,better,4) output(1,better,4) output(0,worse,8) output(0,worse,2)
Optimization: 4 8
Progression : [3;4] (Error: 0.333333)
Progression : [4;4] (Error: 0)
Progression : 4 [1;8] (Error: 7)
Answer: 21
preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,4),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,2),3,for(atom(isRoe(1))),()) preference(1,(1,4),3,for(atom(isUnique(1))),()) preference(1,(1,5),3,for(atom(isMaguro(1))),()) preference(1,(1,6),3,for(atom(isUnique(1))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(isOctopus(1))),()) preference(1,(1,2),4,for(atom(isSweet(1))),()) preference(1,(1,4),4,for(atom(isSweet(1))),()) preference(1,(1,5),4,for(atom(isTamago(1))),()) preference(1,(1,6),4,for(atom(isSweet(1))),()) preference(1,(1,7),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,8) output(0,better,2) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,9) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,9) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,1) output(6,better,4) output(1,better,4)
Optimization: 4 7
Answer: 22
preference(1,(1,4),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isChewy(1))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,5),3,for(atom(isMaguro(1))),()) preference(1,(1,6),3,for(atom(isUnique(1))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,4),4,for(atom(isSweet(1))),()) preference(1,(1,5),4,for(atom(isTamago(1))),()) preference(1,(1,6),4,for(atom(isSweet(1))),()) preference(1,(1,7),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,8) output(0,better,2) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,9) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,9) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,1) output(6,better,4) output(1,better,4)
Optimization: 4 6
Answer: 23
preference(1,(1,1),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),2,for(neg(atom(isButtery(1)))),()) preference(1,(1,1),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,5),3,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(isUnique(1))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isSweet(1))),()) preference(1,(1,1),4,for(atom(isUrchin(1))),()) preference(1,(1,5),4,for(atom(isSweet(1))),()) preference(1,(1,6),4,for(atom(isSweet(1))),()) preference(1,(1,7),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,8) output(0,better,2) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,9) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,9) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,1) output(6,better,4) output(1,better,4)
Optimization: 4 5
Answer: 24
preference(1,(1,2),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,4),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,2),3,for(atom(isRoe(1))),()) preference(1,(1,4),3,for(atom(isUnique(1))),()) preference(1,(1,6),3,for(atom(isUnique(1))),()) preference(1,(1,2),4,for(atom(isSweet(1))),()) preference(1,(1,4),4,for(atom(isSweet(1))),()) preference(1,(1,6),4,for(atom(isSweet(1))),()) preference(1,(1,7),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,2) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,9) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,9) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,1) output(6,better,4) output(1,better,4) output(0,eq,8)
Optimization: 4 4
Answer: 25
preference(1,(1,2),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),2,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isTamago(1))),()) preference(1,(1,2),3,for(atom(isRoe(1))),()) preference(1,(1,4),3,for(atom(isUnique(1))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,2),4,for(atom(isSweet(1))),()) preference(1,(1,4),4,for(atom(isSweet(1))),()) preference(1,(1,7),4,for(atom(isSweet(1))),()) preference(1,aso) output(0,better,2) output(0,better,7) output(0,better,9) output(0,better,3) output(0,better,6) output(0,better,1) output(0,better,4) output(8,better,2) output(8,better,7) output(8,better,9) output(8,better,3) output(8,better,6) output(8,better,1) output(8,better,4) output(2,better,7) output(2,better,9) output(2,better,6) output(2,better,1) output(2,better,4) output(7,better,9) output(7,better,6) output(7,better,1) output(7,better,4) output(9,better,6) output(9,better,1) output(9,better,4) output(3,better,6) output(3,better,1) output(3,better,4) output(6,better,1) output(6,better,4) output(1,better,4) output(0,eq,8)
Optimization: 4 3
Progression : 4 [2;3] (Error: 0.5)
OPTIMUM FOUND

Models       : 25
  Optimum    : yes
Optimization : 4 3
Calls        : 1
Time         : 784.369s (Solving: 777.63s 1st Model: 0.31s Unsat: 715.99s)
CPU Time     : 3116.935s
Threads      : 4        (Winner: 1)

Choices      : 6696408  (Domain: 188860)
Conflicts    : 1881962  (Analyzed: 1881954)
Restarts     : 1283     (Average: 1466.84 Last: 67174)
Model-Level  : 547.7   
Problems     : 14       (Average Length: 0.29 Splits: 0)
Lemmas       : 2336083  (Deleted: 2017986)
  Binary     : 22281    (Ratio:   0.95%)
  Ternary    : 70164    (Ratio:   3.00%)
  Conflict   : 1881953  (Average Length:  401.3 Ratio:  80.56%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 454130   (Average Length:   44.9 Ratio:  19.44%) 
  Distributed: 151412   (Ratio:   8.05% Average LBD: 3.30) 
  Integrated : 454236   (Ratio: 300.00% Unit: 1521 Average Jumps: 63.65)
Backjumps    : 1881954  (Average:  3.45 Max: 937 Sum: 6501812)
  Executed   : 1881933  (Average:  3.45 Max: 937 Sum: 6501515 Ratio: 100.00%)
  Bounded    : 21       (Average: 14.14 Max:  35 Sum:    297 Ratio:   0.00%)

Rules        : 2317971 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 658482  
Bodies       : 780104  
  Count      : 1768    
Equivalences : 2017287  (Atom=Atom: 578453 Body=Body: 626031 Other: 812803)
Tight        : Yes
Variables    : 86903    (Eliminated:    0 Frozen: 58207)
Constraints  : 1780289  (Binary:  95.2% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(hasPrice(0))  >> not atom(isOctopus(1))  || atom(isChewy(1)) ; 
  atom(isTamago(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(isRaw(0))  || atom(isChewy(1)) ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isCreamy(1))  >> not atom(isMaguro(1))  || atom(isChewy(1)) ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(isOctopus(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(hasPrice(0))  >> atom(isRoe(1)) ; 
  atom(isRoe(1)) >> atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isRoe(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(1))  >> not atom(isButtery(1))  >> not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(isCreamy(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(isSweet(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(0)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isTamago(1))  >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) >> atom(isUnique(1)) ; 
  not atom(isFattyFish(1))  >> not atom(hasPrice(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isTamago(1))  >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isRoe(1))  >> not atom(isTamago(1))  ; 
  not atom(isFattyFish(1))  >> not atom(hasPrice(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isTamago(1))  >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isRoe(1))  >> not atom(isTamago(1))  ; 
  not atom(isFattyFish(1))  >> not atom(hasPrice(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(0))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isChewy(1))  >> not atom(isShrimp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isTamago(1))  >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isChewy(1))  >> not atom(isShrimp(1))  ; 
  not atom(isFattyFish(1))  >> not atom(hasPrice(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(hasMinorGrp(1))  >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isTamago(1))  >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(1))  ; 
  not atom(isFattyFish(1))  >> not atom(hasPrice(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> not atom(hasMinorGrp(2))  >> not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isTamago(1)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isTamago(1))  >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(1))  ; 
  not atom(isFattyFish(1))  >> not atom(hasPrice(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> not atom(isMaguro(1))  >> not atom(hasMinorGrp(0))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isTamago(1)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isTamago(1))  >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isRoe(1))  >> not atom(isTamago(1))  ; 
  not atom(isFattyFish(1))  >> not atom(hasPrice(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  not atom(isTamago(1))  >> not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> not atom(isShrimp(1))  ; 
  not atom(isFattyFish(1))  >> not atom(hasPrice(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> not atom(hasPrice(0))  >> atom(isRaw(0)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(hasPrice(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isRoe(1))  >> not atom(isCreamy(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isOctopus(1))  >> not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(isCreamy(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(isSweet(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(0)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  not atom(isUrchin(1))  >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  >> atom(hasMinorGrp(1)) || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> atom(hasMinorGrp(1)) >> not atom(isButtery(1))  >> atom(isSweet(1)) || not atom(isTamago(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> atom(hasMinorGrp(1)) >> not atom(isButtery(1))  >> atom(isSweet(1)) || not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(0))  || not atom(hasMinorGrp(0))  ; 
  atom(hasPrice(1)) >> atom(isOctopus(1)) >> not atom(hasPrice(0))  >> atom(isRoe(1)) || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(0))  >> atom(isRoe(1)) || atom(isUnique(1)) ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isButtery(1))  >> atom(isCreamy(1)) || not atom(isShrimp(1))  ; 
  atom(isTamago(1)) >> atom(isChewy(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) || not atom(isShrimp(1))  ; 
  atom(isOctopus(1)) >> not atom(isRoe(1))  >> atom(isRoe(1)) >> not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) >> atom(isRoe(1)) ; 
  atom(isOctopus(1)) >> atom(hasPrice(0)) >> atom(isCreamy(1)) >> atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(hasMinorGrp(0)) >> atom(hasMinorGrp(1)) || atom(isUnique(1)) ; 
  atom(hasPrice(1)) >> atom(isOctopus(1)) >> not atom(hasPrice(0))  >> atom(isRoe(1)) || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> not atom(hasPrice(0))  >> atom(isRoe(1)) || atom(isMaguro(1)) ; 
  not atom(isSweet(1))  >> not atom(isRoe(1))  >> atom(isRoe(1)) >> not atom(isOctopus(1))  || not atom(isTamago(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isButtery(1))  >> atom(isCreamy(1)) || not atom(isShrimp(1))  ; 
  atom(isTamago(1)) >> atom(isChewy(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) || not atom(isShrimp(1))  ; 
  atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) >> atom(isRoe(1)) ; 
  atom(isOctopus(1)) >> atom(hasPrice(0)) >> atom(isCreamy(1)) >> atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasPrice(1)) >> atom(isUnique(1)) >> atom(isChewy(1)) || atom(isSweet(1)) ; 
  atom(hasMinorGrp(1)) >> atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) || not atom(isTamago(1))  ; 
  atom(isChewy(1)) >> atom(isCreamy(1)) >> atom(isOctopus(1)) >> atom(isSweet(1)) || atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(isButtery(1))  >> atom(isCreamy(1)) || not atom(isShrimp(1))  ; 
  atom(isTamago(1)) >> atom(isChewy(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) || not atom(isShrimp(1))  ; 
  atom(isMaguro(1)) >> atom(hasPrice(0)) >> atom(isCreamy(1)) || atom(isRaw(1)) ; 
  not atom(hasMinorGrp(2))  >> atom(isOctopus(1)) >> atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> not atom(isUrchin(1))  >> not atom(isShrimp(1))  >> atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isTamago(1))  ; 
  atom(isChewy(1)) >> atom(isCreamy(1)) >> atom(isOctopus(1)) >> atom(isSweet(1)) || atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> not atom(isFattyFish(1))  >> not atom(isButtery(1))  >> atom(isChewy(1)) || not atom(isShrimp(1))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> atom(hasPrice(0)) >> atom(hasMinorGrp(2)) || not atom(isShrimp(1))  ; 
  atom(isShrimp(1)) >> atom(hasPrice(0)) >> atom(isOctopus(1)) >> not atom(hasMinorGrp(0))  || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> not atom(isOctopus(1))  >> not atom(hasPrice(1))  >> not atom(hasMinorGrp(0))  ; 
  atom(isOctopus(1)) >> atom(hasPrice(0)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(0))  ; 
  atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isShrimp(1)) >> atom(isChewy(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isTamago(1))  ; 
  atom(hasMinorGrp(1)) >> atom(isOctopus(1)) >> atom(isSweet(1)) || not atom(isTamago(1))  ; 
  atom(isSweet(1)) >> atom(isOctopus(1)) >> atom(isTamago(1)) || not atom(isShrimp(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(hasPrice(0)) >> atom(isUrchin(1)) || not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> atom(hasPrice(0)) >> not atom(isFattyFish(1))  || not atom(isShrimp(1))  ; 
  atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isChewy(1))  ; 
  atom(isOctopus(1)) >> not atom(isUrchin(1))  >> atom(isUrchin(1)) >> atom(hasPrice(0)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(hasPrice(0)) >> atom(isUrchin(1)) >> atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> atom(isMaguro(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> atom(isChewy(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isShrimp(1))  ; 
  atom(isChewy(1)) >> not atom(isUrchin(1))  >> not atom(isChewy(1))  >> atom(isOctopus(1)) ; 
  atom(isChewy(1)) >> not atom(hasPrice(1))  >> atom(isRoe(1)) >> atom(isSweet(1)) ; 
  atom(isOctopus(1)) >> not atom(isOctopus(1))  >> atom(isMaguro(1)) >> atom(isTamago(1)) ; 
  atom(isChewy(1)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) ; 
  atom(isOctopus(1)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(1))  >> atom(isSweet(1)) || not atom(isChewy(1))  ; 
  atom(isTamago(1)) >> atom(isChewy(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isShrimp(1))  ; 
  atom(isOctopus(1)) >> atom(isChewy(1)) >> not atom(isChewy(1))  >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> not atom(isOctopus(1))  >> atom(isMaguro(1)) >> atom(isTamago(1)) ; 
  atom(isChewy(1)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) ; 
  atom(isOctopus(1)) >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> not atom(isUrchin(1))  >> not atom(isChewy(1))  >> atom(isUrchin(1)) || not atom(isOctopus(1))  ; 
  atom(isShrimp(1)) >> atom(hasMinorGrp(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) || not atom(isTamago(1))  ; 
  atom(isOctopus(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isTamago(1))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> not atom(isButtery(1))  >> atom(isUnique(1)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isShrimp(1)) >> atom(hasMinorGrp(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) || not atom(isTamago(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> atom(isOctopus(1)) >> not atom(hasPrice(1))  >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isShrimp(1)) >> atom(hasMinorGrp(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) || not atom(isTamago(1))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isMaguro(1))  ; 
  atom(isChewy(1)) >> not atom(isButtery(1))  >> atom(isUnique(1)) >> atom(isSweet(1)) || not atom(isOctopus(1))  
}.
