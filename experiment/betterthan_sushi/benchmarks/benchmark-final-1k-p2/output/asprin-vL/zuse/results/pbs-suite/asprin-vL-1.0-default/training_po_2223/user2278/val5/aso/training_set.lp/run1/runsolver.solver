asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(isRaw(0))),()) preference(1,(1,5),4,for(atom(isTamago(1))),()) preference(1,aso) output(4,better,1) output(4,better,0) output(3,eq,9)
Optimization: 34 8
Answer: 2
preference(1,(1,3),0,for(atom(isRaw(0))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),3,for(atom(hasPrice(0))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),3,for(atom(isShrimp(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,2),4,for(atom(isShrimp(1))),()) preference(1,(1,6),4,for(atom(isShrimp(1))),()) preference(1,(1,7),4,for(atom(isChewy(1))),()) preference(1,(1,8),4,for(atom(isUrchin(1))),()) preference(1,aso) output(3,better,0) output(3,better,9) output(2,better,9) output(4,worse,6) output(4,worse,1) output(4,worse,7) output(4,worse,8) output(3,worse,2) output(0,worse,2) output(6,eq,1) output(6,eq,7) output(6,eq,8) output(1,eq,7) output(1,eq,8) output(7,eq,8) output(0,eq,9)
Optimization: 33 8
Answer: 3
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,3),3,for(atom(isTamago(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isRaw(0))),()) preference(1,(1,3),4,for(atom(isShrimp(1))),()) preference(1,(1,5),4,for(atom(isShrimp(1))),()) preference(1,(1,7),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,1) output(4,better,0) output(7,better,0) output(3,better,9) output(4,worse,2) output(6,worse,3) output(6,worse,2) output(1,worse,2) output(0,worse,2)
Optimization: 32 8
Answer: 4
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isChewy(1))),()) preference(1,(1,8),3,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,1) output(4,better,7) output(4,better,0) output(7,better,0) output(3,better,9) output(1,worse,7)
Optimization: 31 8
Answer: 5
preference(1,(1,2),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),0,for(atom(isTamago(1))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),0,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),1,for(atom(isSweet(1))),()) preference(1,(1,3),1,for(atom(hasPrice(0))),()) preference(1,(1,4),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,4),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isRaw(1))),()) preference(1,aso) output(4,better,6) output(4,better,1) output(4,better,7) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,2) output(4,better,9) output(6,better,3) output(6,better,0) output(6,better,2) output(6,better,9) output(1,better,3) output(1,better,0) output(1,better,2) output(1,better,9) output(7,better,3) output(7,better,0) output(7,better,2) output(7,better,9) output(8,better,3) output(8,better,0) output(8,better,2) output(8,better,9) output(3,better,2) output(0,better,2) output(2,worse,9) output(6,eq,7) output(1,eq,8) output(3,eq,0) output(3,eq,9) output(0,eq,9)
Optimization: 10 5
Answer: 6
preference(1,(1,2),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),0,for(atom(isTamago(1))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),0,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),1,for(atom(isSweet(1))),()) preference(1,(1,3),1,for(atom(hasPrice(0))),()) preference(1,(1,4),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,4),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isRaw(1))),()) preference(1,aso) output(4,better,6) output(4,better,7) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,2) output(4,better,9) output(6,better,3) output(6,better,0) output(6,better,2) output(6,better,9) output(1,better,7) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,2) output(1,better,9) output(7,better,3) output(7,better,0) output(7,better,2) output(7,better,9) output(8,better,3) output(8,better,0) output(8,better,2) output(8,better,9) output(3,better,2) output(0,better,2) output(6,worse,1) output(2,worse,9) output(4,eq,1) output(6,eq,7) output(3,eq,0) output(3,eq,9) output(0,eq,9)
Optimization: 9 5
Answer: 7
preference(1,(1,1),0,for(atom(isOctopus(1))),()) preference(1,(1,7),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,8),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,aso) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,2) output(4,better,9) output(6,better,1) output(6,better,7) output(6,better,8) output(6,better,3) output(6,better,0) output(6,better,2) output(6,better,9) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,2) output(1,better,9) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,2) output(7,better,9) output(8,better,3) output(8,better,0) output(8,better,2) output(8,better,9) output(3,better,9) output(0,better,9) output(2,better,9) output(4,worse,6) output(4,eq,1) output(4,eq,7) output(1,eq,7) output(3,eq,0) output(3,eq,2) output(0,eq,2)
Optimization: 7 3
Answer: 8
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),0,for(atom(hasPrice(0))),()) preference(1,(1,8),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isFattyFish(1))),()) preference(1,(1,4),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,2),3,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isShrimp(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,6),3,for(atom(isChewy(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,3),4,for(atom(isChewy(1))),()) preference(1,(1,6),4,for(atom(isRaw(1))),()) preference(1,aso) output(4,better,6) output(4,better,1) output(4,better,7) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,2) output(4,better,9) output(6,better,1) output(6,better,7) output(6,better,8) output(6,better,3) output(6,better,0) output(6,better,2) output(6,better,9) output(1,better,7) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,2) output(1,better,9) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,2) output(7,better,9) output(8,better,3) output(8,better,0) output(8,better,2) output(8,better,9) output(3,better,0) output(3,better,2) output(3,better,9) output(0,better,2) output(0,better,9) output(2,better,9)
Optimization: 0 8
Progression : 0 [1;8] (Error: 7)
Progression : 0 [2;8] (Error: 3)
Answer: 9
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,3),0,for(atom(isRaw(0))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,4),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(isRaw(0))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isButtery(1))),()) preference(1,(1,2),3,for(atom(isShrimp(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isSweet(1))),()) preference(1,(1,2),4,for(atom(hasMinorGrp(0))),()) preference(1,aso) output(4,better,6) output(4,better,1) output(4,better,7) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,2) output(4,better,9) output(6,better,1) output(6,better,7) output(6,better,8) output(6,better,3) output(6,better,0) output(6,better,2) output(6,better,9) output(1,better,7) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,2) output(1,better,9) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,2) output(7,better,9) output(8,better,3) output(8,better,0) output(8,better,2) output(8,better,9) output(3,better,0) output(3,better,2) output(3,better,9) output(0,better,2) output(0,better,9) output(2,better,9)
Optimization: 0 7
Answer: 10
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),0,for(atom(isRaw(0))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,4),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,6),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isButtery(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,2),4,for(atom(isShrimp(1))),()) preference(1,aso) output(4,better,6) output(4,better,1) output(4,better,7) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,2) output(4,better,9) output(6,better,1) output(6,better,7) output(6,better,8) output(6,better,3) output(6,better,0) output(6,better,2) output(6,better,9) output(1,better,7) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,2) output(1,better,9) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,2) output(7,better,9) output(8,better,3) output(8,better,0) output(8,better,2) output(8,better,9) output(3,better,0) output(3,better,2) output(3,better,9) output(0,better,2) output(0,better,9) output(2,better,9)
Optimization: 0 6
Answer: 11
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),0,for(atom(isRaw(0))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,6),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isButtery(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,2),4,for(atom(isShrimp(1))),()) preference(1,aso) output(4,better,6) output(4,better,1) output(4,better,7) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,2) output(4,better,9) output(6,better,1) output(6,better,7) output(6,better,8) output(6,better,3) output(6,better,0) output(6,better,2) output(6,better,9) output(1,better,7) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,2) output(1,better,9) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,2) output(7,better,9) output(8,better,3) output(8,better,0) output(8,better,2) output(8,better,9) output(3,better,0) output(3,better,2) output(3,better,9) output(0,better,2) output(0,better,9) output(2,better,9)
Optimization: 0 5
Answer: 12
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),0,for(atom(isRaw(0))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,4),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isButtery(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,2),4,for(atom(isShrimp(1))),()) preference(1,aso) output(4,better,6) output(4,better,1) output(4,better,7) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,2) output(4,better,9) output(6,better,1) output(6,better,7) output(6,better,8) output(6,better,3) output(6,better,0) output(6,better,2) output(6,better,9) output(1,better,7) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,2) output(1,better,9) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,2) output(7,better,9) output(8,better,3) output(8,better,0) output(8,better,2) output(8,better,9) output(3,better,0) output(3,better,2) output(3,better,9) output(0,better,2) output(0,better,9) output(2,better,9)
Optimization: 0 4
Answer: 13
preference(1,(1,2),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,4),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,3),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(isTamago(1))),()) preference(1,(1,3),3,for(atom(isButtery(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,2),4,for(atom(isShrimp(1))),()) preference(1,aso) output(4,better,6) output(4,better,1) output(4,better,7) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,2) output(4,better,9) output(6,better,1) output(6,better,7) output(6,better,8) output(6,better,3) output(6,better,0) output(6,better,2) output(6,better,9) output(1,better,7) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,2) output(1,better,9) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,2) output(7,better,9) output(8,better,3) output(8,better,0) output(8,better,2) output(8,better,9) output(3,better,0) output(3,better,2) output(3,better,9) output(0,better,2) output(0,better,9) output(2,better,9)
Optimization: 0 3
OPTIMUM FOUND

Models       : 13
  Optimum    : yes
Optimization : 0 3
Calls        : 1
Time         : 12.077s (Solving: 5.32s 1st Model: 0.30s Unsat: 3.69s)
CPU Time     : 27.875s
Threads      : 4        (Winner: 3)

Choices      : 130661   (Domain: 459)
Conflicts    : 15057    (Analyzed: 15054)
Restarts     : 37       (Average: 406.86 Last: 1299)
Model-Level  : 514.1   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 33914    (Deleted: 0)
  Binary     : 1889     (Ratio:   5.57%)
  Ternary    : 3156     (Ratio:   9.31%)
  Conflict   : 15053    (Average Length:   70.9 Ratio:  44.39%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 18861    (Average Length:   23.9 Ratio:  55.61%) 
  Distributed: 6316     (Ratio:  41.96% Average LBD: 3.13) 
  Integrated : 18940    (Ratio: 299.87% Unit: 185 Average Jumps: 109.36)
Backjumps    : 15054    (Average:  6.79 Max: 998 Sum: 102251)
  Executed   : 15045    (Average:  6.78 Max: 998 Sum: 102139 Ratio:  99.89%)
  Bounded    : 9        (Average: 12.44 Max:  35 Sum:    112 Ratio:   0.11%)

Rules        : 2317971 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 658482  
Bodies       : 780104  
  Count      : 1768    
Equivalences : 2017271  (Atom=Atom: 578445 Body=Body: 626023 Other: 812803)
Tight        : Yes
Variables    : 86911    (Eliminated:    0 Frozen: 58215)
Constraints  : 1780449  (Binary:  95.2% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isSweet(1))  >> atom(isTamago(1)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> not atom(hasMinorGrp(1))  >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isRaw(0)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  || atom(isRaw(0)) ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> atom(hasPrice(0)) >> not atom(isRaw(0))  || atom(hasMinorGrp(1)) ; 
  atom(isTamago(1)) >> atom(isOctopus(1)) >> not atom(isMaguro(1))  >> atom(isChewy(1)) || atom(hasMinorGrp(1)) ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(hasMinorGrp(1)) >> atom(isShrimp(1)) ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(hasMinorGrp(1)) >> atom(isShrimp(1)) ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> atom(hasMinorGrp(1)) >> atom(isShrimp(1)) ; 
  atom(isTamago(1)) >> atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isTamago(1)) >> atom(isShrimp(1)) ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> not atom(isRaw(1))  >> atom(isRaw(0)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isRaw(0)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isOctopus(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(1))  || atom(isUrchin(1)) ; 
  atom(isOctopus(1)) >> atom(isMaguro(1)) >> not atom(hasMinorGrp(0))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isMaguro(1))  >> not atom(isUnique(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isUrchin(1)) >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isOctopus(1))  >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> atom(isChewy(1)) >> not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isRaw(0)) >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSweet(1)) >> atom(isMaguro(1)) || atom(hasMinorGrp(0)) ; 
  atom(hasPrice(0)) >> not atom(isOctopus(1))  >> not atom(isTamago(1))  || atom(isTamago(1)) ; 
  atom(isRoe(1)) >> not atom(isTamago(1))  >> atom(isRaw(1)) || not atom(hasMinorGrp(2))  ; 
  atom(isFattyFish(1)) >> not atom(isMaguro(1))  >> atom(isRaw(1)) || not atom(isUrchin(1))  ; 
  not atom(isOctopus(1))  >> atom(hasPrice(0)) >> not atom(isRoe(1))  >> not atom(isUrchin(1))  || atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSweet(1)) >> atom(isMaguro(1)) || atom(hasMinorGrp(0)) ; 
  atom(hasPrice(0)) >> not atom(isOctopus(1))  >> not atom(isTamago(1))  || atom(isTamago(1)) ; 
  atom(isRoe(1)) >> not atom(isTamago(1))  >> atom(isRaw(1)) || not atom(isSweet(1))  ; 
  atom(isFattyFish(1)) >> not atom(isMaguro(1))  >> atom(isRaw(1)) || not atom(isUrchin(1))  ; 
  not atom(isOctopus(1))  >> atom(hasPrice(0)) >> not atom(isRoe(1))  >> not atom(isUrchin(1))  || atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isTamago(1))  >> not atom(isRaw(0))  || atom(isOctopus(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> not atom(isUnique(1))  >> not atom(isMaguro(1))  || not atom(isSweet(1))  ; 
  atom(isOctopus(1)) >> atom(isSweet(1)) >> not atom(isRoe(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) >> not atom(isSweet(1))  || not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  || atom(hasMinorGrp(0)) ; 
  not atom(hasPrice(0))  >> atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isChewy(1)) || not atom(isChewy(1))  ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isSweet(1))  || not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> atom(isRoe(1)) >> atom(isRaw(0)) >> not atom(isChewy(1))  || not atom(hasMinorGrp(2))  ; 
  atom(hasMinorGrp(2)) >> atom(isRoe(1)) >> atom(isChewy(1)) >> atom(isRaw(1)) || atom(hasPrice(0)) ; 
  not atom(isFattyFish(1))  >> atom(isUrchin(1)) >> atom(isFattyFish(1)) || atom(hasMinorGrp(2)) ; 
  atom(isRoe(1)) >> atom(isTamago(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isTamago(1)) >> atom(isButtery(1)) >> not atom(isFattyFish(1))  || not atom(isUrchin(1))  ; 
  atom(isRaw(0)) >> atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(hasMinorGrp(0)) || not atom(isButtery(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  || atom(isRaw(0)) ; 
  atom(isFattyFish(1)) >> not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(hasMinorGrp(2))  ; 
  atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || not atom(isSweet(1))  ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(hasPrice(0))  || not atom(isButtery(1))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(isSweet(1)) >> not atom(hasMinorGrp(2))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isTamago(1)) >> atom(isButtery(1)) >> not atom(isFattyFish(1))  || not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  || atom(isRaw(0)) ; 
  atom(isFattyFish(1)) >> not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(hasMinorGrp(2))  ; 
  atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || not atom(isSweet(1))  ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(hasPrice(0))  || not atom(isButtery(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isTamago(1)) >> atom(isButtery(1)) >> not atom(isFattyFish(1))  || not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  || atom(isRaw(0)) ; 
  atom(isFattyFish(1)) >> not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(hasMinorGrp(2))  ; 
  atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isTamago(1)) >> atom(isButtery(1)) >> not atom(isFattyFish(1))  || not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> atom(isUnique(1)) >> not atom(isRaw(0))  || atom(isRaw(0)) ; 
  atom(isFattyFish(1)) >> not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(hasMinorGrp(2))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isUnique(1))  >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> atom(isTamago(1)) >> atom(isButtery(1)) >> not atom(isFattyFish(1))  || not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> not atom(isRaw(1))  >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(hasMinorGrp(2))  
}.
