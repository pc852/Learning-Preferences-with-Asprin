asprin_vL version 1.0
Reading from stdin
-:250:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:260:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:275:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:356:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:630:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:807:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:936:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1008:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1012:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1012:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1018:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1117:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1143:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1263:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1297:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1319:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:167:1-16: info: no atoms over signature occur in program:
  output/3

-:159:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:160:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:161:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(4,eq,5) output(4,eq,3) output(4,eq,8) output(4,eq,6) output(4,eq,7) output(4,eq,9) output(4,eq,1) output(4,eq,2) output(5,eq,3) output(5,eq,8) output(5,eq,6) output(5,eq,7) output(5,eq,9) output(5,eq,1) output(5,eq,2) output(3,eq,8) output(3,eq,6) output(3,eq,7) output(3,eq,9) output(3,eq,1) output(3,eq,2) output(8,eq,6) output(8,eq,7) output(8,eq,9) output(8,eq,1) output(8,eq,2) output(6,eq,7) output(6,eq,9) output(6,eq,1) output(6,eq,2) output(7,eq,9) output(7,eq,1) output(7,eq,2) output(9,eq,1) output(9,eq,2) output(1,eq,2)
Optimization: 36 0
Answer: 2
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isMaguro(1))),()) preference(1,poset) output(4,better,5) output(4,better,7) output(4,better,1) output(6,better,7) output(6,better,1) output(9,better,1) output(8,better,7) output(3,better,7) output(3,better,1) output(8,better,1) output(4,worse,2) output(5,worse,2) output(3,worse,2) output(8,worse,2) output(6,worse,2) output(7,worse,2) output(9,worse,2) output(1,worse,2) output(5,worse,6) output(5,worse,9) output(7,worse,9) output(5,worse,8) output(5,worse,3) output(4,eq,3) output(4,eq,8) output(4,eq,6) output(4,eq,9) output(5,eq,7) output(5,eq,1) output(3,eq,8) output(3,eq,6) output(3,eq,9) output(8,eq,6) output(8,eq,9) output(6,eq,9) output(7,eq,1)
Optimization: 26 1
Answer: 3
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(4,better,5) output(4,better,3) output(4,better,8) output(4,better,6) output(4,better,7) output(4,better,9) output(4,better,1) output(4,better,2) output(6,better,7) output(6,better,1) output(9,better,1) output(8,better,7) output(3,better,7) output(3,better,1) output(8,better,1) output(5,worse,2) output(7,worse,2) output(1,worse,2) output(5,worse,6) output(5,worse,9) output(7,worse,9) output(5,worse,8) output(5,worse,3) output(5,eq,7) output(5,eq,1) output(3,eq,8) output(3,eq,6) output(3,eq,9) output(3,eq,2) output(8,eq,6) output(8,eq,9) output(8,eq,2) output(6,eq,9) output(6,eq,2) output(7,eq,1) output(9,eq,2)
Optimization: 21 1
Answer: 4
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(4,better,5) output(4,better,3) output(4,better,8) output(4,better,7) output(4,better,9) output(4,better,1) output(4,better,2) output(6,better,7) output(6,better,9) output(6,better,1) output(6,better,2) output(7,better,1) output(9,better,1) output(8,better,7) output(3,better,7) output(3,better,1) output(8,better,1) output(5,worse,2) output(7,worse,2) output(1,worse,2) output(5,worse,6) output(3,worse,6) output(8,worse,6) output(5,worse,7) output(5,worse,9) output(7,worse,9) output(5,worse,8) output(5,worse,3) output(4,eq,6) output(5,eq,1) output(3,eq,8) output(3,eq,9) output(3,eq,2) output(8,eq,9) output(8,eq,2) output(9,eq,2)
Optimization: 19 1
Answer: 5
preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(4,better,5) output(4,better,3) output(4,better,6) output(4,better,7) output(4,better,9) output(4,better,1) output(4,better,2) output(5,better,6) output(5,better,7) output(5,better,1) output(5,better,2) output(9,better,1) output(9,better,2) output(8,better,6) output(8,better,7) output(8,better,9) output(8,better,2) output(3,better,6) output(3,better,7) output(3,better,1) output(3,better,2) output(8,better,1) output(6,worse,9) output(7,worse,9) output(5,worse,8) output(3,worse,8) output(4,eq,8) output(5,eq,3) output(5,eq,9) output(3,eq,9) output(6,eq,7) output(6,eq,1) output(6,eq,2) output(7,eq,1) output(7,eq,2) output(1,eq,2)
Optimization: 14 1
Answer: 6
preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,12),1,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(4,better,5) output(4,better,3) output(4,better,6) output(4,better,7) output(4,better,9) output(4,better,1) output(4,better,2) output(5,better,3) output(5,better,6) output(5,better,7) output(5,better,9) output(5,better,1) output(5,better,2) output(7,better,9) output(7,better,2) output(9,better,2) output(8,better,6) output(8,better,7) output(8,better,9) output(8,better,2) output(1,better,2) output(3,better,6) output(3,better,2) output(8,better,1) output(3,worse,7) output(6,worse,7) output(6,worse,9) output(5,worse,8) output(3,worse,8) output(3,worse,1) output(6,worse,1) output(9,worse,1) output(4,eq,8) output(3,eq,9) output(6,eq,2) output(7,eq,1)
Optimization: 12 2
Answer: 7
preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isCreamy(1))),()) preference(1,(1,9),2,for(atom(isTamago(1))),()) preference(1,(1,10),2,for(atom(hasPrice(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,poset) output(4,better,8) output(4,better,9) output(4,better,1) output(4,better,2) output(5,better,8) output(5,better,7) output(5,better,9) output(5,better,1) output(5,better,2) output(6,better,7) output(6,better,9) output(6,better,1) output(6,better,2) output(7,better,9) output(7,better,1) output(7,better,2) output(9,better,1) output(9,better,2) output(8,better,2) output(3,better,8) output(3,better,7) output(3,better,9) output(3,better,1) output(3,better,2) output(8,better,1) output(4,worse,5) output(4,worse,6) output(8,worse,6) output(8,worse,7) output(4,worse,3) output(5,eq,3) output(1,eq,2) output(4,unc,7) output(5,unc,6) output(3,unc,6) output(8,unc,9)
Optimization: 11 10
Answer: 8
preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isCreamy(1))),()) preference(1,(1,9),2,for(atom(isTamago(1))),()) preference(1,(1,10),2,for(atom(hasPrice(1))),()) preference(1,(1,11),2,for(atom(isOctopus(1))),()) preference(1,poset) output(4,better,8) output(4,better,9) output(4,better,1) output(4,better,2) output(5,better,3) output(5,better,8) output(5,better,7) output(5,better,9) output(5,better,1) output(5,better,2) output(6,better,7) output(6,better,9) output(6,better,1) output(6,better,2) output(7,better,9) output(7,better,1) output(7,better,2) output(9,better,1) output(9,better,2) output(8,better,2) output(3,better,8) output(3,better,7) output(3,better,9) output(3,better,1) output(3,better,2) output(8,better,1) output(4,worse,5) output(4,worse,6) output(8,worse,6) output(8,worse,7) output(4,worse,3) output(1,eq,2) output(4,unc,7) output(5,unc,6) output(3,unc,6) output(8,unc,9)
Optimization: 10 10
Answer: 9
preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isCreamy(1))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,10),2,for(atom(isShrimp(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,poset) output(4,better,8) output(4,better,7) output(4,better,9) output(4,better,1) output(4,better,2) output(5,better,3) output(5,better,8) output(5,better,7) output(5,better,9) output(5,better,1) output(5,better,2) output(6,better,7) output(6,better,9) output(6,better,1) output(6,better,2) output(7,better,9) output(7,better,1) output(7,better,2) output(9,better,1) output(9,better,2) output(8,better,2) output(3,better,8) output(3,better,7) output(3,better,9) output(3,better,1) output(3,better,2) output(8,better,1) output(4,worse,5) output(4,worse,6) output(8,worse,6) output(8,worse,7) output(4,worse,3) output(1,eq,2) output(5,unc,6) output(3,unc,6) output(8,unc,9)
Optimization: 9 10
Answer: 10
preference(1,(1,1),1,for(atom(isCreamy(1))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isButtery(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,9),1,for(atom(isFattyFish(1))),()) preference(1,(1,10),1,for(atom(isRoe(1))),()) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),2,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(hasPrice(0))),()) preference(1,(1,6),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(isButtery(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,9),2,for(atom(hasPrice(0))),()) preference(1,(1,10),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,11),2,for(atom(isSweet(1))),()) preference(1,(1,12),2,for(atom(isCreamy(1))),()) preference(1,poset) output(4,better,8) output(4,better,7) output(4,better,1) output(4,better,2) output(5,better,3) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,9) output(5,better,1) output(5,better,2) output(6,better,7) output(6,better,9) output(6,better,1) output(6,better,2) output(7,better,1) output(7,better,2) output(9,better,1) output(9,better,2) output(8,better,7) output(8,better,2) output(1,better,2) output(3,better,8) output(3,better,7) output(3,better,9) output(3,better,1) output(3,better,2) output(8,better,1) output(4,worse,5) output(7,worse,9) output(4,worse,3) output(4,unc,6) output(4,unc,9) output(3,unc,6) output(8,unc,6) output(8,unc,9)
Optimization: 8 12
Answer: 11
preference(1,(1,2),1,for(atom(isRaw(0))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,11),1,for(atom(isRaw(0))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,5) output(4,better,3) output(4,better,8) output(4,better,6) output(4,better,7) output(4,better,9) output(4,better,1) output(4,better,2) output(5,better,3) output(5,better,6) output(5,better,7) output(5,better,9) output(5,better,1) output(5,better,2) output(6,better,9) output(6,better,2) output(7,better,9) output(7,better,1) output(7,better,2) output(9,better,2) output(8,better,6) output(8,better,7) output(8,better,9) output(8,better,2) output(1,better,2) output(3,better,6) output(3,better,7) output(3,better,9) output(3,better,1) output(3,better,2) output(8,better,1) output(6,worse,7) output(5,worse,8) output(3,worse,8) output(6,worse,1) output(9,worse,1)
Optimization: 5 5
Answer: 12
preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isButtery(1))),()) preference(1,(1,9),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(isRaw(0))),()) preference(1,(1,2),2,for(atom(isRaw(0))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,5) output(4,better,3) output(4,better,8) output(4,better,6) output(4,better,7) output(4,better,9) output(4,better,1) output(4,better,2) output(5,better,3) output(5,better,6) output(5,better,7) output(5,better,9) output(5,better,1) output(5,better,2) output(6,better,9) output(6,better,1) output(6,better,2) output(7,better,9) output(7,better,1) output(7,better,2) output(9,better,2) output(8,better,6) output(8,better,7) output(8,better,9) output(8,better,2) output(1,better,2) output(3,better,6) output(3,better,7) output(3,better,9) output(3,better,1) output(3,better,2) output(8,better,1) output(6,worse,7) output(5,worse,8) output(3,worse,8) output(9,worse,1)
Optimization: 4 5
Answer: 13
preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,11),1,for(atom(isRaw(0))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,11),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,5) output(4,better,3) output(4,better,8) output(4,better,6) output(4,better,7) output(4,better,9) output(4,better,1) output(4,better,2) output(5,better,3) output(5,better,6) output(5,better,7) output(5,better,9) output(5,better,1) output(5,better,2) output(6,better,9) output(6,better,1) output(6,better,2) output(7,better,9) output(7,better,1) output(7,better,2) output(9,better,1) output(9,better,2) output(8,better,6) output(8,better,7) output(8,better,9) output(8,better,2) output(1,better,2) output(3,better,6) output(3,better,7) output(3,better,9) output(3,better,1) output(3,better,2) output(8,better,1) output(6,worse,7) output(5,worse,8) output(3,worse,8)
Optimization: 3 5
Answer: 14
preference(1,(1,1),1,for(atom(isCreamy(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isButtery(1))),()) preference(1,(1,4),1,for(atom(isChewy(1))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(isUnique(1))),()) preference(1,(1,10),1,for(atom(isRoe(1))),()) preference(1,(1,11),1,for(atom(isRoe(1))),()) preference(1,(1,12),1,for(atom(isShrimp(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isButtery(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(hasPrice(0))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,(1,10),2,for(atom(isTamago(1))),()) preference(1,(1,11),2,for(atom(isCreamy(1))),()) preference(1,(1,12),2,for(atom(isOctopus(1))),()) preference(1,poset) output(4,better,8) output(4,better,6) output(4,better,7) output(4,better,9) output(4,better,1) output(4,better,2) output(5,better,3) output(5,better,8) output(5,better,6) output(5,better,7) output(5,better,9) output(5,better,1) output(5,better,2) output(6,better,7) output(6,better,9) output(6,better,1) output(6,better,2) output(7,better,9) output(7,better,1) output(7,better,2) output(9,better,1) output(9,better,2) output(8,better,6) output(8,better,7) output(8,better,9) output(8,better,2) output(1,better,2) output(3,better,8) output(3,better,6) output(3,better,7) output(3,better,9) output(3,better,1) output(3,better,2) output(8,better,1) output(4,unc,5) output(4,unc,3)
Optimization: 2 11
SATISFIABLE

Models       : 14+
  Optimum    : unknown
Optimization : 2 11
Calls        : 1
Time         : 1194.214s (Solving: 1186.42s 1st Model: 1.36s Unsat: 0.00s)
CPU Time     : 4751.630s
Threads      : 4        (Winner: 0)

Choices      : 8655949  (Domain: 3381)
Conflicts    : 349117   (Analyzed: 349117)
Restarts     : 386      (Average: 904.45 Last: 27632)
Model-Level  : 652.6   
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 30244145 (Deleted: 30045669)
  Binary     : 4396     (Ratio:   0.01%)
  Ternary    : 88239    (Ratio:   0.29%)
  Conflict   : 349117   (Average Length: 1097.7 Ratio:   1.15%) 
  Loop       : 29788250 (Average Length:  223.8 Ratio:  98.49%) 
  Other      : 106778   (Average Length:    3.6 Ratio:   0.35%) 
  Distributed: 35606    (Ratio:   0.12% Average LBD: 2.83) 
  Integrated : 106818   (Ratio: 300.00% Unit: 355 Average Jumps: 1018.09)
Backjumps    : 349117   (Average: 20.16 Max: 94137 Sum: 7038136)
  Executed   : 349082   (Average: 20.16 Max: 94137 Sum: 7038030 Ratio: 100.00%)
  Bounded    : 35       (Average:  3.03 Max:  38 Sum:    106 Ratio:   0.00%)

Rules        : 1508146 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 28636   
Bodies       : 1146243 
  Count      : 48      
Equivalences : 32188    (Atom=Atom: 5190 Body=Body: 7870 Other: 19128)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 1089612 Gammas: 0)
Variables    : 1103157  (Eliminated:    0 Frozen: 1092645)
Constraints  : 6431712  (Binary:  82.5% Ternary:   3.6% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(isRaw(0)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRoe(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(2)) >> atom(isUrchin(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isShrimp(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isUnique(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isTamago(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPrice(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isButtery(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRoe(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(2)) >> atom(isUrchin(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isShrimp(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isUnique(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isTamago(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPrice(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRoe(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(2)) >> atom(isUrchin(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isUnique(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasPrice(1)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isShrimp(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isButtery(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isCreamy(1)) >> atom(isFattyFish(1)) ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isButtery(1)) >> atom(isCreamy(1)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPrice(0)) ; 
  atom(isRoe(1)) >> atom(isCreamy(1)) ; 
  atom(isChewy(1)) >> atom(isButtery(1)) ; 
  atom(isOctopus(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isFattyFish(1)) >> atom(hasPrice(0)) ; 
  atom(isRoe(1)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(0)) >> atom(isSweet(1)) ; 
  atom(hasMinorGrp(1)) >> atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(hasMinorGrp(2)) ; 
  atom(isChewy(1)) >> atom(isRaw(0)) ; 
  atom(hasPrice(1)) >> atom(isChewy(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) ; 
  atom(isRaw(0)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasMinorGrp(2)) >> atom(isRaw(0)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isButtery(1)) >> atom(isChewy(1)) ; 
  atom(hasPrice(0)) >> atom(hasMinorGrp(1)) ; 
  atom(isRaw(0)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isChewy(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(1)) >> atom(isRaw(0)) ; 
  atom(hasPrice(1)) >> atom(isChewy(1)) ; 
  atom(hasMinorGrp(2)) >> atom(hasMinorGrp(1)) ; 
  atom(isRaw(0)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isCreamy(1)) >> atom(isShrimp(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(0)) ; 
  atom(isButtery(1)) >> atom(isRoe(1)) ; 
  atom(isChewy(1)) >> atom(isButtery(1)) ; 
  atom(isTamago(1)) >> atom(hasPrice(1)) ; 
  atom(hasPrice(1)) >> atom(isUnique(1)) ; 
  atom(isRoe(1)) >> atom(hasPrice(0)) ; 
  atom(isUnique(1)) >> atom(isSweet(1)) ; 
  atom(isRoe(1)) >> atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(isCreamy(1)) ; 
  atom(isShrimp(1)) >> atom(isOctopus(1)) 
}.
Time limit reached
