asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,2) output(3,better,5) output(3,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,5) output(0,better,1) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(3,worse,7) output(2,worse,7) output(2,worse,0) output(2,worse,9) output(2,worse,6) output(3,eq,0) output(3,eq,9) output(3,eq,6) output(2,eq,1) output(0,eq,9) output(0,eq,6) output(9,eq,6)
Optimization: 15 4
Answer: 2
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,6),4,for(atom(isUnique(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,2) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,6) output(0,better,1) output(5,better,1) output(9,worse,5) output(6,worse,5) output(0,eq,5) output(9,eq,6)
Optimization: 13 4
Answer: 3
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,6),4,for(atom(isOctopus(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,2) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(2,worse,7) output(2,worse,0) output(2,worse,9) output(2,worse,6) output(3,eq,0) output(2,eq,1) output(9,eq,6)
Optimization: 12 4
Answer: 4
preference(1,(1,1),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),0,for(atom(isShrimp(1))),()) preference(1,(1,8),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,8),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(hasPrice(1))),()) preference(1,(1,5),1,for(atom(hasPrice(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isRaw(0))),()) preference(1,(1,4),2,for(atom(isButtery(1))),()) preference(1,(1,5),2,for(atom(isButtery(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(hasPrice(0))),()) preference(1,(1,8),2,for(atom(isRaw(0))),()) preference(1,(1,1),3,for(atom(isUrchin(1))),()) preference(1,(1,6),3,for(atom(isFattyFish(1))),()) preference(1,(1,7),3,for(atom(isUrchin(1))),()) preference(1,(1,2),4,for(atom(isOctopus(1))),()) preference(1,(1,6),4,for(atom(isOctopus(1))),()) preference(1,(1,7),4,for(atom(isFattyFish(1))),()) preference(1,(1,8),4,for(atom(isShrimp(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,2) output(3,better,7) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(6,better,5) output(6,better,1) output(9,worse,6) output(2,eq,7)
Optimization: 10 8
Answer: 5
preference(1,(1,5),0,for(atom(hasPrice(0))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,5),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,5),4,for(atom(isOctopus(1))),()) preference(1,(1,6),4,for(atom(isOctopus(1))),()) preference(1,aso) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,2) output(3,better,7) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,7) output(2,better,6) output(2,better,5) output(2,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,6) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(2,worse,0) output(7,worse,0) output(7,worse,9) output(7,worse,6) output(7,worse,1) output(5,worse,1) output(4,eq,3)
Optimization: 9 3
Answer: 6
preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),0,for(atom(hasPrice(0))),()) preference(1,(1,7),0,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isRaw(1))),()) preference(1,(1,5),2,for(atom(isShrimp(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,aso) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,2) output(3,better,7) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,7) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,6) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(7,worse,0) output(7,worse,9) output(7,worse,6) output(5,worse,1) output(4,eq,3)
Optimization: 8 3
Answer: 7
preference(1,(1,1),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),0,for(atom(isOctopus(1))),()) preference(1,(1,3),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,8),0,for(atom(isUnique(1))),()) preference(1,(1,2),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,1),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isRaw(1))),()) preference(1,(1,4),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isButtery(1))),()) preference(1,(1,8),1,for(atom(hasPrice(0))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(hasPrice(0))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(hasPrice(0))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,2) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,6) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(3,worse,7) output(2,worse,7) output(2,worse,0)
Optimization: 7 8
Answer: 8
preference(1,(1,1),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),0,for(atom(isTamago(1))),()) preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),2,for(atom(isButtery(1))),()) preference(1,(1,3),2,for(atom(isButtery(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,4),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),4,for(atom(isCreamy(1))),()) preference(1,(1,7),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,0) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,5) output(0,better,1) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(5,better,1) output(3,eq,2) output(3,eq,7) output(2,eq,7)
Optimization: 5 8
Progression : [1;5] (Error: 4)
Answer: 9
preference(1,(1,1),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),0,for(atom(isTamago(1))),()) preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),2,for(atom(isButtery(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isMaguro(1))),()) preference(1,(1,1),4,for(atom(isRaw(0))),()) preference(1,(1,4),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,7) output(2,better,0) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,5) output(0,better,1) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(5,better,1) output(3,worse,2) output(3,eq,7)
Optimization: 4 8
Answer: 10
preference(1,(1,1),0,for(atom(isRaw(1))),()) preference(1,(1,3),0,for(atom(isTamago(1))),()) preference(1,(1,4),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isShrimp(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),2,for(atom(isButtery(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isRoe(1))),()) preference(1,(1,4),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,0) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,6) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(5,better,1) output(3,eq,2) output(3,eq,7) output(2,eq,7)
Optimization: 3 8
Progression : [2;3] (Error: 0.5)
Answer: 11
preference(1,(1,4),0,for(atom(hasPrice(0))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isUnique(1))),()) preference(1,(1,6),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(isMaguro(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isRoe(1))),()) preference(1,(1,3),4,for(atom(isButtery(1))),()) preference(1,(1,5),4,for(atom(isSweet(1))),()) preference(1,(1,7),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,7) output(2,better,0) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,6) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(5,better,1) output(3,worse,2) output(3,eq,7)
Optimization: 2 8
Progression : 2 [1;8] (Error: 7)
Answer: 12
preference(1,(1,2),0,for(atom(isUrchin(1))),()) preference(1,(1,4),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),2,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),1,for(atom(isShrimp(1))),()) preference(1,(1,5),1,for(atom(hasPrice(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isRaw(0))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,5),3,for(atom(hasPrice(0))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),4,for(atom(isFattyFish(1))),()) preference(1,(1,8),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,7) output(2,better,0) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,6) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(5,better,1) output(3,worse,2) output(3,worse,7)
Optimization: 2 6
Answer: 13
preference(1,(1,2),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,4),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),2,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),1,for(atom(isButtery(1))),()) preference(1,(1,4),1,for(atom(isShrimp(1))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isUnique(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),4,for(atom(isFattyFish(1))),()) preference(1,(1,8),4,for(atom(isRaw(0))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,7) output(2,better,0) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,6) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(5,better,1) output(3,worse,2) output(3,worse,7)
Optimization: 2 5
Progression : 2 [2;5] (Error: 1.5)
Answer: 14
preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isUnique(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,2),3,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(hasPrice(0))),()) preference(1,(1,4),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),3,for(atom(isRoe(1))),()) preference(1,(1,2),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,7) output(2,better,0) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,6) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(5,better,1) output(3,worse,2) output(3,eq,7)
Optimization: 2 4
Answer: 15
preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isUnique(1))),()) preference(1,(1,2),3,for(atom(isRoe(1))),()) preference(1,(1,3),3,for(atom(hasPrice(0))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,4),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(4,better,3) output(4,better,2) output(4,better,7) output(4,better,0) output(4,better,9) output(4,better,6) output(4,better,5) output(4,better,1) output(3,better,0) output(3,better,9) output(3,better,6) output(3,better,5) output(3,better,1) output(2,better,7) output(2,better,0) output(2,better,9) output(2,better,6) output(2,better,5) output(2,better,1) output(7,better,0) output(7,better,9) output(7,better,6) output(7,better,5) output(7,better,1) output(0,better,9) output(0,better,6) output(0,better,5) output(0,better,1) output(9,better,6) output(9,better,5) output(9,better,1) output(6,better,5) output(6,better,1) output(5,better,1) output(3,worse,2) output(3,eq,7)
Optimization: 2 3
OPTIMUM FOUND

Models       : 15
  Optimum    : yes
Optimization : 2 3
Calls        : 1
Time         : 35.613s (Solving: 29.23s 1st Model: 0.16s Unsat: 20.27s)
CPU Time     : 123.155s
Threads      : 4        (Winner: 1)

Choices      : 457453   (Domain: 8883)
Conflicts    : 107531   (Analyzed: 107525)
Restarts     : 132      (Average: 814.58 Last: 3062)
Model-Level  : 497.3   
Problems     : 11       (Average Length: 0.36 Splits: 0)
Lemmas       : 181340   (Deleted: 102805)
  Binary     : 5714     (Ratio:   3.15%)
  Ternary    : 10095    (Ratio:   5.57%)
  Conflict   : 107522   (Average Length:  118.9 Ratio:  59.29%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 73818    (Average Length:   43.0 Ratio:  40.71%) 
  Distributed: 24692    (Ratio:  22.96% Average LBD: 3.19) 
  Integrated : 74076    (Ratio: 300.00% Unit: 476 Average Jumps: 75.49)
Backjumps    : 107525   (Average:  3.74 Max: 798 Sum: 401765)
  Executed   : 107502   (Average:  3.73 Max: 798 Sum: 401498 Ratio:  99.93%)
  Bounded    : 23       (Average: 11.61 Max:  34 Sum:    267 Ratio:   0.07%)

Rules        : 2318003 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 658490  
Bodies       : 779632  
  Count      : 1768    
Equivalences : 2017031  (Atom=Atom: 578797 Body=Body: 626271 Other: 811963)
Tight        : Yes
Variables    : 86559    (Eliminated:    0 Frozen: 57863)
Constraints  : 1779545  (Binary:  95.2% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isCreamy(1))  || atom(isRoe(1)) ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> not atom(isUrchin(1))  ; 
  atom(isButtery(1)) >> atom(hasPrice(1)) >> not atom(isOctopus(1))  >> not atom(isUnique(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isCreamy(1))  || atom(isRoe(1)) ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> not atom(hasPrice(1))  ; 
  atom(isButtery(1)) >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isCreamy(1))  || atom(isRoe(1)) ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> not atom(hasPrice(1))  ; 
  atom(isButtery(1)) >> atom(hasPrice(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isFattyFish(1)) >> atom(isUrchin(1)) >> not atom(isFattyFish(1))  || atom(hasMinorGrp(0)) ; 
  atom(hasPrice(1)) >> atom(isRaw(0)) >> not atom(isChewy(1))  >> not atom(isRaw(1))  || atom(isShrimp(1)) ; 
  not atom(hasPrice(0))  >> atom(isRaw(0)) >> not atom(isRaw(1))  >> atom(isShrimp(1)) || not atom(isTamago(1))  ; 
  atom(hasPrice(1)) >> not atom(hasPrice(0))  >> not atom(isChewy(1))  >> atom(isOctopus(1)) ; 
  atom(hasPrice(1)) >> atom(isButtery(1)) >> not atom(isShrimp(1))  >> not atom(isSweet(1))  ; 
  atom(hasPrice(1)) >> atom(isButtery(1)) >> not atom(hasPrice(1))  >> not atom(isRaw(1))  ; 
  atom(isButtery(1)) >> atom(isUnique(1)) >> atom(isFattyFish(1)) >> atom(isOctopus(1)) ; 
  not atom(hasPrice(0))  >> atom(hasPrice(0)) >> atom(isUrchin(1)) >> atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(0))  >> atom(isShrimp(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || atom(hasPrice(0)) ; 
  not atom(hasPrice(0))  >> atom(isUnique(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isMaguro(1))  ; 
  atom(isRaw(1)) >> not atom(isOctopus(1))  >> not atom(isRaw(0))  || atom(isTamago(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(0))  >> atom(isShrimp(1)) >> atom(hasMinorGrp(2)) >> not atom(isRaw(1))  || not atom(isMaguro(1))  ; 
  atom(isUrchin(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || atom(hasPrice(0)) ; 
  atom(isRaw(1)) >> not atom(isOctopus(1))  >> not atom(isRaw(0))  || atom(isTamago(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isCreamy(1)) >> atom(isShrimp(1)) >> not atom(isChewy(1))  >> not atom(isRaw(1))  || not atom(isCreamy(1))  ; 
  not atom(isChewy(1))  >> not atom(hasPrice(1))  || atom(isOctopus(1)) ; 
  atom(isRaw(1)) || not atom(hasPrice(0))  ; 
  atom(isCreamy(1)) >> atom(isTamago(1)) >> not atom(isShrimp(1))  || not atom(isTamago(1))  ; 
  not atom(isMaguro(1))  >> atom(hasPrice(0)) >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || not atom(isRaw(1))  ; 
  atom(isMaguro(1)) >> not atom(isChewy(1))  >> atom(isOctopus(1)) || not atom(isCreamy(1))  ; 
  atom(isButtery(1)) >> not atom(isFattyFish(1))  >> atom(hasPrice(0)) || not atom(isButtery(1))  ; 
  atom(hasPrice(0)) >> not atom(isFattyFish(1))  >> not atom(isSweet(1))  >> not atom(isButtery(1))  || atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isMaguro(1))  >> atom(hasMinorGrp(2)) >> atom(isUnique(1)) >> not atom(hasPrice(0))  || not atom(isChewy(1))  ; 
  not atom(isMaguro(1))  >> atom(isButtery(1)) >> not atom(isChewy(1))  >> not atom(isRaw(1))  || atom(isTamago(1)) ; 
  atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isOctopus(1)) >> atom(hasMinorGrp(0)) || not atom(isMaguro(1))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  || not atom(isCreamy(1))  ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(isRaw(0)) >> atom(isCreamy(1)) || not atom(isCreamy(1))  ; 
  not atom(hasPrice(0))  >> atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) || not atom(isTamago(1))  ; 
  not atom(isRaw(0))  >> atom(isButtery(1)) ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> atom(hasPrice(1)) >> not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isMaguro(1))  >> atom(hasMinorGrp(2)) >> atom(isUnique(1)) >> atom(isRaw(0)) || not atom(isChewy(1))  ; 
  not atom(isMaguro(1))  >> atom(isButtery(1)) >> not atom(isChewy(1))  >> not atom(isRaw(1))  || atom(isTamago(1)) ; 
  atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isOctopus(1)) >> atom(hasMinorGrp(0)) || not atom(isMaguro(1))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  || not atom(isCreamy(1))  ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(isRaw(0)) || not atom(isCreamy(1))  ; 
  not atom(hasPrice(0))  >> atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) || not atom(isTamago(1))  ; 
  not atom(isRaw(0))  >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> atom(isMaguro(1)) >> not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRaw(0))  >> atom(hasMinorGrp(2)) >> atom(isUnique(1)) >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  not atom(isMaguro(1))  >> atom(isButtery(1)) >> not atom(isChewy(1))  >> not atom(isRaw(1))  || atom(isTamago(1)) ; 
  atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isOctopus(1)) >> atom(hasMinorGrp(0)) || not atom(isMaguro(1))  ; 
  atom(isShrimp(1)) >> atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  || not atom(isCreamy(1))  ; 
  not atom(hasPrice(0))  >> atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) || not atom(isTamago(1))  ; 
  atom(isUrchin(1)) >> atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  || not atom(isCreamy(1))  ; 
  not atom(isRaw(0))  >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> not atom(isUrchin(1))  >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> not atom(hasPrice(0))  >> atom(isUrchin(1)) >> not atom(isMaguro(1))  || atom(hasPrice(0)) ; 
  not atom(hasPrice(0))  >> atom(isUnique(1)) >> atom(isOctopus(1)) >> atom(isSweet(1)) || not atom(isTamago(1))  ; 
  not atom(isUnique(1))  >> atom(isShrimp(1)) >> atom(isMaguro(1)) || not atom(isRaw(1))  ; 
  not atom(hasPrice(0))  >> atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) || not atom(isTamago(1))  ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  || not atom(isCreamy(1))  ; 
  atom(hasPrice(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  ; 
  not atom(isRaw(0))  >> not atom(hasPrice(0))  ; 
  not atom(hasPrice(0))  >> not atom(isFattyFish(1))  >> not atom(isChewy(1))  >> atom(isButtery(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isRaw(0)) >> not atom(hasPrice(1))  || atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> not atom(isCreamy(1))  || not atom(isRaw(1))  ; 
  atom(hasPrice(1)) >> atom(isMaguro(1)) >> atom(hasPrice(0)) || not atom(isButtery(1))  ; 
  atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) || not atom(hasPrice(1))  ; 
  atom(isMaguro(1)) >> not atom(isButtery(1))  || not atom(isTamago(1))  ; 
  atom(isCreamy(1)) >> atom(isShrimp(1)) >> atom(hasMinorGrp(2)) >> atom(isRaw(0)) || not atom(isTamago(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isButtery(1)) >> atom(isMaguro(1)) >> not atom(isUrchin(1))  || not atom(isButtery(1))  ; 
  atom(isShrimp(1)) >> not atom(isCreamy(1))  || not atom(isRaw(1))  ; 
  atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) || not atom(isTamago(1))  ; 
  atom(isMaguro(1)) >> not atom(isButtery(1))  || not atom(isTamago(1))  ; 
  atom(isCreamy(1)) >> atom(isShrimp(1)) >> atom(hasMinorGrp(2)) >> atom(isRaw(0)) || not atom(isTamago(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> atom(hasPrice(0)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  || not atom(isCreamy(1))  ; 
  atom(isMaguro(1)) >> atom(isUnique(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) ; 
  not atom(hasPrice(0))  >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  ; 
  not atom(hasPrice(0))  >> atom(isMaguro(1)) >> atom(hasPrice(0)) ; 
  atom(isTamago(1)) >> atom(isUnique(1)) >> atom(isOctopus(1)) >> atom(isFattyFish(1)) 
}.
