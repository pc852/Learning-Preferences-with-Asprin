asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,2),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,3),0,for(atom(isRoe(1))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,4),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(hasPrice(1))),()) preference(1,(1,8),3,for(atom(hasPrice(0))),()) preference(1,(1,2),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(0,eq,1) output(0,eq,7) output(0,eq,2) output(0,eq,5) output(0,eq,3) output(0,eq,9) output(1,eq,7) output(1,eq,2) output(1,eq,5) output(1,eq,3) output(1,eq,9) output(7,eq,2) output(7,eq,5) output(7,eq,3) output(7,eq,9) output(2,eq,5) output(2,eq,3) output(2,eq,9) output(5,eq,3) output(5,eq,9) output(3,eq,9)
Optimization: 36 7
Answer: 2
preference(1,(1,2),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(hasPrice(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,3),3,for(atom(isRoe(1))),()) preference(1,(1,4),4,for(atom(isUnique(1))),()) preference(1,aso) output(2,better,5) output(2,better,3) output(0,worse,7) output(0,worse,2) output(0,worse,5) output(0,worse,3) output(0,worse,9) output(0,worse,6) output(1,worse,7) output(1,worse,2) output(1,worse,6) output(7,worse,2) output(7,worse,6) output(2,worse,6) output(5,worse,3) output(5,worse,9) output(5,worse,6) output(3,worse,9) output(3,worse,6)
Optimization: 34 7
Answer: 3
preference(1,(1,2),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,3),0,for(atom(isRoe(1))),()) preference(1,(1,5),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,4),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(isButtery(1))),()) preference(1,(1,8),3,for(atom(isButtery(1))),()) preference(1,(1,2),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(0,better,6) output(1,better,6) output(7,better,6) output(2,better,6) output(5,better,6) output(3,better,6) output(9,better,6) output(0,eq,1) output(0,eq,7) output(0,eq,2) output(0,eq,5) output(0,eq,3) output(0,eq,9) output(1,eq,7) output(1,eq,2) output(1,eq,5) output(1,eq,3) output(1,eq,9) output(7,eq,2) output(7,eq,5) output(7,eq,3) output(7,eq,9) output(2,eq,5) output(2,eq,3) output(2,eq,9) output(5,eq,3) output(5,eq,9) output(3,eq,9)
Optimization: 29 7
Answer: 4
preference(1,(1,2),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isTamago(1))),()) preference(1,(1,4),2,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,7),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),4,for(atom(hasPrice(1))),()) preference(1,(1,4),4,for(atom(isUnique(1))),()) preference(1,(1,7),4,for(atom(isButtery(1))),()) preference(1,aso) output(1,better,7) output(1,better,5) output(1,better,8) output(7,better,5) output(7,better,8) output(2,better,5) output(2,better,3) output(2,better,8) output(0,worse,1) output(0,worse,7) output(0,worse,2) output(0,worse,5) output(0,worse,3) output(0,worse,9) output(0,worse,6) output(5,worse,3) output(5,worse,9) output(5,worse,6) output(3,worse,9) output(8,worse,6)
Optimization: 28 8
Answer: 5
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),2,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),1,for(atom(isSweet(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isUrchin(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,7),3,for(atom(isButtery(1))),()) preference(1,(1,3),4,for(atom(isUrchin(1))),()) preference(1,(1,4),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,7) output(0,better,2) output(0,better,3) output(0,better,9) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,3) output(2,better,3) output(5,better,3) output(0,worse,1)
Optimization: 21 8
Answer: 6
preference(1,(1,1),0,for(atom(isMaguro(1))),()) preference(1,(1,2),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),0,for(atom(isRoe(1))),()) preference(1,(1,6),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),0,for(atom(hasPrice(1))),()) preference(1,(1,1),1,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,8),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,4),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(hasMinorGrp(2))),()) preference(1,aso) output(0,better,1) output(0,better,5) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,5) output(2,better,3) output(2,better,8) output(2,better,6) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(0,worse,7) output(0,worse,9) output(1,worse,7) output(1,worse,2) output(1,worse,3) output(1,worse,9) output(5,worse,3) output(5,worse,9) output(3,worse,9) output(1,eq,5)
Optimization: 20 8
Answer: 7
preference(1,(1,2),0,for(atom(isRoe(1))),()) preference(1,(1,5),0,for(atom(isUrchin(1))),()) preference(1,(1,7),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),3,for(atom(hasPrice(0))),()) preference(1,aso) output(0,better,2) output(0,better,9) output(0,better,8) output(0,better,6) output(1,better,2) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,9) output(7,better,8) output(7,better,6) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(2,worse,5) output(2,worse,3) output(0,eq,1) output(0,eq,7) output(0,eq,5) output(0,eq,3) output(1,eq,7) output(1,eq,5) output(1,eq,3) output(7,eq,5) output(7,eq,3) output(2,eq,9) output(2,eq,8) output(5,eq,3) output(9,eq,8)
Optimization: 18 4
Answer: 8
preference(1,(1,2),0,for(atom(isRoe(1))),()) preference(1,(1,5),0,for(atom(isUrchin(1))),()) preference(1,(1,7),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),1,for(atom(isShrimp(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,2),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),3,for(atom(hasPrice(0))),()) preference(1,(1,7),3,for(atom(isRoe(1))),()) preference(1,aso) output(0,better,2) output(0,better,9) output(0,better,8) output(0,better,6) output(1,better,2) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,6) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,6) output(8,better,6) output(2,worse,5) output(2,worse,3) output(0,eq,1) output(0,eq,7) output(0,eq,5) output(0,eq,3) output(1,eq,7) output(1,eq,5) output(1,eq,3) output(7,eq,5) output(7,eq,3) output(2,eq,9) output(2,eq,8) output(5,eq,3) output(9,eq,8)
Optimization: 15 4
Answer: 9
preference(1,(1,1),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,4),0,for(atom(isUrchin(1))),()) preference(1,(1,6),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,7),1,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(hasPrice(0))),()) preference(1,(1,5),2,for(atom(isSweet(1))),()) preference(1,(1,5),3,for(atom(isMaguro(1))),()) preference(1,aso) output(0,better,1) output(0,better,7) output(0,better,2) output(0,better,5) output(0,better,3) output(0,better,8) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,8) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,8) output(2,better,5) output(2,better,3) output(2,better,8) output(5,better,3) output(5,better,8) output(3,better,8) output(9,better,8) output(9,better,6) output(3,worse,9) output(3,worse,6) output(8,worse,6) output(1,eq,7)
Optimization: 14 8
Answer: 10
preference(1,(1,1),0,for(atom(isMaguro(1))),()) preference(1,(1,2),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),0,for(atom(isUrchin(1))),()) preference(1,(1,5),0,for(atom(isRaw(1))),()) preference(1,(1,6),0,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),1,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,4),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(atom(isRaw(0))),()) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(hasPrice(0))),()) preference(1,aso) output(0,better,1) output(0,better,5) output(0,better,9) output(0,better,8) output(1,better,5) output(1,better,9) output(1,better,8) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,5) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,9) output(5,better,8) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(0,worse,2) output(1,worse,7) output(1,worse,2) output(7,worse,2) output(8,worse,6)
Optimization: 13 6
Answer: 11
preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),0,for(atom(isShrimp(1))),()) preference(1,(1,5),0,for(atom(isFattyFish(1))),()) preference(1,(1,6),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),1,for(atom(isChewy(1))),()) preference(1,(1,7),1,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,4),3,for(atom(isButtery(1))),()) preference(1,(1,5),3,for(atom(isCreamy(1))),()) preference(1,(1,6),3,for(atom(isSweet(1))),()) preference(1,(1,7),3,for(atom(isShrimp(1))),()) preference(1,(1,7),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,1) output(0,better,2) output(0,better,3) output(0,better,9) output(0,better,8) output(0,better,6) output(1,better,8) output(7,better,2) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,3) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(1,worse,7) output(1,worse,5) output(2,worse,5) output(8,worse,6) output(0,eq,7) output(0,eq,5) output(7,eq,5) output(9,eq,6)
Optimization: 13 5
Progression : [ 1;13] (Error: 12)
Answer: 12
preference(1,(1,1),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),0,for(atom(isRaw(1))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isRaw(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,5) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,5) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6) output(0,worse,1) output(0,worse,7) output(0,worse,2) output(3,worse,9)
Optimization: 12 8
Answer: 13
preference(1,(1,1),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),0,for(atom(isRaw(1))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),2,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isUnique(1))),()) preference(1,(1,5),1,for(atom(isRaw(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isUrchin(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,5) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,5) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6) output(0,worse,1) output(0,worse,7) output(0,worse,2)
Optimization: 11 8
Answer: 14
preference(1,(1,1),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),0,for(atom(isRaw(1))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRaw(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isButtery(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,4),3,for(atom(isRoe(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,7),4,for(atom(isChewy(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,5) output(0,better,9) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,5) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,6) output(8,better,6) output(0,worse,1) output(0,worse,7) output(0,worse,2)
Optimization: 10 8
Answer: 15
preference(1,(1,1),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),0,for(atom(isRaw(1))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRaw(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isButtery(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,4),4,for(atom(isRoe(1))),()) preference(1,(1,7),4,for(atom(isChewy(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,5) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,5) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6) output(0,worse,1) output(0,worse,7) output(0,worse,2)
Optimization: 9 8
Answer: 16
preference(1,(1,1),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isRaw(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isButtery(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,7),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,4),4,for(atom(isRoe(1))),()) preference(1,(1,6),4,for(atom(isRaw(0))),()) preference(1,(1,7),4,for(atom(isChewy(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,5) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6) output(0,worse,1) output(0,worse,7) output(0,worse,2) output(0,worse,5) output(0,worse,3) output(5,eq,3)
Optimization: 8 8
Answer: 17
preference(1,(1,1),0,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),0,for(atom(isRaw(1))),()) preference(1,(1,4),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,8),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isRaw(1))),()) preference(1,(1,6),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isChewy(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(isRaw(0))),()) preference(1,(1,7),2,for(atom(isButtery(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isRoe(1))),()) preference(1,(1,8),3,for(atom(hasPrice(1))),()) preference(1,(1,4),4,for(atom(isRoe(1))),()) preference(1,(1,7),4,for(atom(isChewy(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,5) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,3) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6) output(0,worse,1) output(0,worse,7) output(0,worse,2) output(0,worse,5)
Optimization: 7 8
Answer: 18
preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(atom(isFattyFish(1))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,2),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),2,for(neg(atom(isChewy(1)))),()) preference(1,(1,4),2,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,3),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isOctopus(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isSweet(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,2),3,for(atom(isTamago(1))),()) preference(1,(1,6),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isRoe(1))),()) preference(1,(1,1),4,for(atom(isRaw(1))),()) preference(1,(1,6),4,for(atom(isRaw(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(0,better,1) output(0,better,7) output(0,better,2) output(0,better,5) output(0,better,3) output(0,better,9) output(0,better,8) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,3) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6)
Optimization: 1 8
Progression : 1 [1;8] (Error: 7)
Answer: 19
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,2),0,for(atom(isUnique(1))),()) preference(1,(1,4),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isRaw(0))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isTamago(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,4),3,for(atom(isRaw(1))),()) preference(1,(1,8),3,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,aso) output(0,better,1) output(0,better,7) output(0,better,2) output(0,better,5) output(0,better,3) output(0,better,9) output(0,better,8) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,3) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6) output(2,worse,5)
Optimization: 1 7
Answer: 20
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,2),0,for(atom(isUnique(1))),()) preference(1,(1,5),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(isRaw(0))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isTamago(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),3,for(atom(isOctopus(1))),()) preference(1,(1,3),4,for(atom(isRaw(1))),()) preference(1,aso) output(0,better,1) output(0,better,7) output(0,better,2) output(0,better,5) output(0,better,3) output(0,better,9) output(0,better,8) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,3) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6) output(2,worse,5)
Optimization: 1 6
Answer: 21
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,3),2,for(atom(isChewy(1))),()) preference(1,(1,5),2,for(atom(isSweet(1))),()) preference(1,(1,8),2,for(atom(isTamago(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isOctopus(1))),()) preference(1,aso) output(0,better,1) output(0,better,7) output(0,better,2) output(0,better,5) output(0,better,3) output(0,better,9) output(0,better,8) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,3) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6) output(2,worse,5)
Optimization: 1 5
Progression : 1 [2;5] (Error: 1.5)
Answer: 22
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),2,for(neg(atom(isButtery(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,5),2,for(atom(isSweet(1))),()) preference(1,(1,6),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isTamago(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),3,for(atom(isOctopus(1))),()) preference(1,aso) output(0,better,1) output(0,better,7) output(0,better,2) output(0,better,5) output(0,better,3) output(0,better,9) output(0,better,8) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,5) output(1,better,3) output(1,better,9) output(1,better,8) output(1,better,6) output(7,better,2) output(7,better,5) output(7,better,3) output(7,better,9) output(7,better,8) output(7,better,6) output(2,better,3) output(2,better,9) output(2,better,8) output(2,better,6) output(5,better,3) output(5,better,9) output(5,better,8) output(5,better,6) output(3,better,9) output(3,better,8) output(3,better,6) output(9,better,8) output(9,better,6) output(8,better,6) output(2,worse,5)
Optimization: 1 4
Progression : 1 [3;4] (Error: 0.333333)
OPTIMUM FOUND

Models       : 22
  Optimum    : yes
Optimization : 1 4
Calls        : 1
Time         : 36.081s (Solving: 29.77s 1st Model: 0.29s Unsat: 27.14s)
CPU Time     : 125.199s
Threads      : 4        (Winner: 1)

Choices      : 440098   (Domain: 5853)
Conflicts    : 105202   (Analyzed: 105196)
Restarts     : 153      (Average: 687.56 Last: 11070)
Model-Level  : 415.9   
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 192187   (Deleted: 120180)
  Binary     : 5128     (Ratio:   2.67%)
  Ternary    : 10627    (Ratio:   5.53%)
  Conflict   : 105194   (Average Length:  134.8 Ratio:  54.74%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 86993    (Average Length:   50.1 Ratio:  45.26%) 
  Distributed: 29226    (Ratio:  27.78% Average LBD: 3.18) 
  Integrated : 87678    (Ratio: 300.00% Unit: 504 Average Jumps: 65.98)
Backjumps    : 105196   (Average:  3.65 Max: 1223 Sum: 384244)
  Executed   : 105175   (Average:  3.65 Max: 1223 Sum: 383926 Ratio:  99.92%)
  Bounded    : 21       (Average: 15.14 Max:  35 Sum:    318 Ratio:   0.08%)

Rules        : 2321843 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 660402  
Bodies       : 781754  
  Count      : 1768    
Equivalences : 2023257  (Atom=Atom: 580987 Body=Body: 628887 Other: 813383)
Tight        : Yes
Variables    : 86031    (Eliminated:    0 Frozen: 57335)
Constraints  : 1777809  (Binary:  95.2% Ternary:   4.0% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isUrchin(1)) >> not atom(hasPrice(0))  >> atom(hasMinorGrp(1)) || not atom(isUnique(1))  ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(1))  >> not atom(isTamago(1))  || atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  || atom(hasMinorGrp(2)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(0))  || atom(hasMinorGrp(2)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> not atom(isRoe(1))  >> not atom(isRaw(0))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(hasPrice(0)) >> not atom(isTamago(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  || not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isRaw(1))  >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> not atom(hasPrice(0))  >> atom(isRoe(1)) >> not atom(isUrchin(1))  ; 
  not atom(isChewy(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  >> atom(isUnique(1)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> not atom(isShrimp(1))  >> not atom(isRaw(1))  ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> not atom(isFattyFish(1))  >> not atom(isUrchin(1))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> not atom(hasMinorGrp(1))  >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> atom(isUrchin(1)) >> not atom(hasPrice(0))  >> atom(hasMinorGrp(1)) || not atom(isUnique(1))  ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) >> not atom(hasMinorGrp(1))  >> not atom(isTamago(1))  || atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  || atom(hasMinorGrp(2)) ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(0))  || atom(hasMinorGrp(2)) ; 
  atom(isUrchin(1)) >> atom(hasPrice(1)) >> not atom(isRoe(1))  >> not atom(isRaw(0))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(isButtery(1)) >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(isButtery(1)) >> not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isOctopus(1))  >> atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  || not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> not atom(isFattyFish(1))  >> atom(hasPrice(1)) ; 
  not atom(isChewy(1))  >> atom(isUrchin(1)) >> not atom(isRaw(1))  >> atom(isUnique(1)) ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> not atom(isShrimp(1))  >> not atom(isRaw(1))  ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(hasMinorGrp(1)) >> atom(isButtery(1)) ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> not atom(hasMinorGrp(1))  >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> not atom(hasPrice(0))  || not atom(isFattyFish(1))  ; 
  not atom(isOctopus(1))  >> atom(isUrchin(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  || not atom(hasPrice(0))  ; 
  atom(isFattyFish(1)) >> not atom(isOctopus(1))  >> not atom(isChewy(1))  >> atom(isUrchin(1)) || not atom(isShrimp(1))  ; 
  not atom(isChewy(1))  >> atom(isChewy(1)) >> not atom(isRaw(1))  >> atom(isUnique(1)) || not atom(isShrimp(1))  ; 
  atom(isSweet(1)) >> not atom(isFattyFish(1))  >> not atom(isSweet(1))  || not atom(isShrimp(1))  ; 
  atom(isShrimp(1)) >> not atom(isUrchin(1))  >> not atom(isShrimp(1))  >> not atom(isRaw(1))  || not atom(isFattyFish(1))  ; 
  atom(isOctopus(1)) >> not atom(isOctopus(1))  >> atom(isButtery(1)) >> not atom(isRoe(1))  || not atom(isFattyFish(1))  ; 
  atom(isUrchin(1)) >> not atom(isUnique(1))  >> not atom(hasMinorGrp(1))  >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isTamago(1))  >> not atom(isUrchin(1))  >> not atom(isRaw(1))  >> not atom(hasPrice(0))  || atom(isMaguro(1)) ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> not atom(isRaw(1))  || not atom(isMaguro(1))  ; 
  not atom(isRaw(1))  || not atom(hasMinorGrp(2))  ; 
  not atom(isRoe(1))  >> not atom(hasPrice(1))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> not atom(isUrchin(1))  || not atom(isShrimp(1))  ; 
  not atom(hasPrice(1))  >> not atom(isMaguro(1))  >> not atom(isButtery(1))  >> not atom(isFattyFish(1))  || atom(hasPrice(1)) ; 
  not atom(isRoe(1))  >> atom(isUrchin(1)) >> not atom(isMaguro(1))  ; 
  atom(isCreamy(1)) >> atom(hasMinorGrp(2)) >> not atom(isRaw(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isShrimp(1)) >> not atom(isRaw(1))  >> atom(hasMinorGrp(2)) || atom(isRoe(1)) ; 
  not atom(hasPrice(1))  >> not atom(isUrchin(1))  >> atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> not atom(isRoe(1))  || not atom(isRaw(0))  ; 
  not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isShrimp(1)) >> not atom(isRaw(1))  >> atom(hasMinorGrp(2)) || atom(isRoe(1)) ; 
  not atom(hasPrice(1))  >> not atom(isUrchin(1))  >> atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> not atom(isRoe(1))  >> atom(isRoe(1)) || not atom(isSweet(1))  ; 
  not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isShrimp(1))  >> atom(hasMinorGrp(1)) || not atom(hasPrice(0))  ; 
  not atom(isRaw(1))  >> atom(isShrimp(1)) >> not atom(isUrchin(1))  || not atom(isMaguro(1))  ; 
  atom(isUnique(1)) >> atom(isRoe(1)) >> not atom(hasPrice(1))  >> not atom(isRaw(0))  || not atom(isUnique(1))  ; 
  not atom(isCreamy(1))  >> atom(hasPrice(0)) || atom(isUrchin(1)) ; 
  not atom(hasPrice(1))  >> not atom(isShrimp(1))  || not atom(isUnique(1))  ; 
  atom(isUrchin(1)) >> atom(isSweet(1)) >> atom(isMaguro(1)) >> not atom(isShrimp(1))  ; 
  not atom(isOctopus(1))  ; 
  not atom(hasMinorGrp(2))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRaw(0)) >> not atom(hasMinorGrp(0))  >> not atom(isMaguro(1))  || atom(isMaguro(1)) ; 
  atom(hasMinorGrp(2)) >> not atom(isRaw(1))  >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  not atom(isRaw(1))  >> not atom(isFattyFish(1))  || atom(isUrchin(1)) ; 
  atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> atom(hasPrice(0)) >> not atom(isRoe(1))  || atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isChewy(1)) >> not atom(isUrchin(1))  || not atom(isSweet(1))  ; 
  not atom(hasMinorGrp(1))  >> not atom(hasPrice(0))  >> atom(isButtery(1)) || atom(isShrimp(1)) ; 
  not atom(hasMinorGrp(0))  >> not atom(isRoe(1))  >> atom(isCreamy(1)) >> not atom(isChewy(1))  || atom(isFattyFish(1)) ; 
  not atom(hasPrice(1))  >> atom(hasMinorGrp(0)) >> atom(isSweet(1)) || not atom(isUrchin(1))  ; 
  atom(isRaw(0)) >> not atom(isMaguro(1))  >> atom(isShrimp(1)) >> atom(isUnique(1)) || not atom(isUrchin(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isFattyFish(1))  >> not atom(hasPrice(0))  >> atom(isChewy(1)) || atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> atom(isUrchin(1)) >> not atom(isRaw(1))  || not atom(isSweet(1))  ; 
  atom(isRaw(1)) || not atom(isTamago(1))  ; 
  atom(isSweet(1)) >> atom(isRaw(0)) >> atom(isUrchin(1)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isCreamy(1))  >> not atom(isRaw(0))  || atom(hasMinorGrp(2)) ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(hasPrice(1)) >> atom(isUnique(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isFattyFish(1))  >> not atom(hasPrice(0))  >> atom(isChewy(1)) || atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  atom(isUnique(1)) >> atom(isShrimp(1)) >> atom(isUrchin(1)) >> not atom(isRaw(1))  || not atom(isSweet(1))  ; 
  atom(isRaw(1)) || not atom(isTamago(1))  ; 
  atom(isSweet(1)) >> atom(isRaw(0)) >> atom(isUrchin(1)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> not atom(isSweet(1))  >> atom(isUrchin(1)) >> not atom(isRaw(0))  || not atom(isChewy(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(hasPrice(1)) >> atom(isUnique(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isFattyFish(1))  >> not atom(hasPrice(0))  >> atom(isChewy(1)) || atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  || not atom(isSweet(1))  ; 
  atom(isRaw(1)) || not atom(isTamago(1))  ; 
  atom(isSweet(1)) >> atom(isRaw(0)) >> atom(isUrchin(1)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isButtery(1)) >> atom(isRoe(1)) >> atom(isChewy(1)) || not atom(isChewy(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(hasPrice(1)) >> atom(isUnique(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isFattyFish(1))  >> not atom(hasPrice(0))  >> atom(isChewy(1)) || atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> atom(isRaw(0)) >> not atom(isRaw(1))  >> atom(isRoe(1)) || not atom(isSweet(1))  ; 
  atom(isRaw(1)) || not atom(isTamago(1))  ; 
  atom(isSweet(1)) >> atom(isRaw(0)) >> atom(isUrchin(1)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isButtery(1)) >> atom(isRoe(1)) >> atom(isChewy(1)) || not atom(isChewy(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> atom(hasPrice(1)) >> atom(isUnique(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isFattyFish(1))  >> not atom(hasPrice(0))  >> atom(isChewy(1)) || atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> not atom(isMaguro(1))  || not atom(isSweet(1))  ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) >> not atom(isRaw(1))  >> atom(isRoe(1)) || not atom(isSweet(1))  ; 
  atom(isRaw(1)) || not atom(isTamago(1))  ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) >> not atom(isSweet(1))  >> atom(isRaw(0)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isButtery(1)) >> atom(isRoe(1)) >> atom(isChewy(1)) || not atom(isChewy(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(hasPrice(1)) >> atom(isUnique(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isFattyFish(1))  >> not atom(hasPrice(0))  >> atom(isChewy(1)) || atom(hasMinorGrp(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) >> not atom(isRaw(1))  >> atom(isRoe(1)) || not atom(isSweet(1))  ; 
  atom(isRaw(1)) || not atom(isTamago(1))  ; 
  atom(isSweet(1)) >> atom(isRaw(0)) >> atom(isUrchin(1)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isButtery(1)) >> atom(isRoe(1)) >> atom(isChewy(1)) || not atom(isChewy(1))  ; 
  atom(isMaguro(1)) >> atom(isUrchin(1)) >> atom(hasPrice(1)) >> atom(isUnique(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isCreamy(1)) >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> not atom(isChewy(1))  >> atom(isTamago(1)) || not atom(isSweet(1))  ; 
  not atom(hasMinorGrp(1))  >> not atom(isChewy(1))  >> not atom(isShrimp(1))  || atom(isFattyFish(1)) ; 
  atom(hasMinorGrp(0)) >> not atom(isSweet(1))  >> not atom(isRaw(0))  || not atom(hasMinorGrp(1))  ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  || not atom(isMaguro(1))  ; 
  not atom(isRaw(1))  >> atom(hasPrice(1)) >> atom(isRoe(1)) >> atom(isUnique(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> not atom(isRoe(1))  >> not atom(isUnique(1))  >> atom(isRaw(1)) ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isOctopus(1)) >> atom(isRaw(1)) ; 
  atom(isUrchin(1)) >> atom(isSweet(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRoe(1))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) || atom(isUnique(1)) ; 
  atom(isMaguro(1)) >> atom(hasMinorGrp(1)) >> atom(isRaw(1)) || not atom(isChewy(1))  ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> not atom(isSweet(1))  || not atom(isRaw(0))  ; 
  not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  || not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isSweet(1)) >> atom(isOctopus(1)) >> atom(isRaw(1)) ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRoe(1))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) || atom(isUnique(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> atom(hasMinorGrp(1)) >> not atom(isOctopus(1))  || not atom(isRaw(0))  ; 
  not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  || not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isSweet(1)) >> atom(isOctopus(1)) >> atom(isRaw(1)) ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRoe(1))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> atom(hasMinorGrp(1)) >> not atom(isUrchin(1))  || atom(isRaw(1)) ; 
  not atom(isShrimp(1))  >> not atom(hasMinorGrp(0))  || not atom(hasPrice(0))  ; 
  atom(isUrchin(1)) >> atom(isSweet(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRoe(1))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  not atom(isRaw(1))  >> atom(isChewy(1)) >> atom(hasMinorGrp(1)) >> not atom(isOctopus(1))  || not atom(isMaguro(1))  ; 
  atom(isUrchin(1)) >> atom(isSweet(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isOctopus(1)) >> not atom(isRaw(0))  
}.
