asprin_vL version 1.0
Reading from stdin
-:250:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:260:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:275:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:356:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:630:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:807:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:936:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1008:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1012:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1012:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1018:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1117:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1143:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1263:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1297:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1319:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:167:1-16: info: no atoms over signature occur in program:
  output/3

-:159:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:160:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:161:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(4,eq,7) output(4,eq,5) output(4,eq,0) output(4,eq,2) output(4,eq,3) output(4,eq,1) output(4,eq,6) output(4,eq,9) output(7,eq,5) output(7,eq,0) output(7,eq,2) output(7,eq,3) output(7,eq,1) output(7,eq,6) output(7,eq,9) output(5,eq,0) output(5,eq,2) output(5,eq,3) output(5,eq,1) output(5,eq,6) output(5,eq,9) output(0,eq,2) output(0,eq,3) output(0,eq,1) output(0,eq,6) output(0,eq,9) output(2,eq,3) output(2,eq,1) output(2,eq,6) output(2,eq,9) output(3,eq,1) output(3,eq,6) output(3,eq,9) output(1,eq,6) output(1,eq,9) output(6,eq,9)
Optimization: 36 0
Answer: 2
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,1) output(2,better,1) output(3,better,1) output(4,worse,2) output(7,worse,2) output(5,worse,2) output(0,worse,2) output(4,worse,6) output(7,worse,6) output(5,worse,6) output(0,worse,6) output(1,worse,6) output(4,worse,9) output(7,worse,9) output(5,worse,9) output(1,worse,9) output(4,worse,3) output(7,worse,3) output(0,worse,9) output(5,worse,3) output(0,worse,3) output(7,eq,5) output(7,eq,0) output(7,eq,1) output(5,eq,0) output(5,eq,1) output(0,eq,1) output(2,eq,3) output(2,eq,6) output(2,eq,9) output(3,eq,6) output(3,eq,9) output(6,eq,9)
Optimization: 30 1
Answer: 3
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(2,better,1) output(3,better,1) output(7,worse,2) output(5,worse,2) output(0,worse,2) output(7,worse,6) output(5,worse,6) output(0,worse,6) output(1,worse,6) output(7,worse,9) output(5,worse,9) output(1,worse,9) output(7,worse,3) output(0,worse,9) output(5,worse,3) output(0,worse,3) output(7,eq,5) output(7,eq,0) output(7,eq,1) output(5,eq,0) output(5,eq,1) output(0,eq,1) output(2,eq,3) output(2,eq,6) output(2,eq,9) output(3,eq,6) output(3,eq,9) output(6,eq,9)
Optimization: 26 1
Answer: 4
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(2,better,1) output(7,better,5) output(7,better,0) output(3,better,1) output(7,worse,2) output(5,worse,2) output(0,worse,2) output(7,worse,6) output(5,worse,6) output(0,worse,6) output(1,worse,6) output(7,worse,9) output(5,worse,9) output(1,worse,9) output(5,worse,1) output(0,worse,1) output(7,worse,3) output(0,worse,9) output(5,worse,3) output(0,worse,3) output(7,eq,1) output(5,eq,0) output(2,eq,3) output(2,eq,6) output(2,eq,9) output(3,eq,6) output(3,eq,9) output(6,eq,9)
Optimization: 24 1
Answer: 5
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isCreamy(1))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(2,better,1) output(7,better,5) output(7,better,0) output(7,better,1) output(3,better,1) output(7,worse,2) output(5,worse,2) output(0,worse,2) output(7,worse,6) output(5,worse,6) output(0,worse,6) output(1,worse,6) output(7,worse,9) output(5,worse,9) output(1,worse,9) output(7,worse,3) output(0,worse,9) output(5,worse,3) output(0,worse,3) output(5,eq,0) output(5,eq,1) output(0,eq,1) output(2,eq,3) output(2,eq,6) output(2,eq,9) output(3,eq,6) output(3,eq,9) output(6,eq,9)
Optimization: 23 1
Answer: 6
preference(1,(1,12),1,for(atom(isRaw(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(1))),()) preference(1,poset) output(5,better,2) output(5,better,3) output(5,better,1) output(5,better,6) output(5,better,9) output(7,better,2) output(7,better,3) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,1) output(0,better,6) output(1,better,6) output(1,better,9) output(0,better,9) output(3,better,6) output(4,worse,5) output(7,worse,5) output(4,worse,7) output(4,worse,0) output(4,worse,9) output(7,worse,0) output(2,worse,9) output(6,worse,9) output(4,worse,1) output(2,worse,1) output(3,worse,1) output(4,worse,3) output(2,worse,3) output(4,eq,2) output(4,eq,6) output(7,eq,1) output(5,eq,0) output(2,eq,6) output(3,eq,9)
Optimization: 19 1
Answer: 7
preference(1,(1,12),1,for(atom(isRaw(0))),()) preference(1,(1,12),2,for(atom(hasMinorGrp(2))),()) preference(1,poset) output(4,better,2) output(4,better,3) output(4,better,9) output(5,better,2) output(5,better,3) output(5,better,6) output(5,better,9) output(6,better,9) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,6) output(1,better,6) output(1,better,9) output(0,better,9) output(4,worse,5) output(2,worse,6) output(3,worse,6) output(4,worse,7) output(4,worse,0) output(4,worse,1) output(2,worse,1) output(3,worse,1) output(4,eq,6) output(5,eq,0) output(5,eq,1) output(0,eq,1) output(2,eq,3) output(2,eq,9) output(3,eq,9)
Optimization: 15 1
Answer: 8
preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,12),2,for(atom(isRaw(0))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,2) output(5,better,3) output(5,better,6) output(5,better,9) output(7,better,2) output(7,better,3) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,6) output(1,better,6) output(1,better,9) output(0,better,9) output(2,worse,1) output(3,worse,1) output(7,eq,5) output(7,eq,0) output(7,eq,1) output(5,eq,0) output(5,eq,1) output(0,eq,1) output(2,eq,3) output(2,eq,6) output(2,eq,9) output(3,eq,6) output(3,eq,9) output(6,eq,9)
Optimization: 14 1
Answer: 9
preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),1,for(atom(isRaw(0))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,9),1,for(atom(isRoe(1))),()) preference(1,(1,10),1,for(atom(isUrchin(1))),()) preference(1,(1,11),1,for(atom(isCreamy(1))),()) preference(1,(1,12),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isSweet(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isRaw(0))),()) preference(1,(1,9),2,for(atom(isSweet(1))),()) preference(1,(1,10),2,for(atom(isRoe(1))),()) preference(1,(1,11),2,for(atom(isShrimp(1))),()) preference(1,(1,12),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,9) output(2,better,3) output(6,better,9) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,9) output(3,worse,6) output(4,worse,7) output(3,worse,9) output(2,worse,1) output(3,worse,1) output(5,unc,1) output(5,unc,6) output(0,unc,1) output(0,unc,6) output(2,unc,6) output(2,unc,9) output(1,unc,6) output(1,unc,9)
Optimization: 13 11
Answer: 10
preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),1,for(atom(isRaw(0))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,9),1,for(atom(isRoe(1))),()) preference(1,(1,10),1,for(atom(isUrchin(1))),()) preference(1,(1,11),1,for(atom(isSweet(1))),()) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(isShrimp(1))),()) preference(1,(1,2),2,for(atom(isSweet(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isRaw(0))),()) preference(1,(1,9),2,for(atom(isSweet(1))),()) preference(1,(1,10),2,for(atom(isRoe(1))),()) preference(1,(1,11),2,for(atom(isShrimp(1))),()) preference(1,(1,12),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,9) output(2,better,3) output(6,better,9) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(1,better,9) output(0,better,9) output(3,worse,6) output(4,worse,7) output(3,worse,9) output(0,worse,1) output(2,worse,1) output(3,worse,1) output(5,unc,1) output(5,unc,6) output(0,unc,6) output(2,unc,6) output(2,unc,9) output(1,unc,6)
Optimization: 12 11
Answer: 11
preference(1,(1,1),1,for(atom(isTamago(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),1,for(atom(isRaw(0))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isUrchin(1))),()) preference(1,(1,9),1,for(atom(isRoe(1))),()) preference(1,(1,10),1,for(atom(isUrchin(1))),()) preference(1,(1,11),1,for(atom(isTamago(1))),()) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(isRaw(0))),()) preference(1,(1,2),2,for(atom(isSweet(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isRaw(0))),()) preference(1,(1,9),2,for(atom(isSweet(1))),()) preference(1,(1,10),2,for(atom(isRoe(1))),()) preference(1,(1,11),2,for(atom(isRoe(1))),()) preference(1,(1,12),2,for(atom(isSweet(1))),()) preference(1,poset) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,9) output(2,better,3) output(2,better,9) output(6,better,9) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(1,better,9) output(0,better,9) output(3,worse,6) output(4,worse,7) output(0,worse,1) output(2,worse,1) output(3,worse,1) output(3,eq,9) output(5,unc,1) output(5,unc,6) output(0,unc,6) output(2,unc,6) output(1,unc,6)
Optimization: 11 11
Answer: 12
preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isSweet(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(hasPrice(0))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,9),1,for(atom(isShrimp(1))),()) preference(1,(1,10),1,for(atom(isMaguro(1))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isUnique(1))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isUrchin(1))),()) preference(1,(1,9),2,for(atom(isTamago(1))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,(1,12),2,for(atom(isRoe(1))),()) preference(1,poset) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,2) output(5,better,1) output(5,better,6) output(2,better,1) output(2,better,6) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,1) output(0,better,6) output(0,better,9) output(3,better,1) output(3,better,6) output(4,worse,7) output(5,worse,0) output(6,worse,9) output(2,worse,3) output(5,eq,3) output(5,unc,9) output(2,unc,9) output(3,unc,9) output(1,unc,6) output(1,unc,9)
Optimization: 10 12
Answer: 13
preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,7),1,for(atom(hasPrice(0))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,9),1,for(atom(isSweet(1))),()) preference(1,(1,10),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,9),2,for(atom(isUrchin(1))),()) preference(1,(1,10),2,for(atom(isShrimp(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,2) output(5,better,1) output(5,better,6) output(2,better,1) output(2,better,6) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,1) output(0,better,6) output(0,better,9) output(3,better,1) output(3,better,6) output(5,worse,0) output(6,worse,9) output(2,worse,3) output(5,eq,3) output(5,unc,9) output(2,unc,9) output(3,unc,9) output(1,unc,6) output(1,unc,9)
Optimization: 9 12
Answer: 14
preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,7),1,for(atom(hasPrice(0))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,9),1,for(atom(isSweet(1))),()) preference(1,(1,10),1,for(atom(isChewy(1))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,9),2,for(atom(isUrchin(1))),()) preference(1,(1,10),2,for(atom(isShrimp(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,2) output(5,better,1) output(5,better,6) output(5,better,9) output(2,better,1) output(2,better,6) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,1) output(0,better,6) output(0,better,9) output(3,better,1) output(3,better,6) output(3,better,9) output(5,worse,0) output(6,worse,9) output(2,worse,3) output(5,eq,3) output(2,unc,9) output(1,unc,6) output(1,unc,9)
Optimization: 7 12
Answer: 15
preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,7),1,for(atom(hasPrice(0))),()) preference(1,(1,8),1,for(atom(isRoe(1))),()) preference(1,(1,9),1,for(atom(isSweet(1))),()) preference(1,(1,10),1,for(atom(isChewy(1))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isChewy(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,9),2,for(atom(isUrchin(1))),()) preference(1,(1,10),2,for(atom(isShrimp(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,2) output(5,better,1) output(5,better,6) output(5,better,9) output(2,better,1) output(2,better,6) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,1) output(0,better,6) output(1,better,6) output(0,better,9) output(3,better,1) output(3,better,6) output(3,better,9) output(5,worse,0) output(6,worse,9) output(2,worse,3) output(5,eq,3) output(2,unc,9) output(1,unc,9)
Optimization: 6 12
Answer: 16
preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,9),1,for(atom(isSweet(1))),()) preference(1,(1,10),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isShrimp(1))),()) preference(1,(1,8),2,for(atom(isSweet(1))),()) preference(1,(1,9),2,for(atom(isUrchin(1))),()) preference(1,(1,10),2,for(atom(isChewy(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,2) output(5,better,3) output(5,better,1) output(5,better,6) output(5,better,9) output(2,better,1) output(2,better,6) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,1) output(0,better,6) output(1,better,6) output(0,better,9) output(3,better,1) output(3,better,6) output(3,better,9) output(5,worse,0) output(1,worse,9) output(6,worse,9) output(2,worse,3) output(2,unc,9)
Optimization: 5 12
Answer: 17
preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isRoe(1))),()) preference(1,(1,9),1,for(atom(isSweet(1))),()) preference(1,(1,10),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,9),2,for(atom(isUrchin(1))),()) preference(1,(1,10),2,for(atom(isChewy(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,2) output(5,better,1) output(5,better,6) output(5,better,9) output(2,better,1) output(2,better,6) output(2,better,9) output(6,better,9) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,1) output(0,better,6) output(1,better,6) output(1,better,9) output(0,better,9) output(3,better,1) output(3,better,6) output(3,better,9) output(2,worse,3) output(5,eq,0) output(5,eq,3) output(0,eq,3)
Optimization: 4 12
Answer: 18
preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isRoe(1))),()) preference(1,(1,9),1,for(atom(isSweet(1))),()) preference(1,(1,10),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isRaw(0))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,9),2,for(atom(isUrchin(1))),()) preference(1,(1,10),2,for(atom(isChewy(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,2) output(5,better,3) output(5,better,1) output(5,better,6) output(5,better,9) output(2,better,6) output(2,better,9) output(6,better,9) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,3) output(0,better,1) output(0,better,6) output(1,better,6) output(1,better,9) output(0,better,9) output(3,better,1) output(3,better,6) output(3,better,9) output(2,worse,3) output(5,eq,0) output(2,unc,1)
Optimization: 3 12
Answer: 19
preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isCreamy(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isChewy(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isRoe(1))),()) preference(1,(1,9),1,for(atom(isSweet(1))),()) preference(1,(1,10),1,for(atom(hasPrice(0))),()) preference(1,(1,11),1,for(atom(hasPrice(0))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isUnique(1))),()) preference(1,(1,9),2,for(atom(isUrchin(1))),()) preference(1,(1,10),2,for(atom(isChewy(1))),()) preference(1,(1,11),2,for(atom(isButtery(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,1) output(5,better,6) output(5,better,9) output(2,better,1) output(2,better,6) output(2,better,9) output(6,better,9) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,2) output(0,better,1) output(0,better,6) output(1,better,6) output(1,better,9) output(0,better,9) output(3,better,1) output(3,better,6) output(3,better,9) output(2,worse,3) output(0,eq,3)
Optimization: 2 12
Answer: 20
preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,4),1,for(atom(isSweet(1))),()) preference(1,(1,7),1,for(atom(isSweet(1))),()) preference(1,(1,8),1,for(atom(hasPrice(1))),()) preference(1,(1,9),1,for(atom(isMaguro(1))),()) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,11),1,for(atom(isCreamy(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(isButtery(1))),()) preference(1,(1,8),2,for(atom(isButtery(1))),()) preference(1,(1,9),2,for(atom(isChewy(1))),()) preference(1,(1,10),2,for(atom(isShrimp(1))),()) preference(1,(1,11),2,for(atom(isOctopus(1))),()) preference(1,poset) output(4,better,7) output(4,better,5) output(4,better,0) output(4,better,2) output(4,better,3) output(4,better,1) output(4,better,6) output(4,better,9) output(5,better,0) output(5,better,2) output(5,better,3) output(5,better,1) output(5,better,6) output(5,better,9) output(2,better,3) output(2,better,1) output(2,better,6) output(2,better,9) output(6,better,9) output(7,better,5) output(7,better,0) output(7,better,2) output(7,better,3) output(7,better,1) output(7,better,6) output(7,better,9) output(0,better,3) output(0,better,1) output(0,better,6) output(1,better,6) output(1,better,9) output(0,better,9) output(3,better,1) output(3,better,6) output(3,better,9) output(0,worse,2)
Optimization: 1 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.080 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 20+
  Optimum    : unknown
Optimization : 1 8
Calls        : 1
Time         : 597.219s (Solving: 589.09s 1st Model: 1.44s Unsat: 0.00s)
CPU Time     : 2362.744s
Threads      : 4        (Winner: 4)

Choices      : 5554626  (Domain: 1189)
Conflicts    : 177290   (Analyzed: 177290)
Restarts     : 216      (Average: 820.79 Last: 10050)
Model-Level  : 3598.3  
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 11507336 (Deleted: 11368443)
  Binary     : 1192     (Ratio:   0.01%)
  Ternary    : 39264    (Ratio:   0.34%)
  Conflict   : 177290   (Average Length:  920.9 Ratio:   1.54%) 
  Loop       : 11286594 (Average Length:  259.3 Ratio:  98.08%) 
  Other      : 43452    (Average Length:    3.5 Ratio:   0.38%) 
  Distributed: 14491    (Ratio:   0.13% Average LBD: 2.86) 
  Integrated : 43473    (Ratio: 300.00% Unit: 149 Average Jumps: 1887.58)
Backjumps    : 177290   (Average: 25.28 Max: 154414 Sum: 4481329)
  Executed   : 177260   (Average: 25.28 Max: 154414 Sum: 4481234 Ratio: 100.00%)
  Bounded    : 30       (Average:  3.17 Max:  38 Sum:     95 Ratio:   0.00%)

Rules        : 1507891 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 28455   
Bodies       : 1146038 
  Count      : 48      
Equivalences : 31752    (Atom=Atom: 5107 Body=Body: 7762 Other: 18883)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 1089612 Gammas: 0)
Variables    : 1103056  (Eliminated:    0 Frozen: 1092559)
Constraints  : 6431347  (Binary:  82.5% Ternary:   3.6% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(0)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(isRaw(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isOctopus(1)) >> atom(isShrimp(1)) ; 
  atom(isCreamy(1)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(0)) ; 
  atom(isTamago(1)) >> atom(isUrchin(1)) ; 
  atom(isUrchin(1)) >> atom(isRaw(0)) ; 
  atom(isRoe(1)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(isShrimp(1)) ; 
  atom(isTamago(1)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isOctopus(1)) >> atom(isShrimp(1)) ; 
  atom(isUrchin(1)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(0)) ; 
  atom(isTamago(1)) >> atom(isUrchin(1)) ; 
  atom(isUrchin(1)) >> atom(isRaw(0)) ; 
  atom(isRoe(1)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isSweet(1)) >> atom(isShrimp(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isTamago(1)) >> atom(isRaw(0)) ; 
  atom(isUrchin(1)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isCreamy(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(0)) ; 
  atom(isTamago(1)) >> atom(isUrchin(1)) ; 
  atom(isUrchin(1)) >> atom(isRaw(0)) ; 
  atom(isRoe(1)) >> atom(isSweet(1)) ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isSweet(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(isShrimp(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(isSweet(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isMaguro(1)) >> atom(isUnique(1)) ; 
  atom(hasPrice(0)) >> atom(isChewy(1)) ; 
  atom(hasMinorGrp(1)) >> atom(isUrchin(1)) ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(hasPrice(0)) >> atom(isButtery(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) ; 
  atom(hasPrice(0)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isUnique(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(0)) >> atom(isShrimp(1)) ; 
  atom(hasPrice(0)) >> atom(isButtery(1)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) ; 
  atom(hasPrice(0)) >> atom(isChewy(1)) ; 
  atom(isMaguro(1)) >> atom(isUnique(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isShrimp(1)) ; 
  atom(hasPrice(0)) >> atom(isButtery(1)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) ; 
  atom(hasPrice(0)) >> atom(isChewy(1)) ; 
  atom(isRoe(1)) >> atom(isUnique(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(isChewy(1)) >> atom(isShrimp(1)) ; 
  atom(hasPrice(0)) >> atom(isButtery(1)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isOctopus(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) ; 
  atom(isChewy(1)) >> atom(isShrimp(1)) ; 
  atom(isOctopus(1)) >> atom(isSweet(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(0)) >> atom(isChewy(1)) ; 
  atom(hasPrice(0)) >> atom(isButtery(1)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(isRoe(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) ; 
  atom(isChewy(1)) >> atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(isUnique(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(0)) >> atom(isChewy(1)) ; 
  atom(hasPrice(0)) >> atom(isButtery(1)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRaw(0)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) ; 
  atom(isChewy(1)) >> atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(isUnique(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(0)) >> atom(isChewy(1)) ; 
  atom(hasPrice(0)) >> atom(isButtery(1)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUrchin(1)) >> atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isOctopus(1)) ; 
  atom(isCreamy(1)) >> atom(hasPrice(0)) ; 
  atom(isMaguro(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) ; 
  atom(isChewy(1)) >> atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(isUnique(1)) ; 
  atom(isSweet(1)) >> atom(isUrchin(1)) ; 
  atom(hasPrice(0)) >> atom(isChewy(1)) ; 
  atom(hasPrice(0)) >> atom(isButtery(1)) ; 
  atom(hasPrice(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isOctopus(1)) >> atom(isMaguro(1)) ; 
  atom(isChewy(1)) >> atom(isSweet(1)) ; 
  atom(isSweet(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isSweet(1)) >> atom(isButtery(1)) ; 
  atom(hasPrice(1)) >> atom(isButtery(1)) ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isShrimp(1)) ; 
  atom(isCreamy(1)) >> atom(isOctopus(1)) 
}.
