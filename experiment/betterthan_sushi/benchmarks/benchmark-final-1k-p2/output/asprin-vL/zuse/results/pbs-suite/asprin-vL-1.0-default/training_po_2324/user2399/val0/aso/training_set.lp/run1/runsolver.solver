asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,aso) output(1,better,4) output(1,better,3) output(1,better,2) output(9,better,3) output(9,better,2) output(7,better,2) output(5,worse,1) output(5,worse,9) output(5,worse,7) output(6,worse,1) output(6,worse,9) output(6,worse,7) output(8,worse,1) output(8,worse,9) output(8,worse,7) output(1,worse,9) output(1,worse,7) output(4,worse,9) output(4,worse,7) output(3,worse,7) output(6,eq,8) output(6,eq,4) output(6,eq,3) output(6,eq,2) output(8,eq,4) output(8,eq,3) output(8,eq,2) output(4,eq,3) output(4,eq,2) output(3,eq,2)
Optimization: 30 3
Answer: 2
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,2) output(1,better,4) output(1,better,3) output(1,better,2) output(9,better,3) output(9,better,2) output(7,better,2) output(5,worse,9) output(6,worse,1) output(6,worse,9) output(6,worse,7) output(8,worse,1) output(8,worse,9) output(8,worse,7) output(1,worse,9) output(1,worse,7) output(4,worse,9) output(4,worse,7) output(3,worse,7) output(6,eq,8) output(6,eq,4) output(6,eq,3) output(6,eq,2) output(8,eq,4) output(8,eq,3) output(8,eq,2) output(4,eq,3) output(4,eq,2) output(3,eq,2)
Optimization: 24 3
Answer: 3
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,6),4,for(atom(isMaguro(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,4) output(5,better,3) output(5,better,2) output(6,better,8) output(6,better,4) output(6,better,2) output(8,better,2) output(1,better,4) output(1,better,3) output(1,better,2) output(4,better,2) output(9,better,3) output(9,better,2) output(3,better,2) output(7,better,2) output(5,worse,9) output(6,worse,1) output(6,worse,9) output(8,worse,1) output(8,worse,9) output(8,worse,3) output(8,worse,7) output(1,worse,9) output(4,worse,9) output(4,worse,3) output(4,worse,7) output(5,eq,1) output(6,eq,3) output(8,eq,4)
Optimization: 19 3
Answer: 4
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(0))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,1) output(6,better,4) output(6,better,2) output(8,better,1) output(8,better,2) output(4,better,2) output(9,better,3) output(9,better,2) output(3,better,2) output(7,better,2) output(6,worse,9) output(8,worse,9) output(8,worse,3) output(8,worse,7) output(1,worse,4) output(1,worse,9) output(1,worse,3) output(1,worse,7) output(1,worse,2) output(4,worse,9) output(4,worse,3) output(4,worse,7) output(6,eq,3) output(8,eq,4)
Optimization: 17 3
Answer: 5
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,5),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isShrimp(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isShrimp(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,6),4,for(atom(isMaguro(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,4) output(6,better,3) output(6,better,2) output(8,better,2) output(1,better,4) output(1,better,3) output(1,better,2) output(4,better,2) output(9,better,3) output(9,better,2) output(7,better,2) output(6,worse,9) output(8,worse,1) output(8,worse,9) output(8,worse,7) output(1,worse,9) output(4,worse,9) output(4,worse,7) output(6,eq,1) output(8,eq,4)
Optimization: 16 3
Answer: 6
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(atom(isTamago(1))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasPrice(1))),()) preference(1,(1,2),3,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isChewy(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,2),4,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(isTamago(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,7) output(8,better,1) output(8,better,4) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2)
Optimization: 14 8
Answer: 7
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(atom(isTamago(1))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasPrice(1))),()) preference(1,(1,2),3,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isChewy(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,2),4,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2)
Optimization: 13 8
Answer: 8
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,4),0,for(atom(isTamago(1))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,8),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasPrice(1))),()) preference(1,(1,2),3,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isRoe(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,2),4,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2)
Optimization: 12 8
Answer: 9
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),0,for(atom(isTamago(1))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasPrice(1))),()) preference(1,(1,2),3,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,2),4,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2)
Optimization: 11 8
Answer: 10
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),0,for(atom(isTamago(1))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(atom(isMaguro(1))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasPrice(1))),()) preference(1,(1,2),3,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isOctopus(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,2),4,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2)
Optimization: 10 8
Answer: 11
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isShrimp(1)))),()) preference(1,(1,3),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),0,for(atom(isTamago(1))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(atom(isMaguro(1))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,3),1,for(atom(isUrchin(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isUrchin(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasPrice(1))),()) preference(1,(1,2),3,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,2),4,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2) output(7,better,2)
Optimization: 9 8
Answer: 12
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,4),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isRoe(1))),()) preference(1,(1,4),2,for(atom(isButtery(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,4),4,for(atom(isMaguro(1))),()) preference(1,(1,6),4,for(atom(isRaw(1))),()) preference(1,aso) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,1) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,9) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,2) output(7,better,2) output(5,worse,6) output(1,worse,4) output(1,worse,9) output(1,worse,7) output(3,worse,7) output(8,eq,4) output(9,eq,7)
Optimization: 9 5
Answer: 13
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),0,for(atom(isTamago(1))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(atom(isMaguro(1))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isUnique(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasPrice(1))),()) preference(1,(1,4),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,2) output(1,better,9) output(1,better,3) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,2) output(9,better,3) output(9,better,2) output(3,better,2) output(7,better,2) output(9,worse,7) output(3,worse,7)
Optimization: 8 8
Answer: 14
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,8),0,for(atom(isMaguro(1))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isUnique(1))),()) preference(1,(1,4),2,for(atom(isRaw(0))),()) preference(1,(1,5),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasPrice(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(isTamago(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,2) output(1,better,4) output(1,better,9) output(1,better,3) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,2) output(9,better,3) output(9,better,2) output(3,better,2) output(7,better,2) output(4,worse,7) output(9,worse,7) output(3,worse,7)
Optimization: 7 8
Progression : [1;7] (Error: 6)
Answer: 15
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,4),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),0,for(atom(isMaguro(1))),()) preference(1,(1,1),1,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isOctopus(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isUnique(1))),()) preference(1,(1,4),2,for(atom(isRaw(0))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isShrimp(1))),()) preference(1,(1,1),3,for(atom(hasPrice(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(isShrimp(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(isTamago(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,1) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,2) output(1,better,9) output(1,better,3) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,2) output(9,better,3) output(9,better,2) output(3,better,2) output(7,better,2) output(1,worse,7) output(9,worse,7) output(3,worse,7)
Optimization: 6 8
Answer: 16
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),0,for(atom(isOctopus(1))),()) preference(1,(1,5),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),0,for(atom(hasPrice(0))),()) preference(1,(1,8),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isButtery(1))),()) preference(1,(1,7),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isShrimp(1))),()) preference(1,(1,2),3,for(atom(isTamago(1))),()) preference(1,(1,3),3,for(atom(isUrchin(1))),()) preference(1,(1,6),3,for(atom(hasPrice(1))),()) preference(1,(1,8),3,for(atom(isButtery(1))),()) preference(1,(1,2),4,for(atom(isMaguro(1))),()) preference(1,(1,3),4,for(atom(isOctopus(1))),()) preference(1,(1,4),4,for(atom(isRaw(1))),()) preference(1,(1,6),4,for(atom(isMaguro(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,9) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2) output(7,better,2)
Optimization: 3 8
Answer: 17
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),0,for(atom(isOctopus(1))),()) preference(1,(1,5),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),0,for(atom(hasPrice(0))),()) preference(1,(1,8),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),1,for(atom(isUrchin(1))),()) preference(1,(1,7),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isUrchin(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isButtery(1))),()) preference(1,(1,7),2,for(atom(isRoe(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isShrimp(1))),()) preference(1,(1,2),3,for(atom(isTamago(1))),()) preference(1,(1,3),3,for(atom(isUrchin(1))),()) preference(1,(1,6),3,for(atom(hasPrice(1))),()) preference(1,(1,8),3,for(atom(isButtery(1))),()) preference(1,(1,2),4,for(atom(isMaguro(1))),()) preference(1,(1,3),4,for(atom(isOctopus(1))),()) preference(1,(1,4),4,for(atom(isRaw(1))),()) preference(1,(1,6),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(isFattyFish(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,1) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,9) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2) output(7,better,2)
Optimization: 1 8
Progression : 1 [1;8] (Error: 7)
Answer: 18
preference(1,(1,2),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,5),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,5),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,6),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),1,for(atom(isRoe(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),3,for(atom(isTamago(1))),()) preference(1,(1,4),3,for(atom(isShrimp(1))),()) preference(1,(1,8),3,for(atom(isTamago(1))),()) preference(1,(1,2),4,for(atom(isTamago(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,5),4,for(atom(isOctopus(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),4,for(atom(isMaguro(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,1) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,9) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2) output(7,better,2) output(1,worse,4)
Optimization: 1 7
Answer: 19
preference(1,(1,2),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,6),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),3,for(atom(isTamago(1))),()) preference(1,(1,4),3,for(atom(isShrimp(1))),()) preference(1,(1,8),3,for(atom(isTamago(1))),()) preference(1,(1,2),4,for(atom(isTamago(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),4,for(atom(isMaguro(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,1) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,9) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2) output(7,better,2)
Optimization: 1 6
Answer: 20
preference(1,(1,2),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,7),0,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,7),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isRoe(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isTamago(1))),()) preference(1,(1,4),3,for(atom(isShrimp(1))),()) preference(1,(1,8),3,for(atom(isTamago(1))),()) preference(1,(1,2),4,for(atom(isTamago(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),4,for(atom(isMaguro(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,1) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,9) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2) output(7,better,2)
Optimization: 1 5
Answer: 21
preference(1,(1,2),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,4),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,6),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),1,for(atom(isOctopus(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,2),2,for(atom(isRoe(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),3,for(atom(isTamago(1))),()) preference(1,(1,4),3,for(atom(isShrimp(1))),()) preference(1,(1,2),4,for(atom(isTamago(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,1) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,9) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2) output(7,better,2)
Optimization: 1 4
Answer: 22
preference(1,(1,3),0,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),0,for(neg(atom(isRoe(1)))),()) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,6),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,3),2,for(atom(isChewy(1))),()) preference(1,(1,4),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),3,for(atom(isTamago(1))),()) preference(1,(1,4),3,for(atom(isButtery(1))),()) preference(1,(1,3),4,for(atom(isMaguro(1))),()) preference(1,(1,4),4,for(atom(hasPrice(0))),()) preference(1,aso) output(5,better,6) output(5,better,8) output(5,better,1) output(5,better,4) output(5,better,9) output(5,better,3) output(5,better,7) output(5,better,2) output(6,better,8) output(6,better,1) output(6,better,4) output(6,better,9) output(6,better,3) output(6,better,7) output(6,better,2) output(8,better,1) output(8,better,4) output(8,better,9) output(8,better,3) output(8,better,7) output(8,better,2) output(1,better,9) output(1,better,3) output(1,better,7) output(1,better,2) output(4,better,9) output(4,better,3) output(4,better,7) output(4,better,2) output(9,better,3) output(9,better,7) output(9,better,2) output(3,better,7) output(3,better,2) output(7,better,2)
Optimization: 1 3
Progression : 1 [2;3] (Error: 0.5)
OPTIMUM FOUND

Models       : 22
  Optimum    : yes
Optimization : 1 3
Calls        : 1
Time         : 39.444s (Solving: 32.67s 1st Model: 0.19s Unsat: 30.78s)
CPU Time     : 137.267s
Threads      : 4        (Winner: 1)

Choices      : 352720   (Domain: 4774)
Conflicts    : 94814    (Analyzed: 94809)
Restarts     : 137      (Average: 692.04 Last: 8801)
Model-Level  : 704.0   
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 166575   (Deleted: 101173)
  Binary     : 3830     (Ratio:   2.30%)
  Ternary    : 10931    (Ratio:   6.56%)
  Conflict   : 94808    (Average Length:  159.9 Ratio:  56.92%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 71767    (Average Length:   38.3 Ratio:  43.08%) 
  Distributed: 24046    (Ratio:  25.36% Average LBD: 3.21) 
  Integrated : 72135    (Ratio: 299.99% Unit: 309 Average Jumps: 73.04)
Backjumps    : 94809    (Average:  3.29 Max: 876 Sum: 311548)
  Executed   : 94783    (Average:  3.28 Max: 876 Sum: 311213 Ratio:  99.89%)
  Bounded    : 26       (Average: 12.88 Max:  35 Sum:    335 Ratio:   0.11%)

Rules        : 2317955 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 658490  
Bodies       : 780184  
  Count      : 1768    
Equivalences : 2017263  (Atom=Atom: 578301 Body=Body: 625871 Other: 813091)
Tight        : Yes
Variables    : 87031    (Eliminated:    0 Frozen: 58335)
Constraints  : 1780825  (Binary:  95.2% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isRaw(1))  >> not atom(isOctopus(1))  ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) >> not atom(isOctopus(1))  >> not atom(isUnique(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isRaw(1))  >> not atom(isOctopus(1))  ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) >> not atom(isOctopus(1))  >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isRaw(1))  >> not atom(isOctopus(1))  ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isRaw(0))  >> not atom(isOctopus(1))  ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isChewy(1))  >> not atom(isOctopus(1))  ; 
  atom(isShrimp(1)) >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isTamago(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) || not atom(isShrimp(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRoe(1))  || atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isTamago(1))  >> not atom(isShrimp(1))  || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isChewy(1)) >> not atom(isFattyFish(1))  || not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(2)) >> atom(isTamago(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isTamago(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) || not atom(isShrimp(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRoe(1))  || atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isTamago(1))  >> not atom(isShrimp(1))  || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isChewy(1)) >> not atom(isFattyFish(1))  || not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(2)) >> atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) || not atom(isShrimp(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRoe(1))  || atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isTamago(1))  >> not atom(isShrimp(1))  || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isRoe(1)) >> not atom(isFattyFish(1))  || not atom(isRoe(1))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(2)) >> atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(2)) >> atom(isMaguro(1)) || not atom(isRoe(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRoe(1))  || atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isTamago(1))  >> not atom(isShrimp(1))  || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isFattyFish(1)) >> not atom(isShrimp(1))  || not atom(isFattyFish(1))  ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(2)) >> atom(isMaguro(1)) || not atom(isRoe(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRoe(1))  || atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isTamago(1))  >> not atom(isShrimp(1))  || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isFattyFish(1)) >> not atom(isShrimp(1))  || atom(isMaguro(1)) ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) || not atom(isShrimp(1))  ; 
  atom(isUrchin(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(2)) >> atom(isMaguro(1)) || not atom(isRoe(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isFattyFish(1)) >> not atom(isRaw(0))  || atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isButtery(1))  >> not atom(isTamago(1))  || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isFattyFish(1)) >> not atom(isShrimp(1))  || atom(isMaguro(1)) ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  ; 
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(1)) || not atom(isFattyFish(1))  ; 
  not atom(isUrchin(1))  || not atom(hasMinorGrp(1))  ; 
  atom(isRoe(1)) >> atom(isButtery(1)) >> not atom(isMaguro(1))  >> atom(isMaguro(1)) || not atom(isOctopus(1))  ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  >> atom(isRaw(1)) || not atom(isRoe(1))  ; 
  not atom(hasMinorGrp(0))  >> not atom(isOctopus(1))  || not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> atom(isTamago(1)) >> not atom(isTamago(1))  >> not atom(isRoe(1))  || not atom(isOctopus(1))  ; 
  not atom(hasPrice(0))  >> atom(isUnique(1)) >> not atom(isRaw(0))  >> atom(isMaguro(1)) || not atom(isRoe(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isFattyFish(1)) >> not atom(isRaw(0))  || atom(isTamago(1)) ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isButtery(1))  >> not atom(isTamago(1))  || not atom(isOctopus(1))  ; 
  atom(isFattyFish(1)) >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isFattyFish(1)) >> not atom(isShrimp(1))  || atom(isMaguro(1)) ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> atom(isTamago(1)) >> not atom(isTamago(1))  >> not atom(isRoe(1))  || not atom(isOctopus(1))  ; 
  not atom(hasPrice(0))  >> atom(isUnique(1)) >> not atom(isRaw(0))  >> atom(isMaguro(1)) || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) >> not atom(isFattyFish(1))  >> atom(isTamago(1)) || not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(isTamago(1)) >> not atom(isTamago(1))  >> not atom(isButtery(1))  || not atom(isOctopus(1))  ; 
  atom(isFattyFish(1)) >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isFattyFish(1)) >> not atom(isShrimp(1))  || atom(isMaguro(1)) ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isCreamy(1))  >> atom(isMaguro(1)) >> atom(hasPrice(1)) >> atom(isShrimp(1)) || not atom(isUrchin(1))  ; 
  atom(isRoe(1)) >> atom(isTamago(1)) >> not atom(isTamago(1))  >> not atom(isRoe(1))  || not atom(isOctopus(1))  ; 
  not atom(hasPrice(0))  >> atom(isUnique(1)) >> not atom(isRaw(0))  >> atom(isMaguro(1)) || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) >> not atom(isFattyFish(1))  >> atom(isTamago(1)) || not atom(isRoe(1))  ; 
  atom(isRoe(1)) >> atom(hasPrice(1)) >> not atom(isButtery(1))  >> not atom(isTamago(1))  || not atom(isOctopus(1))  ; 
  atom(isFattyFish(1)) >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) || atom(hasMinorGrp(0)) ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) >> atom(isFattyFish(1)) >> not atom(isShrimp(1))  || atom(isMaguro(1)) ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(isUnique(1))  || not atom(isFattyFish(1))  ; 
  atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> atom(isTamago(1)) >> atom(isMaguro(1)) || not atom(isRoe(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isSweet(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) || not atom(isRaw(0))  ; 
  atom(hasMinorGrp(2)) >> not atom(isOctopus(1))  >> not atom(isChewy(1))  >> atom(isRaw(1)) || atom(isOctopus(1)) ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRaw(0))  || not atom(isRaw(1))  ; 
  not atom(hasPrice(0))  >> atom(isButtery(1)) >> atom(hasPrice(1)) >> atom(isMaguro(1)) || atom(hasPrice(0)) ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> atom(isButtery(1)) >> not atom(isRoe(1))  || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isUrchin(1)) >> atom(isShrimp(1)) >> not atom(isUnique(1))  || not atom(isFattyFish(1))  ; 
  atom(isUrchin(1)) >> atom(hasMinorGrp(2)) >> atom(isTamago(1)) >> atom(isMaguro(1)) || not atom(isRoe(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isSweet(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) || not atom(isRaw(0))  ; 
  atom(hasMinorGrp(2)) >> not atom(isOctopus(1))  >> not atom(isChewy(1))  >> atom(isRaw(1)) || atom(isOctopus(1)) ; 
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> not atom(hasPrice(0))  >> not atom(isRaw(0))  || not atom(isRaw(1))  ; 
  not atom(hasPrice(0))  >> atom(isButtery(1)) >> atom(hasPrice(1)) >> atom(isMaguro(1)) || atom(hasPrice(0)) ; 
  atom(isRoe(1)) >> atom(isOctopus(1)) >> atom(isButtery(1)) >> not atom(isRoe(1))  || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isRoe(1)) >> atom(isOctopus(1)) >> not atom(isRoe(1))  >> atom(isTamago(1)) || not atom(isOctopus(1))  ; 
  not atom(hasPrice(0))  >> atom(hasMinorGrp(1)) >> atom(isTamago(1)) >> atom(isMaguro(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) >> not atom(isUnique(1))  || not atom(isButtery(1))  ; 
  atom(isRoe(1)) >> atom(isUrchin(1)) >> not atom(isButtery(1))  >> atom(isOctopus(1)) || not atom(isOctopus(1))  ; 
  atom(isFattyFish(1)) >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) || atom(hasMinorGrp(0)) ; 
  atom(hasMinorGrp(0)) >> atom(isFattyFish(1)) >> atom(isTamago(1)) >> atom(isMaguro(1)) || atom(isRaw(1)) ; 
  atom(isOctopus(1)) >> not atom(isMaguro(1))  >> not atom(isOctopus(1))  >> not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isTamago(1)) || not atom(isOctopus(1))  ; 
  not atom(hasPrice(0))  >> atom(hasMinorGrp(1)) >> atom(isTamago(1)) >> atom(isMaguro(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) >> not atom(isUnique(1))  || not atom(isButtery(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  || not atom(isRoe(1))  ; 
  atom(isFattyFish(1)) >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) || atom(hasMinorGrp(0)) ; 
  atom(hasMinorGrp(0)) >> atom(isFattyFish(1)) >> atom(isTamago(1)) >> atom(isMaguro(1)) || atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isTamago(1)) || not atom(isOctopus(1))  ; 
  not atom(hasPrice(0))  >> atom(hasMinorGrp(1)) >> atom(isTamago(1)) >> atom(isMaguro(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) >> not atom(isUnique(1))  || not atom(isButtery(1))  ; 
  atom(isFattyFish(1)) >> atom(isOctopus(1)) >> not atom(isFattyFish(1))  >> atom(hasMinorGrp(1)) || atom(hasMinorGrp(0)) ; 
  atom(isRoe(1)) >> not atom(hasMinorGrp(0))  >> atom(isTamago(1)) >> atom(isMaguro(1)) || not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isOctopus(1)) >> atom(isRoe(1)) >> not atom(isRoe(1))  >> atom(isTamago(1)) || not atom(isOctopus(1))  ; 
  not atom(hasPrice(0))  >> atom(hasMinorGrp(1)) >> atom(isTamago(1)) >> atom(isMaguro(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) >> not atom(isUnique(1))  || not atom(isButtery(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  || not atom(isRoe(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(0))  >> atom(isChewy(1)) >> atom(isTamago(1)) >> atom(isMaguro(1)) || not atom(isOctopus(1))  ; 
  atom(isOctopus(1)) >> atom(isFattyFish(1)) >> not atom(isOctopus(1))  >> not atom(isMaguro(1))  || not atom(isRoe(1))  ; 
  atom(isOctopus(1)) >> atom(isRoe(1)) >> atom(isButtery(1)) >> atom(hasPrice(0)) 
}.
