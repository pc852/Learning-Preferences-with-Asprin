asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,51) output(4,eq,28) output(4,eq,7) output(4,eq,19) output(4,eq,46) output(4,eq,34) output(15,eq,5) output(15,eq,0) output(15,eq,51) output(15,eq,28) output(15,eq,7) output(15,eq,19) output(15,eq,46) output(15,eq,34) output(5,eq,0) output(5,eq,51) output(5,eq,28) output(5,eq,7) output(5,eq,19) output(5,eq,46) output(5,eq,34) output(0,eq,51) output(0,eq,28) output(0,eq,7) output(0,eq,19) output(0,eq,46) output(0,eq,34) output(51,eq,28) output(51,eq,7) output(51,eq,19) output(51,eq,46) output(51,eq,34) output(28,eq,7) output(28,eq,19) output(28,eq,46) output(28,eq,34) output(7,eq,19) output(7,eq,46) output(7,eq,34) output(19,eq,46) output(19,eq,34) output(46,eq,34)
Optimization: 45 0
Answer: 2
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,less(weight)) output(0,better,7) output(4,better,7) output(5,better,7) output(15,better,7) output(28,better,7) output(51,better,7) output(7,worse,19) output(7,worse,46) output(7,worse,34) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,51) output(4,eq,28) output(4,eq,19) output(4,eq,46) output(4,eq,34) output(15,eq,5) output(15,eq,0) output(15,eq,51) output(15,eq,28) output(15,eq,19) output(15,eq,46) output(15,eq,34) output(5,eq,0) output(5,eq,51) output(5,eq,28) output(5,eq,19) output(5,eq,46) output(5,eq,34) output(0,eq,51) output(0,eq,28) output(0,eq,19) output(0,eq,46) output(0,eq,34) output(51,eq,28) output(51,eq,19) output(51,eq,46) output(51,eq,34) output(28,eq,19) output(28,eq,46) output(28,eq,34) output(19,eq,46) output(19,eq,34) output(46,eq,34)
Optimization: 39 1
Answer: 3
preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(4,better,51) output(4,better,28) output(5,better,51) output(5,better,28) output(15,better,51) output(15,better,28) output(28,worse,7) output(28,worse,19) output(28,worse,46) output(28,worse,34) output(51,worse,7) output(51,worse,19) output(51,worse,46) output(51,worse,34) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,7) output(4,eq,19) output(4,eq,46) output(4,eq,34) output(15,eq,5) output(15,eq,0) output(15,eq,7) output(15,eq,19) output(15,eq,46) output(15,eq,34) output(5,eq,0) output(5,eq,7) output(5,eq,19) output(5,eq,46) output(5,eq,34) output(0,eq,7) output(0,eq,19) output(0,eq,46) output(0,eq,34) output(51,eq,28) output(7,eq,19) output(7,eq,46) output(7,eq,34) output(19,eq,46) output(19,eq,34) output(46,eq,34)
Optimization: 37 1
Answer: 4
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasPrice(2))),10) preference(1,less(weight)) output(0,better,28) output(0,better,7) output(4,better,28) output(4,better,7) output(5,better,28) output(5,better,7) output(15,better,28) output(15,better,7) output(51,better,28) output(51,better,7) output(7,worse,19) output(7,worse,46) output(7,worse,34) output(28,worse,19) output(28,worse,46) output(28,worse,34) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,51) output(4,eq,19) output(4,eq,46) output(4,eq,34) output(15,eq,5) output(15,eq,0) output(15,eq,51) output(15,eq,19) output(15,eq,46) output(15,eq,34) output(5,eq,0) output(5,eq,51) output(5,eq,19) output(5,eq,46) output(5,eq,34) output(0,eq,51) output(0,eq,19) output(0,eq,46) output(0,eq,34) output(51,eq,19) output(51,eq,46) output(51,eq,34) output(28,eq,7) output(19,eq,46) output(19,eq,34) output(46,eq,34)
Optimization: 35 2
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(4,better,51) output(4,better,28) output(4,better,7) output(5,better,51) output(5,better,28) output(5,better,7) output(15,better,51) output(15,better,28) output(15,better,7) output(7,worse,19) output(7,worse,46) output(7,worse,34) output(28,worse,19) output(28,worse,46) output(28,worse,34) output(51,worse,19) output(51,worse,46) output(51,worse,34) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,19) output(4,eq,46) output(4,eq,34) output(15,eq,5) output(15,eq,0) output(15,eq,19) output(15,eq,46) output(15,eq,34) output(5,eq,0) output(5,eq,19) output(5,eq,46) output(5,eq,34) output(0,eq,19) output(0,eq,46) output(0,eq,34) output(51,eq,28) output(51,eq,7) output(28,eq,7) output(19,eq,46) output(19,eq,34) output(46,eq,34)
Optimization: 33 2
Answer: 6
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(0,better,7) output(0,better,46) output(4,better,7) output(4,better,46) output(5,better,7) output(5,better,46) output(15,better,7) output(15,better,46) output(19,better,46) output(28,better,7) output(28,better,46) output(51,better,7) output(51,better,46) output(7,worse,19) output(7,worse,34) output(46,worse,34) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,51) output(4,eq,28) output(4,eq,19) output(4,eq,34) output(15,eq,5) output(15,eq,0) output(15,eq,51) output(15,eq,28) output(15,eq,19) output(15,eq,34) output(5,eq,0) output(5,eq,51) output(5,eq,28) output(5,eq,19) output(5,eq,34) output(0,eq,51) output(0,eq,28) output(0,eq,19) output(0,eq,34) output(51,eq,28) output(51,eq,19) output(51,eq,34) output(28,eq,19) output(28,eq,34) output(7,eq,46) output(19,eq,34)
Optimization: 32 2
Answer: 7
preference(1,(1,13),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,46) output(4,better,51) output(4,better,28) output(4,better,46) output(5,better,51) output(5,better,28) output(5,better,46) output(7,better,46) output(15,better,51) output(15,better,28) output(15,better,46) output(19,better,46) output(28,worse,7) output(28,worse,19) output(28,worse,34) output(46,worse,34) output(51,worse,7) output(51,worse,19) output(51,worse,34) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,7) output(4,eq,19) output(4,eq,34) output(15,eq,5) output(15,eq,0) output(15,eq,7) output(15,eq,19) output(15,eq,34) output(5,eq,0) output(5,eq,7) output(5,eq,19) output(5,eq,34) output(0,eq,7) output(0,eq,19) output(0,eq,34) output(51,eq,28) output(51,eq,46) output(28,eq,46) output(7,eq,19) output(7,eq,34) output(19,eq,34)
Optimization: 31 2
Answer: 8
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,46) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,46) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,46) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,46) output(19,better,46) output(7,worse,19) output(7,worse,34) output(28,worse,19) output(28,worse,34) output(46,worse,34) output(51,worse,19) output(51,worse,34) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,19) output(4,eq,34) output(15,eq,5) output(15,eq,0) output(15,eq,19) output(15,eq,34) output(5,eq,0) output(5,eq,19) output(5,eq,34) output(0,eq,19) output(0,eq,34) output(51,eq,28) output(51,eq,7) output(51,eq,46) output(28,eq,7) output(28,eq,46) output(7,eq,46) output(19,eq,34)
Optimization: 28 3
Answer: 9
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(0,better,7) output(0,better,46) output(0,better,34) output(4,better,7) output(4,better,46) output(4,better,34) output(5,better,7) output(5,better,46) output(5,better,34) output(15,better,7) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,7) output(28,better,46) output(28,better,34) output(51,better,7) output(51,better,46) output(51,better,34) output(7,worse,19) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,51) output(4,eq,28) output(4,eq,19) output(15,eq,5) output(15,eq,0) output(15,eq,51) output(15,eq,28) output(15,eq,19) output(5,eq,0) output(5,eq,51) output(5,eq,28) output(5,eq,19) output(0,eq,51) output(0,eq,28) output(0,eq,19) output(51,eq,28) output(51,eq,19) output(28,eq,19) output(7,eq,46) output(7,eq,34) output(46,eq,34)
Optimization: 25 3
Answer: 10
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,46) output(0,better,34) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,46) output(4,better,34) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,46) output(5,better,34) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(7,worse,19) output(28,worse,19) output(51,worse,19) output(4,eq,15) output(4,eq,5) output(4,eq,0) output(4,eq,19) output(15,eq,5) output(15,eq,0) output(15,eq,19) output(5,eq,0) output(5,eq,19) output(0,eq,19) output(51,eq,28) output(51,eq,7) output(51,eq,46) output(51,eq,34) output(28,eq,7) output(28,eq,46) output(28,eq,34) output(7,eq,46) output(7,eq,34) output(46,eq,34)
Optimization: 23 4
Answer: 11
preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,5),1,for(atom(hasOftenSold(0))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,8),1,for(atom(hasOiliness(1))),10) preference(1,(1,9),1,for(atom(hasOiliness(3))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),10) preference(1,(1,11),1,for(atom(hasPrice(3))),1) preference(1,(1,12),1,for(atom(hasPrice(0))),1) preference(1,(1,13),1,for(atom(hasPrice(2))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,46) output(4,better,34) output(5,better,51) output(5,better,28) output(5,better,46) output(7,better,46) output(15,better,5) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(51,better,28) output(5,worse,0) output(5,worse,19) output(7,worse,19) output(15,worse,0) output(15,worse,19) output(28,worse,7) output(28,worse,19) output(28,worse,46) output(28,worse,34) output(46,worse,34) output(51,worse,7) output(51,worse,19) output(51,worse,46) output(51,worse,34) output(4,eq,0) output(4,eq,19) output(5,eq,7) output(5,eq,34) output(0,eq,19) output(7,eq,34)
Optimization: 20 13
Answer: 12
preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,5),1,for(atom(hasOftenSold(0))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,8),1,for(atom(hasOiliness(1))),10) preference(1,(1,9),1,for(atom(hasOiliness(3))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),10) preference(1,(1,11),1,for(atom(hasPrice(3))),1) preference(1,(1,12),1,for(atom(hasPrice(0))),1) preference(1,(1,13),1,for(atom(hasPrice(2))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,46) output(4,better,34) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,46) output(7,better,46) output(15,better,5) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(51,better,28) output(5,worse,0) output(5,worse,19) output(7,worse,19) output(7,worse,34) output(15,worse,0) output(15,worse,19) output(28,worse,7) output(28,worse,19) output(28,worse,46) output(28,worse,34) output(46,worse,34) output(51,worse,7) output(51,worse,19) output(51,worse,46) output(51,worse,34) output(4,eq,0) output(4,eq,19) output(5,eq,34) output(0,eq,19)
Optimization: 19 14
Answer: 13
preference(1,(1,7),1,for(neg(atom(hasOftenSold(3)))),10) preference(1,(1,8),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(0)))),10) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(4)))),3) preference(1,(1,14),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,3),1,for(atom(hasOftenSold(0))),2) preference(1,(1,4),1,for(atom(hasPrice(3))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,11),1,for(atom(hasOiliness(2))),6) preference(1,(1,12),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasOftenSold(1))),7) preference(1,less(weight)) output(0,better,46) output(0,better,34) output(4,better,46) output(4,better,34) output(5,better,0) output(5,better,7) output(5,better,46) output(5,better,34) output(7,better,46) output(7,better,34) output(15,better,5) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,7) output(28,better,19) output(28,better,46) output(28,better,34) output(46,better,34) output(51,better,28) output(51,better,7) output(51,better,19) output(51,better,46) output(51,better,34) output(0,worse,51) output(0,worse,28) output(0,worse,19) output(4,worse,15) output(4,worse,5) output(4,worse,0) output(4,worse,51) output(4,worse,28) output(4,worse,7) output(4,worse,19) output(5,worse,51) output(5,worse,28) output(7,worse,19) output(5,eq,19) output(0,eq,7)
Optimization: 15 14
Answer: 14
preference(1,(1,6),1,for(neg(atom(hasOiliness(2)))),10) preference(1,(1,7),1,for(neg(atom(hasOftenSold(3)))),10) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(4)))),3) preference(1,(1,11),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,14),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,1),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,3),1,for(atom(hasOftenSold(0))),2) preference(1,(1,4),1,for(atom(hasPrice(3))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,8),1,for(atom(hasOiliness(2))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,12),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasOftenSold(1))),7) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,46) output(4,better,34) output(5,better,7) output(5,better,46) output(5,better,34) output(7,better,46) output(7,better,34) output(15,better,5) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,7) output(28,better,19) output(28,better,46) output(28,better,34) output(46,better,34) output(51,better,28) output(51,better,7) output(51,better,19) output(51,better,46) output(51,better,34) output(4,worse,15) output(4,worse,5) output(4,worse,0) output(4,worse,51) output(4,worse,28) output(4,worse,7) output(4,worse,19) output(5,worse,0) output(5,worse,51) output(5,worse,28) output(7,worse,19) output(15,worse,0) output(5,eq,19)
Optimization: 13 14
Answer: 15
preference(1,(1,7),1,for(neg(atom(hasOftenSold(3)))),4) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(3))),5) preference(1,(1,2),1,for(atom(hasOiliness(1))),3) preference(1,(1,3),1,for(atom(hasPrice(3))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,5),1,for(atom(hasPrice(1))),4) preference(1,(1,6),1,for(atom(hasOftenSold(1))),8) preference(1,(1,8),1,for(atom(hasOiliness(2))),6) preference(1,(1,10),1,for(atom(hasOiliness(3))),3) preference(1,(1,11),1,for(atom(hasOftenSold(0))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,13),1,for(atom(hasPrice(0))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),5) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,5) output(4,better,51) output(4,better,28) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,51) output(5,better,28) output(5,better,19) output(5,better,46) output(5,better,34) output(7,better,19) output(7,better,46) output(7,better,34) output(15,better,5) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,19) output(28,better,46) output(28,better,34) output(51,better,46) output(51,better,34) output(0,worse,7) output(4,worse,15) output(4,worse,0) output(4,worse,7) output(5,worse,0) output(5,worse,7) output(28,worse,7) output(46,worse,34) output(51,worse,28) output(51,worse,7) output(51,worse,19)
Optimization: 11 14
Answer: 16
preference(1,(1,11),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,1),1,for(atom(hasOiliness(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,4),1,for(atom(hasOftenSold(1))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,8),1,for(atom(hasPrice(0))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,10),1,for(atom(hasOftenSold(0))),5) preference(1,(1,12),1,for(atom(hasOftenSold(2))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,14),1,for(atom(hasPrice(2))),4) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,0) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,51) output(5,better,28) output(5,better,46) output(5,better,34) output(7,better,19) output(7,better,46) output(7,better,34) output(15,better,5) output(15,better,51) output(15,better,28) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,46) output(28,better,34) output(51,better,28) output(51,better,46) output(51,better,34) output(5,worse,0) output(5,worse,7) output(15,worse,0) output(15,worse,7) output(28,worse,7) output(28,worse,19) output(46,worse,34) output(51,worse,7) output(51,worse,19) output(5,eq,19)
Optimization: 10 14
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(11)))),4) preference(1,(1,2),1,for(neg(atom(hasMinorGrp(7)))),4) preference(1,(1,3),1,for(neg(atom(hasPrice(2)))),4) preference(1,(1,4),1,for(neg(atom(hasMinorGrp(8)))),9) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(3)))),6) preference(1,(1,7),1,for(neg(atom(hasStyle(0)))),10) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(10)))),8) preference(1,(1,12),1,for(neg(atom(hasOiliness(1)))),4) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(0)))),8) preference(1,(1,6),1,for(atom(hasStyle(1))),7) preference(1,(1,8),1,for(atom(hasOiliness(2))),1) preference(1,(1,9),1,for(atom(hasPrice(3))),2) preference(1,(1,14),1,for(atom(hasOiliness(0))),8) preference(1,less(weight)) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,0) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,0) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,19) output(5,better,46) output(5,better,34) output(7,better,19) output(7,better,46) output(7,better,34) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,19) output(28,better,46) output(28,better,34) output(51,better,19) output(51,better,46) output(51,better,34) output(15,eq,5) output(0,eq,51) output(0,eq,28) output(0,eq,7) output(51,eq,28) output(51,eq,7) output(28,eq,7) output(46,eq,34)
Optimization: 8 13
Answer: 18
preference(1,(1,3),1,for(neg(atom(hasPrice(1)))),8) preference(1,(1,6),1,for(neg(atom(hasOftenSold(3)))),10) preference(1,(1,11),1,for(neg(atom(hasOftenSold(0)))),5) preference(1,(1,12),1,for(neg(atom(hasMajorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(3))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,5),1,for(atom(hasPrice(2))),1) preference(1,(1,7),1,for(atom(hasPrice(0))),3) preference(1,(1,8),1,for(atom(hasOiliness(2))),4) preference(1,(1,9),1,for(atom(hasOftenSold(0))),2) preference(1,(1,10),1,for(atom(hasPrice(1))),2) preference(1,(1,13),1,for(atom(hasOiliness(0))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),9) preference(1,less(weight)) output(0,better,28) output(0,better,7) output(0,better,19) output(0,better,34) output(4,better,5) output(4,better,0) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,0) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,19) output(5,better,46) output(5,better,34) output(7,better,19) output(7,better,34) output(15,better,5) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,34) output(28,better,7) output(28,better,19) output(28,better,34) output(46,better,34) output(51,better,28) output(51,better,7) output(51,better,19) output(51,better,34) output(4,worse,15) output(7,worse,46) output(19,worse,46) output(28,worse,46) output(0,eq,51) output(0,eq,46) output(51,eq,46)
Optimization: 7 14
Answer: 19
preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),3) preference(1,(1,12),1,for(neg(atom(hasOftenSold(3)))),8) preference(1,(1,1),1,for(atom(hasPrice(3))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,7),1,for(atom(hasOftenSold(2))),6) preference(1,(1,9),1,for(atom(hasOiliness(2))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(9))),5) preference(1,(1,11),1,for(atom(hasOiliness(3))),3) preference(1,(1,13),1,for(atom(hasOftenSold(1))),1) preference(1,(1,14),1,for(atom(hasPrice(0))),6) preference(1,less(weight)) output(0,better,28) output(0,better,7) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,0) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,0) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,19) output(5,better,46) output(5,better,34) output(7,better,34) output(15,better,5) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,34) output(28,better,7) output(28,better,19) output(28,better,46) output(28,better,34) output(46,better,34) output(51,better,28) output(51,better,7) output(51,better,19) output(51,better,46) output(51,better,34) output(0,eq,51) output(7,eq,19) output(7,eq,46) output(19,eq,46)
Optimization: 4 14
Answer: 20
preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),3) preference(1,(1,12),1,for(neg(atom(hasOftenSold(3)))),8) preference(1,(1,1),1,for(atom(hasPrice(3))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,7),1,for(atom(hasOftenSold(2))),6) preference(1,(1,9),1,for(atom(hasOiliness(2))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(9))),5) preference(1,(1,11),1,for(atom(hasOiliness(3))),3) preference(1,(1,13),1,for(atom(hasOftenSold(1))),1) preference(1,(1,14),1,for(atom(hasPrice(0))),6) preference(1,less(weight)) output(0,better,28) output(0,better,7) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,0) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,0) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,19) output(5,better,46) output(5,better,34) output(7,better,19) output(7,better,46) output(7,better,34) output(15,better,5) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,34) output(28,better,7) output(28,better,19) output(28,better,46) output(28,better,34) output(46,better,34) output(51,better,28) output(51,better,7) output(51,better,19) output(51,better,46) output(51,better,34) output(0,eq,51) output(19,eq,46)
Optimization: 2 14
Answer: 21
preference(1,(1,5),1,for(neg(atom(hasOftenSold(0)))),1) preference(1,(1,1),1,for(atom(hasOiliness(2))),9) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,6),1,for(atom(hasOftenSold(1))),4) preference(1,(1,7),1,for(atom(hasPrice(3))),2) preference(1,(1,8),1,for(atom(hasOiliness(3))),4) preference(1,(1,9),1,for(atom(hasOftenSold(0))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,13),1,for(atom(hasOiliness(0))),5) preference(1,(1,14),1,for(atom(hasOftenSold(2))),4) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,0) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,0) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,19) output(5,better,46) output(5,better,34) output(7,better,19) output(7,better,46) output(7,better,34) output(15,better,5) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,7) output(28,better,19) output(28,better,46) output(28,better,34) output(46,better,34) output(51,better,7) output(51,better,19) output(51,better,46) output(51,better,34) output(51,eq,28)
Optimization: 1 14
Answer: 22
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),4) preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),3) preference(1,(1,2),1,for(atom(hasOftenSold(1))),1) preference(1,(1,3),1,for(atom(hasPrice(1))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,5),1,for(atom(hasOiliness(2))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,7),1,for(atom(hasOftenSold(0))),7) preference(1,(1,8),1,for(atom(hasOftenSold(2))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(9))),2) preference(1,(1,11),1,for(atom(hasPrice(3))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,14),1,for(atom(hasOiliness(3))),4) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,0) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,0) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,19) output(5,better,46) output(5,better,34) output(7,better,19) output(7,better,46) output(7,better,34) output(15,better,5) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,7) output(28,better,19) output(28,better,46) output(28,better,34) output(46,better,34) output(51,better,28) output(51,better,7) output(51,better,19) output(51,better,46) output(51,better,34)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Progression : 0 [ 2;14] (Error: 6)
Answer: 23
preference(1,(1,8),1,for(neg(atom(hasOftenSold(3)))),5) preference(1,(1,1),1,for(atom(hasPrice(3))),8) preference(1,(1,2),1,for(atom(hasPrice(2))),3) preference(1,(1,4),1,for(atom(hasOftenSold(2))),7) preference(1,(1,5),1,for(atom(hasOftenSold(3))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,9),1,for(atom(hasOiliness(3))),9) preference(1,(1,10),1,for(atom(hasOftenSold(1))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(9))),6) preference(1,(1,12),1,for(atom(hasPrice(0))),3) preference(1,(1,13),1,for(atom(hasOiliness(2))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),8) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,0) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,0) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,19) output(5,better,46) output(5,better,34) output(7,better,19) output(7,better,46) output(7,better,34) output(15,better,5) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,7) output(28,better,19) output(28,better,46) output(28,better,34) output(46,better,34) output(51,better,28) output(51,better,7) output(51,better,19) output(51,better,46) output(51,better,34)
Optimization: 0 13
Answer: 24
preference(1,(1,5),1,for(neg(atom(hasMajorGrp(0)))),6) preference(1,(1,8),1,for(neg(atom(hasOftenSold(3)))),5) preference(1,(1,13),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,1),1,for(atom(hasOiliness(3))),8) preference(1,(1,2),1,for(atom(hasPrice(2))),3) preference(1,(1,4),1,for(atom(hasOftenSold(2))),7) preference(1,(1,6),1,for(atom(hasOiliness(2))),9) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,10),1,for(atom(hasOftenSold(1))),2) preference(1,(1,11),1,for(atom(hasOftenSold(3))),2) preference(1,(1,12),1,for(atom(hasPrice(0))),3) preference(1,(1,14),1,for(atom(hasPrice(3))),8) preference(1,less(weight)) output(0,better,51) output(0,better,28) output(0,better,7) output(0,better,19) output(0,better,46) output(0,better,34) output(4,better,15) output(4,better,5) output(4,better,0) output(4,better,51) output(4,better,28) output(4,better,7) output(4,better,19) output(4,better,46) output(4,better,34) output(5,better,0) output(5,better,51) output(5,better,28) output(5,better,7) output(5,better,19) output(5,better,46) output(5,better,34) output(7,better,19) output(7,better,46) output(7,better,34) output(15,better,5) output(15,better,0) output(15,better,51) output(15,better,28) output(15,better,7) output(15,better,19) output(15,better,46) output(15,better,34) output(19,better,46) output(19,better,34) output(28,better,7) output(28,better,19) output(28,better,46) output(28,better,34) output(46,better,34) output(51,better,28) output(51,better,7) output(51,better,19) output(51,better,46) output(51,better,34)
Optimization: 0 12
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.102 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 24+
  Optimum    : unknown
Optimization : 0 12
Calls        : 1
Time         : 298.394s (Solving: 283.86s 1st Model: 0.08s Unsat: 0.00s)
CPU Time     : 1149.411s
Threads      : 4        (Winner: 4)

Choices      : 5174742  (Domain: 1097)
Conflicts    : 1053825  (Analyzed: 1053823)
Restarts     : 1156     (Average: 911.61 Last: 44643)
Model-Level  : 1294.2  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1058520  (Deleted: 952450)
  Binary     : 888      (Ratio:   0.08%)
  Ternary    : 256      (Ratio:   0.02%)
  Conflict   : 1053823  (Average Length: 1937.8 Ratio:  99.56%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 4697     (Average Length:  183.8 Ratio:   0.44%) 
  Distributed: 1566     (Ratio:   0.15% Average LBD: 3.22) 
  Integrated : 4698     (Ratio: 300.00% Unit: 21 Average Jumps: 107.62)
Backjumps    : 1053823  (Average:  2.96 Max: 3364 Sum: 3115067)
  Executed   : 1053823  (Average:  2.96 Max: 3364 Sum: 3115067 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(6)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasPrice(3)) ; 
  1 :: atom(hasPrice(0)) ; 
  9 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMajorGrp(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasPrice(3)) ; 
  1 :: atom(hasPrice(0)) ; 
  9 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  10 :: not atom(hasOftenSold(3))  ; 
  1 :: not atom(hasOiliness(0))  ; 
  10 :: not atom(hasMinorGrp(0))  ; 
  3 :: not atom(hasMinorGrp(4))  ; 
  6 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  4 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMajorGrp(1)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  10 :: not atom(hasOiliness(2))  ; 
  10 :: not atom(hasOftenSold(3))  ; 
  6 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  3 :: not atom(hasMinorGrp(4))  ; 
  1 :: not atom(hasOiliness(0))  ; 
  2 :: atom(hasOftenSold(3)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  4 :: not atom(hasOftenSold(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasPrice(3)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  4 :: atom(hasPrice(1)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  4 :: not atom(hasOftenSold(3))  ; 
  6 :: atom(hasOiliness(2)) ; 
  2 :: not atom(hasPrice(1))  ; 
  3 :: atom(hasOiliness(3)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasPrice(0)) ; 
  5 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(8)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  2 :: not atom(hasPrice(1))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasMinorGrp(11))  ; 
  4 :: not atom(hasMinorGrp(7))  ; 
  4 :: not atom(hasPrice(2))  ; 
  9 :: not atom(hasMinorGrp(8))  ; 
  6 :: not atom(hasMinorGrp(3))  ; 
  7 :: atom(hasStyle(1)) ; 
  10 :: not atom(hasStyle(0))  ; 
  1 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasPrice(3)) ; 
  8 :: not atom(hasMinorGrp(10))  ; 
  4 :: not atom(hasOiliness(1))  ; 
  8 :: not atom(hasMinorGrp(0))  ; 
  8 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  8 :: not atom(hasPrice(1))  ; 
  9 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasPrice(2)) ; 
  10 :: not atom(hasOftenSold(3))  ; 
  3 :: atom(hasPrice(0)) ; 
  4 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasPrice(1)) ; 
  5 :: not atom(hasOftenSold(0))  ; 
  2 :: not atom(hasMajorGrp(0))  ; 
  7 :: atom(hasOiliness(0)) ; 
  9 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  2 :: not atom(hasPrice(1))  ; 
  1 :: atom(hasMinorGrp(8)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  3 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(9)) ; 
  3 :: atom(hasOiliness(3)) ; 
  8 :: not atom(hasOftenSold(3))  ; 
  1 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  2 :: not atom(hasPrice(1))  ; 
  1 :: atom(hasMinorGrp(8)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  3 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(9)) ; 
  3 :: atom(hasOiliness(3)) ; 
  8 :: not atom(hasOftenSold(3))  ; 
  1 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasMinorGrp(9)) ; 
  6 :: atom(hasMinorGrp(1)) ; 
  1 :: not atom(hasOftenSold(0))  ; 
  4 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasPrice(3)) ; 
  4 :: atom(hasOiliness(3)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasOiliness(0)) ; 
  4 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasOftenSold(3))  ; 
  1 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(9)) ; 
  3 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasPrice(3)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrice(3)) ; 
  3 :: atom(hasPrice(2)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  5 :: not atom(hasOftenSold(3))  ; 
  9 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMinorGrp(9)) ; 
  3 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOiliness(2)) ; 
  8 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasPrice(2)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  6 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  5 :: not atom(hasOftenSold(3))  ; 
  2 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasPrice(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasPrice(3)) 
}.
