asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(4,eq,6) output(4,eq,13) output(4,eq,3) output(4,eq,0) output(4,eq,21) output(4,eq,66) output(4,eq,83) output(4,eq,77) output(4,eq,56) output(6,eq,13) output(6,eq,3) output(6,eq,0) output(6,eq,21) output(6,eq,66) output(6,eq,83) output(6,eq,77) output(6,eq,56) output(13,eq,3) output(13,eq,0) output(13,eq,21) output(13,eq,66) output(13,eq,83) output(13,eq,77) output(13,eq,56) output(3,eq,0) output(3,eq,21) output(3,eq,66) output(3,eq,83) output(3,eq,77) output(3,eq,56) output(0,eq,21) output(0,eq,66) output(0,eq,83) output(0,eq,77) output(0,eq,56) output(21,eq,66) output(21,eq,83) output(21,eq,77) output(21,eq,56) output(66,eq,83) output(66,eq,77) output(66,eq,56) output(83,eq,77) output(83,eq,56) output(77,eq,56)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasPrice(2))),10) preference(1,less(weight)) output(0,better,21) output(3,better,21) output(4,better,21) output(6,better,21) output(13,better,21) output(21,worse,66) output(21,worse,83) output(21,worse,77) output(21,worse,56) output(4,eq,6) output(4,eq,13) output(4,eq,3) output(4,eq,0) output(4,eq,66) output(4,eq,83) output(4,eq,77) output(4,eq,56) output(6,eq,13) output(6,eq,3) output(6,eq,0) output(6,eq,66) output(6,eq,83) output(6,eq,77) output(6,eq,56) output(13,eq,3) output(13,eq,0) output(13,eq,66) output(13,eq,83) output(13,eq,77) output(13,eq,56) output(3,eq,0) output(3,eq,66) output(3,eq,83) output(3,eq,77) output(3,eq,56) output(0,eq,66) output(0,eq,83) output(0,eq,77) output(0,eq,56) output(66,eq,83) output(66,eq,77) output(66,eq,56) output(83,eq,77) output(83,eq,56) output(77,eq,56)
Optimization: 40 1
Answer: 3
preference(1,(1,14),1,for(atom(hasMinorGrp(11))),10) preference(1,less(weight)) output(0,better,56) output(3,better,56) output(4,better,56) output(6,better,56) output(13,better,56) output(21,better,56) output(66,better,56) output(77,better,56) output(83,better,56) output(4,eq,6) output(4,eq,13) output(4,eq,3) output(4,eq,0) output(4,eq,21) output(4,eq,66) output(4,eq,83) output(4,eq,77) output(6,eq,13) output(6,eq,3) output(6,eq,0) output(6,eq,21) output(6,eq,66) output(6,eq,83) output(6,eq,77) output(13,eq,3) output(13,eq,0) output(13,eq,21) output(13,eq,66) output(13,eq,83) output(13,eq,77) output(3,eq,0) output(3,eq,21) output(3,eq,66) output(3,eq,83) output(3,eq,77) output(0,eq,21) output(0,eq,66) output(0,eq,83) output(0,eq,77) output(21,eq,66) output(21,eq,83) output(21,eq,77) output(66,eq,83) output(66,eq,77) output(83,eq,77)
Optimization: 36 1
Answer: 4
preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(10))),10) preference(1,less(weight)) output(0,better,21) output(0,better,83) output(3,better,21) output(3,better,83) output(4,better,21) output(4,better,83) output(6,better,21) output(6,better,83) output(13,better,21) output(13,better,83) output(66,better,83) output(21,worse,66) output(21,worse,77) output(21,worse,56) output(83,worse,77) output(83,worse,56) output(4,eq,6) output(4,eq,13) output(4,eq,3) output(4,eq,0) output(4,eq,66) output(4,eq,77) output(4,eq,56) output(6,eq,13) output(6,eq,3) output(6,eq,0) output(6,eq,66) output(6,eq,77) output(6,eq,56) output(13,eq,3) output(13,eq,0) output(13,eq,66) output(13,eq,77) output(13,eq,56) output(3,eq,0) output(3,eq,66) output(3,eq,77) output(3,eq,56) output(0,eq,66) output(0,eq,77) output(0,eq,56) output(21,eq,83) output(66,eq,77) output(66,eq,56) output(77,eq,56)
Optimization: 34 2
Answer: 5
preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),10) preference(1,less(weight)) output(0,better,21) output(0,better,56) output(3,better,21) output(3,better,56) output(4,better,21) output(4,better,56) output(6,better,21) output(6,better,56) output(13,better,21) output(13,better,56) output(66,better,56) output(77,better,56) output(83,better,56) output(21,worse,66) output(21,worse,83) output(21,worse,77) output(4,eq,6) output(4,eq,13) output(4,eq,3) output(4,eq,0) output(4,eq,66) output(4,eq,83) output(4,eq,77) output(6,eq,13) output(6,eq,3) output(6,eq,0) output(6,eq,66) output(6,eq,83) output(6,eq,77) output(13,eq,3) output(13,eq,0) output(13,eq,66) output(13,eq,83) output(13,eq,77) output(3,eq,0) output(3,eq,66) output(3,eq,83) output(3,eq,77) output(0,eq,66) output(0,eq,83) output(0,eq,77) output(21,eq,56) output(66,eq,83) output(66,eq,77) output(83,eq,77)
Optimization: 32 2
Answer: 6
preference(1,(1,11),1,for(atom(hasMinorGrp(5))),10) preference(1,(1,12),1,for(atom(hasPrice(2))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(10))),10) preference(1,(1,14),1,for(atom(hasOiliness(3))),10) preference(1,less(weight)) output(0,better,21) output(0,better,83) output(0,better,56) output(4,better,3) output(4,better,21) output(4,better,83) output(4,better,56) output(6,better,3) output(6,better,21) output(6,better,83) output(6,better,56) output(13,better,3) output(13,better,21) output(13,better,83) output(13,better,56) output(66,better,83) output(66,better,56) output(77,better,56) output(3,worse,0) output(3,worse,66) output(3,worse,77) output(21,worse,66) output(21,worse,77) output(83,worse,77) output(4,eq,6) output(4,eq,13) output(4,eq,0) output(4,eq,66) output(4,eq,77) output(6,eq,13) output(6,eq,0) output(6,eq,66) output(6,eq,77) output(13,eq,0) output(13,eq,66) output(13,eq,77) output(3,eq,21) output(3,eq,83) output(3,eq,56) output(0,eq,66) output(0,eq,77) output(21,eq,83) output(21,eq,56) output(66,eq,77) output(83,eq,56)
Optimization: 27 4
Answer: 7
preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(11))),5) preference(1,(1,6),1,for(atom(hasPrice(2))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasOftenSold(2))),7) preference(1,(1,14),1,for(atom(hasPrice(1))),7) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,83) output(66,better,77) output(66,better,56) output(77,better,56) output(83,better,77) output(83,better,56)
Optimization: 0 11
Progression : 0 [ 1;11] (Error: 10)
Answer: 8
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,3),1,for(atom(hasPrice(1))),1) preference(1,(1,5),1,for(atom(hasPrice(0))),9) preference(1,(1,7),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,8),1,for(atom(hasOiliness(1))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,11),1,for(atom(hasPrice(2))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),6) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,83) output(66,better,77) output(66,better,56) output(77,better,56) output(83,better,77) output(83,better,56)
Optimization: 0 10
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,3),1,for(atom(hasPrice(1))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),8) preference(1,(1,7),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,8),1,for(atom(hasOiliness(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,11),1,for(atom(hasPrice(2))),8) preference(1,(1,13),1,for(atom(hasPrice(0))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),6) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,83) output(66,better,77) output(66,better,56) output(77,better,56) output(83,better,77) output(83,better,56)
Optimization: 0 9
Progression : 0 [2;9] (Error: 3.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.143 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 9+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 298.267s (Solving: 283.04s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 1146.582s
Threads      : 4        (Winner: 4)

Choices      : 4935177  (Domain: 788)
Conflicts    : 828049   (Analyzed: 828047)
Restarts     : 967      (Average: 856.31 Last: 93189)
Model-Level  : 1046.1  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 830042   (Deleted: 724749)
  Binary     : 320      (Ratio:   0.04%)
  Ternary    : 152      (Ratio:   0.02%)
  Conflict   : 828047   (Average Length: 1852.7 Ratio:  99.76%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 1995     (Average Length:  172.9 Ratio:   0.24%) 
  Distributed: 665      (Ratio:   0.08% Average LBD: 3.34) 
  Integrated : 1995     (Ratio: 300.00% Unit: 4 Average Jumps: 258.25)
Backjumps    : 828047   (Average:  3.62 Max: 4324 Sum: 2996264)
  Executed   : 828046   (Average:  3.62 Max: 4324 Sum: 2996238 Ratio: 100.00%)
  Bounded    : 1        (Average: 26.00 Max:  26 Sum:     26 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(10)) ; 
  10 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMinorGrp(11)) ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasPrice(2)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasPrice(0)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasPrice(1)) ; 
  9 :: atom(hasPrice(0)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasPrice(2)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasPrice(1)) ; 
  8 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  8 :: atom(hasPrice(2)) ; 
  9 :: atom(hasPrice(0)) ; 
  6 :: atom(hasMinorGrp(6)) 
}.
