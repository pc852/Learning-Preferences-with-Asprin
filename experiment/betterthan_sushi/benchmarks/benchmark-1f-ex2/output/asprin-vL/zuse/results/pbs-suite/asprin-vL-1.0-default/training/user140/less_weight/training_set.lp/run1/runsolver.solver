asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(11,eq,20) output(11,eq,24) output(11,eq,68) output(11,eq,5) output(11,eq,16) output(11,eq,8) output(11,eq,61) output(11,eq,50) output(11,eq,7) output(20,eq,24) output(20,eq,68) output(20,eq,5) output(20,eq,16) output(20,eq,8) output(20,eq,61) output(20,eq,50) output(20,eq,7) output(24,eq,68) output(24,eq,5) output(24,eq,16) output(24,eq,8) output(24,eq,61) output(24,eq,50) output(24,eq,7) output(68,eq,5) output(68,eq,16) output(68,eq,8) output(68,eq,61) output(68,eq,50) output(68,eq,7) output(5,eq,16) output(5,eq,8) output(5,eq,61) output(5,eq,50) output(5,eq,7) output(16,eq,8) output(16,eq,61) output(16,eq,50) output(16,eq,7) output(8,eq,61) output(8,eq,50) output(8,eq,7) output(61,eq,50) output(61,eq,7) output(50,eq,7)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(61,better,50) output(5,better,16) output(5,better,50) output(8,better,50) output(11,better,16) output(11,better,50) output(20,better,16) output(20,better,50) output(24,better,16) output(24,better,50) output(68,better,16) output(68,better,50) output(16,worse,8) output(16,worse,61) output(16,worse,7) output(50,worse,7) output(11,eq,20) output(11,eq,24) output(11,eq,68) output(11,eq,5) output(11,eq,8) output(11,eq,61) output(11,eq,7) output(20,eq,24) output(20,eq,68) output(20,eq,5) output(20,eq,8) output(20,eq,61) output(20,eq,7) output(24,eq,68) output(24,eq,5) output(24,eq,8) output(24,eq,61) output(24,eq,7) output(68,eq,5) output(68,eq,8) output(68,eq,61) output(68,eq,7) output(5,eq,8) output(5,eq,61) output(5,eq,7) output(16,eq,50) output(8,eq,61) output(8,eq,7) output(61,eq,7)
Optimization: 33 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(61,better,50) output(61,better,7) output(5,better,16) output(5,better,50) output(5,better,7) output(8,better,50) output(8,better,7) output(11,better,16) output(11,better,50) output(11,better,7) output(20,better,16) output(20,better,50) output(20,better,7) output(24,better,16) output(24,better,50) output(24,better,7) output(68,better,16) output(68,better,50) output(68,better,7) output(16,worse,8) output(16,worse,61) output(11,eq,20) output(11,eq,24) output(11,eq,68) output(11,eq,5) output(11,eq,8) output(11,eq,61) output(20,eq,24) output(20,eq,68) output(20,eq,5) output(20,eq,8) output(20,eq,61) output(24,eq,68) output(24,eq,5) output(24,eq,8) output(24,eq,61) output(68,eq,5) output(68,eq,8) output(68,eq,61) output(5,eq,8) output(5,eq,61) output(16,eq,50) output(16,eq,7) output(8,eq,61) output(50,eq,7)
Optimization: 26 2
Answer: 4
preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,1),1,for(atom(hasStyle(0))),10) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(5,better,16) output(5,better,8) output(5,better,61) output(5,better,50) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,50) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,50) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,50) output(68,better,16) output(68,better,8) output(68,better,61) output(68,better,50) output(61,worse,7) output(8,worse,7) output(16,worse,7) output(50,worse,7) output(11,eq,20) output(11,eq,24) output(11,eq,68) output(11,eq,5) output(11,eq,7) output(20,eq,24) output(20,eq,68) output(20,eq,5) output(20,eq,7) output(24,eq,68) output(24,eq,5) output(24,eq,7) output(68,eq,5) output(68,eq,7) output(5,eq,7) output(16,eq,8) output(16,eq,61) output(16,eq,50) output(8,eq,61) output(8,eq,50) output(61,eq,50)
Optimization: 25 4
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(61,better,50) output(61,better,7) output(5,better,16) output(5,better,8) output(5,better,50) output(5,better,7) output(11,better,16) output(11,better,8) output(11,better,50) output(11,better,7) output(20,better,16) output(20,better,8) output(20,better,50) output(20,better,7) output(24,better,16) output(24,better,8) output(24,better,50) output(24,better,7) output(68,better,16) output(68,better,8) output(68,better,50) output(68,better,7) output(8,worse,61) output(16,worse,61) output(11,eq,20) output(11,eq,24) output(11,eq,68) output(11,eq,5) output(11,eq,61) output(20,eq,24) output(20,eq,68) output(20,eq,5) output(20,eq,61) output(24,eq,68) output(24,eq,5) output(24,eq,61) output(68,eq,5) output(68,eq,61) output(5,eq,61) output(16,eq,8) output(16,eq,50) output(16,eq,7) output(8,eq,50) output(8,eq,7) output(50,eq,7)
Optimization: 23 3
Answer: 6
preference(1,(1,1),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,3),1,for(atom(hasOiliness(3))),7) preference(1,(1,4),1,for(atom(hasPrice(2))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,10),1,for(atom(hasStyle(0))),7) preference(1,(1,11),1,for(atom(hasPrice(3))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),1) preference(1,less(weight)) output(5,better,8) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,7) output(20,better,5) output(20,better,8) output(20,better,61) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,8) output(68,better,61) output(61,worse,50) output(61,worse,7) output(5,worse,16) output(5,worse,61) output(5,worse,50) output(5,worse,7) output(8,worse,61) output(8,worse,50) output(8,worse,7) output(11,worse,50) output(16,worse,50) output(20,worse,24) output(20,worse,16) output(20,worse,50) output(24,worse,50) output(68,worse,16) output(68,worse,50) output(20,eq,68) output(20,eq,7) output(68,eq,7)
Optimization: 20 10
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,3),1,for(atom(hasOiliness(3))),7) preference(1,(1,4),1,for(atom(hasPrice(2))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,10),1,for(atom(hasStyle(0))),7) preference(1,(1,11),1,for(atom(hasPrice(3))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),1) preference(1,less(weight)) output(5,better,8) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,7) output(20,better,5) output(20,better,8) output(20,better,61) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,8) output(68,better,61) output(68,better,7) output(61,worse,50) output(61,worse,7) output(5,worse,16) output(5,worse,61) output(5,worse,50) output(5,worse,7) output(8,worse,61) output(8,worse,50) output(8,worse,7) output(11,worse,50) output(16,worse,50) output(20,worse,24) output(20,worse,16) output(20,worse,50) output(24,worse,50) output(68,worse,16) output(68,worse,50) output(20,eq,68)
Optimization: 18 10
Answer: 8
preference(1,(1,1),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,3),1,for(atom(hasOiliness(3))),7) preference(1,(1,4),1,for(atom(hasPrice(2))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,7),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,10),1,for(atom(hasStyle(0))),7) preference(1,(1,11),1,for(atom(hasPrice(3))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),1) preference(1,less(weight)) output(61,better,7) output(5,better,8) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,7) output(20,better,5) output(20,better,8) output(20,better,61) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,8) output(68,better,61) output(68,better,7) output(61,worse,50) output(5,worse,16) output(5,worse,61) output(5,worse,50) output(8,worse,61) output(8,worse,50) output(8,worse,7) output(11,worse,50) output(16,worse,50) output(20,worse,24) output(20,worse,16) output(20,worse,50) output(24,worse,50) output(68,worse,16) output(68,worse,50) output(20,eq,68) output(5,eq,7)
Optimization: 17 10
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,4),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,9),1,for(neg(atom(hasOftenSold(3)))),2) preference(1,(1,2),1,for(atom(hasOiliness(0))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,6),1,for(atom(hasOftenSold(0))),3) preference(1,(1,8),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,10),1,for(atom(hasOftenSold(2))),5) preference(1,(1,11),1,for(atom(hasPrice(3))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,13),1,for(atom(hasOiliness(3))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),3) preference(1,less(weight)) output(61,better,7) output(5,better,8) output(5,better,7) output(8,better,7) output(11,better,20) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,7) output(20,better,5) output(20,better,8) output(20,better,61) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,8) output(68,better,61) output(68,better,7) output(61,worse,50) output(5,worse,16) output(5,worse,50) output(8,worse,61) output(8,worse,50) output(16,worse,50) output(20,worse,24) output(20,worse,68) output(20,worse,16) output(20,worse,50) output(68,worse,16) output(68,worse,50) output(11,eq,24) output(11,eq,50) output(24,eq,50) output(5,eq,61)
Optimization: 16 14
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,3),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(2)))),3) preference(1,(1,9),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,1),1,for(atom(hasOiliness(2))),4) preference(1,(1,4),1,for(atom(hasOiliness(0))),10) preference(1,(1,6),1,for(atom(hasOftenSold(0))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(9))),8) preference(1,(1,8),1,for(atom(hasOiliness(3))),7) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,11),1,for(atom(hasPrice(3))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,13),1,for(atom(hasOftenSold(2))),2) preference(1,(1,14),1,for(atom(hasOftenSold(1))),1) preference(1,less(weight)) output(61,better,7) output(5,better,8) output(5,better,7) output(8,better,7) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,7) output(20,better,24) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,8) output(68,better,61) output(68,better,7) output(61,worse,50) output(5,worse,16) output(5,worse,50) output(8,worse,61) output(8,worse,50) output(11,worse,50) output(16,worse,50) output(20,worse,50) output(24,worse,50) output(68,worse,50) output(11,eq,20) output(68,eq,16) output(5,eq,61)
Optimization: 13 14
Answer: 11
preference(1,(1,3),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(2)))),3) preference(1,(1,9),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,1),1,for(atom(hasOiliness(2))),4) preference(1,(1,2),1,for(atom(hasStyle(0))),10) preference(1,(1,4),1,for(atom(hasOiliness(0))),10) preference(1,(1,6),1,for(atom(hasOftenSold(0))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(9))),8) preference(1,(1,8),1,for(atom(hasOiliness(3))),7) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,11),1,for(atom(hasPrice(3))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,13),1,for(atom(hasOftenSold(2))),2) preference(1,(1,14),1,for(atom(hasOftenSold(1))),1) preference(1,less(weight)) output(61,better,7) output(5,better,8) output(5,better,61) output(5,better,7) output(8,better,7) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,7) output(20,better,24) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,8) output(68,better,61) output(68,better,7) output(61,worse,50) output(5,worse,16) output(5,worse,50) output(8,worse,61) output(8,worse,50) output(11,worse,50) output(16,worse,50) output(20,worse,50) output(24,worse,50) output(68,worse,50) output(11,eq,20) output(68,eq,16)
Optimization: 12 14
Answer: 12
preference(1,(1,2),1,for(neg(atom(hasStyle(1)))),9) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(2)))),3) preference(1,(1,9),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,1),1,for(atom(hasOiliness(2))),4) preference(1,(1,3),1,for(atom(hasStyle(0))),6) preference(1,(1,4),1,for(atom(hasOiliness(0))),10) preference(1,(1,6),1,for(atom(hasOftenSold(0))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(9))),8) preference(1,(1,8),1,for(atom(hasOiliness(3))),7) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,11),1,for(atom(hasPrice(3))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,13),1,for(atom(hasOftenSold(2))),2) preference(1,(1,14),1,for(atom(hasOftenSold(1))),1) preference(1,less(weight)) output(61,better,7) output(5,better,8) output(5,better,61) output(5,better,7) output(8,better,61) output(8,better,7) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,7) output(20,better,24) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,8) output(68,better,61) output(68,better,7) output(61,worse,50) output(5,worse,16) output(5,worse,50) output(8,worse,50) output(11,worse,50) output(16,worse,50) output(20,worse,50) output(24,worse,50) output(68,worse,50) output(11,eq,20) output(68,eq,16)
Optimization: 11 14
Answer: 13
preference(1,(1,2),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,3),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(2)))),3) preference(1,(1,9),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,1),1,for(atom(hasOiliness(2))),4) preference(1,(1,4),1,for(atom(hasOiliness(0))),10) preference(1,(1,6),1,for(atom(hasOftenSold(0))),2) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,8),1,for(atom(hasOiliness(3))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,11),1,for(atom(hasPrice(3))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(9))),6) preference(1,(1,13),1,for(atom(hasOftenSold(2))),1) preference(1,(1,14),1,for(atom(hasOftenSold(1))),1) preference(1,less(weight)) output(61,better,7) output(5,better,8) output(5,better,7) output(8,better,7) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,50) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,7) output(20,better,24) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,16) output(68,better,8) output(68,better,61) output(68,better,7) output(61,worse,50) output(5,worse,16) output(5,worse,50) output(8,worse,61) output(8,worse,50) output(16,worse,50) output(24,worse,50) output(68,worse,50) output(20,eq,50) output(5,eq,61)
Optimization: 10 14
Answer: 14
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,1),1,for(atom(hasOftenSold(0))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,3),1,for(atom(hasStyle(0))),4) preference(1,(1,4),1,for(atom(hasOiliness(0))),10) preference(1,(1,5),1,for(atom(hasOftenSold(1))),4) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,8),1,for(atom(hasOftenSold(2))),4) preference(1,(1,9),1,for(atom(hasMinorGrp(9))),4) preference(1,(1,10),1,for(atom(hasOiliness(3))),4) preference(1,(1,11),1,for(atom(hasPrice(3))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),3) preference(1,less(weight)) output(61,better,7) output(5,better,16) output(5,better,8) output(5,better,61) output(5,better,7) output(8,better,7) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,50) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,7) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,16) output(68,better,8) output(68,better,61) output(68,better,7) output(61,worse,50) output(5,worse,50) output(8,worse,61) output(8,worse,50) output(16,worse,50) output(68,worse,50) output(20,eq,24) output(20,eq,50) output(24,eq,50)
Optimization: 9 14
Answer: 15
preference(1,(1,1),1,for(neg(atom(hasStyle(1)))),3) preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,10),1,for(neg(atom(hasOiliness(2)))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,4),1,for(atom(hasOiliness(3))),1) preference(1,(1,5),1,for(atom(hasOiliness(0))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,7),1,for(atom(hasPrice(1))),8) preference(1,(1,8),1,for(atom(hasStyle(0))),4) preference(1,(1,9),1,for(atom(hasPrice(3))),1) preference(1,(1,11),1,for(atom(hasOiliness(1))),3) preference(1,(1,12),1,for(atom(hasOftenSold(1))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(5))),1) preference(1,less(weight)) output(61,better,50) output(61,better,7) output(5,better,16) output(5,better,8) output(5,better,61) output(5,better,50) output(5,better,7) output(8,better,61) output(8,better,50) output(8,better,7) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,50) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,50) output(16,better,7) output(20,better,24) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,50) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,50) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,16) output(68,better,8) output(68,better,61) output(68,better,50) output(68,better,7)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 16
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(3)))),1) preference(1,(1,2),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,3),1,for(atom(hasOiliness(0))),10) preference(1,(1,4),1,for(atom(hasOiliness(3))),10) preference(1,(1,5),1,for(atom(hasOftenSold(0))),8) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,9),1,for(atom(hasOftenSold(2))),2) preference(1,(1,10),1,for(atom(hasOiliness(1))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,12),1,for(atom(hasOftenSold(1))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),8) preference(1,less(weight)) output(61,better,50) output(61,better,7) output(5,better,16) output(5,better,8) output(5,better,61) output(5,better,50) output(5,better,7) output(8,better,61) output(8,better,50) output(8,better,7) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,50) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,50) output(16,better,7) output(20,better,24) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,50) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,50) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,16) output(68,better,8) output(68,better,61) output(68,better,50) output(68,better,7)
Optimization: 0 13
Answer: 17
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(2)))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,4),1,for(atom(hasPrice(3))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(9))),8) preference(1,(1,10),1,for(atom(hasOiliness(1))),5) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,12),1,for(atom(hasOftenSold(1))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,14),1,for(atom(hasOiliness(3))),3) preference(1,less(weight)) output(61,better,50) output(61,better,7) output(5,better,16) output(5,better,8) output(5,better,61) output(5,better,50) output(5,better,7) output(8,better,61) output(8,better,50) output(8,better,7) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,50) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,50) output(16,better,7) output(20,better,24) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,50) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,50) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,16) output(68,better,8) output(68,better,61) output(68,better,50) output(68,better,7)
Optimization: 0 12
Answer: 18
preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,13),1,for(neg(atom(hasOiliness(2)))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,3),1,for(atom(hasOftenSold(2))),1) preference(1,(1,4),1,for(atom(hasOftenSold(0))),1) preference(1,(1,6),1,for(atom(hasOftenSold(1))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,10),1,for(atom(hasOiliness(0))),5) preference(1,(1,11),1,for(atom(hasStyle(0))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),8) preference(1,less(weight)) output(61,better,50) output(61,better,7) output(5,better,16) output(5,better,8) output(5,better,61) output(5,better,50) output(5,better,7) output(8,better,61) output(8,better,50) output(8,better,7) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,50) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,50) output(16,better,7) output(20,better,24) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,50) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,50) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,16) output(68,better,8) output(68,better,61) output(68,better,50) output(68,better,7)
Optimization: 0 11
Answer: 19
preference(1,(1,2),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,3),1,for(atom(hasOiliness(1))),7) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,6),1,for(atom(hasPrice(3))),6) preference(1,(1,9),1,for(atom(hasPrice(2))),5) preference(1,(1,10),1,for(atom(hasOiliness(0))),5) preference(1,(1,11),1,for(atom(hasOiliness(3))),8) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),8) preference(1,less(weight)) output(61,better,50) output(61,better,7) output(5,better,16) output(5,better,8) output(5,better,61) output(5,better,50) output(5,better,7) output(8,better,61) output(8,better,50) output(8,better,7) output(11,better,20) output(11,better,24) output(11,better,68) output(11,better,5) output(11,better,16) output(11,better,8) output(11,better,61) output(11,better,50) output(11,better,7) output(16,better,8) output(16,better,61) output(16,better,50) output(16,better,7) output(20,better,24) output(20,better,68) output(20,better,5) output(20,better,16) output(20,better,8) output(20,better,61) output(20,better,50) output(20,better,7) output(24,better,68) output(24,better,5) output(24,better,16) output(24,better,8) output(24,better,61) output(24,better,50) output(24,better,7) output(50,better,7) output(68,better,5) output(68,better,16) output(68,better,8) output(68,better,61) output(68,better,50) output(68,better,7)
Optimization: 0 10
Progression : 0 [ 2;10] (Error: 4)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.273 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 19+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 598.349s (Solving: 583.23s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 2346.940s
Threads      : 4        (Winner: 4)

Choices      : 9140812  (Domain: 43350)
Conflicts    : 1812609  (Analyzed: 1812607)
Restarts     : 1762     (Average: 1028.72 Last: 24151)
Model-Level  : 1588.3  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1815040  (Deleted: 1692356)
  Binary     : 300      (Ratio:   0.02%)
  Ternary    : 139      (Ratio:   0.01%)
  Conflict   : 1812607  (Average Length: 1991.5 Ratio:  99.87%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 2433     (Average Length:  277.9 Ratio:   0.13%) 
  Distributed: 811      (Ratio:   0.04% Average LBD: 3.36) 
  Integrated : 2433     (Ratio: 300.00% Unit: 6 Average Jumps: 380.33)
Backjumps    : 1812607  (Average:  3.04 Max: 3418 Sum: 5503423)
  Executed   : 1812606  (Average:  3.04 Max: 3418 Sum: 5503397 Ratio: 100.00%)
  Bounded    : 1        (Average: 26.00 Max:  26 Sum:     26 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasStyle(0)) ; 
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPrice(2))  ; 
  7 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasPrice(2)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasStyle(0)) ; 
  4 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPrice(2))  ; 
  7 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasPrice(2)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasStyle(0)) ; 
  4 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPrice(2))  ; 
  7 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasPrice(2)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  7 :: atom(hasStyle(0)) ; 
  4 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPrice(2))  ; 
  10 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(9)) ; 
  7 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasMajorGrp(1)) ; 
  2 :: not atom(hasOftenSold(3))  ; 
  5 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(2)) ; 
  7 :: not atom(hasStyle(1))  ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOiliness(0)) ; 
  3 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMinorGrp(9)) ; 
  7 :: atom(hasOiliness(3)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  6 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(2)) ; 
  10 :: atom(hasStyle(0)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOiliness(0)) ; 
  3 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMinorGrp(9)) ; 
  7 :: atom(hasOiliness(3)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  6 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(2)) ; 
  9 :: not atom(hasStyle(1))  ; 
  6 :: atom(hasStyle(0)) ; 
  10 :: atom(hasOiliness(0)) ; 
  3 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMinorGrp(9)) ; 
  7 :: atom(hasOiliness(3)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  6 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(2)) ; 
  7 :: not atom(hasStyle(1))  ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOiliness(0)) ; 
  3 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasOiliness(3)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  2 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasPrice(3)) ; 
  6 :: atom(hasMinorGrp(9)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  4 :: atom(hasStyle(0)) ; 
  10 :: atom(hasOiliness(0)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  7 :: not atom(hasStyle(1))  ; 
  4 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasMinorGrp(9)) ; 
  4 :: atom(hasOiliness(3)) ; 
  4 :: atom(hasPrice(3)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: not atom(hasStyle(1))  ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasPrice(1)) ; 
  4 :: atom(hasStyle(0)) ; 
  1 :: atom(hasPrice(3)) ; 
  3 :: not atom(hasOiliness(2))  ; 
  3 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasMinorGrp(3))  ; 
  7 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasOiliness(3)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  7 :: not atom(hasStyle(1))  ; 
  8 :: atom(hasMinorGrp(9)) ; 
  1 :: not atom(hasMinorGrp(2))  ; 
  5 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasStyle(0)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  6 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOiliness(2))  ; 
  7 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasPrice(3)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  5 :: atom(hasPrice(2)) ; 
  5 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasOiliness(3)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasMinorGrp(9)) 
}.
