asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(19,eq,36) output(19,eq,11) output(19,eq,13) output(19,eq,6) output(19,eq,22) output(19,eq,64) output(19,eq,10) output(19,eq,1) output(19,eq,17) output(36,eq,11) output(36,eq,13) output(36,eq,6) output(36,eq,22) output(36,eq,64) output(36,eq,10) output(36,eq,1) output(36,eq,17) output(11,eq,13) output(11,eq,6) output(11,eq,22) output(11,eq,64) output(11,eq,10) output(11,eq,1) output(11,eq,17) output(13,eq,6) output(13,eq,22) output(13,eq,64) output(13,eq,10) output(13,eq,1) output(13,eq,17) output(6,eq,22) output(6,eq,64) output(6,eq,10) output(6,eq,1) output(6,eq,17) output(22,eq,64) output(22,eq,10) output(22,eq,1) output(22,eq,17) output(64,eq,10) output(64,eq,1) output(64,eq,17) output(10,eq,1) output(10,eq,17) output(1,eq,17)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,17) output(10,better,17) output(11,better,22) output(11,better,17) output(13,better,22) output(13,better,17) output(19,better,22) output(19,better,17) output(36,better,22) output(36,better,17) output(64,better,17) output(22,worse,64) output(22,worse,10) output(22,worse,1) output(19,eq,36) output(19,eq,11) output(19,eq,13) output(19,eq,6) output(19,eq,64) output(19,eq,10) output(19,eq,1) output(36,eq,11) output(36,eq,13) output(36,eq,6) output(36,eq,64) output(36,eq,10) output(36,eq,1) output(11,eq,13) output(11,eq,6) output(11,eq,64) output(11,eq,10) output(11,eq,1) output(13,eq,6) output(13,eq,64) output(13,eq,10) output(13,eq,1) output(6,eq,64) output(6,eq,10) output(6,eq,1) output(22,eq,17) output(64,eq,10) output(64,eq,1) output(10,eq,1)
Optimization: 32 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,17) output(10,better,17) output(11,better,22) output(11,better,64) output(11,better,17) output(13,better,22) output(13,better,64) output(13,better,17) output(19,better,22) output(19,better,64) output(19,better,17) output(36,better,22) output(36,better,64) output(36,better,17) output(22,worse,10) output(22,worse,1) output(64,worse,10) output(64,worse,1) output(19,eq,36) output(19,eq,11) output(19,eq,13) output(19,eq,6) output(19,eq,10) output(19,eq,1) output(36,eq,11) output(36,eq,13) output(36,eq,6) output(36,eq,10) output(36,eq,1) output(11,eq,13) output(11,eq,6) output(11,eq,10) output(11,eq,1) output(13,eq,6) output(13,eq,10) output(13,eq,1) output(6,eq,10) output(6,eq,1) output(22,eq,64) output(22,eq,17) output(64,eq,17) output(10,eq,1)
Optimization: 28 2
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(6,better,64) output(6,better,10) output(6,better,1) output(11,better,64) output(11,better,10) output(11,better,1) output(13,better,64) output(13,better,10) output(13,better,1) output(19,better,64) output(19,better,10) output(19,better,1) output(22,better,64) output(22,better,10) output(22,better,1) output(36,better,64) output(36,better,10) output(36,better,1) output(1,worse,17) output(10,worse,17) output(64,worse,17) output(19,eq,36) output(19,eq,11) output(19,eq,13) output(19,eq,6) output(19,eq,22) output(19,eq,17) output(36,eq,11) output(36,eq,13) output(36,eq,6) output(36,eq,22) output(36,eq,17) output(11,eq,13) output(11,eq,6) output(11,eq,22) output(11,eq,17) output(13,eq,6) output(13,eq,22) output(13,eq,17) output(6,eq,22) output(6,eq,17) output(22,eq,17) output(64,eq,10) output(64,eq,1) output(10,eq,1)
Optimization: 27 3
Answer: 5
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(3))),10) preference(1,less(weight)) output(11,better,6) output(11,better,64) output(11,better,10) output(11,better,1) output(13,better,6) output(13,better,64) output(13,better,10) output(13,better,1) output(19,better,6) output(19,better,64) output(19,better,10) output(19,better,1) output(22,better,64) output(22,better,10) output(22,better,1) output(36,better,6) output(36,better,64) output(36,better,10) output(36,better,1) output(1,worse,17) output(6,worse,22) output(6,worse,17) output(10,worse,17) output(64,worse,17) output(19,eq,36) output(19,eq,11) output(19,eq,13) output(19,eq,22) output(19,eq,17) output(36,eq,11) output(36,eq,13) output(36,eq,22) output(36,eq,17) output(11,eq,13) output(11,eq,22) output(11,eq,17) output(13,eq,22) output(13,eq,17) output(6,eq,64) output(6,eq,10) output(6,eq,1) output(22,eq,17) output(64,eq,10) output(64,eq,1) output(10,eq,1)
Optimization: 26 4
Answer: 6
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,17) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,17) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,17) output(19,better,22) output(19,better,64) output(19,better,10) output(19,better,17) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,17) output(10,worse,1) output(22,worse,1) output(64,worse,1) output(19,eq,36) output(19,eq,11) output(19,eq,13) output(19,eq,6) output(19,eq,1) output(36,eq,11) output(36,eq,13) output(36,eq,6) output(36,eq,1) output(11,eq,13) output(11,eq,6) output(11,eq,1) output(13,eq,6) output(13,eq,1) output(6,eq,1) output(22,eq,64) output(22,eq,10) output(22,eq,17) output(64,eq,10) output(64,eq,17) output(10,eq,17)
Optimization: 24 3
Answer: 7
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,12),1,for(atom(hasOftenSold(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(6,better,64) output(6,better,10) output(6,better,1) output(11,better,6) output(11,better,64) output(11,better,10) output(11,better,1) output(13,better,6) output(13,better,64) output(13,better,10) output(13,better,1) output(19,better,6) output(19,better,64) output(19,better,10) output(19,better,1) output(22,better,64) output(22,better,10) output(22,better,1) output(36,better,6) output(36,better,64) output(36,better,10) output(36,better,1) output(1,worse,17) output(6,worse,22) output(6,worse,17) output(10,worse,17) output(64,worse,17) output(19,eq,36) output(19,eq,11) output(19,eq,13) output(19,eq,22) output(19,eq,17) output(36,eq,11) output(36,eq,13) output(36,eq,22) output(36,eq,17) output(11,eq,13) output(11,eq,22) output(11,eq,17) output(13,eq,22) output(13,eq,17) output(22,eq,17) output(64,eq,10) output(64,eq,1) output(10,eq,1)
Optimization: 23 5
Answer: 8
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,5),1,for(atom(hasOftenSold(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,12),1,for(atom(hasOftenSold(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),10) preference(1,less(weight)) output(6,better,64) output(6,better,10) output(6,better,1) output(11,better,6) output(11,better,64) output(11,better,10) output(11,better,1) output(13,better,6) output(13,better,64) output(13,better,10) output(13,better,1) output(19,better,36) output(19,better,6) output(19,better,64) output(19,better,10) output(19,better,1) output(22,better,64) output(22,better,10) output(22,better,1) output(36,better,6) output(36,better,64) output(36,better,10) output(36,better,1) output(1,worse,17) output(6,worse,22) output(6,worse,17) output(10,worse,17) output(36,worse,11) output(36,worse,13) output(36,worse,22) output(36,worse,17) output(64,worse,17) output(19,eq,11) output(19,eq,13) output(19,eq,22) output(19,eq,17) output(11,eq,13) output(11,eq,22) output(11,eq,17) output(13,eq,22) output(13,eq,17) output(22,eq,17) output(64,eq,10) output(64,eq,1) output(10,eq,1)
Optimization: 22 7
Answer: 9
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,3),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),9) preference(1,less(weight)) output(6,better,64) output(6,better,10) output(6,better,1) output(11,better,6) output(11,better,64) output(11,better,10) output(11,better,1) output(13,better,6) output(13,better,64) output(13,better,10) output(13,better,1) output(19,better,6) output(19,better,64) output(19,better,10) output(19,better,1) output(22,better,64) output(22,better,10) output(22,better,1) output(36,better,6) output(36,better,64) output(36,better,10) output(36,better,1) output(64,better,10) output(64,better,1) output(1,worse,17) output(6,worse,22) output(6,worse,17) output(10,worse,17) output(19,worse,11) output(19,worse,13) output(19,worse,22) output(19,worse,17) output(36,worse,11) output(36,worse,13) output(36,worse,22) output(36,worse,17) output(64,worse,17) output(19,eq,36) output(11,eq,13) output(11,eq,22) output(11,eq,17) output(13,eq,22) output(13,eq,17) output(22,eq,17) output(10,eq,1)
Optimization: 21 9
Answer: 10
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,1),1,for(atom(hasOftenSold(2))),1) preference(1,(1,3),1,for(atom(hasOiliness(3))),10) preference(1,(1,5),1,for(atom(hasOftenSold(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),9) preference(1,less(weight)) output(6,better,64) output(6,better,10) output(6,better,1) output(11,better,6) output(11,better,64) output(11,better,10) output(11,better,1) output(13,better,6) output(13,better,64) output(13,better,10) output(13,better,1) output(19,better,36) output(19,better,6) output(19,better,64) output(19,better,10) output(19,better,1) output(22,better,64) output(22,better,10) output(22,better,1) output(36,better,6) output(36,better,64) output(36,better,10) output(36,better,1) output(64,better,10) output(64,better,1) output(1,worse,17) output(6,worse,22) output(6,worse,17) output(10,worse,17) output(11,worse,13) output(11,worse,22) output(11,worse,17) output(19,worse,13) output(19,worse,22) output(19,worse,17) output(36,worse,11) output(36,worse,13) output(36,worse,22) output(36,worse,17) output(64,worse,17) output(19,eq,11) output(13,eq,22) output(13,eq,17) output(22,eq,17) output(10,eq,1)
Optimization: 20 12
Answer: 11
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,1),1,for(atom(hasOftenSold(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,3),1,for(atom(hasOiliness(3))),10) preference(1,(1,5),1,for(atom(hasOftenSold(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasStyle(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),9) preference(1,less(weight)) output(6,better,64) output(6,better,10) output(6,better,1) output(10,better,1) output(11,better,6) output(11,better,64) output(11,better,10) output(11,better,1) output(13,better,6) output(13,better,64) output(13,better,10) output(13,better,1) output(19,better,36) output(19,better,6) output(19,better,64) output(19,better,10) output(19,better,1) output(22,better,64) output(22,better,10) output(22,better,1) output(36,better,6) output(36,better,64) output(36,better,10) output(36,better,1) output(64,better,10) output(64,better,1) output(1,worse,17) output(6,worse,22) output(6,worse,17) output(10,worse,17) output(11,worse,13) output(11,worse,22) output(11,worse,17) output(19,worse,13) output(19,worse,22) output(19,worse,17) output(36,worse,11) output(36,worse,13) output(36,worse,22) output(36,worse,17) output(64,worse,17) output(19,eq,11) output(13,eq,22) output(13,eq,17) output(22,eq,17)
Optimization: 19 13
Answer: 12
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,1),1,for(atom(hasOftenSold(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,3),1,for(atom(hasOiliness(3))),10) preference(1,(1,4),1,for(atom(hasOftenSold(1))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasStyle(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),9) preference(1,less(weight)) output(6,better,64) output(6,better,10) output(6,better,1) output(10,better,1) output(11,better,13) output(11,better,6) output(11,better,64) output(11,better,10) output(11,better,1) output(13,better,6) output(13,better,64) output(13,better,10) output(13,better,1) output(19,better,36) output(19,better,6) output(19,better,64) output(19,better,10) output(19,better,1) output(22,better,64) output(22,better,10) output(22,better,1) output(36,better,6) output(36,better,64) output(36,better,10) output(36,better,1) output(64,better,10) output(64,better,1) output(1,worse,17) output(6,worse,22) output(6,worse,17) output(10,worse,17) output(11,worse,22) output(11,worse,17) output(13,worse,22) output(13,worse,17) output(19,worse,11) output(19,worse,22) output(19,worse,17) output(36,worse,11) output(36,worse,13) output(36,worse,22) output(36,worse,17) output(64,worse,17) output(19,eq,13) output(22,eq,17)
Optimization: 18 14
Answer: 13
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,1),1,for(atom(hasOftenSold(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,3),1,for(atom(hasOiliness(3))),10) preference(1,(1,4),1,for(atom(hasOftenSold(1))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasStyle(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),9) preference(1,less(weight)) output(6,better,64) output(6,better,10) output(6,better,1) output(10,better,1) output(11,better,13) output(11,better,6) output(11,better,64) output(11,better,10) output(11,better,1) output(13,better,64) output(13,better,10) output(13,better,1) output(19,better,36) output(19,better,13) output(19,better,6) output(19,better,64) output(19,better,10) output(19,better,1) output(22,better,64) output(22,better,10) output(22,better,1) output(36,better,13) output(36,better,6) output(36,better,64) output(36,better,10) output(36,better,1) output(64,better,10) output(64,better,1) output(1,worse,17) output(6,worse,22) output(6,worse,17) output(10,worse,17) output(11,worse,22) output(11,worse,17) output(13,worse,22) output(13,worse,17) output(19,worse,11) output(19,worse,22) output(19,worse,17) output(36,worse,11) output(36,worse,22) output(36,worse,17) output(64,worse,17) output(13,eq,6) output(22,eq,17)
Optimization: 17 14
Answer: 14
preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),9) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,12),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,1),1,for(atom(hasPrice(1))),8) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,4),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasOiliness(1))),2) preference(1,(1,6),1,for(atom(hasPrice(3))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,10),1,for(atom(hasOiliness(2))),4) preference(1,(1,13),1,for(atom(hasOftenSold(0))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),2) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,17) output(11,better,13) output(11,better,6) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,1) output(11,better,17) output(13,better,6) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,17) output(19,better,10) output(19,better,17) output(22,better,64) output(22,better,10) output(22,better,17) output(36,better,13) output(36,better,6) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,1) output(36,better,17) output(64,better,10) output(64,better,17) output(6,worse,1) output(10,worse,1) output(19,worse,36) output(19,worse,11) output(19,worse,13) output(19,worse,6) output(19,worse,22) output(19,worse,64) output(19,worse,1) output(22,worse,1) output(64,worse,1) output(36,eq,11) output(13,eq,1) output(10,eq,17)
Optimization: 14 14
Answer: 15
preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),9) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,12),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,1),1,for(atom(hasPrice(1))),8) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,4),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasOiliness(1))),2) preference(1,(1,6),1,for(atom(hasPrice(3))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,10),1,for(atom(hasOiliness(2))),4) preference(1,(1,13),1,for(atom(hasOiliness(0))),2) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),8) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,1) output(6,better,17) output(11,better,13) output(11,better,6) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,1) output(11,better,17) output(13,better,6) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,1) output(13,better,17) output(19,better,10) output(19,better,17) output(22,better,64) output(22,better,10) output(22,better,17) output(36,better,13) output(36,better,6) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,1) output(36,better,17) output(64,better,10) output(64,better,17) output(10,worse,1) output(19,worse,36) output(19,worse,11) output(19,worse,13) output(19,worse,6) output(19,worse,22) output(19,worse,64) output(19,worse,1) output(64,worse,1) output(36,eq,11) output(22,eq,1) output(10,eq,17)
Optimization: 12 14
Answer: 16
preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),6) preference(1,(1,11),1,for(neg(atom(hasOftenSold(2)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,2),1,for(atom(hasOiliness(0))),2) preference(1,(1,3),1,for(atom(hasPrice(2))),7) preference(1,(1,4),1,for(atom(hasPrice(1))),9) preference(1,(1,5),1,for(atom(hasOftenSold(3))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,7),1,for(atom(hasOftenSold(0))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,9),1,for(atom(hasOiliness(2))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,13),1,for(atom(hasPrice(3))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),8) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,1) output(6,better,17) output(10,better,1) output(10,better,17) output(11,better,13) output(11,better,6) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,1) output(11,better,17) output(13,better,6) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,1) output(13,better,17) output(19,better,36) output(19,better,11) output(19,better,13) output(19,better,6) output(19,better,22) output(19,better,64) output(19,better,10) output(19,better,1) output(19,better,17) output(22,better,64) output(22,better,10) output(22,better,1) output(22,better,17) output(36,better,11) output(36,better,13) output(36,better,6) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,1) output(36,better,17) output(64,better,10) output(64,better,1) output(64,better,17)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(2)))),1) preference(1,(1,2),1,for(atom(hasPrice(1))),7) preference(1,(1,3),1,for(atom(hasPrice(3))),3) preference(1,(1,5),1,for(atom(hasOftenSold(3))),2) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,9),1,for(atom(hasOftenSold(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,13),1,for(atom(hasOftenSold(0))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(3))),6) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,1) output(6,better,17) output(10,better,1) output(10,better,17) output(11,better,13) output(11,better,6) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,1) output(11,better,17) output(13,better,6) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,1) output(13,better,17) output(19,better,36) output(19,better,11) output(19,better,13) output(19,better,6) output(19,better,22) output(19,better,64) output(19,better,10) output(19,better,1) output(19,better,17) output(22,better,64) output(22,better,10) output(22,better,1) output(22,better,17) output(36,better,11) output(36,better,13) output(36,better,6) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,1) output(36,better,17) output(64,better,10) output(64,better,1) output(64,better,17)
Optimization: 0 13
Answer: 18
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,3),1,for(atom(hasPrice(3))),3) preference(1,(1,5),1,for(atom(hasOftenSold(3))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,9),1,for(atom(hasPrice(2))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,11),1,for(atom(hasPrice(1))),7) preference(1,(1,12),1,for(atom(hasOiliness(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(10))),2) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,1) output(6,better,17) output(10,better,1) output(10,better,17) output(11,better,13) output(11,better,6) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,1) output(11,better,17) output(13,better,6) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,1) output(13,better,17) output(19,better,36) output(19,better,11) output(19,better,13) output(19,better,6) output(19,better,22) output(19,better,64) output(19,better,10) output(19,better,1) output(19,better,17) output(22,better,64) output(22,better,10) output(22,better,1) output(22,better,17) output(36,better,11) output(36,better,13) output(36,better,6) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,1) output(36,better,17) output(64,better,10) output(64,better,1) output(64,better,17)
Optimization: 0 12
Answer: 19
preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),1) preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,12),1,for(neg(atom(hasPrice(1)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,4),1,for(atom(hasPrice(2))),3) preference(1,(1,5),1,for(atom(hasPrice(1))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,10),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,14),1,for(atom(hasOftenSold(2))),1) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,1) output(6,better,17) output(10,better,1) output(10,better,17) output(11,better,13) output(11,better,6) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,1) output(11,better,17) output(13,better,6) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,1) output(13,better,17) output(19,better,36) output(19,better,11) output(19,better,13) output(19,better,6) output(19,better,22) output(19,better,64) output(19,better,10) output(19,better,1) output(19,better,17) output(22,better,64) output(22,better,10) output(22,better,1) output(22,better,17) output(36,better,11) output(36,better,13) output(36,better,6) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,1) output(36,better,17) output(64,better,10) output(64,better,1) output(64,better,17)
Optimization: 0 11
Answer: 20
preference(1,(1,12),1,for(neg(atom(hasPrice(1)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,3),1,for(atom(hasOftenSold(3))),2) preference(1,(1,4),1,for(atom(hasPrice(2))),3) preference(1,(1,5),1,for(atom(hasPrice(1))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,8),1,for(atom(hasOftenSold(0))),9) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,14),1,for(atom(hasOftenSold(2))),1) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,1) output(6,better,17) output(10,better,1) output(10,better,17) output(11,better,13) output(11,better,6) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,1) output(11,better,17) output(13,better,6) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,1) output(13,better,17) output(19,better,36) output(19,better,11) output(19,better,13) output(19,better,6) output(19,better,22) output(19,better,64) output(19,better,10) output(19,better,1) output(19,better,17) output(22,better,64) output(22,better,10) output(22,better,1) output(22,better,17) output(36,better,11) output(36,better,13) output(36,better,6) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,1) output(36,better,17) output(64,better,10) output(64,better,1) output(64,better,17)
Optimization: 0 10
Progression : 0 [ 2;10] (Error: 4)
Answer: 21
preference(1,(1,1),1,for(neg(atom(hasOftenSold(2)))),1) preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,7),1,for(atom(hasPrice(3))),1) preference(1,(1,8),1,for(atom(hasOftenSold(3))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,11),1,for(atom(hasPrice(1))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,13),1,for(atom(hasOftenSold(1))),2) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,1) output(6,better,17) output(10,better,1) output(10,better,17) output(11,better,13) output(11,better,6) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,1) output(11,better,17) output(13,better,6) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,1) output(13,better,17) output(19,better,36) output(19,better,11) output(19,better,13) output(19,better,6) output(19,better,22) output(19,better,64) output(19,better,10) output(19,better,1) output(19,better,17) output(22,better,64) output(22,better,10) output(22,better,1) output(22,better,17) output(36,better,11) output(36,better,13) output(36,better,6) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,1) output(36,better,17) output(64,better,10) output(64,better,1) output(64,better,17)
Optimization: 0 9
Answer: 22
preference(1,(1,10),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,12),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,3),1,for(atom(hasOftenSold(0))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,5),1,for(atom(hasPrice(1))),5) preference(1,(1,6),1,for(atom(hasOftenSold(3))),6) preference(1,(1,9),1,for(atom(hasOftenSold(1))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(1,better,17) output(6,better,22) output(6,better,64) output(6,better,10) output(6,better,1) output(6,better,17) output(10,better,1) output(10,better,17) output(11,better,13) output(11,better,6) output(11,better,22) output(11,better,64) output(11,better,10) output(11,better,1) output(11,better,17) output(13,better,6) output(13,better,22) output(13,better,64) output(13,better,10) output(13,better,1) output(13,better,17) output(19,better,36) output(19,better,11) output(19,better,13) output(19,better,6) output(19,better,22) output(19,better,64) output(19,better,10) output(19,better,1) output(19,better,17) output(22,better,64) output(22,better,10) output(22,better,1) output(22,better,17) output(36,better,11) output(36,better,13) output(36,better,6) output(36,better,22) output(36,better,64) output(36,better,10) output(36,better,1) output(36,better,17) output(64,better,10) output(64,better,1) output(64,better,17)
Optimization: 0 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.146 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 22+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 298.597s (Solving: 283.62s 1st Model: 0.12s Unsat: 0.00s)
CPU Time     : 1148.699s
Threads      : 4        (Winner: 4)

Choices      : 3587866  (Domain: 513)
Conflicts    : 645867   (Analyzed: 645865)
Restarts     : 730      (Average: 884.75 Last: 26224)
Model-Level  : 1531.8  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 648019   (Deleted: 579563)
  Binary     : 296      (Ratio:   0.05%)
  Ternary    : 61       (Ratio:   0.01%)
  Conflict   : 645865   (Average Length: 1668.1 Ratio:  99.67%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 2154     (Average Length:  190.8 Ratio:   0.33%) 
  Distributed: 718      (Ratio:   0.11% Average LBD: 3.40) 
  Integrated : 2154     (Ratio: 300.00% Unit: 1 Average Jumps: 3.00)
Backjumps    : 645865   (Average:  3.62 Max: 4223 Sum: 2337803)
  Executed   : 645864   (Average:  3.62 Max: 4223 Sum: 2337782 Ratio: 100.00%)
  Bounded    : 1        (Average: 21.00 Max:  21 Sum:     21 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOftenSold(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasStyle(1))  ; 
  8 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasStyle(1))  ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasStyle(1))  ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasStyle(0)) ; 
  9 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasStyle(1))  ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasStyle(0)) ; 
  9 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasStyle(1))  ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasStyle(0)) ; 
  9 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrice(1)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  9 :: not atom(hasOiliness(1))  ; 
  4 :: atom(hasOiliness(2)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  4 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrice(1)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  9 :: not atom(hasOiliness(1))  ; 
  4 :: atom(hasOiliness(2)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  4 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasPrice(2)) ; 
  9 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasOiliness(2)) ; 
  6 :: not atom(hasMajorGrp(0))  ; 
  7 :: not atom(hasOftenSold(2))  ; 
  9 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasPrice(3)) ; 
  8 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: not atom(hasMajorGrp(0))  ; 
  7 :: atom(hasPrice(1)) ; 
  3 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(6)) ; 
  1 :: not atom(hasMinorGrp(2))  ; 
  3 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: not atom(hasMajorGrp(0))  ; 
  5 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasPrice(2)) ; 
  4 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(10)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  1 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(1)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  1 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(1)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  1 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOftenSold(2))  ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasPrice(3)) ; 
  3 :: atom(hasOftenSold(3)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasPrice(1)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasPrice(1)) ; 
  6 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  2 :: not atom(hasPrice(2))  ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(6)) 
}.
