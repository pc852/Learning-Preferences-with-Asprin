asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(11,eq,57) output(11,eq,3) output(11,eq,31) output(11,eq,18) output(11,eq,7) output(11,eq,20) output(11,eq,21) output(11,eq,16) output(11,eq,30) output(57,eq,3) output(57,eq,31) output(57,eq,18) output(57,eq,7) output(57,eq,20) output(57,eq,21) output(57,eq,16) output(57,eq,30) output(3,eq,31) output(3,eq,18) output(3,eq,7) output(3,eq,20) output(3,eq,21) output(3,eq,16) output(3,eq,30) output(31,eq,18) output(31,eq,7) output(31,eq,20) output(31,eq,21) output(31,eq,16) output(31,eq,30) output(18,eq,7) output(18,eq,20) output(18,eq,21) output(18,eq,16) output(18,eq,30) output(7,eq,20) output(7,eq,21) output(7,eq,16) output(7,eq,30) output(20,eq,21) output(20,eq,16) output(20,eq,30) output(21,eq,16) output(21,eq,30) output(16,eq,30)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(3,better,31) output(11,better,31) output(57,better,31) output(31,worse,18) output(31,worse,7) output(31,worse,20) output(31,worse,21) output(31,worse,16) output(31,worse,30) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,7) output(11,eq,20) output(11,eq,21) output(11,eq,16) output(11,eq,30) output(57,eq,3) output(57,eq,18) output(57,eq,7) output(57,eq,20) output(57,eq,21) output(57,eq,16) output(57,eq,30) output(3,eq,18) output(3,eq,7) output(3,eq,20) output(3,eq,21) output(3,eq,16) output(3,eq,30) output(18,eq,7) output(18,eq,20) output(18,eq,21) output(18,eq,16) output(18,eq,30) output(7,eq,20) output(7,eq,21) output(7,eq,16) output(7,eq,30) output(20,eq,21) output(20,eq,16) output(20,eq,30) output(21,eq,16) output(21,eq,30) output(16,eq,30)
Optimization: 42 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(11,better,31) output(11,better,7) output(18,better,7) output(57,better,31) output(57,better,7) output(7,worse,20) output(7,worse,21) output(7,worse,16) output(7,worse,30) output(31,worse,18) output(31,worse,20) output(31,worse,21) output(31,worse,16) output(31,worse,30) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,20) output(11,eq,21) output(11,eq,16) output(11,eq,30) output(57,eq,3) output(57,eq,18) output(57,eq,20) output(57,eq,21) output(57,eq,16) output(57,eq,30) output(3,eq,18) output(3,eq,20) output(3,eq,21) output(3,eq,16) output(3,eq,30) output(31,eq,7) output(18,eq,20) output(18,eq,21) output(18,eq,16) output(18,eq,30) output(20,eq,21) output(20,eq,16) output(20,eq,30) output(21,eq,16) output(21,eq,30) output(16,eq,30)
Optimization: 38 2
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasPrice(3))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,20) output(11,better,31) output(11,better,7) output(11,better,20) output(18,better,7) output(18,better,20) output(57,better,31) output(57,better,7) output(57,better,20) output(7,worse,21) output(7,worse,16) output(7,worse,30) output(20,worse,21) output(20,worse,16) output(20,worse,30) output(31,worse,18) output(31,worse,21) output(31,worse,16) output(31,worse,30) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,21) output(11,eq,16) output(11,eq,30) output(57,eq,3) output(57,eq,18) output(57,eq,21) output(57,eq,16) output(57,eq,30) output(3,eq,18) output(3,eq,21) output(3,eq,16) output(3,eq,30) output(31,eq,7) output(31,eq,20) output(18,eq,21) output(18,eq,16) output(18,eq,30) output(7,eq,20) output(21,eq,16) output(21,eq,30) output(16,eq,30)
Optimization: 34 3
Answer: 5
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,16) output(11,better,31) output(11,better,7) output(11,better,16) output(18,better,7) output(18,better,16) output(20,better,16) output(21,better,16) output(57,better,31) output(57,better,7) output(57,better,16) output(7,worse,20) output(7,worse,21) output(7,worse,30) output(16,worse,30) output(31,worse,18) output(31,worse,20) output(31,worse,21) output(31,worse,30) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,20) output(11,eq,21) output(11,eq,30) output(57,eq,3) output(57,eq,18) output(57,eq,20) output(57,eq,21) output(57,eq,30) output(3,eq,18) output(3,eq,20) output(3,eq,21) output(3,eq,30) output(31,eq,7) output(31,eq,16) output(18,eq,20) output(18,eq,21) output(18,eq,30) output(7,eq,16) output(20,eq,21) output(20,eq,30) output(21,eq,30)
Optimization: 32 3
Answer: 6
preference(1,(1,11),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,12),1,for(atom(hasPrice(3))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(3,better,31) output(3,better,20) output(3,better,16) output(7,better,20) output(7,better,16) output(11,better,31) output(11,better,20) output(11,better,16) output(18,better,20) output(18,better,16) output(21,better,16) output(57,better,31) output(57,better,20) output(57,better,16) output(16,worse,30) output(20,worse,21) output(20,worse,30) output(31,worse,18) output(31,worse,7) output(31,worse,21) output(31,worse,30) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,7) output(11,eq,21) output(11,eq,30) output(57,eq,3) output(57,eq,18) output(57,eq,7) output(57,eq,21) output(57,eq,30) output(3,eq,18) output(3,eq,7) output(3,eq,21) output(3,eq,30) output(31,eq,20) output(31,eq,16) output(18,eq,7) output(18,eq,21) output(18,eq,30) output(7,eq,21) output(7,eq,30) output(20,eq,16) output(21,eq,30)
Optimization: 31 3
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,13),1,for(atom(hasPrice(3))),10) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,20) output(3,better,16) output(11,better,31) output(11,better,7) output(11,better,20) output(11,better,16) output(18,better,7) output(18,better,20) output(18,better,16) output(21,better,16) output(57,better,31) output(57,better,7) output(57,better,20) output(57,better,16) output(7,worse,21) output(7,worse,30) output(16,worse,30) output(20,worse,21) output(20,worse,30) output(31,worse,18) output(31,worse,21) output(31,worse,30) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,21) output(11,eq,30) output(57,eq,3) output(57,eq,18) output(57,eq,21) output(57,eq,30) output(3,eq,18) output(3,eq,21) output(3,eq,30) output(31,eq,7) output(31,eq,20) output(31,eq,16) output(18,eq,21) output(18,eq,30) output(7,eq,20) output(7,eq,16) output(20,eq,16) output(21,eq,30)
Optimization: 29 4
Answer: 8
preference(1,(1,1),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(3,better,31) output(3,better,16) output(3,better,30) output(7,better,16) output(7,better,30) output(11,better,31) output(11,better,16) output(11,better,30) output(18,better,16) output(18,better,30) output(20,better,16) output(20,better,30) output(21,better,16) output(21,better,30) output(57,better,31) output(57,better,16) output(57,better,30) output(31,worse,18) output(31,worse,7) output(31,worse,20) output(31,worse,21) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,7) output(11,eq,20) output(11,eq,21) output(57,eq,3) output(57,eq,18) output(57,eq,7) output(57,eq,20) output(57,eq,21) output(3,eq,18) output(3,eq,7) output(3,eq,20) output(3,eq,21) output(31,eq,16) output(31,eq,30) output(18,eq,7) output(18,eq,20) output(18,eq,21) output(7,eq,20) output(7,eq,21) output(20,eq,21) output(16,eq,30)
Optimization: 28 3
Answer: 9
preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,16) output(3,better,30) output(11,better,31) output(11,better,7) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,16) output(18,better,30) output(20,better,16) output(20,better,30) output(21,better,16) output(21,better,30) output(57,better,31) output(57,better,7) output(57,better,16) output(57,better,30) output(7,worse,20) output(7,worse,21) output(31,worse,18) output(31,worse,20) output(31,worse,21) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,20) output(11,eq,21) output(57,eq,3) output(57,eq,18) output(57,eq,20) output(57,eq,21) output(3,eq,18) output(3,eq,20) output(3,eq,21) output(31,eq,7) output(31,eq,16) output(31,eq,30) output(18,eq,20) output(18,eq,21) output(7,eq,16) output(7,eq,30) output(20,eq,21) output(16,eq,30)
Optimization: 26 6
Answer: 10
preference(1,(1,1),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,9),1,for(atom(hasPrice(3))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(3,better,31) output(3,better,20) output(3,better,16) output(3,better,30) output(7,better,20) output(7,better,16) output(7,better,30) output(11,better,31) output(11,better,20) output(11,better,16) output(11,better,30) output(18,better,20) output(18,better,16) output(18,better,30) output(21,better,16) output(21,better,30) output(57,better,31) output(57,better,20) output(57,better,16) output(57,better,30) output(20,worse,21) output(31,worse,18) output(31,worse,7) output(31,worse,21) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,7) output(11,eq,21) output(57,eq,3) output(57,eq,18) output(57,eq,7) output(57,eq,21) output(3,eq,18) output(3,eq,7) output(3,eq,21) output(31,eq,20) output(31,eq,16) output(31,eq,30) output(18,eq,7) output(18,eq,21) output(7,eq,21) output(20,eq,16) output(20,eq,30) output(16,eq,30)
Optimization: 25 4
Answer: 11
preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,10),1,for(atom(hasPrice(3))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,20) output(3,better,16) output(3,better,30) output(11,better,31) output(11,better,7) output(11,better,20) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,20) output(18,better,16) output(18,better,30) output(21,better,16) output(21,better,30) output(57,better,31) output(57,better,7) output(57,better,20) output(57,better,16) output(57,better,30) output(7,worse,21) output(20,worse,21) output(31,worse,18) output(31,worse,21) output(11,eq,57) output(11,eq,3) output(11,eq,18) output(11,eq,21) output(57,eq,3) output(57,eq,18) output(57,eq,21) output(3,eq,18) output(3,eq,21) output(31,eq,7) output(31,eq,20) output(31,eq,16) output(31,eq,30) output(18,eq,21) output(7,eq,20) output(7,eq,16) output(7,eq,30) output(20,eq,16) output(20,eq,30) output(16,eq,30)
Optimization: 24 7
Answer: 12
preference(1,(1,1),1,for(atom(hasPrice(3))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,7),1,for(atom(hasOiliness(1))),10) preference(1,(1,8),1,for(atom(hasOftenSold(1))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(3,better,31) output(3,better,18) output(3,better,20) output(3,better,21) output(3,better,16) output(3,better,30) output(7,better,20) output(7,better,21) output(7,better,16) output(7,better,30) output(11,better,31) output(11,better,18) output(11,better,20) output(11,better,21) output(11,better,16) output(11,better,30) output(57,better,31) output(57,better,18) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30) output(18,worse,7) output(31,worse,7) output(11,eq,57) output(11,eq,3) output(11,eq,7) output(57,eq,3) output(57,eq,7) output(3,eq,7) output(31,eq,18) output(31,eq,20) output(31,eq,21) output(31,eq,16) output(31,eq,30) output(18,eq,20) output(18,eq,21) output(18,eq,16) output(18,eq,30) output(20,eq,21) output(20,eq,16) output(20,eq,30) output(21,eq,16) output(21,eq,30) output(16,eq,30)
Optimization: 23 6
Answer: 13
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasPrice(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,3),1,for(atom(hasPrice(1))),2) preference(1,(1,4),1,for(atom(hasOiliness(3))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,14),1,for(atom(hasPrice(3))),10) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,20) output(3,better,16) output(11,better,57) output(11,better,3) output(11,better,31) output(11,better,18) output(11,better,7) output(11,better,20) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(21,better,16) output(31,better,7) output(57,better,3) output(57,better,31) output(57,better,7) output(57,better,20) output(57,better,16) output(3,worse,18) output(3,worse,21) output(3,worse,30) output(7,worse,20) output(7,worse,21) output(7,worse,16) output(7,worse,30) output(16,worse,30) output(20,worse,21) output(20,worse,16) output(20,worse,30) output(31,worse,18) output(31,worse,21) output(31,worse,16) output(31,worse,30) output(57,worse,18) output(57,eq,21) output(57,eq,30) output(31,eq,20) output(21,eq,30)
Optimization: 20 11
Answer: 14
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasPrice(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,3),1,for(atom(hasPrice(1))),2) preference(1,(1,4),1,for(atom(hasOiliness(3))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,14),1,for(atom(hasPrice(3))),10) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,20) output(3,better,16) output(11,better,57) output(11,better,3) output(11,better,31) output(11,better,18) output(11,better,7) output(11,better,20) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(21,better,16) output(21,better,30) output(31,better,7) output(57,better,3) output(57,better,31) output(57,better,7) output(57,better,20) output(57,better,16) output(3,worse,18) output(3,worse,21) output(3,worse,30) output(7,worse,20) output(7,worse,21) output(7,worse,16) output(7,worse,30) output(16,worse,30) output(20,worse,21) output(20,worse,16) output(20,worse,30) output(31,worse,18) output(31,worse,21) output(31,worse,16) output(31,worse,30) output(57,worse,18) output(57,worse,21) output(57,eq,30) output(31,eq,20)
Optimization: 19 11
Answer: 15
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasPrice(2))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,3),1,for(atom(hasPrice(1))),2) preference(1,(1,4),1,for(atom(hasOiliness(3))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,14),1,for(atom(hasPrice(3))),10) preference(1,less(weight)) output(3,better,31) output(3,better,7) output(3,better,20) output(3,better,16) output(11,better,57) output(11,better,3) output(11,better,31) output(11,better,18) output(11,better,7) output(11,better,20) output(11,better,21) output(11,better,16) output(11,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,16) output(21,better,16) output(21,better,30) output(31,better,7) output(31,better,16) output(57,better,3) output(57,better,31) output(57,better,7) output(57,better,20) output(57,better,16) output(3,worse,18) output(3,worse,21) output(3,worse,30) output(7,worse,20) output(7,worse,21) output(7,worse,30) output(16,worse,30) output(20,worse,21) output(20,worse,30) output(31,worse,18) output(31,worse,21) output(31,worse,30) output(57,worse,18) output(57,worse,21) output(57,eq,30) output(31,eq,20) output(7,eq,16)
Optimization: 17 11
Answer: 16
preference(1,(1,1),1,for(atom(hasStyle(0))),5) preference(1,(1,2),1,for(atom(hasOiliness(3))),4) preference(1,(1,3),1,for(atom(hasOftenSold(0))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,5),1,for(atom(hasPrice(1))),6) preference(1,(1,6),1,for(atom(hasPrice(2))),3) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,11),1,for(atom(hasOftenSold(1))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,14),1,for(atom(hasPrice(3))),10) preference(1,less(weight)) output(3,better,31) output(3,better,18) output(3,better,7) output(3,better,20) output(3,better,21) output(3,better,16) output(3,better,30) output(7,better,20) output(7,better,21) output(7,better,16) output(7,better,30) output(11,better,57) output(11,better,3) output(11,better,31) output(11,better,18) output(11,better,7) output(11,better,20) output(11,better,21) output(11,better,16) output(11,better,30) output(16,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(21,better,30) output(31,better,18) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30)
Optimization: 0 12
Progression : 0 [ 1;12] (Error: 11)
Answer: 17
preference(1,(1,9),1,for(neg(atom(hasOftenSold(3)))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,4),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,6),1,for(atom(hasOiliness(2))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,8),1,for(atom(hasPrice(0))),1) preference(1,(1,11),1,for(atom(hasPrice(3))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(9))),5) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,14),1,for(atom(hasPrice(2))),1) preference(1,less(weight)) output(3,better,31) output(3,better,18) output(3,better,7) output(3,better,20) output(3,better,21) output(3,better,16) output(3,better,30) output(7,better,20) output(7,better,21) output(7,better,16) output(7,better,30) output(11,better,57) output(11,better,3) output(11,better,31) output(11,better,18) output(11,better,7) output(11,better,20) output(11,better,21) output(11,better,16) output(11,better,30) output(16,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(21,better,30) output(31,better,18) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30)
Optimization: 0 11
Answer: 18
preference(1,(1,2),1,for(neg(atom(hasOiliness(1)))),4) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,11),1,for(neg(atom(hasOftenSold(3)))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,8),1,for(atom(hasPrice(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasOftenSold(2))),8) preference(1,less(weight)) output(3,better,31) output(3,better,18) output(3,better,7) output(3,better,20) output(3,better,21) output(3,better,16) output(3,better,30) output(7,better,20) output(7,better,21) output(7,better,16) output(7,better,30) output(11,better,57) output(11,better,3) output(11,better,31) output(11,better,18) output(11,better,7) output(11,better,20) output(11,better,21) output(11,better,16) output(11,better,30) output(16,better,30) output(18,better,7) output(18,better,20) output(18,better,21) output(18,better,16) output(18,better,30) output(20,better,21) output(20,better,16) output(20,better,30) output(21,better,16) output(21,better,30) output(31,better,18) output(31,better,7) output(31,better,20) output(31,better,21) output(31,better,16) output(31,better,30) output(57,better,3) output(57,better,31) output(57,better,18) output(57,better,7) output(57,better,20) output(57,better,21) output(57,better,16) output(57,better,30)
Optimization: 0 10
Progression : 0 [ 2;10] (Error: 4)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.219 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 18+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 597.333s (Solving: 585.28s 1st Model: 0.11s Unsat: 0.00s)
CPU Time     : 2352.339s
Threads      : 4        (Winner: 4)

Choices      : 9190257  (Domain: 11111)
Conflicts    : 1878357  (Analyzed: 1878355)
Restarts     : 1949     (Average: 963.75 Last: 220839)
Model-Level  : 749.9   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1883050  (Deleted: 1687614)
  Binary     : 776      (Ratio:   0.04%)
  Ternary    : 153      (Ratio:   0.01%)
  Conflict   : 1878355  (Average Length: 1716.8 Ratio:  99.75%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 4695     (Average Length:  215.3 Ratio:   0.25%) 
  Distributed: 1565     (Ratio:   0.08% Average LBD: 3.31) 
  Integrated : 4695     (Ratio: 300.00% Unit: 9 Average Jumps: 3.44)
Backjumps    : 1878355  (Average:  3.09 Max: 3050 Sum: 5801879)
  Executed   : 1878354  (Average:  3.09 Max: 3050 Sum: 5801868 Ratio: 100.00%)
  Bounded    : 1        (Average: 11.00 Max:  11 Sum:     11 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(2)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(1)) ; 
  4 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(2)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(1)) ; 
  4 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(2)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(1)) ; 
  4 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasStyle(0)) ; 
  4 :: atom(hasOiliness(3)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPrice(1)) ; 
  3 :: atom(hasPrice(2)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  9 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasOiliness(2)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasPrice(0)) ; 
  7 :: not atom(hasOftenSold(3))  ; 
  3 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasOiliness(1))  ; 
  7 :: atom(hasMinorGrp(5)) ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  10 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasPrice(2)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOftenSold(3))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  8 :: atom(hasOftenSold(2)) 
}.
