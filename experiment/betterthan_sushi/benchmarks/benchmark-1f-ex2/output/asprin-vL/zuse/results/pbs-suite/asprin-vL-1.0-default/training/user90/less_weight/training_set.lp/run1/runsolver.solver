asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(11,eq,20) output(11,eq,17) output(11,eq,27) output(11,eq,57) output(11,eq,1) output(11,eq,15) output(11,eq,43) output(11,eq,16) output(11,eq,93) output(20,eq,17) output(20,eq,27) output(20,eq,57) output(20,eq,1) output(20,eq,15) output(20,eq,43) output(20,eq,16) output(20,eq,93) output(17,eq,27) output(17,eq,57) output(17,eq,1) output(17,eq,15) output(17,eq,43) output(17,eq,16) output(17,eq,93) output(27,eq,57) output(27,eq,1) output(27,eq,15) output(27,eq,43) output(27,eq,16) output(27,eq,93) output(57,eq,1) output(57,eq,15) output(57,eq,43) output(57,eq,16) output(57,eq,93) output(1,eq,15) output(1,eq,43) output(1,eq,16) output(1,eq,93) output(15,eq,43) output(15,eq,16) output(15,eq,93) output(43,eq,16) output(43,eq,93) output(16,eq,93)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(1,better,15) output(11,better,15) output(17,better,15) output(20,better,15) output(27,better,15) output(57,better,15) output(15,worse,43) output(15,worse,16) output(15,worse,93) output(11,eq,20) output(11,eq,17) output(11,eq,27) output(11,eq,57) output(11,eq,1) output(11,eq,43) output(11,eq,16) output(11,eq,93) output(20,eq,17) output(20,eq,27) output(20,eq,57) output(20,eq,1) output(20,eq,43) output(20,eq,16) output(20,eq,93) output(17,eq,27) output(17,eq,57) output(17,eq,1) output(17,eq,43) output(17,eq,16) output(17,eq,93) output(27,eq,57) output(27,eq,1) output(27,eq,43) output(27,eq,16) output(27,eq,93) output(57,eq,1) output(57,eq,43) output(57,eq,16) output(57,eq,93) output(1,eq,43) output(1,eq,16) output(1,eq,93) output(43,eq,16) output(43,eq,93) output(16,eq,93)
Optimization: 39 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(1,better,15) output(1,better,43) output(11,better,15) output(11,better,43) output(17,better,15) output(17,better,43) output(20,better,15) output(20,better,43) output(27,better,15) output(27,better,43) output(57,better,15) output(57,better,43) output(15,worse,16) output(15,worse,93) output(43,worse,16) output(43,worse,93) output(11,eq,20) output(11,eq,17) output(11,eq,27) output(11,eq,57) output(11,eq,1) output(11,eq,16) output(11,eq,93) output(20,eq,17) output(20,eq,27) output(20,eq,57) output(20,eq,1) output(20,eq,16) output(20,eq,93) output(17,eq,27) output(17,eq,57) output(17,eq,1) output(17,eq,16) output(17,eq,93) output(27,eq,57) output(27,eq,1) output(27,eq,16) output(27,eq,93) output(57,eq,1) output(57,eq,16) output(57,eq,93) output(1,eq,16) output(1,eq,93) output(15,eq,43) output(16,eq,93)
Optimization: 33 2
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOiliness(3))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),10) preference(1,less(weight)) output(1,better,15) output(1,better,43) output(11,better,57) output(11,better,15) output(11,better,43) output(17,better,57) output(17,better,15) output(17,better,43) output(20,better,57) output(20,better,15) output(20,better,43) output(27,better,57) output(27,better,15) output(27,better,43) output(15,worse,16) output(15,worse,93) output(43,worse,16) output(43,worse,93) output(57,worse,1) output(57,worse,16) output(57,worse,93) output(11,eq,20) output(11,eq,17) output(11,eq,27) output(11,eq,1) output(11,eq,16) output(11,eq,93) output(20,eq,17) output(20,eq,27) output(20,eq,1) output(20,eq,16) output(20,eq,93) output(17,eq,27) output(17,eq,1) output(17,eq,16) output(17,eq,93) output(27,eq,1) output(27,eq,16) output(27,eq,93) output(57,eq,15) output(57,eq,43) output(1,eq,16) output(1,eq,93) output(15,eq,43) output(16,eq,93)
Optimization: 31 3
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,7),1,for(atom(hasOiliness(3))),10) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,(1,13),1,for(atom(hasOiliness(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),3) preference(1,less(weight)) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(15,better,43) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,43) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(1,worse,15) output(1,worse,16) output(1,worse,93) output(15,worse,16) output(15,worse,93) output(17,worse,15) output(17,worse,16) output(17,worse,93) output(27,worse,15) output(27,worse,16) output(27,worse,93) output(43,worse,16) output(43,worse,93) output(57,worse,15) output(57,worse,16) output(57,worse,93) output(11,eq,20) output(11,eq,16) output(11,eq,93) output(20,eq,16) output(20,eq,93) output(27,eq,57) output(27,eq,1) output(27,eq,43) output(57,eq,1) output(57,eq,43) output(1,eq,43) output(16,eq,93)
Optimization: 28 6
Answer: 6
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,7),1,for(atom(hasOiliness(3))),10) preference(1,(1,9),1,for(atom(hasOiliness(0))),1) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),3) preference(1,less(weight)) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(15,better,43) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,43) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(57,better,1) output(1,worse,15) output(1,worse,43) output(1,worse,16) output(1,worse,93) output(15,worse,16) output(15,worse,93) output(17,worse,15) output(17,worse,16) output(17,worse,93) output(27,worse,57) output(27,worse,1) output(27,worse,15) output(27,worse,43) output(27,worse,16) output(27,worse,93) output(43,worse,16) output(43,worse,93) output(57,worse,15) output(57,worse,16) output(57,worse,93) output(11,eq,20) output(11,eq,16) output(11,eq,93) output(20,eq,16) output(20,eq,93) output(57,eq,43) output(16,eq,93)
Optimization: 27 8
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,7),1,for(atom(hasOiliness(3))),10) preference(1,(1,11),1,for(atom(hasOiliness(0))),6) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),3) preference(1,less(weight)) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(15,better,43) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,43) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(27,better,1) output(57,better,1) output(1,worse,15) output(1,worse,43) output(1,worse,16) output(1,worse,93) output(15,worse,16) output(15,worse,93) output(17,worse,15) output(17,worse,16) output(17,worse,93) output(27,worse,57) output(27,worse,15) output(27,worse,43) output(27,worse,16) output(27,worse,93) output(43,worse,16) output(43,worse,93) output(57,worse,15) output(57,worse,16) output(57,worse,93) output(11,eq,20) output(11,eq,16) output(11,eq,93) output(20,eq,16) output(20,eq,93) output(57,eq,43) output(16,eq,93)
Optimization: 26 8
Answer: 8
preference(1,(1,1),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,4),1,for(atom(hasOiliness(3))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,7),1,for(atom(hasOftenSold(3))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasPrice(0))),2) preference(1,(1,11),1,for(atom(hasOftenSold(1))),2) preference(1,(1,12),1,for(atom(hasOftenSold(0))),1) preference(1,(1,13),1,for(atom(hasOiliness(0))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),2) preference(1,less(weight)) output(11,better,57) output(11,better,1) output(11,better,43) output(15,better,43) output(15,better,16) output(15,better,93) output(16,better,93) output(17,better,57) output(17,better,1) output(17,better,43) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(20,better,16) output(20,better,93) output(27,better,57) output(27,better,1) output(27,better,43) output(57,better,1) output(57,better,43) output(1,worse,15) output(1,worse,43) output(1,worse,16) output(1,worse,93) output(11,worse,20) output(11,worse,17) output(11,worse,27) output(11,worse,15) output(11,worse,16) output(11,worse,93) output(17,worse,15) output(17,worse,16) output(27,worse,15) output(27,worse,16) output(43,worse,16) output(43,worse,93) output(57,worse,15) output(57,worse,16) output(57,worse,93) output(17,eq,27) output(17,eq,93) output(27,eq,93)
Optimization: 22 12
Answer: 9
preference(1,(1,1),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,2),1,for(atom(hasOiliness(0))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,4),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,7),1,for(atom(hasOftenSold(3))),8) preference(1,(1,8),1,for(atom(hasOiliness(3))),2) preference(1,(1,9),1,for(atom(hasPrice(0))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,12),1,for(atom(hasOftenSold(0))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(9))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),2) preference(1,less(weight)) output(11,better,57) output(11,better,1) output(11,better,43) output(15,better,43) output(15,better,16) output(15,better,93) output(16,better,93) output(17,better,57) output(17,better,1) output(17,better,43) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(20,better,16) output(20,better,93) output(27,better,57) output(27,better,1) output(27,better,43) output(27,better,93) output(57,better,1) output(57,better,43) output(1,worse,15) output(1,worse,16) output(1,worse,93) output(11,worse,20) output(11,worse,17) output(11,worse,27) output(11,worse,15) output(11,worse,16) output(11,worse,93) output(17,worse,27) output(17,worse,15) output(17,worse,16) output(27,worse,15) output(43,worse,16) output(43,worse,93) output(57,worse,15) output(57,worse,16) output(57,worse,93) output(17,eq,93) output(27,eq,16) output(1,eq,43)
Optimization: 21 13
Answer: 10
preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,2),1,for(atom(hasOiliness(3))),8) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasOiliness(1))),1) preference(1,(1,7),1,for(atom(hasOiliness(0))),1) preference(1,(1,8),1,for(atom(hasOftenSold(3))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,10),1,for(atom(hasPrice(3))),1) preference(1,(1,11),1,for(atom(hasOftenSold(1))),3) preference(1,(1,12),1,for(atom(hasPrice(1))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),3) preference(1,less(weight)) output(1,better,15) output(1,better,43) output(1,better,16) output(1,better,93) output(11,better,20) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(11,better,16) output(11,better,93) output(15,better,43) output(15,better,16) output(15,better,93) output(16,better,93) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,15) output(17,better,43) output(17,better,16) output(17,better,93) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(20,better,16) output(20,better,93) output(27,better,57) output(27,better,1) output(27,better,15) output(27,better,43) output(27,better,16) output(27,better,93) output(43,better,16) output(43,better,93) output(57,better,1) output(57,better,15) output(57,better,43) output(57,better,16) output(57,better,93)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 11
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,2),1,for(atom(hasOftenSold(0))),4) preference(1,(1,3),1,for(atom(hasOiliness(1))),1) preference(1,(1,4),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,6),1,for(atom(hasOiliness(0))),8) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),3) preference(1,(1,11),1,for(atom(hasPrice(0))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,13),1,for(atom(hasOiliness(3))),1) preference(1,(1,14),1,for(atom(hasOftenSold(2))),4) preference(1,less(weight)) output(1,better,15) output(1,better,43) output(1,better,16) output(1,better,93) output(11,better,20) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(11,better,16) output(11,better,93) output(15,better,43) output(15,better,16) output(15,better,93) output(16,better,93) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,15) output(17,better,43) output(17,better,16) output(17,better,93) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(20,better,16) output(20,better,93) output(27,better,57) output(27,better,1) output(27,better,15) output(27,better,43) output(27,better,16) output(27,better,93) output(43,better,16) output(43,better,93) output(57,better,1) output(57,better,15) output(57,better,43) output(57,better,16) output(57,better,93)
Optimization: 0 13
Answer: 12
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,2),1,for(atom(hasOftenSold(0))),4) preference(1,(1,3),1,for(atom(hasOiliness(1))),1) preference(1,(1,4),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,6),1,for(atom(hasOiliness(0))),8) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,10),1,for(atom(hasOiliness(3))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,14),1,for(atom(hasOftenSold(2))),4) preference(1,less(weight)) output(1,better,15) output(1,better,43) output(1,better,16) output(1,better,93) output(11,better,20) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(11,better,16) output(11,better,93) output(15,better,43) output(15,better,16) output(15,better,93) output(16,better,93) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,15) output(17,better,43) output(17,better,16) output(17,better,93) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(20,better,16) output(20,better,93) output(27,better,57) output(27,better,1) output(27,better,15) output(27,better,43) output(27,better,16) output(27,better,93) output(43,better,16) output(43,better,93) output(57,better,1) output(57,better,15) output(57,better,43) output(57,better,16) output(57,better,93)
Optimization: 0 12
Answer: 13
preference(1,(1,1),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,4),1,for(atom(hasPrice(1))),4) preference(1,(1,5),1,for(atom(hasPrice(3))),3) preference(1,(1,6),1,for(atom(hasPrice(2))),4) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,8),1,for(atom(hasOiliness(1))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,12),1,for(atom(hasOftenSold(2))),2) preference(1,(1,13),1,for(atom(hasOiliness(3))),8) preference(1,(1,14),1,for(atom(hasOiliness(0))),3) preference(1,less(weight)) output(1,better,15) output(1,better,43) output(1,better,16) output(1,better,93) output(11,better,20) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(11,better,16) output(11,better,93) output(15,better,43) output(15,better,16) output(15,better,93) output(16,better,93) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,15) output(17,better,43) output(17,better,16) output(17,better,93) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(20,better,16) output(20,better,93) output(27,better,57) output(27,better,1) output(27,better,15) output(27,better,43) output(27,better,16) output(27,better,93) output(43,better,16) output(43,better,93) output(57,better,1) output(57,better,15) output(57,better,43) output(57,better,16) output(57,better,93)
Optimization: 0 11
Answer: 14
preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,1),1,for(atom(hasPrice(3))),1) preference(1,(1,2),1,for(atom(hasOiliness(3))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,7),1,for(atom(hasOiliness(1))),3) preference(1,(1,10),1,for(atom(hasOiliness(2))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,14),1,for(atom(hasPrice(1))),2) preference(1,less(weight)) output(1,better,15) output(1,better,43) output(1,better,16) output(1,better,93) output(11,better,20) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(11,better,16) output(11,better,93) output(15,better,43) output(15,better,16) output(15,better,93) output(16,better,93) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,15) output(17,better,43) output(17,better,16) output(17,better,93) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(20,better,16) output(20,better,93) output(27,better,57) output(27,better,1) output(27,better,15) output(27,better,43) output(27,better,16) output(27,better,93) output(43,better,16) output(43,better,93) output(57,better,1) output(57,better,15) output(57,better,43) output(57,better,16) output(57,better,93)
Optimization: 0 10
Progression : 0 [ 2;10] (Error: 4)
Answer: 15
preference(1,(1,11),1,for(neg(atom(hasMinorGrp(2)))),4) preference(1,(1,1),1,for(atom(hasPrice(3))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,5),1,for(atom(hasOiliness(2))),1) preference(1,(1,6),1,for(atom(hasOiliness(0))),1) preference(1,(1,9),1,for(atom(hasOftenSold(0))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,14),1,for(atom(hasPrice(2))),2) preference(1,less(weight)) output(1,better,15) output(1,better,43) output(1,better,16) output(1,better,93) output(11,better,20) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(11,better,16) output(11,better,93) output(15,better,43) output(15,better,16) output(15,better,93) output(16,better,93) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,15) output(17,better,43) output(17,better,16) output(17,better,93) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(20,better,16) output(20,better,93) output(27,better,57) output(27,better,1) output(27,better,15) output(27,better,43) output(27,better,16) output(27,better,93) output(43,better,16) output(43,better,93) output(57,better,1) output(57,better,15) output(57,better,43) output(57,better,16) output(57,better,93)
Optimization: 0 9
Answer: 16
preference(1,(1,13),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,3),1,for(atom(hasOiliness(1))),7) preference(1,(1,4),1,for(atom(hasOiliness(3))),3) preference(1,(1,5),1,for(atom(hasOftenSold(2))),4) preference(1,(1,6),1,for(atom(hasPrice(0))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,11),1,for(atom(hasPrice(2))),1) preference(1,less(weight)) output(1,better,15) output(1,better,43) output(1,better,16) output(1,better,93) output(11,better,20) output(11,better,17) output(11,better,27) output(11,better,57) output(11,better,1) output(11,better,15) output(11,better,43) output(11,better,16) output(11,better,93) output(15,better,43) output(15,better,16) output(15,better,93) output(16,better,93) output(17,better,27) output(17,better,57) output(17,better,1) output(17,better,15) output(17,better,43) output(17,better,16) output(17,better,93) output(20,better,17) output(20,better,27) output(20,better,57) output(20,better,1) output(20,better,15) output(20,better,43) output(20,better,16) output(20,better,93) output(27,better,57) output(27,better,1) output(27,better,15) output(27,better,43) output(27,better,16) output(27,better,93) output(43,better,16) output(43,better,93) output(57,better,1) output(57,better,15) output(57,better,43) output(57,better,16) output(57,better,93)
Optimization: 0 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.216 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 16+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 598.183s (Solving: 586.33s 1st Model: 0.08s Unsat: 0.00s)
CPU Time     : 2351.349s
Threads      : 4        (Winner: 4)

Choices      : 10838366 (Domain: 1929)
Conflicts    : 2012718  (Analyzed: 2012716)
Restarts     : 2089     (Average: 963.48 Last: 57366)
Model-Level  : 1409.9  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 2016286  (Deleted: 1827039)
  Binary     : 472      (Ratio:   0.02%)
  Ternary    : 211      (Ratio:   0.01%)
  Conflict   : 2012716  (Average Length: 1791.0 Ratio:  99.82%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 3570     (Average Length:  228.1 Ratio:   0.18%) 
  Distributed: 1190     (Ratio:   0.06% Average LBD: 3.34) 
  Integrated : 3570     (Ratio: 300.00% Unit: 1 Average Jumps: 0.00)
Backjumps    : 2012716  (Average:  3.40 Max: 4025 Sum: 6837492)
  Executed   : 2012715  (Average:  3.40 Max: 4025 Sum: 6837490 Ratio: 100.00%)
  Bounded    : 1        (Average:  2.00 Max:   2 Sum:      2 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasOiliness(3)) ; 
  1 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasOiliness(3)) ; 
  6 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasOftenSold(3)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasPrice(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasOftenSold(3)) ; 
  2 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasOiliness(3)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(3)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasPrice(1)) ; 
  2 :: not atom(hasPrice(0))  ; 
  3 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasMinorGrp(11)) ; 
  5 :: atom(hasPrice(0)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasOiliness(3)) ; 
  4 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasOiliness(3)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasPrice(1)) ; 
  3 :: atom(hasPrice(3)) ; 
  4 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasOiliness(3)) ; 
  3 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(3)) ; 
  8 :: atom(hasOiliness(3)) ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOiliness(2)) ; 
  4 :: not atom(hasMinorGrp(2))  ; 
  1 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrice(3)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOiliness(2)) ; 
  1 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasMinorGrp(3)) ; 
  4 :: not atom(hasMinorGrp(2))  ; 
  6 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasOiliness(3)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasPrice(2)) ; 
  2 :: not atom(hasPrice(3))  
}.
