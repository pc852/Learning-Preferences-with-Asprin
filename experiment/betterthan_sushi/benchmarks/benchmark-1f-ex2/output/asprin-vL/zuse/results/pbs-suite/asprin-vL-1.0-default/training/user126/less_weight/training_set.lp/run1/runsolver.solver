asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,45) output(42,eq,35) output(42,eq,12) output(42,eq,28) output(42,eq,34) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,45) output(10,eq,35) output(10,eq,12) output(10,eq,28) output(10,eq,34) output(44,eq,2) output(44,eq,50) output(44,eq,45) output(44,eq,35) output(44,eq,12) output(44,eq,28) output(44,eq,34) output(2,eq,50) output(2,eq,45) output(2,eq,35) output(2,eq,12) output(2,eq,28) output(2,eq,34) output(50,eq,45) output(50,eq,35) output(50,eq,12) output(50,eq,28) output(50,eq,34) output(45,eq,35) output(45,eq,12) output(45,eq,28) output(45,eq,34) output(35,eq,12) output(35,eq,28) output(35,eq,34) output(12,eq,28) output(12,eq,34) output(28,eq,34)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(10,better,44) output(10,better,50) output(42,worse,10) output(42,worse,2) output(42,worse,45) output(42,worse,35) output(42,worse,12) output(42,worse,28) output(42,worse,34) output(44,worse,2) output(44,worse,45) output(44,worse,35) output(44,worse,12) output(44,worse,28) output(44,worse,34) output(50,worse,45) output(50,worse,35) output(50,worse,12) output(50,worse,28) output(50,worse,34) output(42,eq,44) output(42,eq,50) output(10,eq,2) output(10,eq,45) output(10,eq,35) output(10,eq,12) output(10,eq,28) output(10,eq,34) output(44,eq,50) output(2,eq,45) output(2,eq,35) output(2,eq,12) output(2,eq,28) output(2,eq,34) output(45,eq,35) output(45,eq,12) output(45,eq,28) output(45,eq,34) output(35,eq,12) output(35,eq,28) output(35,eq,34) output(12,eq,28) output(12,eq,34) output(28,eq,34)
Optimization: 42 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(2,better,45) output(10,better,44) output(10,better,50) output(10,better,45) output(42,worse,10) output(42,worse,2) output(42,worse,35) output(42,worse,12) output(42,worse,28) output(42,worse,34) output(44,worse,2) output(44,worse,35) output(44,worse,12) output(44,worse,28) output(44,worse,34) output(45,worse,35) output(45,worse,12) output(45,worse,28) output(45,worse,34) output(50,worse,35) output(50,worse,12) output(50,worse,28) output(50,worse,34) output(42,eq,44) output(42,eq,50) output(42,eq,45) output(10,eq,2) output(10,eq,35) output(10,eq,12) output(10,eq,28) output(10,eq,34) output(44,eq,50) output(44,eq,45) output(2,eq,35) output(2,eq,12) output(2,eq,28) output(2,eq,34) output(50,eq,45) output(35,eq,12) output(35,eq,28) output(35,eq,34) output(12,eq,28) output(12,eq,34) output(28,eq,34)
Optimization: 40 2
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(2,better,45) output(2,better,12) output(10,better,44) output(10,better,50) output(10,better,45) output(10,better,12) output(35,better,12) output(12,worse,28) output(12,worse,34) output(42,worse,10) output(42,worse,2) output(42,worse,35) output(42,worse,28) output(42,worse,34) output(44,worse,2) output(44,worse,35) output(44,worse,28) output(44,worse,34) output(45,worse,35) output(45,worse,28) output(45,worse,34) output(50,worse,35) output(50,worse,28) output(50,worse,34) output(42,eq,44) output(42,eq,50) output(42,eq,45) output(42,eq,12) output(10,eq,2) output(10,eq,35) output(10,eq,28) output(10,eq,34) output(44,eq,50) output(44,eq,45) output(44,eq,12) output(2,eq,35) output(2,eq,28) output(2,eq,34) output(50,eq,45) output(50,eq,12) output(45,eq,12) output(35,eq,28) output(35,eq,34) output(28,eq,34)
Optimization: 37 3
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasOftenSold(2))),10) preference(1,less(weight)) output(2,better,45) output(2,better,12) output(10,better,45) output(10,better,12) output(35,better,12) output(42,better,45) output(42,better,12) output(44,better,45) output(44,better,12) output(50,better,45) output(50,better,12) output(12,worse,28) output(12,worse,34) output(45,worse,35) output(45,worse,28) output(45,worse,34) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,35) output(42,eq,28) output(42,eq,34) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,35) output(10,eq,28) output(10,eq,34) output(44,eq,2) output(44,eq,50) output(44,eq,35) output(44,eq,28) output(44,eq,34) output(2,eq,50) output(2,eq,35) output(2,eq,28) output(2,eq,34) output(50,eq,35) output(50,eq,28) output(50,eq,34) output(45,eq,12) output(35,eq,28) output(35,eq,34) output(28,eq,34)
Optimization: 34 2
Answer: 6
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasPrice(2))),10) preference(1,less(weight)) output(2,better,45) output(2,better,28) output(10,better,45) output(10,better,28) output(12,better,28) output(35,better,28) output(42,better,45) output(42,better,28) output(44,better,45) output(44,better,28) output(50,better,45) output(50,better,28) output(28,worse,34) output(45,worse,35) output(45,worse,12) output(45,worse,34) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,35) output(42,eq,12) output(42,eq,34) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,35) output(10,eq,12) output(10,eq,34) output(44,eq,2) output(44,eq,50) output(44,eq,35) output(44,eq,12) output(44,eq,34) output(2,eq,50) output(2,eq,35) output(2,eq,12) output(2,eq,34) output(50,eq,35) output(50,eq,12) output(50,eq,34) output(45,eq,28) output(35,eq,12) output(35,eq,34) output(12,eq,34)
Optimization: 33 2
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(2,better,45) output(2,better,34) output(10,better,45) output(10,better,34) output(12,better,34) output(28,better,34) output(35,better,34) output(42,better,45) output(42,better,34) output(44,better,45) output(44,better,34) output(50,better,45) output(50,better,34) output(45,worse,35) output(45,worse,12) output(45,worse,28) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,35) output(42,eq,12) output(42,eq,28) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,35) output(10,eq,12) output(10,eq,28) output(44,eq,2) output(44,eq,50) output(44,eq,35) output(44,eq,12) output(44,eq,28) output(2,eq,50) output(2,eq,35) output(2,eq,12) output(2,eq,28) output(50,eq,35) output(50,eq,12) output(50,eq,28) output(45,eq,34) output(35,eq,12) output(35,eq,28) output(12,eq,28)
Optimization: 32 2
Answer: 8
preference(1,(1,11),1,for(atom(hasPrice(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(2,better,35) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,50) output(10,better,35) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(45,better,35) output(45,better,28) output(45,better,34) output(35,worse,12) output(42,worse,10) output(42,worse,2) output(42,worse,45) output(42,worse,12) output(44,worse,2) output(44,worse,45) output(44,worse,12) output(50,worse,45) output(50,worse,12) output(42,eq,44) output(42,eq,50) output(42,eq,35) output(42,eq,28) output(42,eq,34) output(10,eq,2) output(10,eq,45) output(10,eq,12) output(44,eq,50) output(44,eq,35) output(44,eq,28) output(44,eq,34) output(2,eq,45) output(2,eq,12) output(50,eq,35) output(50,eq,28) output(50,eq,34) output(45,eq,12) output(35,eq,28) output(35,eq,34) output(28,eq,34)
Optimization: 31 4
Answer: 9
preference(1,(1,11),1,for(atom(hasPrice(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,13),1,for(atom(hasOftenSold(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(2,better,50) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,50) output(10,better,12) output(10,better,28) output(10,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(45,better,12) output(45,better,28) output(45,better,34) output(42,worse,10) output(42,worse,2) output(42,worse,45) output(42,worse,35) output(44,worse,2) output(44,worse,45) output(44,worse,35) output(50,worse,45) output(50,worse,35) output(42,eq,44) output(42,eq,50) output(42,eq,12) output(42,eq,28) output(42,eq,34) output(10,eq,2) output(10,eq,45) output(10,eq,35) output(44,eq,50) output(44,eq,12) output(44,eq,28) output(44,eq,34) output(2,eq,45) output(2,eq,35) output(50,eq,12) output(50,eq,28) output(50,eq,34) output(45,eq,35) output(12,eq,28) output(12,eq,34) output(28,eq,34)
Optimization: 30 4
Answer: 10
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(2,better,45) output(2,better,12) output(2,better,34) output(10,better,45) output(10,better,12) output(10,better,34) output(28,better,34) output(35,better,12) output(35,better,34) output(42,better,45) output(42,better,12) output(42,better,34) output(44,better,45) output(44,better,12) output(44,better,34) output(50,better,45) output(50,better,12) output(50,better,34) output(12,worse,28) output(45,worse,35) output(45,worse,28) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,35) output(42,eq,28) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,35) output(10,eq,28) output(44,eq,2) output(44,eq,50) output(44,eq,35) output(44,eq,28) output(2,eq,50) output(2,eq,35) output(2,eq,28) output(50,eq,35) output(50,eq,28) output(45,eq,12) output(45,eq,34) output(35,eq,28) output(12,eq,34)
Optimization: 27 3
Answer: 11
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(2,better,45) output(2,better,28) output(2,better,34) output(10,better,45) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(35,better,28) output(35,better,34) output(42,better,45) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,28) output(44,better,34) output(50,better,45) output(50,better,28) output(50,better,34) output(45,worse,35) output(45,worse,12) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(42,eq,35) output(42,eq,12) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(10,eq,35) output(10,eq,12) output(44,eq,2) output(44,eq,50) output(44,eq,35) output(44,eq,12) output(2,eq,50) output(2,eq,35) output(2,eq,12) output(50,eq,35) output(50,eq,12) output(45,eq,28) output(45,eq,34) output(35,eq,12) output(28,eq,34)
Optimization: 26 3
Answer: 12
preference(1,(1,5),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,6),1,for(atom(hasOftenSold(3))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,9),1,for(atom(hasOftenSold(2))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,12),1,for(atom(hasPrice(2))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(35,better,12) output(35,better,28) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(12,worse,28) output(12,worse,34) output(28,worse,34) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(44,eq,2) output(44,eq,50) output(2,eq,50) output(35,eq,34)
Optimization: 14 9
Answer: 13
preference(1,(1,1),1,for(atom(hasPrice(3))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,6),1,for(atom(hasOftenSold(3))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,9),1,for(atom(hasOftenSold(2))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,12),1,for(atom(hasPrice(2))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(12,worse,28) output(12,worse,34) output(28,worse,34) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(44,eq,2) output(44,eq,50) output(2,eq,50)
Optimization: 13 10
Answer: 14
preference(1,(1,5),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,6),1,for(atom(hasOftenSold(3))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,8),1,for(atom(hasOftenSold(2))),9) preference(1,(1,9),1,for(atom(hasPrice(3))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,12),1,for(atom(hasPrice(2))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(12,worse,28) output(12,worse,34) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(44,eq,2) output(44,eq,50) output(2,eq,50)
Optimization: 12 10
Answer: 15
preference(1,(1,5),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,6),1,for(atom(hasOftenSold(3))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,8),1,for(atom(hasOftenSold(2))),7) preference(1,(1,9),1,for(atom(hasPrice(3))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,12),1,for(atom(hasPrice(2))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(42,eq,10) output(42,eq,44) output(42,eq,2) output(42,eq,50) output(10,eq,44) output(10,eq,2) output(10,eq,50) output(44,eq,2) output(44,eq,50) output(2,eq,50)
Optimization: 10 10
Answer: 16
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),6) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),9) preference(1,(1,1),1,for(atom(hasPrice(0))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,4),1,for(atom(hasOftenSold(1))),8) preference(1,(1,5),1,for(atom(hasOiliness(0))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,7),1,for(atom(hasMinorGrp(8))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,12),1,for(atom(hasPrice(2))),7) preference(1,(1,13),1,for(atom(hasPrice(3))),2) preference(1,(1,14),1,for(atom(hasOftenSold(2))),7) preference(1,less(weight)) output(2,better,28) output(2,better,34) output(10,better,2) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,2) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(2,worse,45) output(2,worse,35) output(10,worse,44) output(10,worse,50) output(42,eq,44) output(42,eq,50) output(44,eq,50) output(2,eq,12)
Optimization: 9 14
Answer: 17
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),6) preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),9) preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasPrice(0))),6) preference(1,(1,3),1,for(atom(hasPrice(3))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,5),1,for(atom(hasOftenSold(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,7),1,for(atom(hasOftenSold(2))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,13),1,for(atom(hasOiliness(0))),3) preference(1,(1,14),1,for(atom(hasPrice(2))),7) preference(1,less(weight)) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,2) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,2) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(2,worse,45) output(2,worse,35) output(10,worse,44) output(10,worse,50) output(42,eq,44) output(42,eq,50) output(44,eq,50)
Optimization: 8 14
Answer: 18
preference(1,(1,8),1,for(neg(atom(hasOftenSold(1)))),9) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(7)))),6) preference(1,(1,10),1,for(neg(atom(hasPrice(1)))),1) preference(1,(1,1),1,for(atom(hasOiliness(1))),1) preference(1,(1,2),1,for(atom(hasStyle(0))),4) preference(1,(1,3),1,for(atom(hasPrice(3))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,5),1,for(atom(hasOftenSold(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,7),1,for(atom(hasOftenSold(2))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),4) preference(1,(1,13),1,for(atom(hasOiliness(0))),3) preference(1,(1,14),1,for(atom(hasPrice(2))),7) preference(1,less(weight)) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,2) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,2) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(10,worse,44) output(10,worse,50) output(42,eq,44) output(42,eq,50) output(44,eq,50) output(2,eq,45)
Optimization: 7 14
Answer: 19
preference(1,(1,9),1,for(neg(atom(hasMinorGrp(7)))),6) preference(1,(1,1),1,for(atom(hasOftenSold(2))),9) preference(1,(1,2),1,for(atom(hasStyle(0))),4) preference(1,(1,3),1,for(atom(hasPrice(3))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,5),1,for(atom(hasOftenSold(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,7),1,for(atom(hasPrice(2))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),9) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),4) preference(1,(1,13),1,for(atom(hasOiliness(0))),3) preference(1,(1,14),1,for(atom(hasOftenSold(3))),4) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,2) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,2) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(10,worse,44) output(10,worse,50) output(42,eq,44) output(42,eq,50) output(44,eq,50)
Optimization: 6 14
Progression : [1;6] (Error: 5)
Progression : [2;6] (Error: 2)
Answer: 20
preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),4) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(7)))),1) preference(1,(1,8),1,for(neg(atom(hasOiliness(1)))),9) preference(1,(1,9),1,for(neg(atom(hasOiliness(2)))),4) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(1)))),10) preference(1,(1,1),1,for(atom(hasOiliness(1))),6) preference(1,(1,2),1,for(atom(hasOftenSold(1))),8) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,6),1,for(atom(hasPrice(3))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,10),1,for(atom(hasOftenSold(3))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(11))),5) preference(1,(1,13),1,for(atom(hasOftenSold(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),5) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,28) output(35,better,34) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(42,worse,10) output(44,eq,2) output(44,eq,50) output(2,eq,50) output(35,eq,12)
Optimization: 5 14
Answer: 21
preference(1,(1,3),1,for(neg(atom(hasOftenSold(2)))),5) preference(1,(1,9),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,12),1,for(neg(atom(hasOftenSold(0)))),10) preference(1,(1,14),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,1),1,for(atom(hasOftenSold(1))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,4),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasPrice(3))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(8))),3) preference(1,(1,7),1,for(atom(hasOftenSold(3))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),6) preference(1,less(weight)) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(2,worse,45) output(2,worse,35) output(44,eq,50)
Optimization: 4 14
Answer: 22
preference(1,(1,5),1,for(neg(atom(hasOiliness(2)))),7) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,12),1,for(neg(atom(hasOftenSold(1)))),3) preference(1,(1,1),1,for(atom(hasOftenSold(3))),9) preference(1,(1,2),1,for(atom(hasOftenSold(2))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,7),1,for(atom(hasOftenSold(1))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,13),1,for(atom(hasPrice(3))),9) preference(1,(1,14),1,for(atom(hasPrice(2))),9) preference(1,less(weight)) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50) output(2,eq,45)
Optimization: 3 14
Answer: 23
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(0)))),1) preference(1,(1,5),1,for(neg(atom(hasOiliness(2)))),7) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,12),1,for(neg(atom(hasOftenSold(1)))),3) preference(1,(1,1),1,for(atom(hasOftenSold(1))),10) preference(1,(1,2),1,for(atom(hasOftenSold(2))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,7),1,for(atom(hasOftenSold(3))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,13),1,for(atom(hasPrice(3))),9) preference(1,(1,14),1,for(atom(hasPrice(2))),9) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 14
Progression : 2 [ 1;14] (Error: 13)
Answer: 24
preference(1,(1,7),1,for(neg(atom(hasMinorGrp(4)))),8) preference(1,(1,9),1,for(neg(atom(hasOftenSold(1)))),6) preference(1,(1,1),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),6) preference(1,(1,3),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,4),1,for(atom(hasOiliness(1))),7) preference(1,(1,5),1,for(atom(hasPrice(3))),3) preference(1,(1,6),1,for(atom(hasOftenSold(3))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,10),1,for(atom(hasOftenSold(1))),10) preference(1,(1,11),1,for(atom(hasOiliness(2))),2) preference(1,(1,12),1,for(atom(hasOftenSold(2))),5) preference(1,(1,13),1,for(atom(hasPrice(2))),7) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 13
Answer: 25
preference(1,(1,5),1,for(neg(atom(hasMinorGrp(3)))),1) preference(1,(1,7),1,for(neg(atom(hasOiliness(3)))),4) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(8)))),6) preference(1,(1,10),1,for(neg(atom(hasOftenSold(0)))),2) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(6)))),9) preference(1,(1,12),1,for(neg(atom(hasOiliness(2)))),7) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(9)))),10) preference(1,(1,1),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,2),1,for(atom(hasPrice(3))),7) preference(1,(1,4),1,for(atom(hasStyle(1))),5) preference(1,(1,6),1,for(atom(hasOftenSold(1))),8) preference(1,(1,8),1,for(atom(hasOiliness(2))),3) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 12
Answer: 26
preference(1,(1,6),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,9),1,for(neg(atom(hasMinorGrp(8)))),5) preference(1,(1,2),1,for(atom(hasOiliness(1))),6) preference(1,(1,4),1,for(atom(hasOftenSold(1))),9) preference(1,(1,5),1,for(atom(hasOftenSold(0))),1) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,8),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,12),1,for(atom(hasOiliness(2))),3) preference(1,(1,14),1,for(atom(hasOftenSold(2))),7) preference(1,less(weight)) output(2,better,50) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(44,worse,2) output(44,eq,50)
Optimization: 2 11
Answer: 27
preference(1,(1,12),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,13),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,14),1,for(neg(atom(hasOftenSold(0)))),3) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,4),1,for(atom(hasOiliness(1))),4) preference(1,(1,8),1,for(atom(hasOftenSold(1))),8) preference(1,(1,9),1,for(atom(hasOftenSold(2))),8) preference(1,(1,10),1,for(atom(hasPrice(2))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),2) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 10
Progression : 2 [ 2;10] (Error: 4)
Answer: 28
preference(1,(1,14),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,1),1,for(atom(hasPrice(3))),8) preference(1,(1,2),1,for(atom(hasOftenSold(3))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,4),1,for(atom(hasOftenSold(1))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,11),1,for(atom(hasOiliness(1))),3) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),3) preference(1,less(weight)) output(2,better,50) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(44,worse,2) output(44,eq,50)
Optimization: 2 9
Answer: 29
preference(1,(1,14),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,1),1,for(atom(hasOftenSold(2))),2) preference(1,(1,2),1,for(atom(hasOftenSold(1))),9) preference(1,(1,4),1,for(atom(hasPrice(3))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,10),1,for(atom(hasOiliness(1))),5) preference(1,(1,12),1,for(atom(hasPrice(2))),2) preference(1,(1,13),1,for(atom(hasOftenSold(3))),2) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 8
Answer: 30
preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,1),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,2),1,for(atom(hasPrice(3))),7) preference(1,(1,5),1,for(atom(hasOftenSold(1))),9) preference(1,(1,10),1,for(atom(hasOiliness(1))),5) preference(1,(1,12),1,for(atom(hasOftenSold(2))),1) preference(1,(1,13),1,for(atom(hasOftenSold(3))),2) preference(1,less(weight)) output(2,better,45) output(2,better,35) output(2,better,12) output(2,better,28) output(2,better,34) output(10,better,44) output(10,better,2) output(10,better,50) output(10,better,45) output(10,better,35) output(10,better,12) output(10,better,28) output(10,better,34) output(12,better,28) output(12,better,34) output(28,better,34) output(35,better,12) output(35,better,28) output(35,better,34) output(42,better,10) output(42,better,44) output(42,better,2) output(42,better,50) output(42,better,45) output(42,better,35) output(42,better,12) output(42,better,28) output(42,better,34) output(44,better,2) output(44,better,45) output(44,better,35) output(44,better,12) output(44,better,28) output(44,better,34) output(45,better,35) output(45,better,12) output(45,better,28) output(45,better,34) output(50,better,45) output(50,better,35) output(50,better,12) output(50,better,28) output(50,better,34) output(2,worse,50) output(44,eq,50)
Optimization: 2 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.101 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 30+
  Optimum    : unknown
Optimization : 2 7
Bounds       : 2 [2;7]
Calls        : 1
Time         : 598.175s (Solving: 584.71s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 2351.852s
Threads      : 4        (Winner: 4)

Choices      : 9614623  (Domain: 2469)
Conflicts    : 1797995  (Analyzed: 1797991)
Restarts     : 1832     (Average: 981.44 Last: 130382)
Model-Level  : 1364.3  
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 1803910  (Deleted: 1630726)
  Binary     : 1146     (Ratio:   0.06%)
  Ternary    : 498      (Ratio:   0.03%)
  Conflict   : 1797991  (Average Length: 1912.4 Ratio:  99.67%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 5919     (Average Length:  147.2 Ratio:   0.33%) 
  Distributed: 1973     (Ratio:   0.11% Average LBD: 3.35) 
  Integrated : 5919     (Ratio: 300.00% Unit: 14 Average Jumps: 407.71)
Backjumps    : 1797991  (Average:  3.29 Max: 4955 Sum: 5906617)
  Executed   : 1797979  (Average:  3.29 Max: 4955 Sum: 5906430 Ratio: 100.00%)
  Bounded    : 12       (Average: 15.58 Max:  39 Sum:    187 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasPrice(3)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasPrice(3)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(0)) ; 
  6 :: not atom(hasOftenSold(2))  ; 
  2 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOiliness(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMinorGrp(8)) ; 
  9 :: not atom(hasOftenSold(1))  ; 
  4 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasPrice(2)) ; 
  2 :: atom(hasPrice(3)) ; 
  7 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(0)) ; 
  6 :: not atom(hasOftenSold(2))  ; 
  5 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(8)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  9 :: not atom(hasOftenSold(1))  ; 
  4 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasStyle(0)) ; 
  5 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(8)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  9 :: not atom(hasOftenSold(1))  ; 
  6 :: not atom(hasMinorGrp(7))  ; 
  1 :: not atom(hasPrice(1))  ; 
  9 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasMinorGrp(10)) ; 
  3 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasStyle(0)) ; 
  5 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(8)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasPrice(2)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  6 :: not atom(hasMinorGrp(7))  ; 
  9 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMinorGrp(10)) ; 
  3 :: atom(hasOiliness(0)) ; 
  4 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  4 :: not atom(hasMajorGrp(0))  ; 
  1 :: not atom(hasMinorGrp(7))  ; 
  7 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  9 :: not atom(hasOiliness(1))  ; 
  4 :: not atom(hasOiliness(2))  ; 
  9 :: atom(hasOftenSold(3)) ; 
  10 :: not atom(hasMinorGrp(1))  ; 
  5 :: atom(hasMinorGrp(11)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasMinorGrp(7)) ; 
  5 :: not atom(hasOftenSold(2))  ; 
  6 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasPrice(3)) ; 
  3 :: atom(hasMinorGrp(8)) ; 
  4 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasMinorGrp(11)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasOiliness(1)) ; 
  10 :: not atom(hasOftenSold(0))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  9 :: not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  7 :: not atom(hasOiliness(2))  ; 
  2 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  6 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasMajorGrp(1)) ; 
  3 :: not atom(hasOftenSold(1))  ; 
  9 :: atom(hasPrice(3)) ; 
  9 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  1 :: not atom(hasMinorGrp(0))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  7 :: not atom(hasOiliness(2))  ; 
  6 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasOftenSold(3)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  6 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  3 :: not atom(hasOftenSold(1))  ; 
  9 :: atom(hasPrice(3)) ; 
  9 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(8)) ; 
  6 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasPrice(3)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  8 :: not atom(hasMinorGrp(4))  ; 
  9 :: atom(hasMinorGrp(4)) ; 
  6 :: not atom(hasOftenSold(1))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasPrice(3)) ; 
  5 :: atom(hasStyle(1)) ; 
  1 :: not atom(hasMinorGrp(3))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  4 :: not atom(hasOiliness(3))  ; 
  3 :: atom(hasOiliness(2)) ; 
  6 :: not atom(hasMinorGrp(8))  ; 
  2 :: not atom(hasOftenSold(0))  ; 
  9 :: not atom(hasMinorGrp(6))  ; 
  7 :: not atom(hasOiliness(2))  ; 
  10 :: not atom(hasMinorGrp(9))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOiliness(1)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  5 :: not atom(hasMinorGrp(8))  ; 
  4 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOiliness(2)) ; 
  7 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  8 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasPrice(2)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  2 :: not atom(hasOiliness(1))  ; 
  3 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(11)) ; 
  5 :: not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  8 :: not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasPrice(3)) ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasOftenSold(3)) 
}.
