asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(8,eq,19) output(8,eq,36) output(8,eq,1) output(8,eq,16) output(8,eq,13) output(8,eq,7) output(8,eq,9) output(8,eq,23) output(8,eq,69) output(19,eq,36) output(19,eq,1) output(19,eq,16) output(19,eq,13) output(19,eq,7) output(19,eq,9) output(19,eq,23) output(19,eq,69) output(36,eq,1) output(36,eq,16) output(36,eq,13) output(36,eq,7) output(36,eq,9) output(36,eq,23) output(36,eq,69) output(1,eq,16) output(1,eq,13) output(1,eq,7) output(1,eq,9) output(1,eq,23) output(1,eq,69) output(16,eq,13) output(16,eq,7) output(16,eq,9) output(16,eq,23) output(16,eq,69) output(13,eq,7) output(13,eq,9) output(13,eq,23) output(13,eq,69) output(7,eq,9) output(7,eq,23) output(7,eq,69) output(9,eq,23) output(9,eq,69) output(23,eq,69)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(1,better,16) output(8,better,16) output(19,better,16) output(36,better,16) output(16,worse,13) output(16,worse,7) output(16,worse,9) output(16,worse,23) output(16,worse,69) output(8,eq,19) output(8,eq,36) output(8,eq,1) output(8,eq,13) output(8,eq,7) output(8,eq,9) output(8,eq,23) output(8,eq,69) output(19,eq,36) output(19,eq,1) output(19,eq,13) output(19,eq,7) output(19,eq,9) output(19,eq,23) output(19,eq,69) output(36,eq,1) output(36,eq,13) output(36,eq,7) output(36,eq,9) output(36,eq,23) output(36,eq,69) output(1,eq,13) output(1,eq,7) output(1,eq,9) output(1,eq,23) output(1,eq,69) output(13,eq,7) output(13,eq,9) output(13,eq,23) output(13,eq,69) output(7,eq,9) output(7,eq,23) output(7,eq,69) output(9,eq,23) output(9,eq,69) output(23,eq,69)
Optimization: 41 1
Answer: 3
preference(1,(1,14),1,for(atom(hasOftenSold(0))),10) preference(1,less(weight)) output(1,better,69) output(7,better,69) output(8,better,69) output(9,better,69) output(13,better,69) output(16,better,69) output(19,better,69) output(23,better,69) output(36,better,69) output(8,eq,19) output(8,eq,36) output(8,eq,1) output(8,eq,16) output(8,eq,13) output(8,eq,7) output(8,eq,9) output(8,eq,23) output(19,eq,36) output(19,eq,1) output(19,eq,16) output(19,eq,13) output(19,eq,7) output(19,eq,9) output(19,eq,23) output(36,eq,1) output(36,eq,16) output(36,eq,13) output(36,eq,7) output(36,eq,9) output(36,eq,23) output(1,eq,16) output(1,eq,13) output(1,eq,7) output(1,eq,9) output(1,eq,23) output(16,eq,13) output(16,eq,7) output(16,eq,9) output(16,eq,23) output(13,eq,7) output(13,eq,9) output(13,eq,23) output(7,eq,9) output(7,eq,23) output(9,eq,23)
Optimization: 36 1
Answer: 4
preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),10) preference(1,less(weight)) output(1,better,69) output(7,better,69) output(8,better,36) output(8,better,69) output(9,better,69) output(13,better,69) output(16,better,69) output(19,better,36) output(19,better,69) output(23,better,69) output(36,worse,1) output(36,worse,16) output(36,worse,13) output(36,worse,7) output(36,worse,9) output(36,worse,23) output(8,eq,19) output(8,eq,1) output(8,eq,16) output(8,eq,13) output(8,eq,7) output(8,eq,9) output(8,eq,23) output(19,eq,1) output(19,eq,16) output(19,eq,13) output(19,eq,7) output(19,eq,9) output(19,eq,23) output(36,eq,69) output(1,eq,16) output(1,eq,13) output(1,eq,7) output(1,eq,9) output(1,eq,23) output(16,eq,13) output(16,eq,7) output(16,eq,9) output(16,eq,23) output(13,eq,7) output(13,eq,9) output(13,eq,23) output(7,eq,9) output(7,eq,23) output(9,eq,23)
Optimization: 35 2
Answer: 5
preference(1,(1,13),1,for(atom(hasOftenSold(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(1,better,16) output(1,better,69) output(7,better,69) output(8,better,16) output(8,better,69) output(9,better,69) output(13,better,69) output(19,better,16) output(19,better,69) output(23,better,69) output(36,better,16) output(36,better,69) output(16,worse,13) output(16,worse,7) output(16,worse,9) output(16,worse,23) output(8,eq,19) output(8,eq,36) output(8,eq,1) output(8,eq,13) output(8,eq,7) output(8,eq,9) output(8,eq,23) output(19,eq,36) output(19,eq,1) output(19,eq,13) output(19,eq,7) output(19,eq,9) output(19,eq,23) output(36,eq,1) output(36,eq,13) output(36,eq,7) output(36,eq,9) output(36,eq,23) output(1,eq,13) output(1,eq,7) output(1,eq,9) output(1,eq,23) output(16,eq,69) output(13,eq,7) output(13,eq,9) output(13,eq,23) output(7,eq,9) output(7,eq,23) output(9,eq,23)
Optimization: 33 2
Answer: 6
preference(1,(1,11),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(1,better,16) output(1,better,9) output(1,better,69) output(7,better,9) output(7,better,69) output(8,better,16) output(8,better,9) output(8,better,69) output(13,better,9) output(13,better,69) output(19,better,16) output(19,better,9) output(19,better,69) output(23,better,69) output(36,better,16) output(36,better,9) output(36,better,69) output(9,worse,23) output(16,worse,13) output(16,worse,7) output(16,worse,23) output(8,eq,19) output(8,eq,36) output(8,eq,1) output(8,eq,13) output(8,eq,7) output(8,eq,23) output(19,eq,36) output(19,eq,1) output(19,eq,13) output(19,eq,7) output(19,eq,23) output(36,eq,1) output(36,eq,13) output(36,eq,7) output(36,eq,23) output(1,eq,13) output(1,eq,7) output(1,eq,23) output(16,eq,9) output(16,eq,69) output(13,eq,7) output(13,eq,23) output(7,eq,23) output(9,eq,69)
Optimization: 28 3
Answer: 7
preference(1,(1,11),1,for(atom(hasOftenSold(0))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(1,better,16) output(1,better,7) output(1,better,9) output(1,better,69) output(8,better,16) output(8,better,7) output(8,better,9) output(8,better,69) output(13,better,7) output(13,better,9) output(13,better,69) output(19,better,16) output(19,better,7) output(19,better,9) output(19,better,69) output(23,better,69) output(36,better,16) output(36,better,7) output(36,better,9) output(36,better,69) output(7,worse,23) output(9,worse,23) output(16,worse,13) output(16,worse,23) output(8,eq,19) output(8,eq,36) output(8,eq,1) output(8,eq,13) output(8,eq,23) output(19,eq,36) output(19,eq,1) output(19,eq,13) output(19,eq,23) output(36,eq,1) output(36,eq,13) output(36,eq,23) output(1,eq,13) output(1,eq,23) output(16,eq,7) output(16,eq,9) output(16,eq,69) output(13,eq,23) output(7,eq,9) output(7,eq,69) output(9,eq,69)
Optimization: 25 4
Answer: 8
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,10),1,for(atom(hasOftenSold(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(1,better,16) output(1,better,13) output(1,better,7) output(1,better,23) output(1,better,69) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,23) output(8,better,69) output(9,better,23) output(9,better,69) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,23) output(19,better,69) output(36,better,16) output(36,better,13) output(36,better,7) output(36,better,23) output(36,better,69) output(7,worse,9) output(13,worse,9) output(16,worse,9) output(8,eq,19) output(8,eq,36) output(8,eq,1) output(8,eq,9) output(19,eq,36) output(19,eq,1) output(19,eq,9) output(36,eq,1) output(36,eq,9) output(1,eq,9) output(16,eq,13) output(16,eq,7) output(16,eq,23) output(16,eq,69) output(13,eq,7) output(13,eq,23) output(13,eq,69) output(7,eq,23) output(7,eq,69) output(23,eq,69)
Optimization: 23 6
Answer: 9
preference(1,(1,9),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasPrice(0))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,4),1,for(atom(hasOftenSold(0))),10) preference(1,(1,5),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(1,better,16) output(1,better,7) output(1,better,9) output(1,better,23) output(1,better,69) output(8,better,16) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(13,better,7) output(13,better,9) output(13,better,23) output(13,better,69) output(19,better,16) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(36,better,16) output(36,better,7) output(36,better,9) output(36,better,23) output(36,better,69) output(16,worse,13) output(8,eq,19) output(8,eq,36) output(8,eq,1) output(8,eq,13) output(19,eq,36) output(19,eq,1) output(19,eq,13) output(36,eq,1) output(36,eq,13) output(1,eq,13) output(16,eq,7) output(16,eq,9) output(16,eq,23) output(16,eq,69) output(7,eq,9) output(7,eq,23) output(7,eq,69) output(9,eq,23) output(9,eq,69) output(23,eq,69)
Optimization: 21 8
Answer: 10
preference(1,(1,1),1,for(atom(hasMinorGrp(9))),4) preference(1,(1,2),1,for(atom(hasOiliness(2))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,5),1,for(atom(hasPrice(2))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,7),1,for(atom(hasPrice(3))),3) preference(1,(1,8),1,for(atom(hasOftenSold(0))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,11),1,for(atom(hasPrice(1))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(11))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,14),1,for(atom(hasOftenSold(3))),8) preference(1,less(weight)) output(1,better,9) output(7,better,9) output(7,better,69) output(8,better,1) output(8,better,16) output(8,better,7) output(8,better,9) output(8,better,69) output(13,better,7) output(13,better,9) output(13,better,69) output(16,better,9) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,16) output(36,better,7) output(36,better,9) output(36,better,69) output(1,worse,16) output(1,worse,13) output(1,worse,7) output(1,worse,23) output(1,worse,69) output(7,worse,23) output(8,worse,19) output(8,worse,36) output(8,worse,13) output(8,worse,23) output(9,worse,23) output(9,worse,69) output(13,worse,23) output(16,worse,13) output(16,worse,7) output(16,worse,23) output(16,worse,69) output(19,worse,23) output(36,worse,23) output(36,eq,13)
Optimization: 20 14
Answer: 11
preference(1,(1,2),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,4),1,for(atom(hasOiliness(2))),3) preference(1,(1,5),1,for(atom(hasPrice(2))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,7),1,for(atom(hasPrice(3))),3) preference(1,(1,8),1,for(atom(hasOftenSold(1))),1) preference(1,(1,9),1,for(atom(hasOftenSold(0))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,11),1,for(atom(hasPrice(1))),9) preference(1,(1,12),1,for(atom(hasOiliness(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(9))),2) preference(1,(1,14),1,for(atom(hasOftenSold(3))),8) preference(1,less(weight)) output(1,better,16) output(1,better,9) output(7,better,9) output(7,better,69) output(8,better,1) output(8,better,16) output(8,better,7) output(8,better,9) output(8,better,69) output(13,better,7) output(13,better,9) output(13,better,69) output(16,better,9) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,16) output(36,better,7) output(36,better,9) output(36,better,69) output(1,worse,13) output(1,worse,7) output(1,worse,23) output(1,worse,69) output(7,worse,23) output(8,worse,19) output(8,worse,36) output(8,worse,13) output(8,worse,23) output(9,worse,23) output(9,worse,69) output(13,worse,23) output(16,worse,13) output(16,worse,7) output(16,worse,23) output(16,worse,69) output(19,worse,23) output(36,worse,23) output(36,eq,13)
Optimization: 19 13
Answer: 12
preference(1,(1,2),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,5),1,for(atom(hasPrice(2))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,7),1,for(atom(hasPrice(3))),3) preference(1,(1,8),1,for(atom(hasOftenSold(1))),1) preference(1,(1,9),1,for(atom(hasOiliness(2))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),8) preference(1,(1,11),1,for(atom(hasPrice(1))),9) preference(1,(1,12),1,for(atom(hasOiliness(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),8) preference(1,less(weight)) output(1,better,16) output(1,better,9) output(7,better,9) output(7,better,69) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,69) output(13,better,7) output(13,better,9) output(13,better,69) output(16,better,9) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,16) output(36,better,7) output(36,better,9) output(36,better,69) output(1,worse,13) output(1,worse,7) output(1,worse,23) output(1,worse,69) output(7,worse,23) output(8,worse,23) output(9,worse,23) output(9,worse,69) output(13,worse,23) output(16,worse,13) output(16,worse,7) output(16,worse,23) output(16,worse,69) output(19,worse,23) output(36,worse,23) output(8,eq,19) output(36,eq,13)
Optimization: 17 12
Answer: 13
preference(1,(1,1),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),6) preference(1,(1,4),1,for(atom(hasOftenSold(2))),2) preference(1,(1,5),1,for(atom(hasPrice(2))),6) preference(1,(1,6),1,for(atom(hasOftenSold(0))),10) preference(1,(1,7),1,for(atom(hasOiliness(0))),3) preference(1,(1,8),1,for(atom(hasOftenSold(1))),1) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,11),1,for(atom(hasPrice(1))),9) preference(1,(1,12),1,for(atom(hasOiliness(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,14),1,for(atom(hasPrice(0))),3) preference(1,less(weight)) output(7,better,9) output(7,better,69) output(8,better,19) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(13,better,9) output(13,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,13) output(36,better,7) output(36,better,9) output(36,better,69) output(1,worse,16) output(1,worse,13) output(1,worse,7) output(1,worse,9) output(1,worse,23) output(1,worse,69) output(7,worse,23) output(9,worse,23) output(13,worse,7) output(13,worse,23) output(16,worse,23) output(36,worse,16) output(36,worse,23) output(19,eq,23) output(9,eq,69)
Optimization: 15 14
Answer: 14
preference(1,(1,1),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,5),1,for(atom(hasPrice(2))),6) preference(1,(1,6),1,for(atom(hasOftenSold(0))),10) preference(1,(1,7),1,for(atom(hasOiliness(0))),3) preference(1,(1,8),1,for(atom(hasOftenSold(1))),1) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,11),1,for(atom(hasPrice(1))),9) preference(1,(1,12),1,for(atom(hasOiliness(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,14),1,for(atom(hasPrice(0))),3) preference(1,less(weight)) output(7,better,9) output(7,better,69) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(13,better,9) output(13,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,23) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,13) output(36,better,7) output(36,better,9) output(36,better,69) output(1,worse,16) output(1,worse,13) output(1,worse,7) output(1,worse,9) output(1,worse,23) output(1,worse,69) output(7,worse,23) output(9,worse,23) output(13,worse,7) output(13,worse,23) output(36,worse,16) output(36,worse,23) output(8,eq,19) output(9,eq,69)
Optimization: 14 14
Answer: 15
preference(1,(1,1),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,5),1,for(atom(hasPrice(2))),6) preference(1,(1,6),1,for(atom(hasOftenSold(0))),10) preference(1,(1,7),1,for(atom(hasOiliness(0))),3) preference(1,(1,8),1,for(atom(hasOftenSold(1))),1) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,11),1,for(atom(hasPrice(1))),9) preference(1,(1,12),1,for(atom(hasOiliness(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,14),1,for(atom(hasPrice(0))),3) preference(1,less(weight)) output(1,better,13) output(7,better,9) output(7,better,23) output(7,better,69) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,23) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,13) output(36,better,7) output(36,better,9) output(36,better,23) output(36,better,69) output(1,worse,16) output(1,worse,7) output(1,worse,9) output(1,worse,23) output(1,worse,69) output(9,worse,23) output(13,worse,7) output(13,worse,9) output(13,worse,23) output(13,worse,69) output(36,worse,16) output(8,eq,19) output(9,eq,69)
Optimization: 13 14
Answer: 16
preference(1,(1,1),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,5),1,for(atom(hasPrice(2))),6) preference(1,(1,6),1,for(atom(hasOftenSold(0))),10) preference(1,(1,7),1,for(atom(hasOiliness(0))),3) preference(1,(1,8),1,for(atom(hasOftenSold(1))),1) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,11),1,for(atom(hasPrice(1))),9) preference(1,(1,12),1,for(atom(hasOiliness(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,14),1,for(atom(hasPrice(0))),3) preference(1,less(weight)) output(7,better,9) output(7,better,23) output(7,better,69) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(13,better,7) output(13,better,9) output(13,better,23) output(13,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,23) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,7) output(36,better,9) output(36,better,23) output(36,better,69) output(1,worse,16) output(1,worse,13) output(1,worse,7) output(1,worse,9) output(1,worse,23) output(1,worse,69) output(9,worse,23) output(36,worse,16) output(8,eq,19) output(36,eq,13) output(9,eq,69)
Optimization: 11 14
Answer: 17
preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),1) preference(1,(1,14),1,for(neg(atom(hasOftenSold(3)))),5) preference(1,(1,1),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,2),1,for(atom(hasOftenSold(2))),5) preference(1,(1,3),1,for(atom(hasStyle(0))),7) preference(1,(1,4),1,for(atom(hasOiliness(1))),4) preference(1,(1,5),1,for(atom(hasOftenSold(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(hasOftenSold(0))),7) preference(1,(1,8),1,for(atom(hasPrice(0))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(9))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),8) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),4) preference(1,less(weight)) output(1,better,16) output(1,better,13) output(1,better,7) output(1,better,9) output(1,better,23) output(1,better,69) output(7,better,9) output(7,better,23) output(7,better,69) output(8,better,19) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(9,better,23) output(9,better,69) output(13,better,7) output(13,better,9) output(13,better,23) output(13,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,23) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,16) output(36,better,13) output(36,better,7) output(36,better,9) output(36,better,23) output(36,better,69)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 18
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(1)))),2) preference(1,(1,2),1,for(neg(atom(hasOftenSold(3)))),5) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,12),1,for(neg(atom(hasMajorGrp(0)))),4) preference(1,(1,3),1,for(atom(hasOiliness(0))),1) preference(1,(1,4),1,for(atom(hasOiliness(1))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,9),1,for(atom(hasPrice(0))),3) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(9))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),7) preference(1,less(weight)) output(1,better,16) output(1,better,13) output(1,better,7) output(1,better,9) output(1,better,23) output(1,better,69) output(7,better,9) output(7,better,23) output(7,better,69) output(8,better,19) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(9,better,23) output(9,better,69) output(13,better,7) output(13,better,9) output(13,better,23) output(13,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,23) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,16) output(36,better,13) output(36,better,7) output(36,better,9) output(36,better,23) output(36,better,69)
Optimization: 0 13
Answer: 19
preference(1,(1,13),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(2))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,3),1,for(atom(hasOiliness(2))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,8),1,for(atom(hasOftenSold(1))),2) preference(1,(1,9),1,for(atom(hasPrice(1))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),9) preference(1,(1,11),1,for(atom(hasPrice(0))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,14),1,for(atom(hasOiliness(1))),2) preference(1,less(weight)) output(1,better,16) output(1,better,13) output(1,better,7) output(1,better,9) output(1,better,23) output(1,better,69) output(7,better,9) output(7,better,23) output(7,better,69) output(8,better,19) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(9,better,23) output(9,better,69) output(13,better,7) output(13,better,9) output(13,better,23) output(13,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,23) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,16) output(36,better,13) output(36,better,7) output(36,better,9) output(36,better,23) output(36,better,69)
Optimization: 0 12
Answer: 20
preference(1,(1,13),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(2))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,3),1,for(atom(hasOiliness(2))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasPrice(1))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),9) preference(1,(1,11),1,for(atom(hasPrice(0))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,14),1,for(atom(hasOiliness(1))),2) preference(1,less(weight)) output(1,better,16) output(1,better,13) output(1,better,7) output(1,better,9) output(1,better,23) output(1,better,69) output(7,better,9) output(7,better,23) output(7,better,69) output(8,better,19) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(9,better,23) output(9,better,69) output(13,better,7) output(13,better,9) output(13,better,23) output(13,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,23) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,16) output(36,better,13) output(36,better,7) output(36,better,9) output(36,better,23) output(36,better,69)
Optimization: 0 11
Answer: 21
preference(1,(1,13),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(2))),3) preference(1,(1,3),1,for(atom(hasOiliness(2))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasPrice(1))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,11),1,for(atom(hasPrice(0))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,14),1,for(atom(hasOiliness(1))),2) preference(1,less(weight)) output(1,better,16) output(1,better,13) output(1,better,7) output(1,better,9) output(1,better,23) output(1,better,69) output(7,better,9) output(7,better,23) output(7,better,69) output(8,better,19) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(9,better,23) output(9,better,69) output(13,better,7) output(13,better,9) output(13,better,23) output(13,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,23) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,16) output(36,better,13) output(36,better,7) output(36,better,9) output(36,better,23) output(36,better,69)
Optimization: 0 10
Answer: 22
preference(1,(1,8),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(2))),3) preference(1,(1,2),1,for(atom(hasOftenSold(0))),10) preference(1,(1,3),1,for(atom(hasOiliness(2))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,9),1,for(atom(hasPrice(1))),6) preference(1,(1,11),1,for(atom(hasPrice(0))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,14),1,for(atom(hasOiliness(1))),2) preference(1,less(weight)) output(1,better,16) output(1,better,13) output(1,better,7) output(1,better,9) output(1,better,23) output(1,better,69) output(7,better,9) output(7,better,23) output(7,better,69) output(8,better,19) output(8,better,36) output(8,better,1) output(8,better,16) output(8,better,13) output(8,better,7) output(8,better,9) output(8,better,23) output(8,better,69) output(9,better,23) output(9,better,69) output(13,better,7) output(13,better,9) output(13,better,23) output(13,better,69) output(16,better,13) output(16,better,7) output(16,better,9) output(16,better,23) output(16,better,69) output(19,better,36) output(19,better,1) output(19,better,16) output(19,better,13) output(19,better,7) output(19,better,9) output(19,better,23) output(19,better,69) output(23,better,69) output(36,better,1) output(36,better,16) output(36,better,13) output(36,better,7) output(36,better,9) output(36,better,23) output(36,better,69)
Optimization: 0 9
Progression : 0 [2;9] (Error: 3.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.085 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 22+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 298.087s (Solving: 284.38s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 1150.605s
Threads      : 4        (Winner: 4)

Choices      : 5420464  (Domain: 652)
Conflicts    : 890127   (Analyzed: 890125)
Restarts     : 1152     (Average: 772.68 Last: 16266)
Model-Level  : 1474.8  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 892066   (Deleted: 769602)
  Binary     : 200      (Ratio:   0.02%)
  Ternary    : 74       (Ratio:   0.01%)
  Conflict   : 890125   (Average Length: 1798.7 Ratio:  99.78%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 1941     (Average Length:  234.4 Ratio:   0.22%) 
  Distributed: 647      (Ratio:   0.07% Average LBD: 3.41) 
  Integrated : 1941     (Ratio: 300.00% Unit: 1 Average Jumps: 7.00)
Backjumps    : 890125   (Average:  3.62 Max: 3415 Sum: 3220391)
  Executed   : 890124   (Average:  3.62 Max: 3415 Sum: 3220372 Ratio: 100.00%)
  Bounded    : 1        (Average: 19.00 Max:  19 Sum:     19 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(11)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(11)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(11)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(9)) ; 
  1 :: atom(hasOiliness(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPrice(2)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasPrice(3)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasPrice(2)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasPrice(3)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(9)) ; 
  8 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasPrice(2)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasPrice(3)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasOiliness(2)) ; 
  8 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(6)) ; 
  8 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMinorGrp(9)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasPrice(2)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMinorGrp(9)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPrice(2)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPrice(2)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMinorGrp(9)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPrice(2)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMajorGrp(1)) ; 
  5 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasStyle(0)) ; 
  4 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(9)) ; 
  8 :: atom(hasMinorGrp(3)) ; 
  1 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(7)) ; 
  5 :: not atom(hasOftenSold(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasMajorGrp(1))  ; 
  5 :: not atom(hasOftenSold(3))  ; 
  1 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  5 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasPrice(0)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasMinorGrp(9)) ; 
  4 :: not atom(hasMajorGrp(0))  ; 
  6 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasPrice(1)) ; 
  9 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  2 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPrice(1)) ; 
  9 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  2 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPrice(1)) ; 
  10 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  2 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasOiliness(2)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: not atom(hasOiliness(1))  ; 
  6 :: atom(hasPrice(1)) ; 
  6 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasOiliness(1)) 
}.
