asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(12,eq,5) output(12,eq,8) output(12,eq,22) output(12,eq,15) output(12,eq,31) output(12,eq,61) output(12,eq,23) output(12,eq,10) output(12,eq,55) output(5,eq,8) output(5,eq,22) output(5,eq,15) output(5,eq,31) output(5,eq,61) output(5,eq,23) output(5,eq,10) output(5,eq,55) output(8,eq,22) output(8,eq,15) output(8,eq,31) output(8,eq,61) output(8,eq,23) output(8,eq,10) output(8,eq,55) output(22,eq,15) output(22,eq,31) output(22,eq,61) output(22,eq,23) output(22,eq,10) output(22,eq,55) output(15,eq,31) output(15,eq,61) output(15,eq,23) output(15,eq,10) output(15,eq,55) output(31,eq,61) output(31,eq,23) output(31,eq,10) output(31,eq,55) output(61,eq,23) output(61,eq,10) output(61,eq,55) output(23,eq,10) output(23,eq,55) output(10,eq,55)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(61,better,23) output(5,better,23) output(8,better,23) output(12,better,23) output(15,better,23) output(22,better,23) output(31,better,23) output(23,worse,10) output(23,worse,55) output(12,eq,5) output(12,eq,8) output(12,eq,22) output(12,eq,15) output(12,eq,31) output(12,eq,61) output(12,eq,10) output(12,eq,55) output(5,eq,8) output(5,eq,22) output(5,eq,15) output(5,eq,31) output(5,eq,61) output(5,eq,10) output(5,eq,55) output(8,eq,22) output(8,eq,15) output(8,eq,31) output(8,eq,61) output(8,eq,10) output(8,eq,55) output(22,eq,15) output(22,eq,31) output(22,eq,61) output(22,eq,10) output(22,eq,55) output(15,eq,31) output(15,eq,61) output(15,eq,10) output(15,eq,55) output(31,eq,61) output(31,eq,10) output(31,eq,55) output(61,eq,10) output(61,eq,55) output(10,eq,55)
Optimization: 38 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(5,better,31) output(5,better,61) output(8,better,31) output(8,better,61) output(12,better,31) output(12,better,61) output(15,better,31) output(15,better,61) output(22,better,31) output(22,better,61) output(61,worse,23) output(61,worse,10) output(61,worse,55) output(31,worse,23) output(31,worse,10) output(31,worse,55) output(12,eq,5) output(12,eq,8) output(12,eq,22) output(12,eq,15) output(12,eq,23) output(12,eq,10) output(12,eq,55) output(5,eq,8) output(5,eq,22) output(5,eq,15) output(5,eq,23) output(5,eq,10) output(5,eq,55) output(8,eq,22) output(8,eq,15) output(8,eq,23) output(8,eq,10) output(8,eq,55) output(22,eq,15) output(22,eq,23) output(22,eq,10) output(22,eq,55) output(15,eq,23) output(15,eq,10) output(15,eq,55) output(31,eq,61) output(23,eq,10) output(23,eq,55) output(10,eq,55)
Optimization: 35 2
Answer: 4
preference(1,(1,1),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(5,better,61) output(5,better,23) output(8,better,61) output(8,better,23) output(12,better,61) output(12,better,23) output(15,better,61) output(15,better,23) output(22,better,61) output(22,better,23) output(31,better,61) output(31,better,23) output(61,worse,10) output(61,worse,55) output(23,worse,10) output(23,worse,55) output(12,eq,5) output(12,eq,8) output(12,eq,22) output(12,eq,15) output(12,eq,31) output(12,eq,10) output(12,eq,55) output(5,eq,8) output(5,eq,22) output(5,eq,15) output(5,eq,31) output(5,eq,10) output(5,eq,55) output(8,eq,22) output(8,eq,15) output(8,eq,31) output(8,eq,10) output(8,eq,55) output(22,eq,15) output(22,eq,31) output(22,eq,10) output(22,eq,55) output(15,eq,31) output(15,eq,10) output(15,eq,55) output(31,eq,10) output(31,eq,55) output(61,eq,23) output(10,eq,55)
Optimization: 33 2
Answer: 5
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(5,better,31) output(5,better,61) output(5,better,23) output(8,better,31) output(8,better,61) output(8,better,23) output(12,better,31) output(12,better,61) output(12,better,23) output(15,better,31) output(15,better,61) output(15,better,23) output(22,better,31) output(22,better,61) output(22,better,23) output(61,worse,10) output(61,worse,55) output(23,worse,10) output(23,worse,55) output(31,worse,10) output(31,worse,55) output(12,eq,5) output(12,eq,8) output(12,eq,22) output(12,eq,15) output(12,eq,10) output(12,eq,55) output(5,eq,8) output(5,eq,22) output(5,eq,15) output(5,eq,10) output(5,eq,55) output(8,eq,22) output(8,eq,15) output(8,eq,10) output(8,eq,55) output(22,eq,15) output(22,eq,10) output(22,eq,55) output(15,eq,10) output(15,eq,55) output(31,eq,61) output(31,eq,23) output(61,eq,23) output(10,eq,55)
Optimization: 30 3
Answer: 6
preference(1,(1,11),1,for(atom(hasOftenSold(1))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(61,better,23) output(61,better,55) output(5,better,31) output(5,better,23) output(5,better,55) output(8,better,31) output(8,better,23) output(8,better,55) output(10,better,55) output(12,better,31) output(12,better,23) output(12,better,55) output(15,better,31) output(15,better,23) output(15,better,55) output(22,better,31) output(22,better,23) output(22,better,55) output(23,worse,10) output(31,worse,61) output(31,worse,10) output(12,eq,5) output(12,eq,8) output(12,eq,22) output(12,eq,15) output(12,eq,61) output(12,eq,10) output(5,eq,8) output(5,eq,22) output(5,eq,15) output(5,eq,61) output(5,eq,10) output(8,eq,22) output(8,eq,15) output(8,eq,61) output(8,eq,10) output(22,eq,15) output(22,eq,61) output(22,eq,10) output(15,eq,61) output(15,eq,10) output(31,eq,23) output(31,eq,55) output(61,eq,10) output(23,eq,55)
Optimization: 27 3
Answer: 7
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,8),1,for(atom(hasOftenSold(2))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,10),1,for(atom(hasOiliness(0))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(61,better,23) output(5,better,8) output(5,better,22) output(5,better,31) output(5,better,61) output(5,better,23) output(8,better,22) output(8,better,31) output(8,better,61) output(8,better,23) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,31) output(12,better,61) output(12,better,23) output(15,better,31) output(15,better,61) output(15,better,23) output(22,better,31) output(22,better,61) output(22,better,23) output(31,better,23) output(61,worse,10) output(61,worse,55) output(5,worse,15) output(5,worse,10) output(5,worse,55) output(8,worse,15) output(8,worse,10) output(8,worse,55) output(12,worse,10) output(12,worse,55) output(15,worse,10) output(15,worse,55) output(22,worse,15) output(22,worse,10) output(22,worse,55) output(23,worse,10) output(23,worse,55) output(31,worse,10) output(31,worse,55) output(12,eq,15) output(31,eq,61) output(10,eq,55)
Optimization: 22 7
Answer: 8
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,6),1,for(atom(hasOiliness(0))),3) preference(1,(1,8),1,for(atom(hasOftenSold(2))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(61,better,23) output(5,better,8) output(5,better,22) output(5,better,31) output(5,better,61) output(5,better,23) output(8,better,22) output(8,better,31) output(8,better,61) output(8,better,23) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,31) output(12,better,61) output(12,better,23) output(15,better,31) output(15,better,61) output(15,better,23) output(22,better,31) output(22,better,61) output(22,better,23) output(31,better,23) output(61,worse,10) output(61,worse,55) output(5,worse,15) output(5,worse,10) output(5,worse,55) output(8,worse,15) output(8,worse,10) output(8,worse,55) output(12,worse,10) output(15,worse,10) output(22,worse,15) output(22,worse,10) output(22,worse,55) output(23,worse,10) output(23,worse,55) output(31,worse,10) output(31,worse,55) output(12,eq,15) output(12,eq,55) output(15,eq,55) output(31,eq,61)
Optimization: 21 8
Answer: 9
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,6),1,for(atom(hasOiliness(0))),3) preference(1,(1,8),1,for(atom(hasOftenSold(2))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(61,better,23) output(5,better,8) output(5,better,22) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,55) output(8,better,22) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,55) output(22,better,31) output(22,better,61) output(22,better,23) output(31,better,23) output(61,worse,10) output(61,worse,55) output(5,worse,15) output(5,worse,10) output(8,worse,15) output(8,worse,10) output(12,worse,10) output(15,worse,10) output(22,worse,15) output(22,worse,10) output(22,worse,55) output(23,worse,10) output(23,worse,55) output(31,worse,10) output(31,worse,55) output(12,eq,15) output(31,eq,61)
Optimization: 17 8
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasPrice(0)))),8) preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,4),1,for(atom(hasOftenSold(2))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,6),1,for(atom(hasOiliness(0))),3) preference(1,(1,8),1,for(atom(hasOftenSold(1))),8) preference(1,(1,9),1,for(atom(hasStyle(0))),7) preference(1,(1,10),1,for(atom(hasPrice(1))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,12),1,for(atom(hasPrice(0))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(5))),2) preference(1,less(weight)) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,55) output(10,better,55) output(12,better,8) output(12,better,22) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,55) output(22,better,31) output(22,better,61) output(22,better,23) output(31,better,61) output(31,better,23) output(61,worse,23) output(61,worse,10) output(61,worse,55) output(8,worse,15) output(8,worse,10) output(12,worse,5) output(22,worse,15) output(22,worse,10) output(23,worse,10) output(23,worse,55) output(31,worse,10) output(31,worse,55) output(12,eq,15) output(12,eq,10) output(22,eq,55) output(15,eq,10)
Optimization: 16 12
Answer: 11
preference(1,(1,8),1,for(neg(atom(hasOftenSold(2)))),1) preference(1,(1,13),1,for(neg(atom(hasStyle(1)))),6) preference(1,(1,1),1,for(atom(hasOftenSold(2))),7) preference(1,(1,2),1,for(atom(hasPrice(3))),7) preference(1,(1,3),1,for(atom(hasPrice(2))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,5),1,for(atom(hasOftenSold(0))),8) preference(1,(1,6),1,for(atom(hasPrice(0))),9) preference(1,(1,7),1,for(atom(hasOiliness(0))),9) preference(1,(1,9),1,for(atom(hasOftenSold(1))),8) preference(1,(1,10),1,for(atom(hasStyle(0))),5) preference(1,(1,11),1,for(atom(hasOiliness(1))),4) preference(1,(1,12),1,for(atom(hasOiliness(2))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),5) preference(1,less(weight)) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,55) output(8,better,31) output(8,better,61) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,55) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,55) output(23,better,55) output(31,better,61) output(61,worse,23) output(61,worse,10) output(61,worse,55) output(5,worse,10) output(8,worse,22) output(8,worse,15) output(8,worse,23) output(8,worse,10) output(15,worse,10) output(22,worse,15) output(22,worse,10) output(23,worse,10) output(31,worse,23) output(31,worse,10) output(31,worse,55)
Optimization: 15 14
Answer: 12
preference(1,(1,8),1,for(neg(atom(hasOftenSold(2)))),1) preference(1,(1,13),1,for(neg(atom(hasStyle(1)))),6) preference(1,(1,1),1,for(atom(hasOftenSold(2))),7) preference(1,(1,2),1,for(atom(hasPrice(3))),7) preference(1,(1,3),1,for(atom(hasPrice(2))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,5),1,for(atom(hasOftenSold(0))),8) preference(1,(1,6),1,for(atom(hasPrice(0))),9) preference(1,(1,7),1,for(atom(hasOiliness(0))),9) preference(1,(1,9),1,for(atom(hasOftenSold(1))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,11),1,for(atom(hasOiliness(1))),4) preference(1,(1,12),1,for(atom(hasOiliness(2))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),5) preference(1,less(weight)) output(61,better,23) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,55) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,55) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,55) output(31,better,23) output(61,worse,10) output(5,worse,10) output(8,worse,22) output(8,worse,15) output(8,worse,10) output(15,worse,10) output(22,worse,15) output(22,worse,10) output(23,worse,10) output(23,worse,55) output(31,worse,61) output(31,worse,10) output(31,worse,55) output(61,eq,55)
Optimization: 14 14
Answer: 13
preference(1,(1,8),1,for(neg(atom(hasOftenSold(2)))),1) preference(1,(1,13),1,for(neg(atom(hasStyle(1)))),6) preference(1,(1,1),1,for(atom(hasOftenSold(2))),7) preference(1,(1,2),1,for(atom(hasPrice(3))),7) preference(1,(1,3),1,for(atom(hasPrice(2))),2) preference(1,(1,4),1,for(atom(hasOftenSold(0))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,6),1,for(atom(hasPrice(0))),9) preference(1,(1,7),1,for(atom(hasOiliness(0))),9) preference(1,(1,9),1,for(atom(hasOftenSold(1))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,11),1,for(atom(hasOiliness(1))),4) preference(1,(1,12),1,for(atom(hasOiliness(2))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),5) preference(1,less(weight)) output(61,better,23) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,55) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,55) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,55) output(23,better,55) output(61,worse,10) output(5,worse,10) output(8,worse,22) output(8,worse,15) output(8,worse,10) output(15,worse,10) output(22,worse,15) output(22,worse,10) output(23,worse,10) output(31,worse,61) output(31,worse,23) output(31,worse,10) output(31,worse,55)
Optimization: 13 14
Answer: 14
preference(1,(1,2),1,for(neg(atom(hasOiliness(2)))),4) preference(1,(1,3),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,4),1,for(neg(atom(hasPrice(2)))),7) preference(1,(1,8),1,for(neg(atom(hasOftenSold(2)))),2) preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),3) preference(1,(1,11),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(1)))),10) preference(1,(1,1),1,for(atom(hasPrice(2))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,6),1,for(atom(hasPrice(0))),9) preference(1,(1,7),1,for(atom(hasOiliness(1))),8) preference(1,(1,10),1,for(atom(hasStyle(0))),6) preference(1,(1,12),1,for(atom(hasStyle(1))),4) preference(1,(1,14),1,for(atom(hasPrice(1))),3) preference(1,less(weight)) output(61,better,55) output(5,better,61) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,10) output(15,better,55) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,10) output(31,better,55) output(61,worse,23) output(61,worse,10) output(5,worse,8) output(5,worse,22) output(5,worse,15) output(5,worse,31) output(5,worse,23) output(5,worse,10) output(12,worse,8) output(22,eq,15) output(31,eq,23)
Optimization: 11 14
Answer: 15
preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),2) preference(1,(1,7),1,for(neg(atom(hasPrice(3)))),7) preference(1,(1,12),1,for(neg(atom(hasOiliness(2)))),4) preference(1,(1,13),1,for(neg(atom(hasOiliness(1)))),6) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,3),1,for(atom(hasPrice(1))),9) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,6),1,for(atom(hasPrice(2))),5) preference(1,(1,8),1,for(atom(hasOftenSold(0))),8) preference(1,(1,9),1,for(atom(hasOiliness(2))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,11),1,for(atom(hasOiliness(1))),8) preference(1,(1,14),1,for(atom(hasOftenSold(3))),5) preference(1,less(weight)) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,10) output(31,better,55) output(61,worse,23) output(5,worse,23) output(8,worse,23) output(15,worse,31) output(15,worse,61) output(15,worse,23) output(22,worse,31) output(22,worse,61) output(22,worse,23) output(31,worse,23)
Optimization: 10 14
Answer: 16
preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),2) preference(1,(1,7),1,for(neg(atom(hasPrice(3)))),7) preference(1,(1,9),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,13),1,for(neg(atom(hasOiliness(1)))),6) preference(1,(1,14),1,for(neg(atom(hasOiliness(2)))),4) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,3),1,for(atom(hasPrice(1))),9) preference(1,(1,5),1,for(atom(hasOftenSold(3))),5) preference(1,(1,6),1,for(atom(hasPrice(2))),5) preference(1,(1,8),1,for(atom(hasOftenSold(0))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,11),1,for(atom(hasOiliness(1))),8) preference(1,(1,12),1,for(atom(hasOiliness(2))),10) preference(1,less(weight)) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,61) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,10) output(31,better,55) output(61,worse,23) output(61,worse,10) output(5,worse,23) output(8,worse,23) output(15,worse,23) output(22,worse,23) output(31,worse,23)
Optimization: 7 14
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),8) preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),7) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(1)))),10) preference(1,(1,2),1,for(atom(hasOiliness(0))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,6),1,for(atom(hasStyle(0))),2) preference(1,(1,8),1,for(atom(hasOiliness(3))),5) preference(1,(1,9),1,for(atom(hasOftenSold(2))),2) preference(1,(1,10),1,for(atom(hasPrice(3))),1) preference(1,(1,11),1,for(atom(hasOftenSold(1))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,13),1,for(atom(hasPrice(1))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),4) preference(1,less(weight)) output(61,better,23) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,55) output(22,better,15) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,23) output(31,better,10) output(31,better,55) output(15,worse,31) output(15,worse,61) output(15,worse,23) output(15,worse,10) output(22,worse,31) output(22,eq,61)
Optimization: 6 14
Answer: 18
preference(1,(1,3),1,for(neg(atom(hasPrice(3)))),7) preference(1,(1,4),1,for(neg(atom(hasOftenSold(3)))),1) preference(1,(1,12),1,for(neg(atom(hasPrice(0)))),10) preference(1,(1,14),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,1),1,for(atom(hasOiliness(1))),10) preference(1,(1,2),1,for(atom(hasPrice(1))),5) preference(1,(1,5),1,for(atom(hasPrice(0))),5) preference(1,(1,6),1,for(atom(hasPrice(3))),3) preference(1,(1,7),1,for(atom(hasOftenSold(1))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),6) preference(1,(1,11),1,for(atom(hasOftenSold(2))),2) preference(1,(1,13),1,for(atom(hasOftenSold(3))),6) preference(1,less(weight)) output(61,better,23) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,10) output(31,better,55) output(15,worse,61) output(15,worse,23) output(31,worse,61) output(31,worse,23) output(22,eq,61)
Optimization: 5 14
Answer: 19
preference(1,(1,1),1,for(neg(atom(hasOftenSold(2)))),5) preference(1,(1,8),1,for(neg(atom(hasOiliness(0)))),1) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),2) preference(1,(1,3),1,for(atom(hasPrice(1))),10) preference(1,(1,4),1,for(atom(hasOftenSold(2))),9) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,7),1,for(atom(hasOftenSold(0))),8) preference(1,(1,9),1,for(atom(hasOftenSold(1))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,11),1,for(atom(hasOiliness(0))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,13),1,for(atom(hasPrice(0))),6) preference(1,(1,14),1,for(atom(hasOiliness(1))),10) preference(1,less(weight)) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,55) output(61,worse,23) output(31,worse,61) output(31,worse,23) output(31,worse,10)
Optimization: 4 14
Answer: 20
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),5) preference(1,(1,1),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,2),1,for(atom(hasOftenSold(0))),9) preference(1,(1,3),1,for(atom(hasStyle(0))),1) preference(1,(1,4),1,for(atom(hasPrice(2))),2) preference(1,(1,5),1,for(atom(hasOftenSold(3))),2) preference(1,(1,6),1,for(atom(hasPrice(1))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(10))),4) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,13),1,for(atom(hasOftenSold(1))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),1) preference(1,less(weight)) output(61,better,55) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,23) output(31,better,10) output(31,better,55) output(61,worse,23) output(61,worse,10) output(5,eq,8)
Optimization: 3 13
Answer: 21
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),5) preference(1,(1,1),1,for(atom(hasOiliness(0))),4) preference(1,(1,2),1,for(atom(hasPrice(2))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,4),1,for(atom(hasPrice(1))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,10),1,for(atom(hasOiliness(3))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,13),1,for(atom(hasOftenSold(1))),6) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),2) preference(1,less(weight)) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,61) output(15,better,23) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,23) output(31,better,10) output(31,better,55) output(15,eq,31) output(61,eq,23)
Optimization: 2 13
Answer: 22
preference(1,(1,2),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,12),1,for(neg(atom(hasOftenSold(3)))),7) preference(1,(1,1),1,for(atom(hasOftenSold(1))),3) preference(1,(1,3),1,for(atom(hasStyle(0))),4) preference(1,(1,4),1,for(atom(hasOiliness(2))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,6),1,for(atom(hasPrice(1))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,8),1,for(atom(hasOiliness(0))),3) preference(1,(1,9),1,for(atom(hasPrice(3))),1) preference(1,(1,10),1,for(atom(hasOftenSold(3))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(4))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,14),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(61,better,23) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,23) output(31,better,10) output(31,better,55) output(12,worse,5)
Optimization: 1 14
Answer: 23
preference(1,(1,13),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,1),1,for(atom(hasPrice(1))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,3),1,for(atom(hasOiliness(0))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,5),1,for(atom(hasPrice(3))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,7),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,9),1,for(atom(hasPrice(2))),4) preference(1,(1,10),1,for(atom(hasStyle(0))),2) preference(1,(1,11),1,for(atom(hasOftenSold(1))),5) preference(1,(1,12),1,for(atom(hasPrice(0))),6) preference(1,(1,14),1,for(atom(hasOftenSold(0))),7) preference(1,less(weight)) output(61,better,23) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,23) output(31,better,10) output(31,better,55)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 24
preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),2) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),9) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(1)))),3) preference(1,(1,14),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,1),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,3),1,for(atom(hasOftenSold(1))),4) preference(1,(1,4),1,for(atom(hasOftenSold(3))),5) preference(1,(1,7),1,for(atom(hasPrice(1))),10) preference(1,(1,9),1,for(atom(hasPrice(0))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,12),1,for(atom(hasOiliness(2))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),4) preference(1,less(weight)) output(61,better,23) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,23) output(31,better,10) output(31,better,55)
Optimization: 0 13
Answer: 25
preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),9) preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(1)))),3) preference(1,(1,14),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,1),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,3),1,for(atom(hasOftenSold(1))),4) preference(1,(1,4),1,for(atom(hasOftenSold(3))),5) preference(1,(1,7),1,for(atom(hasPrice(1))),10) preference(1,(1,9),1,for(atom(hasPrice(0))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,12),1,for(atom(hasOiliness(2))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),4) preference(1,less(weight)) output(61,better,23) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,23) output(31,better,10) output(31,better,55)
Optimization: 0 12
Answer: 26
preference(1,(1,8),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(1)))),3) preference(1,(1,14),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,1),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,3),1,for(atom(hasOftenSold(1))),4) preference(1,(1,4),1,for(atom(hasOftenSold(3))),5) preference(1,(1,6),1,for(atom(hasOftenSold(0))),9) preference(1,(1,7),1,for(atom(hasPrice(1))),10) preference(1,(1,9),1,for(atom(hasPrice(0))),5) preference(1,(1,12),1,for(atom(hasOiliness(2))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),4) preference(1,less(weight)) output(61,better,23) output(61,better,10) output(61,better,55) output(5,better,8) output(5,better,22) output(5,better,15) output(5,better,31) output(5,better,61) output(5,better,23) output(5,better,10) output(5,better,55) output(8,better,22) output(8,better,15) output(8,better,31) output(8,better,61) output(8,better,23) output(8,better,10) output(8,better,55) output(10,better,55) output(12,better,5) output(12,better,8) output(12,better,22) output(12,better,15) output(12,better,31) output(12,better,61) output(12,better,23) output(12,better,10) output(12,better,55) output(15,better,31) output(15,better,61) output(15,better,23) output(15,better,10) output(15,better,55) output(22,better,15) output(22,better,31) output(22,better,61) output(22,better,23) output(22,better,10) output(22,better,55) output(23,better,10) output(23,better,55) output(31,better,61) output(31,better,23) output(31,better,10) output(31,better,55)
Optimization: 0 11
Progression : 0 [ 2;11] (Error: 4.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.172 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 26+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 597.325s (Solving: 585.68s 1st Model: 0.08s Unsat: 0.00s)
CPU Time     : 2353.784s
Threads      : 4        (Winner: 4)

Choices      : 9809161  (Domain: 2058)
Conflicts    : 1924527  (Analyzed: 1924525)
Restarts     : 1952     (Average: 985.92 Last: 215676)
Model-Level  : 1403.4  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1929403  (Deleted: 1730482)
  Binary     : 664      (Ratio:   0.03%)
  Ternary    : 210      (Ratio:   0.01%)
  Conflict   : 1924525  (Average Length: 1818.7 Ratio:  99.75%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 4878     (Average Length:  211.2 Ratio:   0.25%) 
  Distributed: 1626     (Ratio:   0.08% Average LBD: 3.34) 
  Integrated : 4878     (Ratio: 300.00% Unit: 11 Average Jumps: 21.64)
Backjumps    : 1924525  (Average:  3.26 Max: 3719 Sum: 6267610)
  Executed   : 1924524  (Average:  3.26 Max: 3719 Sum: 6267584 Ratio: 100.00%)
  Bounded    : 1        (Average: 26.00 Max:  26 Sum:     26 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  10 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  10 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(2)) ; 
  8 :: not atom(hasPrice(0))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  10 :: not atom(hasStyle(1))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasStyle(0)) ; 
  1 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasPrice(3)) ; 
  2 :: atom(hasPrice(2)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOiliness(0)) ; 
  1 :: not atom(hasOftenSold(2))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasStyle(0)) ; 
  4 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasOiliness(2)) ; 
  6 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasPrice(3)) ; 
  2 :: atom(hasPrice(2)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOiliness(0)) ; 
  1 :: not atom(hasOftenSold(2))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasOiliness(2)) ; 
  6 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasPrice(3)) ; 
  2 :: atom(hasPrice(2)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOiliness(0)) ; 
  1 :: not atom(hasOftenSold(2))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasOiliness(2)) ; 
  6 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(2)) ; 
  4 :: not atom(hasOiliness(2))  ; 
  5 :: not atom(hasPrice(0))  ; 
  7 :: not atom(hasPrice(2))  ; 
  6 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  2 :: not atom(hasOftenSold(2))  ; 
  3 :: not atom(hasStyle(1))  ; 
  6 :: atom(hasStyle(0)) ; 
  7 :: not atom(hasPrice(1))  ; 
  4 :: atom(hasStyle(1)) ; 
  10 :: not atom(hasMinorGrp(1))  ; 
  3 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasPrice(1)) ; 
  2 :: not atom(hasOftenSold(2))  ; 
  9 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasPrice(2)) ; 
  7 :: not atom(hasPrice(3))  ; 
  8 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOiliness(1)) ; 
  4 :: not atom(hasOiliness(2))  ; 
  6 :: not atom(hasOiliness(1))  ; 
  5 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasPrice(1)) ; 
  2 :: not atom(hasOftenSold(2))  ; 
  5 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasPrice(2)) ; 
  7 :: not atom(hasPrice(3))  ; 
  8 :: atom(hasOftenSold(0)) ; 
  9 :: not atom(hasPrice(1))  ; 
  5 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOiliness(2)) ; 
  6 :: not atom(hasOiliness(1))  ; 
  4 :: not atom(hasOiliness(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: not atom(hasPrice(0))  ; 
  4 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  7 :: not atom(hasPrice(3))  ; 
  2 :: atom(hasStyle(0)) ; 
  10 :: not atom(hasMinorGrp(1))  ; 
  5 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasPrice(3)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  4 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPrice(1)) ; 
  7 :: not atom(hasPrice(3))  ; 
  1 :: not atom(hasOftenSold(3))  ; 
  5 :: atom(hasPrice(0)) ; 
  3 :: atom(hasPrice(3)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  10 :: not atom(hasPrice(0))  ; 
  6 :: atom(hasOftenSold(3)) ; 
  2 :: not atom(hasStyle(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasOftenSold(2))  ; 
  2 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasPrice(1)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  1 :: not atom(hasOiliness(0))  ; 
  7 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasPrice(0)) ; 
  10 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasStyle(0)) ; 
  2 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasPrice(1)) ; 
  5 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  4 :: atom(hasMinorGrp(10)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasPrice(2)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasMinorGrp(2)) ; 
  5 :: not atom(hasStyle(1))  ; 
  2 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasOiliness(3)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOftenSold(1)) ; 
  2 :: not atom(hasStyle(1))  ; 
  4 :: atom(hasStyle(0)) ; 
  1 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasPrice(3)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  7 :: atom(hasMinorGrp(4)) ; 
  7 :: not atom(hasOftenSold(3))  ; 
  10 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(1)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasPrice(3)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasPrice(2)) ; 
  2 :: atom(hasStyle(0)) ; 
  5 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasPrice(0)) ; 
  1 :: not atom(hasPrice(0))  ; 
  7 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(6)) ; 
  2 :: not atom(hasMajorGrp(0))  ; 
  4 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  9 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasPrice(1)) ; 
  1 :: not atom(hasPrice(0))  ; 
  5 :: atom(hasPrice(0)) ; 
  3 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOftenSold(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  9 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasPrice(1)) ; 
  1 :: not atom(hasPrice(0))  ; 
  5 :: atom(hasPrice(0)) ; 
  3 :: not atom(hasMinorGrp(1))  ; 
  9 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOftenSold(2))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasPrice(1)) ; 
  1 :: not atom(hasPrice(0))  ; 
  5 :: atom(hasPrice(0)) ; 
  3 :: not atom(hasMinorGrp(1))  ; 
  2 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOftenSold(2))  
}.
