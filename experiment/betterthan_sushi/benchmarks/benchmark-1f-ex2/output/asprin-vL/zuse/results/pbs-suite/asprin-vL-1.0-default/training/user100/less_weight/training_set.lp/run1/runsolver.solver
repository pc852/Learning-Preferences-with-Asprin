asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(37,eq,1) output(37,eq,18) output(37,eq,11) output(37,eq,5) output(37,eq,35) output(37,eq,3) output(37,eq,52) output(37,eq,14) output(37,eq,4) output(1,eq,18) output(1,eq,11) output(1,eq,5) output(1,eq,35) output(1,eq,3) output(1,eq,52) output(1,eq,14) output(1,eq,4) output(18,eq,11) output(18,eq,5) output(18,eq,35) output(18,eq,3) output(18,eq,52) output(18,eq,14) output(18,eq,4) output(11,eq,5) output(11,eq,35) output(11,eq,3) output(11,eq,52) output(11,eq,14) output(11,eq,4) output(5,eq,35) output(5,eq,3) output(5,eq,52) output(5,eq,14) output(5,eq,4) output(35,eq,3) output(35,eq,52) output(35,eq,14) output(35,eq,4) output(3,eq,52) output(3,eq,14) output(3,eq,4) output(52,eq,14) output(52,eq,4) output(14,eq,4)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasOftenSold(0))),10) preference(1,less(weight)) output(1,better,52) output(3,better,52) output(5,better,52) output(11,better,52) output(18,better,52) output(35,better,52) output(37,better,52) output(52,worse,14) output(52,worse,4) output(37,eq,1) output(37,eq,18) output(37,eq,11) output(37,eq,5) output(37,eq,35) output(37,eq,3) output(37,eq,14) output(37,eq,4) output(1,eq,18) output(1,eq,11) output(1,eq,5) output(1,eq,35) output(1,eq,3) output(1,eq,14) output(1,eq,4) output(18,eq,11) output(18,eq,5) output(18,eq,35) output(18,eq,3) output(18,eq,14) output(18,eq,4) output(11,eq,5) output(11,eq,35) output(11,eq,3) output(11,eq,14) output(11,eq,4) output(5,eq,35) output(5,eq,3) output(5,eq,14) output(5,eq,4) output(35,eq,3) output(35,eq,14) output(35,eq,4) output(3,eq,14) output(3,eq,4) output(14,eq,4)
Optimization: 38 1
Answer: 3
preference(1,(1,13),1,for(atom(hasOftenSold(0))),10) preference(1,(1,14),1,for(atom(hasOiliness(3))),10) preference(1,less(weight)) output(1,better,5) output(1,better,52) output(3,better,52) output(11,better,5) output(11,better,52) output(18,better,5) output(18,better,52) output(35,better,52) output(37,better,5) output(37,better,52) output(5,worse,35) output(5,worse,3) output(5,worse,14) output(5,worse,4) output(52,worse,14) output(52,worse,4) output(37,eq,1) output(37,eq,18) output(37,eq,11) output(37,eq,35) output(37,eq,3) output(37,eq,14) output(37,eq,4) output(1,eq,18) output(1,eq,11) output(1,eq,35) output(1,eq,3) output(1,eq,14) output(1,eq,4) output(18,eq,11) output(18,eq,35) output(18,eq,3) output(18,eq,14) output(18,eq,4) output(11,eq,35) output(11,eq,3) output(11,eq,14) output(11,eq,4) output(5,eq,52) output(35,eq,3) output(35,eq,14) output(35,eq,4) output(3,eq,14) output(3,eq,4) output(14,eq,4)
Optimization: 35 2
Answer: 4
preference(1,(1,12),1,for(atom(hasOiliness(3))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,14),1,for(atom(hasOftenSold(0))),10) preference(1,less(weight)) output(1,better,11) output(1,better,5) output(1,better,52) output(3,better,52) output(18,better,11) output(18,better,5) output(18,better,52) output(35,better,52) output(37,better,11) output(37,better,5) output(37,better,52) output(5,worse,35) output(5,worse,3) output(5,worse,14) output(5,worse,4) output(11,worse,35) output(11,worse,3) output(11,worse,14) output(11,worse,4) output(52,worse,14) output(52,worse,4) output(37,eq,1) output(37,eq,18) output(37,eq,35) output(37,eq,3) output(37,eq,14) output(37,eq,4) output(1,eq,18) output(1,eq,35) output(1,eq,3) output(1,eq,14) output(1,eq,4) output(18,eq,35) output(18,eq,3) output(18,eq,14) output(18,eq,4) output(11,eq,5) output(11,eq,52) output(5,eq,52) output(35,eq,3) output(35,eq,14) output(35,eq,4) output(3,eq,14) output(3,eq,4) output(14,eq,4)
Optimization: 34 3
Answer: 5
preference(1,(1,3),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,7),1,for(atom(hasPrice(1))),1) preference(1,(1,10),1,for(atom(hasOftenSold(0))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,14),1,for(atom(hasOiliness(3))),10) preference(1,less(weight)) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,52) output(3,better,52) output(5,better,52) output(11,better,52) output(18,better,11) output(18,better,5) output(18,better,52) output(35,better,52) output(37,better,11) output(37,better,5) output(37,better,52) output(1,worse,14) output(1,worse,4) output(3,worse,14) output(3,worse,4) output(5,worse,35) output(5,worse,3) output(5,worse,14) output(5,worse,4) output(11,worse,35) output(11,worse,3) output(11,worse,14) output(11,worse,4) output(18,worse,35) output(18,worse,3) output(18,worse,14) output(18,worse,4) output(35,worse,14) output(35,worse,4) output(37,worse,1) output(37,worse,35) output(37,worse,3) output(37,worse,14) output(37,worse,4) output(52,worse,14) output(52,worse,4) output(37,eq,18) output(1,eq,35) output(1,eq,3) output(11,eq,5) output(35,eq,3) output(14,eq,4)
Optimization: 31 6
Answer: 6
preference(1,(1,3),1,for(atom(hasMinorGrp(0))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,7),1,for(atom(hasPrice(1))),1) preference(1,(1,10),1,for(atom(hasOftenSold(0))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,14),1,for(atom(hasOiliness(3))),10) preference(1,less(weight)) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,52) output(3,better,52) output(5,better,52) output(11,better,52) output(18,better,11) output(18,better,5) output(18,better,52) output(35,better,52) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,52) output(1,worse,14) output(1,worse,4) output(3,worse,14) output(3,worse,4) output(5,worse,35) output(5,worse,3) output(5,worse,14) output(5,worse,4) output(11,worse,35) output(11,worse,3) output(11,worse,14) output(11,worse,4) output(18,worse,35) output(18,worse,3) output(18,worse,14) output(18,worse,4) output(35,worse,14) output(35,worse,4) output(37,worse,1) output(37,worse,35) output(37,worse,3) output(37,worse,14) output(37,worse,4) output(52,worse,14) output(52,worse,4) output(1,eq,35) output(1,eq,3) output(11,eq,5) output(35,eq,3) output(14,eq,4)
Optimization: 30 6
Answer: 7
preference(1,(1,12),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,7),1,for(atom(hasPrice(1))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,10),1,for(atom(hasOftenSold(0))),10) preference(1,(1,14),1,for(atom(hasOiliness(3))),10) preference(1,less(weight)) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,52) output(3,better,52) output(5,better,52) output(11,better,5) output(11,better,52) output(18,better,11) output(18,better,5) output(18,better,52) output(35,better,52) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,52) output(1,worse,14) output(1,worse,4) output(3,worse,14) output(3,worse,4) output(5,worse,35) output(5,worse,3) output(5,worse,14) output(5,worse,4) output(11,worse,35) output(11,worse,3) output(11,worse,14) output(11,worse,4) output(18,worse,35) output(18,worse,3) output(18,worse,14) output(18,worse,4) output(35,worse,14) output(35,worse,4) output(37,worse,1) output(37,worse,35) output(37,worse,3) output(37,worse,14) output(37,worse,4) output(52,worse,14) output(52,worse,4) output(1,eq,35) output(1,eq,3) output(35,eq,3) output(14,eq,4)
Optimization: 29 7
Answer: 8
preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,4),1,for(atom(hasPrice(3))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,9),1,for(atom(hasOftenSold(0))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,11),1,for(atom(hasStyle(0))),9) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,13),1,for(atom(hasOiliness(2))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),9) preference(1,less(weight)) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,35) output(5,better,3) output(5,better,52) output(5,better,14) output(5,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(14,better,4) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(52,better,14) output(52,better,4)
Optimization: 0 13
Progression : 0 [ 1;13] (Error: 12)
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,2),1,for(atom(hasPrice(2))),2) preference(1,(1,3),1,for(atom(hasPrice(3))),7) preference(1,(1,5),1,for(atom(hasStyle(0))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),9) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasOftenSold(0))),8) preference(1,(1,13),1,for(atom(hasOftenSold(2))),4) preference(1,(1,14),1,for(atom(hasOiliness(2))),3) preference(1,less(weight)) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,35) output(5,better,3) output(5,better,52) output(5,better,14) output(5,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(14,better,4) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(52,better,14) output(52,better,4)
Optimization: 0 12
Answer: 10
preference(1,(1,1),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,2),1,for(atom(hasPrice(2))),2) preference(1,(1,3),1,for(atom(hasPrice(3))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),9) preference(1,(1,12),1,for(atom(hasOftenSold(0))),8) preference(1,(1,13),1,for(atom(hasOftenSold(2))),4) preference(1,(1,14),1,for(atom(hasOiliness(2))),3) preference(1,less(weight)) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,35) output(5,better,3) output(5,better,52) output(5,better,14) output(5,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(14,better,4) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(52,better,14) output(52,better,4)
Optimization: 0 11
Answer: 11
preference(1,(1,1),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,2),1,for(atom(hasPrice(2))),2) preference(1,(1,3),1,for(atom(hasPrice(3))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),9) preference(1,(1,12),1,for(atom(hasOftenSold(0))),8) preference(1,(1,13),1,for(atom(hasOftenSold(2))),4) preference(1,(1,14),1,for(atom(hasOiliness(2))),3) preference(1,less(weight)) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,35) output(5,better,3) output(5,better,52) output(5,better,14) output(5,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(14,better,4) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(52,better,14) output(52,better,4)
Optimization: 0 10
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,3),1,for(atom(hasPrice(3))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),9) preference(1,(1,12),1,for(atom(hasOftenSold(0))),8) preference(1,(1,13),1,for(atom(hasOftenSold(2))),4) preference(1,(1,14),1,for(atom(hasOiliness(2))),3) preference(1,less(weight)) output(1,better,18) output(1,better,11) output(1,better,5) output(1,better,35) output(1,better,3) output(1,better,52) output(1,better,14) output(1,better,4) output(3,better,52) output(3,better,14) output(3,better,4) output(5,better,35) output(5,better,3) output(5,better,52) output(5,better,14) output(5,better,4) output(11,better,5) output(11,better,35) output(11,better,3) output(11,better,52) output(11,better,14) output(11,better,4) output(14,better,4) output(18,better,11) output(18,better,5) output(18,better,35) output(18,better,3) output(18,better,52) output(18,better,14) output(18,better,4) output(35,better,3) output(35,better,52) output(35,better,14) output(35,better,4) output(37,better,1) output(37,better,18) output(37,better,11) output(37,better,5) output(37,better,35) output(37,better,3) output(37,better,52) output(37,better,14) output(37,better,4) output(52,better,14) output(52,better,4)
Optimization: 0 9
Progression : 0 [2;9] (Error: 3.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.066 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 12+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 298.267s (Solving: 282.76s 1st Model: 0.13s Unsat: 0.00s)
CPU Time     : 1143.196s
Threads      : 4        (Winner: 4)

Choices      : 3912149  (Domain: 719)
Conflicts    : 763598   (Analyzed: 763596)
Restarts     : 720      (Average: 1060.55 Last: 44608)
Model-Level  : 971.1   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 764847   (Deleted: 679156)
  Binary     : 188      (Ratio:   0.02%)
  Ternary    : 35       (Ratio:   0.00%)
  Conflict   : 763596   (Average Length: 1597.8 Ratio:  99.84%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 1251     (Average Length:  243.5 Ratio:   0.16%) 
  Distributed: 417      (Ratio:   0.05% Average LBD: 3.29) 
  Integrated : 1251     (Ratio: 300.00% Unit: 0 Average Jumps: 0.00)
Backjumps    : 763596   (Average:  3.42 Max: 3270 Sum: 2614891)
  Executed   : 763595   (Average:  3.42 Max: 3270 Sum: 2614858 Ratio: 100.00%)
  Bounded    : 1        (Average: 33.00 Max:  33 Sum:     33 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasMinorGrp(6)) ; 
  4 :: not atom(hasStyle(1))  ; 
  9 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasStyle(0)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasOiliness(2)) ; 
  9 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(3)) ; 
  2 :: atom(hasStyle(0)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasMinorGrp(8)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasOiliness(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(3)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasMinorGrp(8)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasOiliness(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOftenSold(1))  ; 
  2 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(3)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasMinorGrp(8)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasOiliness(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOftenSold(1))  ; 
  7 :: atom(hasPrice(3)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasMinorGrp(8)) ; 
  8 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasOiliness(2)) 
}.
