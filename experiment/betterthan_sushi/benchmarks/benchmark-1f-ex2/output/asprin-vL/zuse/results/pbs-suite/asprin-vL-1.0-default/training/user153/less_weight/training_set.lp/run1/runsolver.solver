asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(2,eq,13) output(2,eq,18) output(2,eq,21) output(2,eq,1) output(2,eq,50) output(2,eq,4) output(2,eq,30) output(2,eq,0) output(2,eq,9) output(13,eq,18) output(13,eq,21) output(13,eq,1) output(13,eq,50) output(13,eq,4) output(13,eq,30) output(13,eq,0) output(13,eq,9) output(18,eq,21) output(18,eq,1) output(18,eq,50) output(18,eq,4) output(18,eq,30) output(18,eq,0) output(18,eq,9) output(21,eq,1) output(21,eq,50) output(21,eq,4) output(21,eq,30) output(21,eq,0) output(21,eq,9) output(1,eq,50) output(1,eq,4) output(1,eq,30) output(1,eq,0) output(1,eq,9) output(50,eq,4) output(50,eq,30) output(50,eq,0) output(50,eq,9) output(4,eq,30) output(4,eq,0) output(4,eq,9) output(30,eq,0) output(30,eq,9) output(0,eq,9)
Optimization: 45 0
Answer: 2
preference(1,(1,13),1,for(atom(hasOiliness(1))),10) preference(1,less(weight)) output(0,better,9) output(1,better,50) output(1,better,9) output(4,better,9) output(21,better,50) output(21,better,9) output(30,better,9) output(2,worse,21) output(2,worse,1) output(2,worse,4) output(2,worse,30) output(2,worse,0) output(13,worse,21) output(13,worse,1) output(13,worse,4) output(13,worse,30) output(13,worse,0) output(18,worse,21) output(18,worse,1) output(18,worse,4) output(18,worse,30) output(18,worse,0) output(50,worse,4) output(50,worse,30) output(50,worse,0) output(2,eq,13) output(2,eq,18) output(2,eq,50) output(2,eq,9) output(13,eq,18) output(13,eq,50) output(13,eq,9) output(18,eq,50) output(18,eq,9) output(21,eq,1) output(21,eq,4) output(21,eq,30) output(21,eq,0) output(1,eq,4) output(1,eq,30) output(1,eq,0) output(50,eq,9) output(4,eq,30) output(4,eq,0) output(30,eq,0)
Optimization: 38 1
Answer: 3
preference(1,(1,13),1,for(atom(hasOiliness(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(0,better,9) output(1,better,50) output(1,better,4) output(1,better,9) output(21,better,50) output(21,better,4) output(21,better,9) output(30,better,9) output(2,worse,21) output(2,worse,1) output(2,worse,30) output(2,worse,0) output(4,worse,30) output(4,worse,0) output(13,worse,21) output(13,worse,1) output(13,worse,30) output(13,worse,0) output(18,worse,21) output(18,worse,1) output(18,worse,30) output(18,worse,0) output(50,worse,30) output(50,worse,0) output(2,eq,13) output(2,eq,18) output(2,eq,50) output(2,eq,4) output(2,eq,9) output(13,eq,18) output(13,eq,50) output(13,eq,4) output(13,eq,9) output(18,eq,50) output(18,eq,4) output(18,eq,9) output(21,eq,1) output(21,eq,30) output(21,eq,0) output(1,eq,30) output(1,eq,0) output(50,eq,4) output(50,eq,9) output(4,eq,9) output(30,eq,0)
Optimization: 37 2
Answer: 4
preference(1,(1,13),1,for(atom(hasOiliness(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(5))),10) preference(1,less(weight)) output(0,better,9) output(1,better,50) output(1,better,30) output(1,better,9) output(4,better,30) output(4,better,9) output(21,better,50) output(21,better,30) output(21,better,9) output(2,worse,21) output(2,worse,1) output(2,worse,4) output(2,worse,0) output(13,worse,21) output(13,worse,1) output(13,worse,4) output(13,worse,0) output(18,worse,21) output(18,worse,1) output(18,worse,4) output(18,worse,0) output(30,worse,0) output(50,worse,4) output(50,worse,0) output(2,eq,13) output(2,eq,18) output(2,eq,50) output(2,eq,30) output(2,eq,9) output(13,eq,18) output(13,eq,50) output(13,eq,30) output(13,eq,9) output(18,eq,50) output(18,eq,30) output(18,eq,9) output(21,eq,1) output(21,eq,4) output(21,eq,0) output(1,eq,4) output(1,eq,0) output(50,eq,30) output(50,eq,9) output(4,eq,0) output(30,eq,9)
Optimization: 36 2
Answer: 5
preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(1,better,50) output(1,better,30) output(2,better,50) output(2,better,30) output(4,better,30) output(13,better,50) output(13,better,30) output(18,better,50) output(18,better,30) output(21,better,50) output(21,better,30) output(30,worse,0) output(30,worse,9) output(50,worse,4) output(50,worse,0) output(50,worse,9) output(2,eq,13) output(2,eq,18) output(2,eq,21) output(2,eq,1) output(2,eq,4) output(2,eq,0) output(2,eq,9) output(13,eq,18) output(13,eq,21) output(13,eq,1) output(13,eq,4) output(13,eq,0) output(13,eq,9) output(18,eq,21) output(18,eq,1) output(18,eq,4) output(18,eq,0) output(18,eq,9) output(21,eq,1) output(21,eq,4) output(21,eq,0) output(21,eq,9) output(1,eq,4) output(1,eq,0) output(1,eq,9) output(50,eq,30) output(4,eq,0) output(4,eq,9) output(0,eq,9)
Optimization: 34 2
Answer: 6
preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(1,better,4) output(1,better,30) output(2,better,4) output(2,better,30) output(13,better,4) output(13,better,30) output(18,better,4) output(18,better,30) output(21,better,4) output(21,better,30) output(50,better,4) output(50,better,30) output(4,worse,0) output(4,worse,9) output(30,worse,0) output(30,worse,9) output(2,eq,13) output(2,eq,18) output(2,eq,21) output(2,eq,1) output(2,eq,50) output(2,eq,0) output(2,eq,9) output(13,eq,18) output(13,eq,21) output(13,eq,1) output(13,eq,50) output(13,eq,0) output(13,eq,9) output(18,eq,21) output(18,eq,1) output(18,eq,50) output(18,eq,0) output(18,eq,9) output(21,eq,1) output(21,eq,50) output(21,eq,0) output(21,eq,9) output(1,eq,50) output(1,eq,0) output(1,eq,9) output(50,eq,0) output(50,eq,9) output(4,eq,30) output(0,eq,9)
Optimization: 33 2
Answer: 7
preference(1,(1,12),1,for(atom(hasOftenSold(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(2,better,50) output(2,better,4) output(2,better,30) output(13,better,50) output(13,better,4) output(13,better,30) output(18,better,50) output(18,better,4) output(18,better,30) output(21,better,50) output(21,better,4) output(21,better,30) output(4,worse,0) output(4,worse,9) output(30,worse,0) output(30,worse,9) output(50,worse,0) output(50,worse,9) output(2,eq,13) output(2,eq,18) output(2,eq,21) output(2,eq,1) output(2,eq,0) output(2,eq,9) output(13,eq,18) output(13,eq,21) output(13,eq,1) output(13,eq,0) output(13,eq,9) output(18,eq,21) output(18,eq,1) output(18,eq,0) output(18,eq,9) output(21,eq,1) output(21,eq,0) output(21,eq,9) output(1,eq,0) output(1,eq,9) output(50,eq,4) output(50,eq,30) output(4,eq,30) output(0,eq,9)
Optimization: 30 3
Answer: 8
preference(1,(1,9),1,for(atom(hasPrice(2))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasOftenSold(0))),10) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(2,better,21) output(2,better,50) output(2,better,4) output(2,better,30) output(13,better,21) output(13,better,50) output(13,better,4) output(13,better,30) output(18,better,21) output(18,better,50) output(18,better,4) output(18,better,30) output(21,better,50) output(21,better,4) output(21,better,30) output(4,worse,0) output(4,worse,9) output(21,worse,1) output(21,worse,0) output(21,worse,9) output(30,worse,0) output(30,worse,9) output(50,worse,0) output(50,worse,9) output(2,eq,13) output(2,eq,18) output(2,eq,1) output(2,eq,0) output(2,eq,9) output(13,eq,18) output(13,eq,1) output(13,eq,0) output(13,eq,9) output(18,eq,1) output(18,eq,0) output(18,eq,9) output(1,eq,0) output(1,eq,9) output(50,eq,4) output(50,eq,30) output(4,eq,30) output(0,eq,9)
Optimization: 27 5
Answer: 9
preference(1,(1,2),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,3),1,for(atom(hasPrice(2))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,12),1,for(atom(hasStyle(0))),9) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,14),1,for(atom(hasOftenSold(0))),10) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,21) output(2,better,50) output(2,better,4) output(2,better,30) output(13,better,21) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,50) output(21,better,4) output(2,worse,13) output(2,worse,18) output(2,worse,1) output(4,worse,30) output(4,worse,0) output(4,worse,9) output(21,worse,1) output(21,worse,0) output(21,worse,9) output(30,worse,0) output(30,worse,9) output(50,worse,4) output(50,worse,30) output(50,worse,0) output(50,worse,9) output(2,eq,0) output(2,eq,9) output(13,eq,18) output(13,eq,1) output(18,eq,1) output(21,eq,30) output(0,eq,9)
Optimization: 22 8
Answer: 10
preference(1,(1,1),1,for(atom(hasOftenSold(1))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,3),1,for(atom(hasPrice(2))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,12),1,for(atom(hasStyle(0))),9) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,14),1,for(atom(hasOftenSold(0))),10) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,21) output(2,better,50) output(2,better,4) output(2,better,30) output(13,better,21) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,50) output(21,better,4) output(21,better,30) output(2,worse,13) output(2,worse,18) output(2,worse,1) output(4,worse,30) output(4,worse,0) output(4,worse,9) output(21,worse,1) output(21,worse,0) output(21,worse,9) output(30,worse,0) output(30,worse,9) output(50,worse,4) output(50,worse,30) output(50,worse,0) output(50,worse,9) output(2,eq,0) output(2,eq,9) output(13,eq,18) output(13,eq,1) output(18,eq,1) output(0,eq,9)
Optimization: 21 9
Answer: 11
preference(1,(1,1),1,for(atom(hasOftenSold(1))),2) preference(1,(1,3),1,for(atom(hasPrice(2))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,12),1,for(atom(hasStyle(0))),9) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,14),1,for(atom(hasOftenSold(0))),10) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,21) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(13,better,21) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,50) output(21,better,4) output(21,better,30) output(4,worse,30) output(4,worse,0) output(4,worse,9) output(21,worse,1) output(21,worse,0) output(21,worse,9) output(30,worse,0) output(30,worse,9) output(50,worse,4) output(50,worse,30) output(50,worse,0) output(50,worse,9) output(2,eq,13) output(2,eq,18) output(2,eq,1) output(13,eq,18) output(13,eq,1) output(18,eq,1) output(0,eq,9)
Optimization: 19 8
Answer: 12
preference(1,(1,1),1,for(atom(hasOiliness(2))),4) preference(1,(1,2),1,for(atom(hasOftenSold(1))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,4),1,for(atom(hasOiliness(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,7),1,for(atom(hasPrice(2))),10) preference(1,(1,8),1,for(atom(hasPrice(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),3) preference(1,(1,11),1,for(atom(hasPrice(3))),1) preference(1,(1,12),1,for(atom(hasStyle(0))),9) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,14),1,for(atom(hasOftenSold(0))),10) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,21) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,0) output(13,better,21) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(30,better,0) output(50,better,4) output(50,better,30) output(50,better,0) output(0,worse,9) output(4,worse,9) output(21,worse,1) output(21,worse,50) output(21,worse,4) output(21,worse,30) output(21,worse,0) output(21,worse,9) output(30,worse,9) output(2,eq,13) output(2,eq,18) output(2,eq,1) output(13,eq,18) output(13,eq,1) output(18,eq,1) output(50,eq,9) output(4,eq,30)
Optimization: 17 14
Answer: 13
preference(1,(1,1),1,for(atom(hasPrice(0))),7) preference(1,(1,2),1,for(atom(hasOftenSold(1))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,4),1,for(atom(hasOiliness(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,6),1,for(atom(hasOiliness(3))),9) preference(1,(1,7),1,for(atom(hasPrice(2))),10) preference(1,(1,8),1,for(atom(hasPrice(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),3) preference(1,(1,11),1,for(atom(hasPrice(3))),1) preference(1,(1,12),1,for(atom(hasStyle(0))),9) preference(1,(1,13),1,for(atom(hasOiliness(2))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),2) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,21) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,0) output(13,better,21) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(30,better,0) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9) output(0,worse,9) output(4,worse,9) output(21,worse,1) output(21,worse,50) output(21,worse,4) output(21,worse,30) output(21,worse,9) output(30,worse,9) output(2,eq,13) output(2,eq,18) output(2,eq,1) output(13,eq,18) output(13,eq,1) output(18,eq,1) output(21,eq,0) output(4,eq,30)
Optimization: 16 14
Answer: 14
preference(1,(1,11),1,for(neg(atom(hasStyle(1)))),3) preference(1,(1,1),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,2),1,for(atom(hasOftenSold(1))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(9))),7) preference(1,(1,4),1,for(atom(hasOiliness(0))),7) preference(1,(1,5),1,for(atom(hasOftenSold(0))),7) preference(1,(1,6),1,for(atom(hasOftenSold(2))),7) preference(1,(1,7),1,for(atom(hasPrice(2))),10) preference(1,(1,8),1,for(atom(hasPrice(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,12),1,for(atom(hasPrice(3))),3) preference(1,(1,13),1,for(atom(hasOiliness(2))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),2) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,21) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,21) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9) output(21,worse,1) output(21,worse,50) output(21,worse,4) output(21,worse,30) output(21,worse,0) output(21,worse,9) output(2,eq,13) output(2,eq,18) output(2,eq,1) output(13,eq,18) output(13,eq,1) output(18,eq,1) output(30,eq,0) output(30,eq,9) output(0,eq,9)
Optimization: 15 14
Answer: 15
preference(1,(1,11),1,for(neg(atom(hasStyle(1)))),3) preference(1,(1,1),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,2),1,for(atom(hasOftenSold(1))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,4),1,for(atom(hasOiliness(0))),7) preference(1,(1,5),1,for(atom(hasOftenSold(0))),7) preference(1,(1,6),1,for(atom(hasOftenSold(2))),7) preference(1,(1,7),1,for(atom(hasPrice(2))),10) preference(1,(1,8),1,for(atom(hasPrice(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,12),1,for(atom(hasPrice(3))),3) preference(1,(1,13),1,for(atom(hasOiliness(2))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),2) preference(1,less(weight)) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,1) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9) output(21,worse,1) output(21,worse,50) output(21,worse,4) output(21,worse,30) output(21,worse,0) output(21,worse,9) output(2,eq,13) output(2,eq,18) output(13,eq,18) output(1,eq,50) output(30,eq,0) output(30,eq,9) output(0,eq,9)
Optimization: 13 14
Answer: 16
preference(1,(1,11),1,for(neg(atom(hasStyle(1)))),3) preference(1,(1,1),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,2),1,for(atom(hasOftenSold(1))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,4),1,for(atom(hasOiliness(0))),7) preference(1,(1,5),1,for(atom(hasOftenSold(0))),7) preference(1,(1,6),1,for(atom(hasOftenSold(2))),7) preference(1,(1,7),1,for(atom(hasPrice(2))),10) preference(1,(1,8),1,for(atom(hasPrice(1))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,12),1,for(atom(hasPrice(3))),3) preference(1,(1,13),1,for(atom(hasOiliness(2))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),2) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,1) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9) output(21,worse,1) output(21,worse,50) output(21,worse,4) output(21,worse,30) output(21,worse,0) output(21,worse,9) output(2,eq,13) output(2,eq,18) output(13,eq,18) output(30,eq,0) output(30,eq,9) output(0,eq,9)
Optimization: 12 14
Answer: 17
preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(8)))),5) preference(1,(1,1),1,for(atom(hasOiliness(0))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,3),1,for(atom(hasPrice(3))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,6),1,for(atom(hasOftenSold(1))),4) preference(1,(1,9),1,for(atom(hasOftenSold(0))),1) preference(1,(1,10),1,for(atom(hasPrice(2))),8) preference(1,(1,11),1,for(atom(hasPrice(0))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,13),1,for(atom(hasOiliness(2))),4) preference(1,(1,14),1,for(atom(hasOftenSold(2))),4) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,4) output(18,better,30) output(18,better,0) output(21,better,30) output(21,better,0) output(30,better,0) output(50,better,4) output(50,better,30) output(50,better,0) output(0,worse,9) output(4,worse,9) output(18,worse,1) output(21,worse,1) output(21,worse,50) output(21,worse,9) output(30,worse,9) output(18,eq,50) output(18,eq,9) output(21,eq,4) output(50,eq,9)
Optimization: 11 14
Answer: 18
preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(8)))),5) preference(1,(1,1),1,for(atom(hasOiliness(0))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,3),1,for(atom(hasPrice(3))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,6),1,for(atom(hasOftenSold(1))),1) preference(1,(1,9),1,for(atom(hasOftenSold(0))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),9) preference(1,(1,11),1,for(atom(hasPrice(0))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,14),1,for(atom(hasOiliness(2))),4) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(13,better,18) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,4) output(18,better,30) output(18,better,0) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(50,better,4) output(50,better,30) output(50,better,0) output(0,worse,9) output(4,worse,9) output(18,worse,21) output(18,worse,1) output(30,worse,0) output(30,worse,9) output(13,eq,21) output(18,eq,50) output(18,eq,9) output(50,eq,9)
Optimization: 10 14
Answer: 19
preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(8)))),5) preference(1,(1,1),1,for(atom(hasOiliness(0))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,3),1,for(atom(hasPrice(3))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,9),1,for(atom(hasOftenSold(0))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,11),1,for(atom(hasPrice(0))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,14),1,for(atom(hasOiliness(2))),4) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(13,better,18) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,4) output(18,better,30) output(18,better,0) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(50,better,4) output(50,better,30) output(50,better,0) output(0,worse,9) output(4,worse,9) output(18,worse,21) output(18,worse,1) output(30,worse,9) output(13,eq,21) output(18,eq,50) output(18,eq,9) output(50,eq,9)
Optimization: 9 14
Answer: 20
preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(8)))),5) preference(1,(1,1),1,for(atom(hasOiliness(0))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,3),1,for(atom(hasPrice(3))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,6),1,for(atom(hasOftenSold(1))),4) preference(1,(1,9),1,for(atom(hasOftenSold(0))),1) preference(1,(1,10),1,for(atom(hasPrice(2))),1) preference(1,(1,11),1,for(atom(hasPrice(0))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,13),1,for(atom(hasOiliness(2))),4) preference(1,(1,14),1,for(atom(hasOftenSold(2))),4) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,4) output(18,better,30) output(18,better,0) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(50,better,4) output(50,better,30) output(50,better,0) output(0,worse,9) output(4,worse,9) output(18,worse,21) output(18,worse,1) output(30,worse,9) output(18,eq,50) output(18,eq,9) output(50,eq,9)
Optimization: 8 14
Answer: 21
preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(8)))),5) preference(1,(1,1),1,for(atom(hasOiliness(0))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,3),1,for(atom(hasPrice(3))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,6),1,for(atom(hasOftenSold(1))),4) preference(1,(1,9),1,for(atom(hasOftenSold(0))),1) preference(1,(1,10),1,for(atom(hasOiliness(2))),7) preference(1,(1,11),1,for(atom(hasPrice(0))),7) preference(1,(1,12),1,for(atom(hasOftenSold(2))),4) preference(1,(1,13),1,for(atom(hasPrice(2))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9) output(0,worse,9) output(18,worse,1) output(21,worse,1) output(21,worse,50) output(30,worse,9) output(18,eq,50) output(21,eq,4)
Optimization: 7 14
Answer: 22
preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(8)))),5) preference(1,(1,1),1,for(atom(hasOiliness(0))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,3),1,for(atom(hasPrice(3))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,6),1,for(atom(hasOiliness(2))),4) preference(1,(1,9),1,for(atom(hasOftenSold(0))),1) preference(1,(1,10),1,for(atom(hasPrice(2))),1) preference(1,(1,11),1,for(atom(hasPrice(0))),7) preference(1,(1,12),1,for(atom(hasOftenSold(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,14),1,for(atom(hasOftenSold(2))),4) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9) output(0,worse,9) output(18,worse,21) output(18,worse,1) output(30,worse,9) output(18,eq,50) output(4,eq,9)
Optimization: 6 14
Answer: 23
preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(8)))),5) preference(1,(1,1),1,for(atom(hasOiliness(0))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,3),1,for(atom(hasPrice(3))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,9),1,for(atom(hasOftenSold(0))),1) preference(1,(1,10),1,for(atom(hasOiliness(2))),4) preference(1,(1,11),1,for(atom(hasPrice(0))),7) preference(1,(1,12),1,for(atom(hasPrice(2))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,14),1,for(atom(hasOftenSold(2))),4) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9) output(0,worse,9) output(18,worse,21) output(18,worse,1) output(30,worse,9) output(18,eq,50)
Optimization: 5 14
Answer: 24
preference(1,(1,6),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(1)))),8) preference(1,(1,13),1,for(neg(atom(hasStyle(1)))),1) preference(1,(1,1),1,for(atom(hasOftenSold(3))),4) preference(1,(1,2),1,for(atom(hasPrice(0))),10) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,4),1,for(atom(hasOiliness(2))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(8))),2) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,8),1,for(atom(hasOftenSold(1))),9) preference(1,(1,9),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,10),1,for(atom(hasPrice(3))),7) preference(1,(1,12),1,for(atom(hasPrice(2))),3) preference(1,(1,14),1,for(atom(hasOiliness(1))),7) preference(1,less(weight)) output(0,better,9) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,18) output(13,better,21) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(30,better,9) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9) output(13,worse,1) output(18,worse,1) output(21,worse,1) output(18,eq,21)
Optimization: 4 14
Answer: 25
preference(1,(1,7),1,for(neg(atom(hasPrice(3)))),5) preference(1,(1,13),1,for(neg(atom(hasOiliness(1)))),3) preference(1,(1,1),1,for(atom(hasOftenSold(2))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,3),1,for(atom(hasOftenSold(0))),6) preference(1,(1,4),1,for(atom(hasOiliness(1))),1) preference(1,(1,5),1,for(atom(hasOiliness(2))),4) preference(1,(1,6),1,for(atom(hasOftenSold(1))),7) preference(1,(1,8),1,for(atom(hasPrice(3))),7) preference(1,(1,9),1,for(atom(hasPrice(0))),4) preference(1,(1,10),1,for(atom(hasPrice(1))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,12),1,for(atom(hasOiliness(0))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,1) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9) output(0,worse,9) output(30,worse,9) output(4,eq,9)
Optimization: 3 14
Answer: 26
preference(1,(1,1),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,2),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,6),1,for(neg(atom(hasPrice(2)))),8) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(1)))),6) preference(1,(1,3),1,for(atom(hasOftenSold(0))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,5),1,for(atom(hasOftenSold(3))),2) preference(1,(1,7),1,for(atom(hasOftenSold(1))),3) preference(1,(1,8),1,for(atom(hasOiliness(0))),4) preference(1,(1,9),1,for(atom(hasPrice(3))),3) preference(1,(1,11),1,for(atom(hasPrice(2))),8) preference(1,(1,12),1,for(atom(hasOiliness(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(3))),1) preference(1,less(weight)) output(0,better,9) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,1) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(30,better,9) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 27
preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),3) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,1),1,for(atom(hasOftenSold(1))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,5),1,for(atom(hasPrice(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(8))),4) preference(1,(1,10),1,for(atom(hasPrice(3))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,13),1,for(atom(hasPrice(2))),2) preference(1,(1,14),1,for(atom(hasOiliness(1))),1) preference(1,less(weight)) output(0,better,9) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,1) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(30,better,9) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9)
Optimization: 0 13
Answer: 28
preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),3) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,5),1,for(atom(hasPrice(1))),2) preference(1,(1,6),1,for(atom(hasPrice(3))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,9),1,for(atom(hasOftenSold(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,13),1,for(atom(hasPrice(2))),2) preference(1,(1,14),1,for(atom(hasOiliness(1))),1) preference(1,less(weight)) output(0,better,9) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,1) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(30,better,9) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9)
Optimization: 0 12
Answer: 29
preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),3) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,11),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,5),1,for(atom(hasPrice(1))),2) preference(1,(1,6),1,for(atom(hasPrice(3))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,9),1,for(atom(hasOftenSold(1))),8) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,13),1,for(atom(hasPrice(2))),2) preference(1,(1,14),1,for(atom(hasOiliness(1))),1) preference(1,less(weight)) output(0,better,9) output(1,better,50) output(1,better,4) output(1,better,30) output(1,better,0) output(1,better,9) output(2,better,13) output(2,better,18) output(2,better,21) output(2,better,1) output(2,better,50) output(2,better,4) output(2,better,30) output(2,better,0) output(2,better,9) output(4,better,30) output(4,better,0) output(4,better,9) output(13,better,18) output(13,better,21) output(13,better,1) output(13,better,50) output(13,better,4) output(13,better,30) output(13,better,0) output(13,better,9) output(18,better,21) output(18,better,1) output(18,better,50) output(18,better,4) output(18,better,30) output(18,better,0) output(18,better,9) output(21,better,1) output(21,better,50) output(21,better,4) output(21,better,30) output(21,better,0) output(21,better,9) output(30,better,0) output(30,better,9) output(50,better,4) output(50,better,30) output(50,better,0) output(50,better,9)
Optimization: 0 11
Progression : 0 [ 2;11] (Error: 4.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.072 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 29+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 597.237s (Solving: 585.47s 1st Model: 0.08s Unsat: 0.00s)
CPU Time     : 2353.250s
Threads      : 4        (Winner: 4)

Choices      : 12732109 (Domain: 2289)
Conflicts    : 2357442  (Analyzed: 2357440)
Restarts     : 2384     (Average: 988.86 Last: 195323)
Model-Level  : 1622.5  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 2369125  (Deleted: 2229953)
  Binary     : 1660     (Ratio:   0.07%)
  Ternary    : 489      (Ratio:   0.02%)
  Conflict   : 2357440  (Average Length: 1689.5 Ratio:  99.51%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 11685    (Average Length:  223.8 Ratio:   0.49%) 
  Distributed: 3895     (Ratio:   0.17% Average LBD: 3.38) 
  Integrated : 11685    (Ratio: 300.00% Unit: 50 Average Jumps: 7.28)
Backjumps    : 2357440  (Average:  3.79 Max: 4016 Sum: 8940647)
  Executed   : 2357439  (Average:  3.79 Max: 4016 Sum: 8940623 Ratio: 100.00%)
  Bounded    : 1        (Average: 24.00 Max:  24 Sum:     24 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasPrice(2)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasStyle(0)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasPrice(2)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasStyle(0)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasPrice(2)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasStyle(0)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  7 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(1)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMinorGrp(8)) ; 
  1 :: atom(hasPrice(3)) ; 
  9 :: atom(hasStyle(0)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(0)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  7 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasOiliness(3)) ; 
  10 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasMinorGrp(8)) ; 
  1 :: atom(hasPrice(3)) ; 
  9 :: atom(hasStyle(0)) ; 
  4 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(9)) ; 
  7 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  3 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasPrice(3)) ; 
  4 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  7 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  3 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasPrice(3)) ; 
  4 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  7 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  3 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasPrice(3)) ; 
  4 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasPrice(3)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  2 :: not atom(hasPrice(3))  ; 
  4 :: atom(hasOftenSold(1)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  5 :: not atom(hasMinorGrp(8))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(0)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasPrice(3)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  2 :: not atom(hasPrice(3))  ; 
  1 :: atom(hasOftenSold(1)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  5 :: not atom(hasMinorGrp(8))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasPrice(0)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasOiliness(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasPrice(3)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  2 :: not atom(hasPrice(3))  ; 
  4 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  5 :: not atom(hasMinorGrp(8))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  7 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(11)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasOiliness(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasPrice(3)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  2 :: not atom(hasPrice(3))  ; 
  4 :: atom(hasOftenSold(1)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  5 :: not atom(hasMinorGrp(8))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(0)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasPrice(3)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  2 :: not atom(hasPrice(3))  ; 
  4 :: atom(hasOftenSold(1)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  5 :: not atom(hasMinorGrp(8))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasOiliness(2)) ; 
  7 :: atom(hasPrice(0)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasPrice(3)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  2 :: not atom(hasPrice(3))  ; 
  4 :: atom(hasOiliness(2)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  5 :: not atom(hasMinorGrp(8))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasPrice(2)) ; 
  7 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  2 :: not atom(hasPrice(3))  ; 
  10 :: atom(hasMinorGrp(6)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  5 :: not atom(hasMinorGrp(8))  ; 
  1 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasOiliness(2)) ; 
  7 :: atom(hasPrice(0)) ; 
  1 :: atom(hasPrice(2)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(8)) ; 
  9 :: not atom(hasPrice(0))  ; 
  10 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  7 :: atom(hasPrice(3)) ; 
  8 :: not atom(hasMinorGrp(1))  ; 
  3 :: atom(hasPrice(2)) ; 
  1 :: not atom(hasStyle(1))  ; 
  7 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasOiliness(2)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  5 :: not atom(hasPrice(3))  ; 
  7 :: atom(hasPrice(3)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasOiliness(0)) ; 
  3 :: not atom(hasOiliness(1))  ; 
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: not atom(hasPrice(1))  ; 
  2 :: not atom(hasOiliness(1))  ; 
  3 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  8 :: not atom(hasPrice(2))  ; 
  3 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasPrice(3)) ; 
  6 :: not atom(hasMinorGrp(1))  ; 
  8 :: atom(hasPrice(2)) ; 
  1 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasMinorGrp(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasMinorGrp(7)) ; 
  3 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  1 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasPrice(3)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasPrice(2)) ; 
  1 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(7)) ; 
  3 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasPrice(1)) ; 
  7 :: atom(hasPrice(3)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  1 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasPrice(2)) ; 
  1 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(7)) ; 
  3 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasPrice(1)) ; 
  7 :: atom(hasPrice(3)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  1 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasPrice(2)) ; 
  1 :: atom(hasOiliness(1)) 
}.
