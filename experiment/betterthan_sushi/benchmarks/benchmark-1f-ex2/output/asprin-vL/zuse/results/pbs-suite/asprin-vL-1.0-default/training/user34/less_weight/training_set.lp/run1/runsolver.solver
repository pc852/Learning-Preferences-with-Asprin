asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(8,eq,26) output(8,eq,13) output(8,eq,9) output(8,eq,1) output(8,eq,21) output(8,eq,7) output(8,eq,31) output(8,eq,29) output(8,eq,40) output(26,eq,13) output(26,eq,9) output(26,eq,1) output(26,eq,21) output(26,eq,7) output(26,eq,31) output(26,eq,29) output(26,eq,40) output(13,eq,9) output(13,eq,1) output(13,eq,21) output(13,eq,7) output(13,eq,31) output(13,eq,29) output(13,eq,40) output(9,eq,1) output(9,eq,21) output(9,eq,7) output(9,eq,31) output(9,eq,29) output(9,eq,40) output(1,eq,21) output(1,eq,7) output(1,eq,31) output(1,eq,29) output(1,eq,40) output(21,eq,7) output(21,eq,31) output(21,eq,29) output(21,eq,40) output(7,eq,31) output(7,eq,29) output(7,eq,40) output(31,eq,29) output(31,eq,40) output(29,eq,40)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasOiliness(3))),10) preference(1,less(weight)) output(26,better,29) output(26,better,40) output(1,better,29) output(1,better,40) output(7,better,29) output(7,better,40) output(8,better,29) output(8,better,40) output(9,better,29) output(9,better,40) output(13,better,29) output(13,better,40) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(8,eq,26) output(8,eq,13) output(8,eq,9) output(8,eq,1) output(8,eq,21) output(8,eq,7) output(8,eq,31) output(26,eq,13) output(26,eq,9) output(26,eq,1) output(26,eq,21) output(26,eq,7) output(26,eq,31) output(13,eq,9) output(13,eq,1) output(13,eq,21) output(13,eq,7) output(13,eq,31) output(9,eq,1) output(9,eq,21) output(9,eq,7) output(9,eq,31) output(1,eq,21) output(1,eq,7) output(1,eq,31) output(21,eq,7) output(21,eq,31) output(7,eq,31) output(29,eq,40)
Optimization: 29 1
Answer: 3
preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,(1,14),1,for(atom(hasOiliness(3))),10) preference(1,less(weight)) output(26,better,21) output(26,better,29) output(26,better,40) output(1,better,21) output(1,better,29) output(1,better,40) output(7,better,29) output(7,better,40) output(8,better,21) output(8,better,29) output(8,better,40) output(9,better,21) output(9,better,29) output(9,better,40) output(13,better,21) output(13,better,29) output(13,better,40) output(31,better,29) output(31,better,40) output(21,worse,7) output(21,worse,31) output(8,eq,26) output(8,eq,13) output(8,eq,9) output(8,eq,1) output(8,eq,7) output(8,eq,31) output(26,eq,13) output(26,eq,9) output(26,eq,1) output(26,eq,7) output(26,eq,31) output(13,eq,9) output(13,eq,1) output(13,eq,7) output(13,eq,31) output(9,eq,1) output(9,eq,7) output(9,eq,31) output(1,eq,7) output(1,eq,31) output(21,eq,29) output(21,eq,40) output(7,eq,31) output(29,eq,40)
Optimization: 26 2
Answer: 4
preference(1,(1,13),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,14),1,for(atom(hasOiliness(3))),10) preference(1,less(weight)) output(26,better,7) output(26,better,29) output(26,better,40) output(1,better,7) output(1,better,29) output(1,better,40) output(8,better,7) output(8,better,29) output(8,better,40) output(9,better,7) output(9,better,29) output(9,better,40) output(13,better,7) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(7,worse,31) output(8,eq,26) output(8,eq,13) output(8,eq,9) output(8,eq,1) output(8,eq,21) output(8,eq,31) output(26,eq,13) output(26,eq,9) output(26,eq,1) output(26,eq,21) output(26,eq,31) output(13,eq,9) output(13,eq,1) output(13,eq,21) output(13,eq,31) output(9,eq,1) output(9,eq,21) output(9,eq,31) output(1,eq,21) output(1,eq,31) output(21,eq,31) output(7,eq,29) output(7,eq,40) output(29,eq,40)
Optimization: 25 2
Answer: 5
preference(1,(1,12),1,for(atom(hasPrice(2))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,14),1,for(atom(hasOiliness(3))),10) preference(1,less(weight)) output(26,better,21) output(26,better,7) output(26,better,29) output(26,better,40) output(1,better,21) output(1,better,7) output(1,better,29) output(1,better,40) output(8,better,21) output(8,better,7) output(8,better,29) output(8,better,40) output(9,better,21) output(9,better,7) output(9,better,29) output(9,better,40) output(13,better,21) output(13,better,7) output(13,better,29) output(13,better,40) output(31,better,29) output(31,better,40) output(7,worse,31) output(21,worse,31) output(8,eq,26) output(8,eq,13) output(8,eq,9) output(8,eq,1) output(8,eq,31) output(26,eq,13) output(26,eq,9) output(26,eq,1) output(26,eq,31) output(13,eq,9) output(13,eq,1) output(13,eq,31) output(9,eq,1) output(9,eq,31) output(1,eq,31) output(21,eq,7) output(21,eq,29) output(21,eq,40) output(7,eq,29) output(7,eq,40) output(29,eq,40)
Optimization: 23 3
Answer: 6
preference(1,(1,1),1,for(atom(hasOftenSold(0))),7) preference(1,(1,2),1,for(atom(hasPrice(3))),2) preference(1,(1,5),1,for(atom(hasOiliness(3))),2) preference(1,(1,6),1,for(atom(hasOiliness(0))),4) preference(1,(1,7),1,for(atom(hasOiliness(2))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,10),1,for(atom(hasPrice(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,12),1,for(atom(hasPrice(1))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),9) preference(1,less(weight)) output(26,better,7) output(26,better,40) output(29,better,40) output(1,better,7) output(1,better,40) output(8,better,7) output(8,better,40) output(9,better,1) output(9,better,7) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(26,worse,13) output(26,worse,9) output(26,worse,21) output(26,worse,31) output(26,worse,29) output(1,worse,21) output(1,worse,31) output(1,worse,29) output(7,worse,31) output(7,worse,29) output(7,worse,40) output(8,worse,13) output(8,worse,9) output(8,worse,21) output(8,worse,31) output(8,worse,29) output(8,eq,26) output(8,eq,1) output(26,eq,1) output(9,eq,21) output(9,eq,31) output(21,eq,31)
Optimization: 22 12
Answer: 7
preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),3) preference(1,(1,1),1,for(atom(hasOiliness(3))),2) preference(1,(1,2),1,for(atom(hasPrice(3))),2) preference(1,(1,3),1,for(atom(hasPrice(0))),1) preference(1,(1,5),1,for(atom(hasOftenSold(0))),7) preference(1,(1,6),1,for(atom(hasOiliness(0))),4) preference(1,(1,7),1,for(atom(hasOiliness(2))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,12),1,for(atom(hasPrice(1))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),9) preference(1,less(weight)) output(26,better,7) output(26,better,40) output(29,better,40) output(1,better,7) output(1,better,29) output(1,better,40) output(8,better,7) output(8,better,40) output(9,better,1) output(9,better,7) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(26,worse,13) output(26,worse,9) output(26,worse,1) output(26,worse,21) output(26,worse,31) output(26,worse,29) output(1,worse,21) output(1,worse,31) output(7,worse,31) output(7,worse,29) output(7,worse,40) output(8,worse,13) output(8,worse,9) output(8,worse,1) output(8,worse,21) output(8,worse,31) output(8,worse,29) output(8,eq,26) output(9,eq,21) output(9,eq,31) output(21,eq,31)
Optimization: 21 13
Answer: 8
preference(1,(1,1),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,6),1,for(atom(hasOftenSold(0))),10) preference(1,(1,7),1,for(atom(hasOiliness(2))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,10),1,for(atom(hasOiliness(3))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,12),1,for(atom(hasPrice(1))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(9))),6) preference(1,(1,14),1,for(atom(hasPrice(0))),1) preference(1,less(weight)) output(26,better,40) output(29,better,40) output(1,better,40) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,9) output(8,better,1) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,1) output(9,better,7) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(26,worse,13) output(26,worse,9) output(26,worse,1) output(26,worse,21) output(26,worse,7) output(26,worse,31) output(26,worse,29) output(1,worse,21) output(1,worse,7) output(1,worse,31) output(1,worse,29) output(7,worse,31) output(8,eq,13) output(9,eq,21) output(9,eq,31) output(21,eq,31)
Optimization: 16 11
Answer: 9
preference(1,(1,2),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),2) preference(1,(1,6),1,for(atom(hasOftenSold(0))),10) preference(1,(1,7),1,for(atom(hasOiliness(2))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,10),1,for(atom(hasOiliness(3))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,12),1,for(atom(hasPrice(1))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(9))),6) preference(1,(1,14),1,for(atom(hasPrice(0))),1) preference(1,less(weight)) output(26,better,40) output(29,better,40) output(1,better,29) output(1,better,40) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,9) output(8,better,1) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,1) output(9,better,7) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(26,worse,13) output(26,worse,9) output(26,worse,1) output(26,worse,21) output(26,worse,7) output(26,worse,31) output(26,worse,29) output(1,worse,21) output(1,worse,31) output(7,worse,31) output(8,eq,13) output(9,eq,21) output(9,eq,31) output(1,eq,7) output(21,eq,31)
Optimization: 15 11
Answer: 10
preference(1,(1,1),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,2),1,for(atom(hasOftenSold(0))),3) preference(1,(1,3),1,for(atom(hasOftenSold(3))),8) preference(1,(1,4),1,for(atom(hasPrice(0))),5) preference(1,(1,6),1,for(atom(hasOftenSold(1))),1) preference(1,(1,7),1,for(atom(hasOiliness(2))),1) preference(1,(1,8),1,for(atom(hasPrice(3))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,10),1,for(atom(hasOiliness(3))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,13),1,for(atom(hasPrice(2))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),4) preference(1,less(weight)) output(26,better,29) output(26,better,40) output(29,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,21) output(8,better,7) output(8,better,29) output(8,better,40) output(9,better,21) output(9,better,7) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(26,worse,13) output(26,worse,9) output(26,worse,1) output(26,worse,21) output(26,worse,31) output(7,worse,31) output(8,worse,13) output(8,worse,9) output(8,worse,1) output(8,worse,31) output(9,worse,1) output(21,worse,31) output(26,eq,7) output(9,eq,31)
Optimization: 14 13
Answer: 11
preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,3),1,for(neg(atom(hasOiliness(0)))),4) preference(1,(1,5),1,for(neg(atom(hasMajorGrp(1)))),4) preference(1,(1,11),1,for(neg(atom(hasPrice(1)))),6) preference(1,(1,13),1,for(neg(atom(hasOftenSold(3)))),7) preference(1,(1,14),1,for(neg(atom(hasPrice(0)))),9) preference(1,(1,1),1,for(atom(hasPrice(0))),5) preference(1,(1,4),1,for(atom(hasPrice(1))),8) preference(1,(1,6),1,for(atom(hasOiliness(2))),3) preference(1,(1,7),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,8),1,for(atom(hasOftenSold(1))),3) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,10),1,for(atom(hasOiliness(1))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),8) preference(1,less(weight)) output(26,better,13) output(26,better,7) output(26,better,31) output(26,better,29) output(26,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,13) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,1) output(9,better,21) output(9,better,7) output(9,better,31) output(9,better,29) output(9,better,40) output(13,better,7) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,31) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(26,worse,9) output(26,worse,1) output(26,worse,21) output(29,worse,40) output(7,worse,31) output(8,worse,9) output(13,worse,9) output(13,worse,1) output(13,worse,21) output(8,eq,1) output(13,eq,31)
Optimization: 11 14
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),3) preference(1,(1,6),1,for(neg(atom(hasStyle(0)))),5) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(6)))),4) preference(1,(1,11),1,for(neg(atom(hasMajorGrp(1)))),5) preference(1,(1,2),1,for(atom(hasPrice(0))),10) preference(1,(1,3),1,for(atom(hasOftenSold(2))),1) preference(1,(1,5),1,for(atom(hasStyle(0))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),6) preference(1,(1,8),1,for(atom(hasOftenSold(0))),7) preference(1,(1,9),1,for(atom(hasOiliness(2))),6) preference(1,(1,12),1,for(atom(hasPrice(2))),9) preference(1,(1,13),1,for(atom(hasPrice(1))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),8) preference(1,less(weight)) output(26,better,7) output(26,better,31) output(26,better,29) output(26,better,40) output(29,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,40) output(8,better,26) output(8,better,13) output(8,better,9) output(8,better,1) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,7) output(9,better,31) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,31) output(21,better,29) output(21,better,40) output(31,better,40) output(26,worse,13) output(26,worse,9) output(26,worse,1) output(26,worse,21) output(9,worse,1) output(9,eq,21) output(7,eq,31) output(7,eq,29) output(31,eq,29)
Optimization: 9 14
Answer: 13
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),9) preference(1,(1,2),1,for(atom(hasPrice(2))),2) preference(1,(1,3),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),9) preference(1,(1,5),1,for(atom(hasOftenSold(2))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,7),1,for(atom(hasOftenSold(3))),1) preference(1,(1,8),1,for(atom(hasOiliness(1))),3) preference(1,(1,9),1,for(atom(hasOftenSold(1))),4) preference(1,(1,10),1,for(atom(hasStyle(0))),7) preference(1,(1,11),1,for(atom(hasPrice(0))),8) preference(1,(1,12),1,for(atom(hasOiliness(0))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),6) preference(1,(1,14),1,for(atom(hasOftenSold(0))),6) preference(1,less(weight)) output(26,better,7) output(26,better,31) output(26,better,29) output(26,better,40) output(29,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,31) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,13) output(8,better,9) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,21) output(9,better,7) output(9,better,31) output(9,better,29) output(9,better,40) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,31) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(26,worse,13) output(26,worse,9) output(26,worse,1) output(9,worse,1) output(13,worse,9) output(13,worse,1) output(8,eq,1) output(26,eq,21)
Optimization: 8 14
Answer: 14
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),9) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,3),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(9))),9) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,7),1,for(atom(hasOftenSold(3))),1) preference(1,(1,8),1,for(atom(hasPrice(2))),6) preference(1,(1,9),1,for(atom(hasOftenSold(1))),4) preference(1,(1,10),1,for(atom(hasStyle(0))),7) preference(1,(1,11),1,for(atom(hasPrice(0))),8) preference(1,(1,12),1,for(atom(hasOiliness(0))),3) preference(1,(1,13),1,for(atom(hasOiliness(1))),3) preference(1,(1,14),1,for(atom(hasOftenSold(0))),6) preference(1,less(weight)) output(26,better,7) output(26,better,31) output(26,better,29) output(26,better,40) output(29,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,31) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,13) output(8,better,9) output(8,better,1) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,21) output(9,better,7) output(9,better,31) output(9,better,29) output(9,better,40) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,31) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(26,worse,13) output(26,worse,9) output(26,worse,1) output(26,worse,21) output(9,worse,1) output(13,worse,9) output(13,worse,1)
Optimization: 7 14
Answer: 15
preference(1,(1,1),1,for(neg(atom(hasOftenSold(1)))),9) preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),3) preference(1,(1,13),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,2),1,for(atom(hasOiliness(1))),3) preference(1,(1,3),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,4),1,for(atom(hasPrice(2))),10) preference(1,(1,5),1,for(atom(hasOftenSold(1))),4) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,7),1,for(atom(hasOftenSold(3))),1) preference(1,(1,8),1,for(atom(hasOftenSold(2))),2) preference(1,(1,10),1,for(atom(hasStyle(0))),7) preference(1,(1,11),1,for(atom(hasPrice(0))),8) preference(1,(1,12),1,for(atom(hasOiliness(0))),3) preference(1,(1,14),1,for(atom(hasOftenSold(0))),6) preference(1,less(weight)) output(26,better,9) output(26,better,21) output(26,better,7) output(26,better,31) output(26,better,29) output(26,better,40) output(29,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,31) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,13) output(8,better,9) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,21) output(9,better,7) output(9,better,31) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,31) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40) output(26,worse,1) output(9,worse,1) output(13,worse,1) output(8,eq,1) output(26,eq,13) output(21,eq,7)
Optimization: 6 14
Answer: 16
preference(1,(1,1),1,for(atom(hasPrice(2))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,3),1,for(atom(hasPrice(1))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,8),1,for(atom(hasOftenSold(0))),4) preference(1,(1,10),1,for(atom(hasOftenSold(2))),3) preference(1,(1,11),1,for(atom(hasOiliness(1))),1) preference(1,(1,12),1,for(atom(hasPrice(0))),6) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(9))),4) preference(1,less(weight)) output(26,better,13) output(26,better,9) output(26,better,1) output(26,better,21) output(26,better,7) output(26,better,31) output(26,better,29) output(26,better,40) output(29,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,31) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,13) output(8,better,9) output(8,better,1) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,1) output(9,better,21) output(9,better,7) output(9,better,31) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,31) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40)
Optimization: 0 12
Progression : 0 [ 1;12] (Error: 11)
Answer: 17
preference(1,(1,7),1,for(neg(atom(hasMinorGrp(1)))),2) preference(1,(1,9),1,for(neg(atom(hasOftenSold(1)))),4) preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,11),1,for(neg(atom(hasOiliness(2)))),4) preference(1,(1,1),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),7) preference(1,(1,5),1,for(atom(hasOftenSold(1))),8) preference(1,(1,6),1,for(atom(hasPrice(0))),6) preference(1,(1,8),1,for(atom(hasOftenSold(0))),9) preference(1,(1,13),1,for(atom(hasOiliness(1))),3) preference(1,(1,14),1,for(atom(hasPrice(2))),8) preference(1,less(weight)) output(26,better,13) output(26,better,9) output(26,better,1) output(26,better,21) output(26,better,7) output(26,better,31) output(26,better,29) output(26,better,40) output(29,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,31) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,13) output(8,better,9) output(8,better,1) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,1) output(9,better,21) output(9,better,7) output(9,better,31) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,31) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40)
Optimization: 0 11
Progression : 0 [ 2;11] (Error: 4.5)
Answer: 18
preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),2) preference(1,(1,1),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,2),1,for(atom(hasOiliness(3))),10) preference(1,(1,4),1,for(atom(hasOiliness(1))),7) preference(1,(1,5),1,for(atom(hasOftenSold(0))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,11),1,for(atom(hasOiliness(2))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,13),1,for(atom(hasPrice(0))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),1) preference(1,less(weight)) output(26,better,13) output(26,better,9) output(26,better,1) output(26,better,21) output(26,better,7) output(26,better,31) output(26,better,29) output(26,better,40) output(29,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,31) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,13) output(8,better,9) output(8,better,1) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,1) output(9,better,21) output(9,better,7) output(9,better,31) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,31) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40)
Optimization: 0 10
Answer: 19
preference(1,(1,5),1,for(neg(atom(hasOftenSold(3)))),4) preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasOiliness(1))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,9),1,for(atom(hasOftenSold(0))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,11),1,for(atom(hasPrice(0))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(11))),9) preference(1,(1,13),1,for(atom(hasPrice(2))),6) preference(1,less(weight)) output(26,better,13) output(26,better,9) output(26,better,1) output(26,better,21) output(26,better,7) output(26,better,31) output(26,better,29) output(26,better,40) output(29,better,40) output(1,better,21) output(1,better,7) output(1,better,31) output(1,better,29) output(1,better,40) output(7,better,31) output(7,better,29) output(7,better,40) output(8,better,26) output(8,better,13) output(8,better,9) output(8,better,1) output(8,better,21) output(8,better,7) output(8,better,31) output(8,better,29) output(8,better,40) output(9,better,1) output(9,better,21) output(9,better,7) output(9,better,31) output(9,better,29) output(9,better,40) output(13,better,9) output(13,better,1) output(13,better,21) output(13,better,7) output(13,better,31) output(13,better,29) output(13,better,40) output(21,better,7) output(21,better,31) output(21,better,29) output(21,better,40) output(31,better,29) output(31,better,40)
Optimization: 0 9
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.140 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 19+
  Optimum    : unknown
Optimization : 0 9
Calls        : 1
Time         : 598.347s (Solving: 583.53s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 2346.899s
Threads      : 4        (Winner: 4)

Choices      : 10400866 (Domain: 1798)
Conflicts    : 2011186  (Analyzed: 2011184)
Restarts     : 2073     (Average: 970.18 Last: 66863)
Model-Level  : 1921.1  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 2014877  (Deleted: 1817529)
  Binary     : 536      (Ratio:   0.03%)
  Ternary    : 186      (Ratio:   0.01%)
  Conflict   : 2011184  (Average Length: 1769.5 Ratio:  99.82%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 3693     (Average Length:  191.5 Ratio:   0.18%) 
  Distributed: 1231     (Ratio:   0.06% Average LBD: 3.31) 
  Integrated : 3693     (Ratio: 300.00% Unit: 13 Average Jumps: 77.62)
Backjumps    : 2011184  (Average:  3.15 Max: 3959 Sum: 6336890)
  Executed   : 2011183  (Average:  3.15 Max: 3959 Sum: 6336870 Ratio: 100.00%)
  Bounded    : 1        (Average: 20.00 Max:  20 Sum:     20 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasOiliness(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOiliness(3)) ; 
  4 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasPrice(1)) ; 
  4 :: atom(hasMinorGrp(11)) ; 
  9 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasPrice(3)) ; 
  1 :: atom(hasPrice(0)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  3 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasPrice(1)) ; 
  4 :: atom(hasMinorGrp(11)) ; 
  9 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  5 :: atom(hasPrice(1)) ; 
  6 :: atom(hasMinorGrp(9)) ; 
  1 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  5 :: atom(hasPrice(1)) ; 
  6 :: atom(hasMinorGrp(9)) ; 
  1 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOiliness(2)) ; 
  1 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasPrice(2)) ; 
  4 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrice(0)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  4 :: not atom(hasOiliness(0))  ; 
  8 :: atom(hasPrice(1)) ; 
  4 :: not atom(hasMajorGrp(1))  ; 
  3 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  8 :: atom(hasMajorGrp(1)) ; 
  5 :: atom(hasOiliness(1)) ; 
  6 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasMinorGrp(1)) ; 
  7 :: not atom(hasOftenSold(3))  ; 
  9 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  3 :: not atom(hasOftenSold(2))  ; 
  6 :: atom(hasStyle(0)) ; 
  5 :: not atom(hasStyle(0))  ; 
  6 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasOiliness(2)) ; 
  4 :: not atom(hasMinorGrp(6))  ; 
  5 :: not atom(hasMajorGrp(1))  ; 
  9 :: atom(hasPrice(2)) ; 
  9 :: atom(hasPrice(1)) ; 
  8 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: not atom(hasOftenSold(3))  ; 
  2 :: atom(hasPrice(2)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasMinorGrp(9)) ; 
  3 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasStyle(0)) ; 
  8 :: atom(hasPrice(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: not atom(hasOftenSold(3))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasMinorGrp(9)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasPrice(2)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasStyle(0)) ; 
  8 :: atom(hasPrice(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: not atom(hasOftenSold(1))  ; 
  3 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasPrice(2)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  3 :: not atom(hasStyle(1))  ; 
  7 :: atom(hasStyle(0)) ; 
  8 :: atom(hasPrice(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  9 :: not atom(hasPrice(1))  ; 
  6 :: atom(hasOftenSold(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(2)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasMinorGrp(11)) ; 
  4 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(3)) ; 
  4 :: atom(hasMinorGrp(9)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasMinorGrp(1))  ; 
  9 :: atom(hasOftenSold(0)) ; 
  4 :: not atom(hasOftenSold(1))  ; 
  5 :: not atom(hasMajorGrp(0))  ; 
  4 :: not atom(hasOiliness(2))  ; 
  3 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOiliness(3)) ; 
  7 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  2 :: not atom(hasOiliness(2))  ; 
  7 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOiliness(2)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  8 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOiliness(1)) ; 
  9 :: atom(hasMinorGrp(3)) ; 
  4 :: not atom(hasOftenSold(3))  ; 
  2 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasPrice(2)) 
}.
