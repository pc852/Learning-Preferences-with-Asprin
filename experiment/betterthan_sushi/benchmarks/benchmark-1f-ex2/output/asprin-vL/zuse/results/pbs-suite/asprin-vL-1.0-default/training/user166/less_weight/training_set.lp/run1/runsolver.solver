asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(8,eq,58) output(8,eq,18) output(8,eq,47) output(8,eq,20) output(8,eq,11) output(8,eq,3) output(8,eq,33) output(8,eq,12) output(8,eq,4) output(58,eq,18) output(58,eq,47) output(58,eq,20) output(58,eq,11) output(58,eq,3) output(58,eq,33) output(58,eq,12) output(58,eq,4) output(18,eq,47) output(18,eq,20) output(18,eq,11) output(18,eq,3) output(18,eq,33) output(18,eq,12) output(18,eq,4) output(47,eq,20) output(47,eq,11) output(47,eq,3) output(47,eq,33) output(47,eq,12) output(47,eq,4) output(20,eq,11) output(20,eq,3) output(20,eq,33) output(20,eq,12) output(20,eq,4) output(11,eq,3) output(11,eq,33) output(11,eq,12) output(11,eq,4) output(3,eq,33) output(3,eq,12) output(3,eq,4) output(33,eq,12) output(33,eq,4) output(12,eq,4)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(3,better,33) output(8,better,33) output(11,better,33) output(18,better,33) output(20,better,33) output(47,better,33) output(58,better,33) output(33,worse,12) output(33,worse,4) output(8,eq,58) output(8,eq,18) output(8,eq,47) output(8,eq,20) output(8,eq,11) output(8,eq,3) output(8,eq,12) output(8,eq,4) output(58,eq,18) output(58,eq,47) output(58,eq,20) output(58,eq,11) output(58,eq,3) output(58,eq,12) output(58,eq,4) output(18,eq,47) output(18,eq,20) output(18,eq,11) output(18,eq,3) output(18,eq,12) output(18,eq,4) output(47,eq,20) output(47,eq,11) output(47,eq,3) output(47,eq,12) output(47,eq,4) output(20,eq,11) output(20,eq,3) output(20,eq,12) output(20,eq,4) output(11,eq,3) output(11,eq,12) output(11,eq,4) output(3,eq,12) output(3,eq,4) output(12,eq,4)
Optimization: 38 1
Answer: 3
preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(3,better,33) output(8,better,18) output(8,better,33) output(11,better,33) output(20,better,33) output(47,better,33) output(58,better,18) output(58,better,33) output(18,worse,47) output(18,worse,20) output(18,worse,11) output(18,worse,3) output(18,worse,12) output(18,worse,4) output(33,worse,12) output(33,worse,4) output(8,eq,58) output(8,eq,47) output(8,eq,20) output(8,eq,11) output(8,eq,3) output(8,eq,12) output(8,eq,4) output(58,eq,47) output(58,eq,20) output(58,eq,11) output(58,eq,3) output(58,eq,12) output(58,eq,4) output(18,eq,33) output(47,eq,20) output(47,eq,11) output(47,eq,3) output(47,eq,12) output(47,eq,4) output(20,eq,11) output(20,eq,3) output(20,eq,12) output(20,eq,4) output(11,eq,3) output(11,eq,12) output(11,eq,4) output(3,eq,12) output(3,eq,4) output(12,eq,4)
Optimization: 37 2
Answer: 4
preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),10) preference(1,less(weight)) output(3,better,33) output(8,better,47) output(8,better,33) output(11,better,33) output(18,better,47) output(18,better,33) output(20,better,33) output(58,better,47) output(58,better,33) output(33,worse,12) output(33,worse,4) output(47,worse,20) output(47,worse,11) output(47,worse,3) output(47,worse,12) output(47,worse,4) output(8,eq,58) output(8,eq,18) output(8,eq,20) output(8,eq,11) output(8,eq,3) output(8,eq,12) output(8,eq,4) output(58,eq,18) output(58,eq,20) output(58,eq,11) output(58,eq,3) output(58,eq,12) output(58,eq,4) output(18,eq,20) output(18,eq,11) output(18,eq,3) output(18,eq,12) output(18,eq,4) output(47,eq,33) output(20,eq,11) output(20,eq,3) output(20,eq,12) output(20,eq,4) output(11,eq,3) output(11,eq,12) output(11,eq,4) output(3,eq,12) output(3,eq,4) output(12,eq,4)
Optimization: 36 2
Answer: 5
preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,33) output(8,better,4) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,33) output(18,better,4) output(20,better,33) output(20,better,4) output(47,better,33) output(47,better,4) output(58,better,33) output(58,better,4) output(33,worse,12) output(8,eq,58) output(8,eq,18) output(8,eq,47) output(8,eq,20) output(8,eq,11) output(8,eq,3) output(8,eq,12) output(58,eq,18) output(58,eq,47) output(58,eq,20) output(58,eq,11) output(58,eq,3) output(58,eq,12) output(18,eq,47) output(18,eq,20) output(18,eq,11) output(18,eq,3) output(18,eq,12) output(47,eq,20) output(47,eq,11) output(47,eq,3) output(47,eq,12) output(20,eq,11) output(20,eq,3) output(20,eq,12) output(11,eq,3) output(11,eq,12) output(3,eq,12) output(33,eq,4)
Optimization: 30 2
Answer: 6
preference(1,(1,12),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,47) output(8,better,33) output(8,better,4) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,47) output(18,better,33) output(18,better,4) output(20,better,33) output(20,better,4) output(58,better,47) output(58,better,33) output(58,better,4) output(33,worse,12) output(47,worse,20) output(47,worse,11) output(47,worse,3) output(47,worse,12) output(8,eq,58) output(8,eq,18) output(8,eq,20) output(8,eq,11) output(8,eq,3) output(8,eq,12) output(58,eq,18) output(58,eq,20) output(58,eq,11) output(58,eq,3) output(58,eq,12) output(18,eq,20) output(18,eq,11) output(18,eq,3) output(18,eq,12) output(47,eq,33) output(47,eq,4) output(20,eq,11) output(20,eq,3) output(20,eq,12) output(11,eq,3) output(11,eq,12) output(3,eq,12) output(33,eq,4)
Optimization: 29 3
Answer: 7
preference(1,(1,8),1,for(atom(hasPrice(1))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,3) output(8,better,33) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,3) output(20,better,33) output(20,better,4) output(47,better,3) output(47,better,33) output(47,better,4) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(33,worse,12) output(8,eq,58) output(8,eq,18) output(8,eq,47) output(8,eq,20) output(8,eq,11) output(8,eq,12) output(58,eq,18) output(58,eq,47) output(58,eq,20) output(58,eq,11) output(58,eq,12) output(18,eq,47) output(18,eq,20) output(18,eq,11) output(18,eq,12) output(47,eq,20) output(47,eq,11) output(47,eq,12) output(20,eq,11) output(20,eq,12) output(11,eq,12) output(33,eq,4)
Optimization: 24 3
Answer: 8
preference(1,(1,2),1,for(atom(hasMinorGrp(8))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,6),1,for(atom(hasPrice(1))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,58) output(8,better,3) output(8,better,33) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,3) output(20,better,33) output(20,better,4) output(47,better,3) output(47,better,33) output(47,better,4) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(33,worse,12) output(33,worse,4) output(58,worse,18) output(58,worse,47) output(58,worse,20) output(58,worse,11) output(58,worse,12) output(8,eq,18) output(8,eq,47) output(8,eq,20) output(8,eq,11) output(8,eq,12) output(18,eq,47) output(18,eq,20) output(18,eq,11) output(18,eq,12) output(47,eq,20) output(47,eq,11) output(47,eq,12) output(20,eq,11) output(20,eq,12) output(11,eq,12)
Optimization: 23 5
Answer: 9
preference(1,(1,2),1,for(atom(hasMinorGrp(8))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,6),1,for(atom(hasPrice(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,58) output(8,better,18) output(8,better,3) output(8,better,33) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,3) output(20,better,33) output(20,better,4) output(47,better,3) output(47,better,33) output(47,better,4) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(18,worse,47) output(18,worse,20) output(18,worse,11) output(18,worse,12) output(33,worse,12) output(33,worse,4) output(58,worse,18) output(58,worse,47) output(58,worse,20) output(58,worse,11) output(58,worse,12) output(8,eq,47) output(8,eq,20) output(8,eq,11) output(8,eq,12) output(47,eq,20) output(47,eq,11) output(47,eq,12) output(20,eq,11) output(20,eq,12) output(11,eq,12)
Optimization: 22 6
Answer: 10
preference(1,(1,1),1,for(atom(hasPrice(0))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,6),1,for(atom(hasPrice(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,58) output(8,better,18) output(8,better,3) output(8,better,33) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,3) output(20,better,33) output(20,better,4) output(47,better,3) output(47,better,33) output(47,better,4) output(58,better,18) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(18,worse,47) output(18,worse,20) output(18,worse,11) output(18,worse,12) output(33,worse,12) output(33,worse,4) output(58,worse,47) output(58,worse,20) output(58,worse,11) output(58,worse,12) output(8,eq,47) output(8,eq,20) output(8,eq,11) output(8,eq,12) output(47,eq,20) output(47,eq,11) output(47,eq,12) output(20,eq,11) output(20,eq,12) output(11,eq,12)
Optimization: 21 7
Answer: 11
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,1),1,for(atom(hasPrice(0))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,3),1,for(atom(hasOftenSold(2))),2) preference(1,(1,4),1,for(atom(hasPrice(1))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,8),1,for(atom(hasOiliness(0))),5) preference(1,(1,9),1,for(atom(hasOftenSold(1))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),2) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,33) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,3) output(20,better,33) output(20,better,4) output(33,better,4) output(47,better,20) output(47,better,11) output(47,better,3) output(47,better,33) output(47,better,12) output(47,better,4) output(58,better,18) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(8,worse,58) output(8,worse,18) output(8,worse,47) output(8,worse,20) output(8,worse,11) output(8,worse,3) output(8,worse,12) output(18,worse,47) output(18,worse,20) output(18,worse,11) output(18,worse,12) output(33,worse,12) output(58,worse,47) output(58,eq,20) output(58,eq,11) output(58,eq,12) output(20,eq,11) output(20,eq,12) output(11,eq,12)
Optimization: 20 12
Answer: 12
preference(1,(1,1),1,for(atom(hasPrice(0))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,3),1,for(atom(hasOftenSold(2))),2) preference(1,(1,4),1,for(atom(hasPrice(1))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,7),1,for(atom(hasOiliness(3))),8) preference(1,(1,8),1,for(atom(hasOiliness(0))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasPrice(2))),1) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,33) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,12) output(11,better,4) output(12,better,4) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,3) output(20,better,33) output(20,better,4) output(33,better,4) output(47,better,20) output(47,better,11) output(47,better,3) output(47,better,33) output(47,better,12) output(47,better,4) output(58,better,18) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(8,worse,58) output(8,worse,18) output(8,worse,47) output(8,worse,20) output(8,worse,11) output(8,worse,3) output(8,worse,12) output(18,worse,47) output(18,worse,20) output(18,worse,11) output(18,worse,12) output(20,worse,11) output(33,worse,12) output(58,worse,47) output(58,worse,11) output(58,eq,20) output(58,eq,12) output(20,eq,12)
Optimization: 19 11
Answer: 13
preference(1,(1,1),1,for(atom(hasPrice(0))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,3),1,for(atom(hasOftenSold(2))),2) preference(1,(1,4),1,for(atom(hasPrice(1))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,7),1,for(atom(hasOiliness(3))),8) preference(1,(1,8),1,for(atom(hasOiliness(0))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasStyle(0))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,33) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,20) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,33) output(20,better,4) output(33,better,4) output(47,better,20) output(47,better,11) output(47,better,3) output(47,better,33) output(47,better,12) output(47,better,4) output(58,better,18) output(58,better,20) output(58,better,11) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(8,worse,58) output(8,worse,18) output(8,worse,47) output(8,worse,11) output(8,worse,3) output(8,worse,12) output(11,worse,12) output(18,worse,47) output(18,worse,12) output(20,worse,11) output(20,worse,3) output(20,worse,12) output(33,worse,12) output(58,worse,47) output(8,eq,20) output(58,eq,12) output(18,eq,11)
Optimization: 18 12
Answer: 14
preference(1,(1,1),1,for(atom(hasPrice(0))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,3),1,for(atom(hasOftenSold(2))),2) preference(1,(1,4),1,for(atom(hasPrice(1))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,7),1,for(atom(hasOiliness(3))),8) preference(1,(1,8),1,for(atom(hasOiliness(0))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasStyle(0))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,20) output(8,better,33) output(8,better,4) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,20) output(18,better,11) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,33) output(20,better,4) output(33,better,4) output(47,better,20) output(47,better,11) output(47,better,3) output(47,better,33) output(47,better,12) output(47,better,4) output(58,better,18) output(58,better,20) output(58,better,11) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(8,worse,58) output(8,worse,18) output(8,worse,47) output(8,worse,11) output(8,worse,3) output(8,worse,12) output(11,worse,12) output(18,worse,47) output(18,worse,12) output(20,worse,11) output(20,worse,3) output(20,worse,12) output(33,worse,12) output(58,worse,47) output(58,eq,12) output(11,eq,3)
Optimization: 17 12
Answer: 15
preference(1,(1,12),1,for(neg(atom(hasStyle(1)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,3),1,for(atom(hasOftenSold(2))),2) preference(1,(1,4),1,for(atom(hasPrice(1))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,7),1,for(atom(hasOiliness(3))),8) preference(1,(1,8),1,for(atom(hasOiliness(0))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasStyle(0))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,20) output(8,better,11) output(8,better,33) output(8,better,4) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,20) output(18,better,11) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,33) output(20,better,4) output(33,better,4) output(47,better,20) output(47,better,11) output(47,better,3) output(47,better,33) output(47,better,12) output(47,better,4) output(58,better,18) output(58,better,20) output(58,better,11) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(8,worse,58) output(8,worse,18) output(8,worse,47) output(8,worse,3) output(8,worse,12) output(11,worse,3) output(11,worse,12) output(18,worse,47) output(18,worse,12) output(20,worse,11) output(20,worse,3) output(20,worse,12) output(33,worse,12) output(58,worse,47) output(58,eq,12)
Optimization: 16 12
Answer: 16
preference(1,(1,12),1,for(neg(atom(hasStyle(1)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,3),1,for(atom(hasOftenSold(2))),2) preference(1,(1,4),1,for(atom(hasPrice(1))),3) preference(1,(1,5),1,for(atom(hasPrice(2))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,8),1,for(atom(hasOiliness(0))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,13),1,for(atom(hasOftenSold(1))),4) preference(1,(1,14),1,for(atom(hasStyle(0))),10) preference(1,less(weight)) output(3,better,33) output(3,better,4) output(8,better,20) output(8,better,11) output(8,better,33) output(8,better,4) output(11,better,33) output(11,better,4) output(12,better,4) output(18,better,20) output(18,better,11) output(18,better,3) output(18,better,33) output(18,better,4) output(20,better,11) output(20,better,33) output(20,better,4) output(33,better,4) output(47,better,20) output(47,better,11) output(47,better,3) output(47,better,33) output(47,better,12) output(47,better,4) output(58,better,18) output(58,better,20) output(58,better,11) output(58,better,3) output(58,better,33) output(58,better,4) output(3,worse,12) output(8,worse,58) output(8,worse,18) output(8,worse,47) output(8,worse,3) output(8,worse,12) output(11,worse,3) output(11,worse,12) output(18,worse,47) output(18,worse,12) output(20,worse,3) output(20,worse,12) output(33,worse,12) output(58,worse,47) output(58,eq,12)
Optimization: 15 13
Answer: 17
preference(1,(1,1),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,2),1,for(atom(hasOftenSold(3))),2) preference(1,(1,3),1,for(atom(hasPrice(0))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,6),1,for(atom(hasPrice(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,9),1,for(atom(hasOftenSold(0))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,12),1,for(atom(hasOiliness(1))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,14),1,for(atom(hasOftenSold(2))),1) preference(1,less(weight)) output(3,better,33) output(3,better,12) output(3,better,4) output(8,better,58) output(8,better,18) output(8,better,47) output(8,better,20) output(8,better,11) output(8,better,3) output(8,better,33) output(8,better,12) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,12) output(11,better,4) output(12,better,4) output(18,better,47) output(18,better,20) output(18,better,11) output(18,better,3) output(18,better,33) output(18,better,12) output(18,better,4) output(20,better,11) output(20,better,3) output(20,better,33) output(20,better,12) output(20,better,4) output(33,better,12) output(33,better,4) output(47,better,20) output(47,better,11) output(47,better,3) output(47,better,33) output(47,better,12) output(47,better,4) output(58,better,18) output(58,better,47) output(58,better,20) output(58,better,11) output(58,better,3) output(58,better,33) output(58,better,12) output(58,better,4)
Optimization: 0 13
Progression : 0 [ 1;13] (Error: 12)
Answer: 18
preference(1,(1,14),1,for(neg(atom(hasOftenSold(3)))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(8))),9) preference(1,(1,4),1,for(atom(hasPrice(3))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,8),1,for(atom(hasPrice(2))),4) preference(1,(1,9),1,for(atom(hasOftenSold(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(9))),10) preference(1,(1,11),1,for(atom(hasOftenSold(2))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),3) preference(1,less(weight)) output(3,better,33) output(3,better,12) output(3,better,4) output(8,better,58) output(8,better,18) output(8,better,47) output(8,better,20) output(8,better,11) output(8,better,3) output(8,better,33) output(8,better,12) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,12) output(11,better,4) output(12,better,4) output(18,better,47) output(18,better,20) output(18,better,11) output(18,better,3) output(18,better,33) output(18,better,12) output(18,better,4) output(20,better,11) output(20,better,3) output(20,better,33) output(20,better,12) output(20,better,4) output(33,better,12) output(33,better,4) output(47,better,20) output(47,better,11) output(47,better,3) output(47,better,33) output(47,better,12) output(47,better,4) output(58,better,18) output(58,better,47) output(58,better,20) output(58,better,11) output(58,better,3) output(58,better,33) output(58,better,12) output(58,better,4)
Optimization: 0 12
Answer: 19
preference(1,(1,14),1,for(neg(atom(hasOftenSold(3)))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(8))),9) preference(1,(1,4),1,for(atom(hasPrice(3))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,8),1,for(atom(hasPrice(2))),4) preference(1,(1,9),1,for(atom(hasOftenSold(1))),2) preference(1,(1,11),1,for(atom(hasOftenSold(2))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),3) preference(1,less(weight)) output(3,better,33) output(3,better,12) output(3,better,4) output(8,better,58) output(8,better,18) output(8,better,47) output(8,better,20) output(8,better,11) output(8,better,3) output(8,better,33) output(8,better,12) output(8,better,4) output(11,better,3) output(11,better,33) output(11,better,12) output(11,better,4) output(12,better,4) output(18,better,47) output(18,better,20) output(18,better,11) output(18,better,3) output(18,better,33) output(18,better,12) output(18,better,4) output(20,better,11) output(20,better,3) output(20,better,33) output(20,better,12) output(20,better,4) output(33,better,12) output(33,better,4) output(47,better,20) output(47,better,11) output(47,better,3) output(47,better,33) output(47,better,12) output(47,better,4) output(58,better,18) output(58,better,47) output(58,better,20) output(58,better,11) output(58,better,3) output(58,better,33) output(58,better,12) output(58,better,4)
Optimization: 0 11
Progression : 0 [ 2;11] (Error: 4.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.202 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 19+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 298.381s (Solving: 283.54s 1st Model: 0.11s Unsat: 0.00s)
CPU Time     : 1147.933s
Threads      : 4        (Winner: 4)

Choices      : 3057047  (Domain: 909)
Conflicts    : 656787   (Analyzed: 656785)
Restarts     : 645      (Average: 1018.27 Last: 70176)
Model-Level  : 1369.4  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 658600   (Deleted: 543599)
  Binary     : 304      (Ratio:   0.05%)
  Ternary    : 58       (Ratio:   0.01%)
  Conflict   : 656785   (Average Length: 1718.5 Ratio:  99.72%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 1815     (Average Length:  229.7 Ratio:   0.28%) 
  Distributed: 605      (Ratio:   0.09% Average LBD: 3.29) 
  Integrated : 1815     (Ratio: 300.00% Unit: 2 Average Jumps: 67.00)
Backjumps    : 656785   (Average:  2.99 Max: 2594 Sum: 1965777)
  Executed   : 656784   (Average:  2.99 Max: 2594 Sum: 1965776 Ratio: 100.00%)
  Bounded    : 1        (Average:  1.00 Max:   1 Sum:      1 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasPrice(1)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(0)) ; 
  5 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  10 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasOiliness(0)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasOiliness(3)) ; 
  5 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasOiliness(3)) ; 
  5 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasOiliness(3)) ; 
  5 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasOiliness(3)) ; 
  5 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  9 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(11)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasPrice(1)) ; 
  7 :: atom(hasPrice(2)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  9 :: not atom(hasStyle(1))  ; 
  4 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  6 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasPrice(3)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(9)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  3 :: not atom(hasOftenSold(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(4)) ; 
  9 :: atom(hasMinorGrp(8)) ; 
  2 :: atom(hasPrice(3)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  3 :: not atom(hasOftenSold(3))  
}.
