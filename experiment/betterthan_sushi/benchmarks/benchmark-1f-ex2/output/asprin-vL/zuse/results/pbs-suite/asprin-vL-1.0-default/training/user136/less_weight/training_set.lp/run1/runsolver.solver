asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(16,eq,19) output(16,eq,1) output(16,eq,20) output(16,eq,13) output(16,eq,36) output(16,eq,17) output(16,eq,24) output(16,eq,14) output(16,eq,51) output(19,eq,1) output(19,eq,20) output(19,eq,13) output(19,eq,36) output(19,eq,17) output(19,eq,24) output(19,eq,14) output(19,eq,51) output(1,eq,20) output(1,eq,13) output(1,eq,36) output(1,eq,17) output(1,eq,24) output(1,eq,14) output(1,eq,51) output(20,eq,13) output(20,eq,36) output(20,eq,17) output(20,eq,24) output(20,eq,14) output(20,eq,51) output(13,eq,36) output(13,eq,17) output(13,eq,24) output(13,eq,14) output(13,eq,51) output(36,eq,17) output(36,eq,24) output(36,eq,14) output(36,eq,51) output(17,eq,24) output(17,eq,14) output(17,eq,51) output(24,eq,14) output(24,eq,51) output(14,eq,51)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(1,better,20) output(1,better,36) output(13,better,36) output(16,better,20) output(16,better,36) output(19,better,20) output(19,better,36) output(20,worse,13) output(20,worse,17) output(20,worse,24) output(20,worse,14) output(20,worse,51) output(36,worse,17) output(36,worse,24) output(36,worse,14) output(36,worse,51) output(16,eq,19) output(16,eq,1) output(16,eq,13) output(16,eq,17) output(16,eq,24) output(16,eq,14) output(16,eq,51) output(19,eq,1) output(19,eq,13) output(19,eq,17) output(19,eq,24) output(19,eq,14) output(19,eq,51) output(1,eq,13) output(1,eq,17) output(1,eq,24) output(1,eq,14) output(1,eq,51) output(20,eq,36) output(13,eq,17) output(13,eq,24) output(13,eq,14) output(13,eq,51) output(17,eq,24) output(17,eq,14) output(17,eq,51) output(24,eq,14) output(24,eq,51) output(14,eq,51)
Optimization: 38 1
Answer: 3
preference(1,(1,13),1,for(atom(hasOftenSold(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(1,better,20) output(1,better,36) output(1,better,51) output(13,better,36) output(13,better,51) output(14,better,51) output(16,better,20) output(16,better,36) output(16,better,51) output(17,better,51) output(19,better,20) output(19,better,36) output(19,better,51) output(24,better,51) output(20,worse,13) output(20,worse,17) output(20,worse,24) output(20,worse,14) output(36,worse,17) output(36,worse,24) output(36,worse,14) output(16,eq,19) output(16,eq,1) output(16,eq,13) output(16,eq,17) output(16,eq,24) output(16,eq,14) output(19,eq,1) output(19,eq,13) output(19,eq,17) output(19,eq,24) output(19,eq,14) output(1,eq,13) output(1,eq,17) output(1,eq,24) output(1,eq,14) output(20,eq,36) output(20,eq,51) output(13,eq,17) output(13,eq,24) output(13,eq,14) output(36,eq,51) output(17,eq,24) output(17,eq,14) output(24,eq,14)
Optimization: 31 2
Answer: 4
preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(1,better,20) output(1,better,36) output(1,better,17) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,51) output(14,better,51) output(16,better,20) output(16,better,36) output(16,better,17) output(16,better,51) output(19,better,20) output(19,better,36) output(19,better,17) output(19,better,51) output(24,better,51) output(17,worse,24) output(17,worse,14) output(20,worse,13) output(20,worse,24) output(20,worse,14) output(36,worse,24) output(36,worse,14) output(16,eq,19) output(16,eq,1) output(16,eq,13) output(16,eq,24) output(16,eq,14) output(19,eq,1) output(19,eq,13) output(19,eq,24) output(19,eq,14) output(1,eq,13) output(1,eq,24) output(1,eq,14) output(20,eq,36) output(20,eq,17) output(20,eq,51) output(13,eq,24) output(13,eq,14) output(36,eq,17) output(36,eq,51) output(17,eq,51) output(24,eq,14)
Optimization: 28 3
Answer: 5
preference(1,(1,1),1,for(atom(hasPrice(0))),10) preference(1,(1,9),1,for(atom(hasOftenSold(0))),10) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(1,better,20) output(1,better,36) output(1,better,24) output(1,better,51) output(13,better,36) output(13,better,24) output(13,better,51) output(14,better,51) output(16,better,20) output(16,better,36) output(16,better,24) output(16,better,51) output(17,better,24) output(17,better,51) output(19,better,20) output(19,better,36) output(19,better,24) output(19,better,51) output(20,worse,13) output(20,worse,17) output(20,worse,14) output(24,worse,14) output(36,worse,17) output(36,worse,14) output(16,eq,19) output(16,eq,1) output(16,eq,13) output(16,eq,17) output(16,eq,14) output(19,eq,1) output(19,eq,13) output(19,eq,17) output(19,eq,14) output(1,eq,13) output(1,eq,17) output(1,eq,14) output(20,eq,36) output(20,eq,24) output(20,eq,51) output(13,eq,17) output(13,eq,14) output(36,eq,24) output(36,eq,51) output(17,eq,14) output(24,eq,51)
Optimization: 27 4
Answer: 6
preference(1,(1,3),1,for(atom(hasOftenSold(0))),10) preference(1,(1,9),1,for(atom(hasPrice(0))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(1,better,20) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,51) output(14,better,51) output(16,better,20) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,51) output(19,better,20) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,51) output(17,worse,14) output(20,worse,13) output(20,worse,14) output(24,worse,14) output(36,worse,14) output(16,eq,19) output(16,eq,1) output(16,eq,13) output(16,eq,14) output(19,eq,1) output(19,eq,13) output(19,eq,14) output(1,eq,13) output(1,eq,14) output(20,eq,36) output(20,eq,17) output(20,eq,24) output(20,eq,51) output(13,eq,14) output(36,eq,17) output(36,eq,24) output(36,eq,51) output(17,eq,24) output(17,eq,51) output(24,eq,51)
Optimization: 25 5
Answer: 7
preference(1,(1,1),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,2),1,for(atom(hasPrice(0))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,7),1,for(atom(hasOiliness(1))),10) preference(1,(1,8),1,for(atom(hasOftenSold(0))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,14),1,for(atom(hasOftenSold(3))),10) preference(1,less(weight)) output(1,better,13) output(1,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,13) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,51) output(19,better,1) output(19,better,13) output(19,better,17) output(19,better,51) output(20,better,13) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51) output(1,worse,20) output(1,worse,36) output(1,worse,17) output(1,worse,24) output(1,worse,14) output(13,worse,36) output(13,worse,17) output(13,worse,24) output(13,worse,14) output(13,worse,51) output(17,worse,24) output(17,worse,14) output(19,worse,20) output(19,worse,36) output(16,eq,20) output(16,eq,36) output(19,eq,24) output(19,eq,14) output(20,eq,36) output(24,eq,14)
Optimization: 20 9
Answer: 8
preference(1,(1,1),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,3),1,for(atom(hasPrice(0))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,7),1,for(atom(hasOiliness(1))),10) preference(1,(1,8),1,for(atom(hasOftenSold(0))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,14),1,for(atom(hasOftenSold(3))),10) preference(1,less(weight)) output(1,better,13) output(1,better,51) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,13) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,51) output(19,better,1) output(19,better,13) output(19,better,17) output(19,better,51) output(20,better,13) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51) output(1,worse,20) output(1,worse,36) output(1,worse,17) output(1,worse,24) output(1,worse,14) output(13,worse,36) output(13,worse,17) output(13,worse,24) output(13,worse,14) output(17,worse,24) output(17,worse,14) output(19,worse,20) output(19,worse,36) output(16,eq,20) output(16,eq,36) output(19,eq,24) output(19,eq,14) output(20,eq,36) output(24,eq,14)
Optimization: 19 9
Answer: 9
preference(1,(1,1),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,2),1,for(atom(hasPrice(3))),1) preference(1,(1,3),1,for(atom(hasPrice(0))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,7),1,for(atom(hasOiliness(1))),10) preference(1,(1,8),1,for(atom(hasOftenSold(0))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,14),1,for(atom(hasOftenSold(3))),10) preference(1,less(weight)) output(1,better,13) output(1,better,51) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,51) output(19,better,1) output(19,better,13) output(19,better,17) output(19,better,51) output(20,better,13) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51) output(1,worse,20) output(1,worse,36) output(1,worse,17) output(1,worse,24) output(1,worse,14) output(13,worse,36) output(13,worse,17) output(13,worse,24) output(13,worse,14) output(17,worse,24) output(17,worse,14) output(19,worse,20) output(19,worse,36) output(19,worse,24) output(20,worse,36) output(16,eq,36) output(19,eq,14)
Optimization: 17 10
Answer: 10
preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,9),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,7),1,for(atom(hasOiliness(1))),10) preference(1,(1,8),1,for(atom(hasOftenSold(1))),1) preference(1,(1,10),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,14),1,for(atom(hasPrice(3))),3) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,13) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,24) output(36,better,14) output(36,better,51) output(1,worse,17) output(13,worse,36) output(13,worse,17) output(13,worse,24) output(16,worse,17) output(19,worse,1) output(19,worse,17) output(20,worse,17) output(36,worse,17) output(19,eq,20) output(19,eq,36) output(20,eq,36)
Optimization: 12 13
Answer: 11
preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,3),1,for(atom(hasPrice(0))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,7),1,for(atom(hasOiliness(1))),7) preference(1,(1,8),1,for(atom(hasOftenSold(1))),1) preference(1,(1,10),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,13),1,for(atom(hasOftenSold(0))),6) preference(1,(1,14),1,for(atom(hasPrice(3))),3) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,13) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,24) output(36,better,14) output(36,better,51) output(1,worse,17) output(13,worse,36) output(13,worse,17) output(16,worse,17) output(19,worse,1) output(19,worse,17) output(20,worse,17) output(36,worse,17) output(19,eq,20) output(19,eq,36) output(20,eq,36)
Optimization: 11 14
Answer: 12
preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,3),1,for(atom(hasPrice(0))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,7),1,for(atom(hasOiliness(1))),7) preference(1,(1,8),1,for(atom(hasOftenSold(1))),1) preference(1,(1,10),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,14),1,for(atom(hasPrice(3))),3) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,13) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,24) output(36,better,14) output(36,better,51) output(13,worse,36) output(13,worse,17) output(19,worse,1) output(19,worse,17) output(20,worse,17) output(36,worse,17) output(19,eq,20) output(19,eq,36) output(1,eq,17) output(20,eq,36)
Optimization: 10 14
Answer: 13
preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),1) preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),8) preference(1,(1,10),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,13),1,for(neg(atom(hasOftenSold(3)))),1) preference(1,(1,1),1,for(atom(hasOftenSold(2))),7) preference(1,(1,2),1,for(atom(hasOftenSold(0))),7) preference(1,(1,3),1,for(atom(hasPrice(3))),3) preference(1,(1,6),1,for(atom(hasOftenSold(3))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,9),1,for(atom(hasOiliness(1))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,14),1,for(atom(hasOftenSold(1))),6) preference(1,less(weight)) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,1) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51) output(1,worse,20) output(1,worse,13) output(1,worse,36) output(16,worse,19) output(24,worse,14) output(16,eq,20) output(16,eq,13) output(20,eq,13) output(17,eq,14)
Optimization: 9 14
Answer: 14
preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),1) preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),8) preference(1,(1,10),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,13),1,for(neg(atom(hasOftenSold(3)))),1) preference(1,(1,1),1,for(atom(hasOftenSold(2))),7) preference(1,(1,2),1,for(atom(hasOftenSold(0))),10) preference(1,(1,3),1,for(atom(hasPrice(3))),3) preference(1,(1,6),1,for(atom(hasOftenSold(3))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,14),1,for(atom(hasOftenSold(1))),6) preference(1,less(weight)) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,1) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51) output(1,worse,20) output(1,worse,36) output(13,worse,36) output(16,worse,19) output(24,worse,14) output(16,eq,20) output(1,eq,13) output(17,eq,14)
Optimization: 8 14
Answer: 15
preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),1) preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),8) preference(1,(1,10),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,13),1,for(neg(atom(hasOftenSold(3)))),1) preference(1,(1,1),1,for(atom(hasOftenSold(2))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,3),1,for(atom(hasPrice(3))),3) preference(1,(1,6),1,for(atom(hasOftenSold(3))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,9),1,for(atom(hasPrice(0))),9) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,14),1,for(atom(hasOftenSold(1))),9) preference(1,less(weight)) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,1) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,51) output(36,better,24) output(36,better,51) output(1,worse,20) output(16,worse,19) output(24,worse,14) output(36,worse,17) output(16,eq,20) output(1,eq,13) output(36,eq,14)
Optimization: 7 14
Answer: 16
preference(1,(1,1),1,for(neg(atom(hasOftenSold(2)))),1) preference(1,(1,3),1,for(neg(atom(hasOiliness(0)))),2) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),1) preference(1,(1,2),1,for(atom(hasPrice(3))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,8),1,for(atom(hasOftenSold(3))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,10),1,for(atom(hasPrice(0))),5) preference(1,(1,11),1,for(atom(hasOftenSold(0))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),8) preference(1,(1,14),1,for(atom(hasOftenSold(1))),8) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,36) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,51) output(20,worse,13) output(20,worse,17) output(20,worse,24) output(36,worse,17) output(36,worse,24) output(36,worse,14)
Optimization: 6 13
Answer: 17
preference(1,(1,3),1,for(neg(atom(hasOiliness(0)))),2) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),1) preference(1,(1,12),1,for(neg(atom(hasPrice(2)))),9) preference(1,(1,1),1,for(atom(hasPrice(1))),9) preference(1,(1,2),1,for(atom(hasPrice(3))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,5),1,for(atom(hasPrice(2))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,9),1,for(atom(hasOiliness(1))),6) preference(1,(1,10),1,for(atom(hasPrice(0))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(4))),8) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,14),1,for(atom(hasOftenSold(3))),2) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51) output(20,worse,13) output(20,worse,36) output(20,worse,17) output(20,worse,24) output(14,eq,51)
Optimization: 5 13
Answer: 18
preference(1,(1,1),1,for(neg(atom(hasOftenSold(2)))),2) preference(1,(1,3),1,for(neg(atom(hasMinorGrp(4)))),5) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),2) preference(1,(1,11),1,for(neg(atom(hasPrice(2)))),9) preference(1,(1,12),1,for(neg(atom(hasPrice(1)))),1) preference(1,(1,2),1,for(atom(hasPrice(3))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,7),1,for(atom(hasOftenSold(1))),9) preference(1,(1,8),1,for(atom(hasPrice(2))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,13),1,for(atom(hasPrice(0))),6) preference(1,(1,14),1,for(atom(hasOiliness(1))),2) preference(1,less(weight)) output(1,better,20) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,36) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,24) output(36,better,14) output(36,better,51) output(20,worse,13) output(36,worse,17) output(1,eq,13) output(20,eq,17)
Optimization: 4 14
Answer: 19
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(4)))),5) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(1)))),2) preference(1,(1,12),1,for(neg(atom(hasPrice(2)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,2),1,for(atom(hasPrice(3))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,7),1,for(atom(hasOftenSold(1))),9) preference(1,(1,8),1,for(atom(hasPrice(2))),3) preference(1,(1,9),1,for(atom(hasOftenSold(0))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,11),1,for(atom(hasOiliness(2))),1) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,14),1,for(atom(hasOiliness(1))),2) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,24) output(36,better,14) output(36,better,51) output(13,worse,17) output(36,worse,17) output(20,eq,17)
Optimization: 3 14
Answer: 20
preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,2),1,for(atom(hasPrice(3))),5) preference(1,(1,3),1,for(atom(hasPrice(0))),8) preference(1,(1,4),1,for(atom(hasPrice(1))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,7),1,for(atom(hasOftenSold(1))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(9))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,10),1,for(atom(hasOftenSold(0))),5) preference(1,(1,11),1,for(atom(hasOiliness(2))),1) preference(1,(1,12),1,for(atom(hasOiliness(3))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,14),1,for(atom(hasPrice(2))),3) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51) output(24,worse,14) output(19,eq,1)
Optimization: 2 14
Answer: 21
preference(1,(1,1),1,for(neg(atom(hasPrice(2)))),5) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,2),1,for(atom(hasOftenSold(0))),8) preference(1,(1,3),1,for(atom(hasPrice(2))),3) preference(1,(1,4),1,for(atom(hasPrice(1))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(8))),7) preference(1,(1,7),1,for(atom(hasOftenSold(1))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(9))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,10),1,for(atom(hasOiliness(1))),4) preference(1,(1,11),1,for(atom(hasOiliness(2))),1) preference(1,(1,12),1,for(atom(hasOiliness(3))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),3) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51) output(24,worse,14)
Optimization: 1 14
Answer: 22
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(3)))),9) preference(1,(1,7),1,for(neg(atom(hasOftenSold(2)))),7) preference(1,(1,8),1,for(neg(atom(hasPrice(3)))),1) preference(1,(1,10),1,for(neg(atom(hasOiliness(0)))),8) preference(1,(1,13),1,for(neg(atom(hasMinorGrp(2)))),7) preference(1,(1,1),1,for(atom(hasPrice(3))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,4),1,for(atom(hasPrice(0))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(3))),6) preference(1,(1,6),1,for(atom(hasPrice(1))),5) preference(1,(1,9),1,for(atom(hasOftenSold(3))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,12),1,for(atom(hasOftenSold(1))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(6))),2) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 23
preference(1,(1,2),1,for(neg(atom(hasOftenSold(2)))),6) preference(1,(1,4),1,for(neg(atom(hasPrice(2)))),3) preference(1,(1,5),1,for(neg(atom(hasMinorGrp(2)))),9) preference(1,(1,8),1,for(neg(atom(hasOiliness(0)))),8) preference(1,(1,1),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,3),1,for(atom(hasPrice(0))),7) preference(1,(1,6),1,for(atom(hasPrice(3))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,9),1,for(atom(hasOiliness(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,13),1,for(atom(hasOftenSold(1))),3) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51)
Optimization: 0 13
Answer: 24
preference(1,(1,7),1,for(neg(atom(hasMinorGrp(2)))),3) preference(1,(1,8),1,for(neg(atom(hasOftenSold(2)))),5) preference(1,(1,12),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,13),1,for(neg(atom(hasPrice(2)))),9) preference(1,(1,1),1,for(atom(hasOiliness(1))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(6))),10) preference(1,(1,3),1,for(atom(hasPrice(3))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,6),1,for(atom(hasOftenSold(1))),3) preference(1,(1,9),1,for(atom(hasPrice(2))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,14),1,for(atom(hasPrice(1))),1) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51)
Optimization: 0 12
Answer: 25
preference(1,(1,1),1,for(atom(hasOftenSold(1))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,9),1,for(atom(hasPrice(1))),8) preference(1,(1,10),1,for(atom(hasPrice(3))),6) preference(1,(1,12),1,for(atom(hasPrice(0))),9) preference(1,(1,13),1,for(atom(hasOiliness(2))),7) preference(1,(1,14),1,for(atom(hasOftenSold(3))),1) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51)
Optimization: 0 11
Answer: 26
preference(1,(1,3),1,for(neg(atom(hasMinorGrp(2)))),3) preference(1,(1,6),1,for(neg(atom(hasOiliness(0)))),7) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),6) preference(1,(1,5),1,for(atom(hasOftenSold(1))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,8),1,for(atom(hasOftenSold(3))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,13),1,for(atom(hasPrice(3))),6) preference(1,(1,14),1,for(atom(hasOftenSold(0))),8) preference(1,less(weight)) output(1,better,20) output(1,better,13) output(1,better,36) output(1,better,17) output(1,better,24) output(1,better,14) output(1,better,51) output(13,better,36) output(13,better,17) output(13,better,24) output(13,better,14) output(13,better,51) output(14,better,51) output(16,better,19) output(16,better,1) output(16,better,20) output(16,better,13) output(16,better,36) output(16,better,17) output(16,better,24) output(16,better,14) output(16,better,51) output(17,better,24) output(17,better,14) output(17,better,51) output(19,better,1) output(19,better,20) output(19,better,13) output(19,better,36) output(19,better,17) output(19,better,24) output(19,better,14) output(19,better,51) output(20,better,13) output(20,better,36) output(20,better,17) output(20,better,24) output(20,better,14) output(20,better,51) output(24,better,14) output(24,better,51) output(36,better,17) output(36,better,24) output(36,better,14) output(36,better,51)
Optimization: 0 10
Progression : 0 [ 2;10] (Error: 4)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.249 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 26+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 597.151s (Solving: 584.75s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 2350.583s
Threads      : 4        (Winner: 4)

Choices      : 12069849 (Domain: 2691)
Conflicts    : 2285073  (Analyzed: 2285071)
Restarts     : 2326     (Average: 982.40 Last: 198513)
Model-Level  : 1368.8  
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 2292124  (Deleted: 2065832)
  Binary     : 624      (Ratio:   0.03%)
  Ternary    : 337      (Ratio:   0.01%)
  Conflict   : 2285071  (Average Length: 1658.7 Ratio:  99.69%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7053     (Average Length:  242.4 Ratio:   0.31%) 
  Distributed: 2351     (Ratio:   0.10% Average LBD: 3.45) 
  Integrated : 7053     (Ratio: 300.00% Unit: 5 Average Jumps: 167.20)
Backjumps    : 2285071  (Average:  3.53 Max: 3783 Sum: 8056831)
  Executed   : 2285070  (Average:  3.53 Max: 3783 Sum: 8056821 Ratio: 100.00%)
  Bounded    : 1        (Average: 10.00 Max:  10 Sum:     10 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasPrice(3)) ; 
  10 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  10 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  7 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  9 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  7 :: atom(hasMinorGrp(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  7 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  9 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(3)) ; 
  1 :: not atom(hasOftenSold(2))  ; 
  8 :: not atom(hasPrice(3))  ; 
  10 :: atom(hasOftenSold(3)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: not atom(hasPrice(2))  ; 
  2 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  1 :: not atom(hasOftenSold(3))  ; 
  6 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(3)) ; 
  1 :: not atom(hasOftenSold(2))  ; 
  8 :: not atom(hasPrice(3))  ; 
  10 :: atom(hasOftenSold(3)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  2 :: not atom(hasPrice(2))  ; 
  2 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  1 :: not atom(hasOftenSold(3))  ; 
  6 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasPrice(3)) ; 
  1 :: not atom(hasOftenSold(2))  ; 
  8 :: not atom(hasPrice(3))  ; 
  10 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasPrice(0)) ; 
  2 :: not atom(hasPrice(2))  ; 
  2 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  1 :: not atom(hasOftenSold(3))  ; 
  9 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasOftenSold(2))  ; 
  5 :: atom(hasPrice(3)) ; 
  2 :: not atom(hasOiliness(0))  ; 
  7 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasMinorGrp(3)) ; 
  1 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasPrice(0)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  8 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasPrice(1)) ; 
  5 :: atom(hasPrice(3)) ; 
  2 :: not atom(hasOiliness(0))  ; 
  6 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasPrice(2)) ; 
  1 :: not atom(hasPrice(1))  ; 
  5 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPrice(0)) ; 
  8 :: atom(hasMinorGrp(4)) ; 
  9 :: not atom(hasPrice(2))  ; 
  8 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasOftenSold(2))  ; 
  5 :: atom(hasPrice(3)) ; 
  5 :: not atom(hasMinorGrp(4))  ; 
  8 :: atom(hasMinorGrp(4)) ; 
  2 :: not atom(hasMinorGrp(1))  ; 
  1 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasPrice(2)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(hasPrice(2))  ; 
  1 :: not atom(hasPrice(1))  ; 
  6 :: atom(hasPrice(0)) ; 
  2 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasPrice(3)) ; 
  5 :: not atom(hasMinorGrp(4))  ; 
  8 :: atom(hasMinorGrp(4)) ; 
  2 :: not atom(hasMinorGrp(1))  ; 
  1 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasPrice(2)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOiliness(2)) ; 
  9 :: not atom(hasPrice(2))  ; 
  4 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasPrice(3)) ; 
  8 :: atom(hasPrice(0)) ; 
  5 :: atom(hasPrice(1)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  7 :: not atom(hasStyle(1))  ; 
  9 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasOiliness(3)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasPrice(2))  ; 
  8 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(2)) ; 
  1 :: atom(hasPrice(1)) ; 
  7 :: atom(hasMinorGrp(8)) ; 
  7 :: not atom(hasStyle(1))  ; 
  9 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMinorGrp(9)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasOiliness(3)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  9 :: not atom(hasMinorGrp(3))  ; 
  10 :: atom(hasPrice(0)) ; 
  6 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasPrice(1)) ; 
  7 :: not atom(hasOftenSold(2))  ; 
  1 :: not atom(hasPrice(3))  ; 
  8 :: atom(hasOftenSold(3)) ; 
  8 :: not atom(hasOiliness(0))  ; 
  2 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  7 :: not atom(hasMinorGrp(2))  ; 
  2 :: atom(hasMinorGrp(6)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(6)) ; 
  6 :: not atom(hasOftenSold(2))  ; 
  7 :: atom(hasPrice(0)) ; 
  3 :: not atom(hasPrice(2))  ; 
  9 :: not atom(hasMinorGrp(2))  ; 
  4 :: atom(hasPrice(3)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  8 :: not atom(hasOiliness(0))  ; 
  1 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasPrice(3)) ; 
  7 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  3 :: not atom(hasMinorGrp(2))  ; 
  5 :: not atom(hasOftenSold(2))  ; 
  6 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  2 :: not atom(hasPrice(3))  ; 
  9 :: not atom(hasPrice(2))  ; 
  1 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasPrice(1)) ; 
  6 :: atom(hasPrice(3)) ; 
  9 :: atom(hasPrice(0)) ; 
  7 :: atom(hasOiliness(2)) ; 
  1 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: not atom(hasMinorGrp(2))  ; 
  6 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  7 :: not atom(hasOiliness(0))  ; 
  2 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasPrice(3)) ; 
  8 :: atom(hasOftenSold(0)) 
}.
