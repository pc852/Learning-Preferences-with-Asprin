asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(0,eq,19) output(0,eq,61) output(0,eq,26) output(0,eq,77) output(0,eq,16) output(0,eq,6) output(0,eq,33) output(0,eq,27) output(0,eq,68) output(19,eq,61) output(19,eq,26) output(19,eq,77) output(19,eq,16) output(19,eq,6) output(19,eq,33) output(19,eq,27) output(19,eq,68) output(61,eq,26) output(61,eq,77) output(61,eq,16) output(61,eq,6) output(61,eq,33) output(61,eq,27) output(61,eq,68) output(26,eq,77) output(26,eq,16) output(26,eq,6) output(26,eq,33) output(26,eq,27) output(26,eq,68) output(77,eq,16) output(77,eq,6) output(77,eq,33) output(77,eq,27) output(77,eq,68) output(16,eq,6) output(16,eq,33) output(16,eq,27) output(16,eq,68) output(6,eq,33) output(6,eq,27) output(6,eq,68) output(33,eq,27) output(33,eq,68) output(27,eq,68)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasPrice(1))),10) preference(1,less(weight)) output(61,better,26) output(19,better,26) output(26,worse,77) output(26,worse,16) output(26,worse,6) output(26,worse,33) output(26,worse,27) output(26,worse,68) output(0,worse,19) output(0,worse,61) output(0,worse,77) output(0,worse,16) output(0,worse,6) output(0,worse,33) output(0,worse,27) output(0,worse,68) output(0,eq,26) output(19,eq,61) output(19,eq,77) output(19,eq,16) output(19,eq,6) output(19,eq,33) output(19,eq,27) output(19,eq,68) output(61,eq,77) output(61,eq,16) output(61,eq,6) output(61,eq,33) output(61,eq,27) output(61,eq,68) output(77,eq,16) output(77,eq,6) output(77,eq,33) output(77,eq,27) output(77,eq,68) output(16,eq,6) output(16,eq,33) output(16,eq,27) output(16,eq,68) output(6,eq,33) output(6,eq,27) output(6,eq,68) output(33,eq,27) output(33,eq,68) output(27,eq,68)
Optimization: 43 1
Answer: 3
preference(1,(1,13),1,for(atom(hasPrice(0))),10) preference(1,(1,14),1,for(atom(hasPrice(1))),10) preference(1,less(weight)) output(61,better,26) output(61,better,77) output(19,better,26) output(19,better,77) output(26,worse,16) output(26,worse,6) output(26,worse,33) output(26,worse,27) output(26,worse,68) output(0,worse,19) output(0,worse,61) output(0,worse,16) output(0,worse,6) output(0,worse,33) output(0,worse,27) output(0,worse,68) output(77,worse,16) output(77,worse,6) output(77,worse,33) output(77,worse,27) output(77,worse,68) output(0,eq,26) output(0,eq,77) output(19,eq,61) output(19,eq,16) output(19,eq,6) output(19,eq,33) output(19,eq,27) output(19,eq,68) output(61,eq,16) output(61,eq,6) output(61,eq,33) output(61,eq,27) output(61,eq,68) output(26,eq,77) output(16,eq,6) output(16,eq,33) output(16,eq,27) output(16,eq,68) output(6,eq,33) output(6,eq,27) output(6,eq,68) output(33,eq,27) output(33,eq,68) output(27,eq,68)
Optimization: 41 2
Answer: 4
preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasPrice(1))),10) preference(1,less(weight)) output(61,better,26) output(61,better,27) output(6,better,27) output(16,better,27) output(19,better,26) output(19,better,27) output(33,better,27) output(77,better,27) output(26,worse,77) output(26,worse,16) output(26,worse,6) output(26,worse,33) output(26,worse,68) output(0,worse,19) output(0,worse,61) output(0,worse,77) output(0,worse,16) output(0,worse,6) output(0,worse,33) output(0,worse,68) output(27,worse,68) output(0,eq,26) output(0,eq,27) output(19,eq,61) output(19,eq,77) output(19,eq,16) output(19,eq,6) output(19,eq,33) output(19,eq,68) output(61,eq,77) output(61,eq,16) output(61,eq,6) output(61,eq,33) output(61,eq,68) output(26,eq,27) output(77,eq,16) output(77,eq,6) output(77,eq,33) output(77,eq,68) output(16,eq,6) output(16,eq,33) output(16,eq,68) output(6,eq,33) output(6,eq,68) output(33,eq,68)
Optimization: 37 2
Answer: 5
preference(1,(1,13),1,for(atom(hasPrice(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(26,better,77) output(26,better,27) output(61,better,77) output(61,better,27) output(0,better,77) output(0,better,27) output(6,better,27) output(16,better,27) output(19,better,77) output(19,better,27) output(33,better,27) output(27,worse,68) output(77,worse,16) output(77,worse,6) output(77,worse,33) output(77,worse,68) output(0,eq,19) output(0,eq,61) output(0,eq,26) output(0,eq,16) output(0,eq,6) output(0,eq,33) output(0,eq,68) output(19,eq,61) output(19,eq,26) output(19,eq,16) output(19,eq,6) output(19,eq,33) output(19,eq,68) output(61,eq,26) output(61,eq,16) output(61,eq,6) output(61,eq,33) output(61,eq,68) output(26,eq,16) output(26,eq,6) output(26,eq,33) output(26,eq,68) output(77,eq,27) output(16,eq,6) output(16,eq,33) output(16,eq,68) output(6,eq,33) output(6,eq,68) output(33,eq,68)
Optimization: 34 2
Answer: 6
preference(1,(1,3),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,13),1,for(atom(hasPrice(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(61,better,26) output(61,better,16) output(61,better,6) output(61,better,27) output(19,better,26) output(19,better,16) output(19,better,6) output(19,better,27) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,27) output(26,worse,77) output(26,worse,33) output(26,worse,68) output(0,worse,19) output(0,worse,61) output(0,worse,77) output(0,worse,33) output(0,worse,68) output(6,worse,33) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(27,worse,68) output(0,eq,26) output(0,eq,16) output(0,eq,6) output(0,eq,27) output(19,eq,61) output(19,eq,77) output(19,eq,33) output(19,eq,68) output(61,eq,77) output(61,eq,33) output(61,eq,68) output(26,eq,16) output(26,eq,6) output(26,eq,27) output(77,eq,33) output(77,eq,68) output(16,eq,6) output(16,eq,27) output(6,eq,27) output(33,eq,68)
Optimization: 33 3
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(0,better,61) output(0,better,26) output(0,better,16) output(0,better,6) output(0,better,27) output(19,better,61) output(19,better,26) output(19,better,16) output(19,better,6) output(19,better,27) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,27) output(26,worse,77) output(26,worse,33) output(26,worse,68) output(61,worse,77) output(61,worse,33) output(61,worse,68) output(6,worse,33) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(27,worse,68) output(0,eq,19) output(0,eq,77) output(0,eq,33) output(0,eq,68) output(19,eq,77) output(19,eq,33) output(19,eq,68) output(61,eq,26) output(61,eq,16) output(61,eq,6) output(61,eq,27) output(26,eq,16) output(26,eq,6) output(26,eq,27) output(77,eq,33) output(77,eq,68) output(16,eq,6) output(16,eq,27) output(6,eq,27) output(33,eq,68)
Optimization: 31 3
Answer: 8
preference(1,(1,14),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,4),1,for(atom(hasOiliness(1))),6) preference(1,(1,5),1,for(atom(hasOftenSold(1))),1) preference(1,(1,6),1,for(atom(hasOftenSold(3))),1) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasOiliness(0))),8) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(26,better,6) output(26,better,27) output(61,better,6) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,27) output(16,better,6) output(16,better,27) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,27) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,27) output(26,worse,77) output(26,worse,33) output(26,worse,68) output(61,worse,26) output(61,worse,77) output(61,worse,16) output(61,worse,33) output(61,worse,27) output(61,worse,68) output(0,worse,68) output(6,worse,33) output(6,worse,27) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(19,worse,33) output(19,worse,68) output(27,worse,68) output(33,worse,68) output(77,worse,33) output(77,worse,68) output(0,eq,33) output(26,eq,16)
Optimization: 23 9
Answer: 9
preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,4),1,for(atom(hasOiliness(1))),5) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),6) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,27) output(61,better,6) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,27) output(16,better,6) output(16,better,27) output(19,better,61) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,27) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,27) output(26,worse,33) output(26,worse,68) output(61,worse,26) output(61,worse,77) output(61,worse,16) output(61,worse,33) output(61,worse,68) output(6,worse,33) output(6,worse,27) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(19,worse,26) output(19,worse,33) output(19,worse,68) output(27,worse,68) output(77,worse,33) output(77,worse,68) output(0,eq,33) output(0,eq,68) output(61,eq,27) output(33,eq,68)
Optimization: 22 9
Answer: 10
preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),4) preference(1,(1,4),1,for(atom(hasOiliness(1))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),6) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,27) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,27) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,27) output(16,better,6) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,27) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,27) output(26,worse,33) output(26,worse,68) output(61,worse,26) output(61,worse,33) output(61,worse,68) output(6,worse,33) output(6,worse,27) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(19,worse,26) output(19,worse,33) output(19,worse,68) output(27,worse,68) output(77,worse,33) output(77,worse,68) output(0,eq,33) output(0,eq,68) output(19,eq,61) output(16,eq,27) output(33,eq,68)
Optimization: 21 10
Answer: 11
preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,5),1,for(atom(hasOiliness(1))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),6) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,27) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,27) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,27) output(16,better,6) output(16,better,27) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,27) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,27) output(26,worse,33) output(26,worse,68) output(61,worse,26) output(61,worse,33) output(61,worse,68) output(6,worse,33) output(6,worse,27) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(19,worse,26) output(19,worse,33) output(19,worse,68) output(27,worse,68) output(77,worse,33) output(77,worse,68) output(0,eq,33) output(0,eq,68) output(19,eq,61) output(33,eq,68)
Optimization: 20 11
Answer: 12
preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,5),1,for(atom(hasOiliness(1))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),6) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,27) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,27) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,27) output(16,better,6) output(16,better,27) output(19,better,61) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,27) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,27) output(26,worse,33) output(26,worse,68) output(61,worse,26) output(61,worse,33) output(61,worse,68) output(6,worse,33) output(6,worse,27) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(19,worse,33) output(19,worse,68) output(27,worse,68) output(77,worse,33) output(77,worse,68) output(0,eq,33) output(0,eq,68) output(19,eq,26) output(33,eq,68)
Optimization: 19 11
Answer: 13
preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,5),1,for(atom(hasOiliness(1))),6) preference(1,(1,6),1,for(atom(hasStyle(0))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,9),1,for(atom(hasPrice(0))),10) preference(1,(1,10),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,12),1,for(atom(hasOiliness(0))),3) preference(1,(1,13),1,for(atom(hasOftenSold(1))),5) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),6) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,27) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,27) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,27) output(6,better,27) output(16,better,6) output(16,better,27) output(19,better,61) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,27) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,27) output(26,worse,33) output(26,worse,68) output(61,worse,26) output(61,worse,33) output(61,worse,68) output(0,worse,68) output(6,worse,33) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(19,worse,33) output(19,worse,68) output(27,worse,68) output(33,worse,68) output(77,worse,33) output(77,worse,68) output(0,eq,33) output(19,eq,26)
Optimization: 18 14
Answer: 14
preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,7),1,for(atom(hasOiliness(1))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,9),1,for(atom(hasPrice(0))),10) preference(1,(1,10),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,12),1,for(atom(hasOiliness(0))),3) preference(1,(1,13),1,for(atom(hasOftenSold(1))),5) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),6) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,27) output(26,better,68) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,27) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,27) output(0,better,68) output(6,better,27) output(16,better,6) output(16,better,27) output(19,better,61) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,27) output(19,better,68) output(33,better,27) output(33,better,68) output(77,better,6) output(77,better,27) output(26,worse,33) output(61,worse,26) output(61,worse,33) output(6,worse,33) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(19,worse,33) output(27,worse,68) output(77,worse,16) output(77,worse,33) output(77,worse,68) output(0,eq,33) output(19,eq,26) output(61,eq,68)
Optimization: 15 14
Answer: 15
preference(1,(1,2),1,for(neg(atom(hasStyle(1)))),1) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,5),1,for(atom(hasOiliness(1))),6) preference(1,(1,6),1,for(atom(hasOftenSold(0))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,9),1,for(atom(hasPrice(0))),10) preference(1,(1,10),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,12),1,for(atom(hasOiliness(0))),3) preference(1,(1,13),1,for(atom(hasOftenSold(1))),5) preference(1,(1,14),1,for(atom(hasMinorGrp(0))),8) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,27) output(26,better,68) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,27) output(0,better,68) output(6,better,27) output(16,better,6) output(16,better,27) output(19,better,61) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,27) output(19,better,68) output(33,better,27) output(33,better,68) output(77,better,6) output(77,better,27) output(26,worse,33) output(61,worse,26) output(61,worse,33) output(6,worse,33) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(19,worse,33) output(27,worse,68) output(77,worse,16) output(77,worse,33) output(77,worse,68) output(0,eq,33) output(19,eq,26)
Optimization: 14 14
Answer: 16
preference(1,(1,5),1,for(neg(atom(hasOftenSold(2)))),6) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,11),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,2),1,for(atom(hasOftenSold(0))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasPrice(0))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,9),1,for(atom(hasOftenSold(2))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,12),1,for(atom(hasOftenSold(1))),5) preference(1,(1,13),1,for(atom(hasOiliness(1))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),7) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,27) output(16,better,27) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(33,better,27) output(6,worse,33) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(27,worse,68) output(33,worse,68) output(77,worse,16) output(77,worse,6) output(77,worse,33) output(77,worse,27) output(77,worse,68) output(26,eq,68) output(16,eq,6)
Optimization: 13 13
Answer: 17
preference(1,(1,5),1,for(neg(atom(hasOftenSold(2)))),6) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,11),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,2),1,for(atom(hasOftenSold(0))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasPrice(0))),8) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,9),1,for(atom(hasOftenSold(2))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,12),1,for(atom(hasOftenSold(1))),5) preference(1,(1,13),1,for(atom(hasOiliness(1))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),7) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,27) output(16,better,27) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(33,better,27) output(77,better,27) output(6,worse,33) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(27,worse,68) output(33,worse,68) output(77,worse,16) output(77,worse,6) output(77,worse,33) output(77,worse,68) output(26,eq,68) output(16,eq,6)
Optimization: 12 13
Answer: 18
preference(1,(1,5),1,for(neg(atom(hasOftenSold(2)))),6) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,11),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,2),1,for(atom(hasOftenSold(0))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,8),1,for(atom(hasPrice(0))),2) preference(1,(1,9),1,for(atom(hasOftenSold(2))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,12),1,for(atom(hasOftenSold(1))),5) preference(1,(1,13),1,for(atom(hasOiliness(1))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),7) preference(1,less(weight)) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,27) output(16,better,27) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(6,worse,33) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(27,worse,68) output(33,worse,68) output(26,eq,77) output(26,eq,68) output(77,eq,68) output(16,eq,6)
Optimization: 10 13
Answer: 19
preference(1,(1,5),1,for(neg(atom(hasOftenSold(2)))),6) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,11),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,2),1,for(atom(hasOftenSold(0))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,8),1,for(atom(hasPrice(0))),3) preference(1,(1,9),1,for(atom(hasOftenSold(2))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,12),1,for(atom(hasOftenSold(1))),5) preference(1,(1,13),1,for(atom(hasOiliness(1))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),7) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,27) output(16,better,27) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(6,worse,33) output(6,worse,68) output(16,worse,33) output(16,worse,68) output(27,worse,68) output(33,worse,68) output(77,worse,68) output(26,eq,68) output(16,eq,6)
Optimization: 9 13
Answer: 20
preference(1,(1,5),1,for(neg(atom(hasOftenSold(2)))),6) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,11),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,2),1,for(atom(hasOftenSold(0))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasPrice(0))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,9),1,for(atom(hasOftenSold(2))),9) preference(1,(1,12),1,for(atom(hasOftenSold(1))),5) preference(1,(1,13),1,for(atom(hasOiliness(1))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),7) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(26,better,68) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,27) output(16,better,27) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(6,worse,68) output(16,worse,6) output(16,worse,33) output(16,worse,68) output(27,worse,68) output(33,worse,68) output(77,eq,68) output(6,eq,33)
Optimization: 8 13
Answer: 21
preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,10),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,13),1,for(neg(atom(hasPrice(2)))),6) preference(1,(1,1),1,for(atom(hasPrice(3))),2) preference(1,(1,2),1,for(atom(hasPrice(1))),5) preference(1,(1,3),1,for(atom(hasPrice(2))),9) preference(1,(1,5),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasPrice(0))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,9),1,for(atom(hasStyle(0))),4) preference(1,(1,11),1,for(atom(hasOiliness(0))),4) preference(1,(1,12),1,for(atom(hasOftenSold(1))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),7) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(26,better,68) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,33) output(6,better,27) output(16,better,27) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(33,better,27) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(6,worse,68) output(16,worse,6) output(16,worse,68) output(27,worse,68) output(33,worse,68) output(77,eq,68) output(16,eq,33)
Optimization: 7 13
Answer: 22
preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),3) preference(1,(1,1),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,4),1,for(atom(hasOftenSold(2))),4) preference(1,(1,5),1,for(atom(hasOftenSold(0))),10) preference(1,(1,7),1,for(atom(hasOftenSold(3))),6) preference(1,(1,8),1,for(atom(hasOiliness(0))),4) preference(1,(1,9),1,for(atom(hasStyle(0))),5) preference(1,(1,11),1,for(atom(hasOftenSold(1))),5) preference(1,(1,12),1,for(atom(hasPrice(1))),1) preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,(1,14),1,for(atom(hasPrice(3))),9) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(26,better,68) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,33) output(6,better,27) output(6,better,68) output(16,better,6) output(16,better,33) output(16,better,27) output(16,better,68) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(27,better,68) output(33,better,27) output(33,better,68) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(77,better,68)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 23
preference(1,(1,4),1,for(neg(atom(hasPrice(2)))),3) preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,10),1,for(neg(atom(hasStyle(0)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,2),1,for(atom(hasPrice(2))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,6),1,for(atom(hasOiliness(3))),2) preference(1,(1,7),1,for(atom(hasOftenSold(0))),7) preference(1,(1,8),1,for(atom(hasPrice(3))),6) preference(1,(1,11),1,for(atom(hasOftenSold(3))),5) preference(1,(1,12),1,for(atom(hasOftenSold(1))),6) preference(1,(1,14),1,for(atom(hasOftenSold(2))),6) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(26,better,68) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,33) output(6,better,27) output(6,better,68) output(16,better,6) output(16,better,33) output(16,better,27) output(16,better,68) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(27,better,68) output(33,better,27) output(33,better,68) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(77,better,68)
Optimization: 0 13
Answer: 24
preference(1,(1,4),1,for(neg(atom(hasPrice(2)))),3) preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,10),1,for(neg(atom(hasStyle(0)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,2),1,for(atom(hasPrice(2))),7) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,7),1,for(atom(hasOftenSold(0))),7) preference(1,(1,8),1,for(atom(hasPrice(3))),6) preference(1,(1,11),1,for(atom(hasOftenSold(3))),5) preference(1,(1,12),1,for(atom(hasOftenSold(1))),6) preference(1,(1,14),1,for(atom(hasOftenSold(2))),6) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(26,better,68) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,33) output(6,better,27) output(6,better,68) output(16,better,6) output(16,better,33) output(16,better,27) output(16,better,68) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(27,better,68) output(33,better,27) output(33,better,68) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(77,better,68)
Optimization: 0 12
Answer: 25
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,14),1,for(neg(atom(hasMajorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasPrice(2))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,8),1,for(atom(hasOftenSold(1))),9) preference(1,(1,9),1,for(atom(hasPrice(3))),9) preference(1,(1,10),1,for(atom(hasPrice(1))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),2) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(26,better,68) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,33) output(6,better,27) output(6,better,68) output(16,better,6) output(16,better,33) output(16,better,27) output(16,better,68) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(27,better,68) output(33,better,27) output(33,better,68) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(77,better,68)
Optimization: 0 11
Answer: 26
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,5),1,for(neg(atom(hasPrice(3)))),2) preference(1,(1,1),1,for(atom(hasPrice(2))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,8),1,for(atom(hasOftenSold(1))),9) preference(1,(1,9),1,for(atom(hasPrice(3))),9) preference(1,(1,10),1,for(atom(hasPrice(1))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),2) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(26,better,68) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,33) output(6,better,27) output(6,better,68) output(16,better,6) output(16,better,33) output(16,better,27) output(16,better,68) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(27,better,68) output(33,better,27) output(33,better,68) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(77,better,68)
Optimization: 0 10
Answer: 27
preference(1,(1,4),1,for(neg(atom(hasMinorGrp(1)))),5) preference(1,(1,1),1,for(atom(hasPrice(1))),2) preference(1,(1,2),1,for(atom(hasOftenSold(1))),9) preference(1,(1,5),1,for(atom(hasMinorGrp(4))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),3) preference(1,(1,12),1,for(atom(hasPrice(2))),7) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,14),1,for(atom(hasPrice(3))),9) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(26,better,68) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,33) output(6,better,27) output(6,better,68) output(16,better,6) output(16,better,33) output(16,better,27) output(16,better,68) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(27,better,68) output(33,better,27) output(33,better,68) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(77,better,68)
Optimization: 0 9
Progression : 0 [2;9] (Error: 3.5)
Answer: 28
preference(1,(1,3),1,for(atom(hasPrice(3))),8) preference(1,(1,6),1,for(atom(hasOiliness(2))),4) preference(1,(1,7),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,8),1,for(atom(hasOftenSold(0))),6) preference(1,(1,10),1,for(atom(hasOftenSold(1))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,12),1,for(atom(hasPrice(2))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(26,better,77) output(26,better,16) output(26,better,6) output(26,better,33) output(26,better,27) output(26,better,68) output(61,better,26) output(61,better,77) output(61,better,16) output(61,better,6) output(61,better,33) output(61,better,27) output(61,better,68) output(0,better,19) output(0,better,61) output(0,better,26) output(0,better,77) output(0,better,16) output(0,better,6) output(0,better,33) output(0,better,27) output(0,better,68) output(6,better,33) output(6,better,27) output(6,better,68) output(16,better,6) output(16,better,33) output(16,better,27) output(16,better,68) output(19,better,61) output(19,better,26) output(19,better,77) output(19,better,16) output(19,better,6) output(19,better,33) output(19,better,27) output(19,better,68) output(27,better,68) output(33,better,27) output(33,better,68) output(77,better,16) output(77,better,6) output(77,better,33) output(77,better,27) output(77,better,68)
Optimization: 0 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.173 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 28+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 597.204s (Solving: 585.20s 1st Model: 0.08s Unsat: 0.00s)
CPU Time     : 2352.154s
Threads      : 4        (Winner: 4)

Choices      : 12203331 (Domain: 2079)
Conflicts    : 2153709  (Analyzed: 2153707)
Restarts     : 2417     (Average: 891.07 Last: 52658)
Model-Level  : 1886.4  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 2161594  (Deleted: 1969561)
  Binary     : 768      (Ratio:   0.04%)
  Ternary    : 225      (Ratio:   0.01%)
  Conflict   : 2153707  (Average Length: 1689.3 Ratio:  99.64%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 7887     (Average Length:  256.3 Ratio:   0.36%) 
  Distributed: 2629     (Ratio:   0.12% Average LBD: 3.44) 
  Integrated : 7887     (Ratio: 300.00% Unit: 5 Average Jumps: 103.60)
Backjumps    : 2153707  (Average:  3.81 Max: 3964 Sum: 8196875)
  Executed   : 2153706  (Average:  3.81 Max: 3964 Sum: 8196834 Ratio: 100.00%)
  Bounded    : 1        (Average: 41.00 Max:  41 Sum:     41 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasPrice(1)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasOiliness(0)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: not atom(hasStyle(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasOiliness(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  6 :: not atom(hasOiliness(2))  ; 
  1 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasOiliness(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  6 :: not atom(hasOiliness(2))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasOiliness(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  6 :: not atom(hasOiliness(2))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOiliness(1)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  1 :: not atom(hasOiliness(2))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  4 :: atom(hasMinorGrp(11)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasStyle(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  4 :: atom(hasMinorGrp(11)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  1 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  5 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOftenSold(1)) ; 
  8 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: not atom(hasOftenSold(2))  ; 
  10 :: atom(hasPrice(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  4 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: not atom(hasOftenSold(2))  ; 
  8 :: atom(hasPrice(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  4 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: not atom(hasOftenSold(2))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  2 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  4 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: not atom(hasOftenSold(2))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  3 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  4 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  6 :: not atom(hasOftenSold(2))  ; 
  2 :: atom(hasPrice(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  4 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasOftenSold(1)) ; 
  2 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(3)) ; 
  5 :: atom(hasPrice(1)) ; 
  9 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasPrice(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasStyle(0)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  4 :: atom(hasOiliness(0)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  6 :: not atom(hasPrice(2))  ; 
  7 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasOftenSold(2)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  10 :: not atom(hasStyle(1))  ; 
  6 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasStyle(0)) ; 
  3 :: not atom(hasMajorGrp(0))  ; 
  5 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  10 :: atom(hasPrice(2)) ; 
  9 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasPrice(2)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  3 :: not atom(hasPrice(2))  ; 
  4 :: atom(hasMinorGrp(4)) ; 
  2 :: atom(hasOiliness(3)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasPrice(3)) ; 
  4 :: not atom(hasStyle(1))  ; 
  1 :: not atom(hasStyle(0))  ; 
  5 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasPrice(2)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  3 :: not atom(hasPrice(2))  ; 
  4 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasPrice(3)) ; 
  4 :: not atom(hasStyle(1))  ; 
  1 :: not atom(hasStyle(0))  ; 
  5 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrice(2)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  2 :: not atom(hasPrice(3))  ; 
  4 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasPrice(3)) ; 
  1 :: atom(hasPrice(1)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  2 :: not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrice(2)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  2 :: not atom(hasPrice(3))  ; 
  4 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasPrice(3)) ; 
  1 :: atom(hasPrice(1)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(1)) ; 
  9 :: atom(hasOftenSold(1)) ; 
  5 :: not atom(hasMinorGrp(1))  ; 
  7 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasPrice(2)) ; 
  4 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasPrice(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasPrice(3)) ; 
  4 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.
