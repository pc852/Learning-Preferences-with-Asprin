asprin_vL version 1.0
Reading from stdin
-:242:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:252:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:267:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:348:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:609:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:622:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:799:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:928:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1000:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1004:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1004:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1010:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1109:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1135:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1255:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1289:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1311:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:159:1-16: info: no atoms over signature occur in program:
  output/3

-:151:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:152:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(4,eq,0) output(4,eq,5) output(4,eq,7) output(4,eq,2) output(4,eq,3) output(4,eq,8) output(4,eq,9) output(4,eq,6) output(0,eq,5) output(0,eq,7) output(0,eq,2) output(0,eq,3) output(0,eq,8) output(0,eq,9) output(0,eq,6) output(5,eq,7) output(5,eq,2) output(5,eq,3) output(5,eq,8) output(5,eq,9) output(5,eq,6) output(7,eq,2) output(7,eq,3) output(7,eq,8) output(7,eq,9) output(7,eq,6) output(2,eq,3) output(2,eq,8) output(2,eq,9) output(2,eq,6) output(3,eq,8) output(3,eq,9) output(3,eq,6) output(8,eq,9) output(8,eq,6) output(9,eq,6)
Optimization: 36 0
Answer: 2
preference(1,(1,10),1,for(atom(isOctopus(1))),15) preference(1,less(weight)) output(4,better,5) output(0,better,5) output(5,worse,7) output(5,worse,2) output(5,worse,3) output(5,worse,8) output(5,worse,9) output(5,worse,6) output(4,eq,0) output(4,eq,7) output(4,eq,2) output(4,eq,3) output(4,eq,8) output(4,eq,9) output(4,eq,6) output(0,eq,7) output(0,eq,2) output(0,eq,3) output(0,eq,8) output(0,eq,9) output(0,eq,6) output(7,eq,2) output(7,eq,3) output(7,eq,8) output(7,eq,9) output(7,eq,6) output(2,eq,3) output(2,eq,8) output(2,eq,9) output(2,eq,6) output(3,eq,8) output(3,eq,9) output(3,eq,6) output(8,eq,9) output(8,eq,6) output(9,eq,6)
Optimization: 34 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),1) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),1) preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),1) preference(1,(1,4),1,for(neg(atom(isRoe(1)))),1) preference(1,(1,5),1,for(neg(atom(isTamago(1)))),1) preference(1,(1,6),1,for(neg(atom(isShrimp(1)))),1) preference(1,(1,7),1,for(neg(atom(isFattyFish(1)))),1) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),1) preference(1,(1,9),1,for(neg(atom(isButtery(1)))),1) preference(1,(1,10),1,for(neg(atom(isCreamy(1)))),2) preference(1,less(weight)) output(4,better,0) output(4,better,5) output(4,better,2) output(4,better,3) output(4,better,8) output(4,better,9) output(4,better,6) output(7,better,2) output(7,better,3) output(7,better,8) output(7,better,9) output(7,better,6) output(5,worse,7) output(0,worse,7) output(4,eq,7) output(0,eq,5) output(0,eq,2) output(0,eq,3) output(0,eq,8) output(0,eq,9) output(0,eq,6) output(5,eq,2) output(5,eq,3) output(5,eq,8) output(5,eq,9) output(5,eq,6) output(2,eq,3) output(2,eq,8) output(2,eq,9) output(2,eq,6) output(3,eq,8) output(3,eq,9) output(3,eq,6) output(8,eq,9) output(8,eq,6) output(9,eq,6)
Optimization: 24 10
Answer: 4
preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),7) preference(1,(1,1),1,for(atom(isOctopus(1))),8) preference(1,(1,2),1,for(atom(isFattyFish(1))),8) preference(1,(1,3),1,for(atom(isTamago(1))),8) preference(1,(1,4),1,for(atom(isMaguro(1))),9) preference(1,(1,10),1,for(atom(isRoe(1))),9) preference(1,less(weight)) output(4,better,5) output(4,better,7) output(4,better,2) output(4,better,8) output(4,better,6) output(5,better,2) output(5,better,8) output(5,better,6) output(2,better,8) output(7,better,2) output(7,better,8) output(7,better,6) output(0,better,5) output(0,better,7) output(0,better,2) output(0,better,8) output(0,better,6) output(9,better,6) output(3,better,8) output(3,better,6) output(4,worse,0) output(4,worse,3) output(4,worse,9) output(5,worse,3) output(5,worse,9) output(2,worse,3) output(2,worse,9) output(7,worse,3) output(7,worse,9) output(8,worse,9) output(8,worse,6) output(0,eq,3) output(0,eq,9) output(5,eq,7) output(2,eq,6) output(3,eq,9)
Optimization: 16 6
Answer: 5
preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),3) preference(1,(1,3),1,for(atom(isOctopus(1))),8) preference(1,(1,4),1,for(atom(isUnique(1))),9) preference(1,(1,7),1,for(atom(isMaguro(1))),9) preference(1,(1,8),1,for(atom(isTamago(1))),1) preference(1,(1,9),1,for(atom(isFattyFish(1))),8) preference(1,(1,10),1,for(atom(isCreamy(1))),3) preference(1,less(weight)) output(4,better,5) output(4,better,7) output(4,better,2) output(4,better,8) output(4,better,9) output(4,better,6) output(5,better,2) output(5,better,8) output(5,better,9) output(5,better,6) output(2,better,8) output(7,better,2) output(7,better,8) output(7,better,9) output(7,better,6) output(0,better,5) output(0,better,7) output(0,better,2) output(0,better,8) output(0,better,9) output(0,better,6) output(3,better,8) output(3,better,9) output(3,better,6) output(4,worse,0) output(4,worse,3) output(5,worse,7) output(5,worse,3) output(2,worse,3) output(7,worse,3) output(8,worse,9) output(8,worse,6) output(0,eq,3) output(2,eq,9) output(2,eq,6) output(9,eq,6)
Optimization: 12 7
Answer: 6
preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),3) preference(1,(1,1),1,for(atom(isFattyFish(1))),2) preference(1,(1,2),1,for(atom(isChewy(1))),1) preference(1,(1,3),1,for(atom(isMaguro(1))),5) preference(1,(1,4),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,5),1,for(atom(isOctopus(1))),10) preference(1,(1,6),1,for(atom(hasPrice(1))),1) preference(1,(1,8),1,for(atom(isUnique(1))),9) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,10),1,for(atom(isRoe(1))),2) preference(1,less(weight)) output(4,better,5) output(4,better,2) output(4,better,8) output(4,better,9) output(4,better,6) output(5,better,2) output(5,better,8) output(5,better,6) output(2,better,8) output(2,better,6) output(7,better,2) output(7,better,8) output(7,better,9) output(7,better,6) output(0,better,5) output(0,better,7) output(0,better,2) output(0,better,8) output(0,better,9) output(0,better,6) output(9,better,6) output(8,better,6) output(3,better,8) output(3,better,9) output(3,better,6) output(4,worse,0) output(4,worse,7) output(4,worse,3) output(5,worse,7) output(5,worse,3) output(5,worse,9) output(2,worse,3) output(2,worse,9) output(7,worse,3) output(8,worse,9) output(0,eq,3)
Optimization: 11 10
Answer: 7
preference(1,(1,1),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,3),1,for(atom(isRoe(1))),8) preference(1,(1,4),1,for(atom(isOctopus(1))),1) preference(1,(1,5),1,for(atom(isChewy(1))),3) preference(1,(1,6),1,for(atom(isRaw(1))),4) preference(1,(1,7),1,for(atom(isFattyFish(1))),5) preference(1,(1,8),1,for(atom(isMaguro(1))),1) preference(1,(1,9),1,for(atom(isTamago(1))),7) preference(1,(1,10),1,for(atom(isUnique(1))),7) preference(1,less(weight)) output(4,better,0) output(4,better,5) output(4,better,7) output(4,better,2) output(4,better,3) output(4,better,8) output(4,better,9) output(4,better,6) output(5,better,7) output(5,better,2) output(5,better,3) output(5,better,8) output(5,better,9) output(5,better,6) output(2,better,3) output(2,better,8) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,3) output(7,better,8) output(7,better,9) output(7,better,6) output(0,better,5) output(0,better,7) output(0,better,2) output(0,better,3) output(0,better,8) output(0,better,9) output(0,better,6) output(9,better,6) output(8,better,9) output(8,better,6) output(3,better,8) output(3,better,9) output(3,better,6)
Optimization: 0 10
Progression : 0 [ 1;10] (Error: 9)
Progression : 0 [ 2;10] (Error: 4)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.092 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 7+
  Optimum    : unknown
Optimization : 0 10
Calls        : 1
Time         : 596.925s (Solving: 589.02s 1st Model: 0.06s Unsat: 0.00s)
CPU Time     : 2363.609s
Threads      : 4        (Winner: 4)

Choices      : 10520197 (Domain: 635)
Conflicts    : 1890177  (Analyzed: 1890175)
Restarts     : 2601     (Average: 726.71 Last: 115695)
Model-Level  : 928.3   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1896829  (Deleted: 1726347)
  Binary     : 752      (Ratio:   0.04%)
  Ternary    : 234      (Ratio:   0.01%)
  Conflict   : 1890175  (Average Length: 1348.4 Ratio:  99.65%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 6654     (Average Length:  127.9 Ratio:   0.35%) 
  Distributed: 2218     (Ratio:   0.12% Average LBD: 3.47) 
  Integrated : 6654     (Ratio: 300.00% Unit: 5 Average Jumps: 22.00)
Backjumps    : 1890175  (Average:  3.96 Max: 2763 Sum: 7478983)
  Executed   : 1890174  (Average:  3.96 Max: 2763 Sum: 7478958 Ratio: 100.00%)
  Bounded    : 1        (Average: 25.00 Max:  25 Sum:     25 Ratio:   0.00%)

Rules        : 2140283 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 767687  
Bodies       : 785142  
  Sum        : 216     
  Count      : 10      
Equivalences : 2322252  (Atom=Atom: 750364 Body=Body: 769043 Other: 802845)
Tight        : Yes
Variables    : 20923    (Eliminated:    0 Frozen: 13893)
Constraints  : 1414006  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(isUrchin(1))  ; 
  1 :: not atom(isOctopus(1))  ; 
  1 :: not atom(isMaguro(1))  ; 
  1 :: not atom(isRoe(1))  ; 
  1 :: not atom(isTamago(1))  ; 
  1 :: not atom(isShrimp(1))  ; 
  1 :: not atom(isFattyFish(1))  ; 
  1 :: not atom(isChewy(1))  ; 
  1 :: not atom(isButtery(1))  ; 
  2 :: not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(isOctopus(1)) ; 
  8 :: atom(isFattyFish(1)) ; 
  8 :: atom(isTamago(1)) ; 
  9 :: atom(isMaguro(1)) ; 
  7 :: not atom(hasPrice(0))  ; 
  9 :: atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(isOctopus(1)) ; 
  9 :: atom(isUnique(1)) ; 
  3 :: not atom(hasPrice(0))  ; 
  9 :: atom(isMaguro(1)) ; 
  1 :: atom(isTamago(1)) ; 
  8 :: atom(isFattyFish(1)) ; 
  3 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(isFattyFish(1)) ; 
  1 :: atom(isChewy(1)) ; 
  5 :: atom(isMaguro(1)) ; 
  3 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(isOctopus(1)) ; 
  1 :: atom(hasPrice(1)) ; 
  3 :: not atom(hasPrice(0))  ; 
  9 :: atom(isUnique(1)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(isRoe(1)) ; 
  1 :: atom(isOctopus(1)) ; 
  3 :: atom(isChewy(1)) ; 
  4 :: atom(isRaw(1)) ; 
  5 :: atom(isFattyFish(1)) ; 
  1 :: atom(isMaguro(1)) ; 
  7 :: atom(isTamago(1)) ; 
  7 :: atom(isUnique(1)) 
}.
