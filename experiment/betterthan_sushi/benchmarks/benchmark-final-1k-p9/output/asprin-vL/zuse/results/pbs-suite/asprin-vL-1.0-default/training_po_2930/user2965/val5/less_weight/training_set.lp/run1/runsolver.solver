asprin_vL version 1.0
Reading from stdin
-:242:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:252:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:267:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:348:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:609:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:622:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:799:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:928:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1000:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1004:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1004:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1010:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1109:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1135:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1255:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1289:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1311:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:159:1-16: info: no atoms over signature occur in program:
  output/3

-:151:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:152:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(1,eq,7) output(1,eq,2) output(1,eq,4) output(1,eq,8) output(1,eq,3) output(1,eq,0) output(1,eq,9) output(1,eq,6) output(7,eq,2) output(7,eq,4) output(7,eq,8) output(7,eq,3) output(7,eq,0) output(7,eq,9) output(7,eq,6) output(2,eq,4) output(2,eq,8) output(2,eq,3) output(2,eq,0) output(2,eq,9) output(2,eq,6) output(4,eq,8) output(4,eq,3) output(4,eq,0) output(4,eq,9) output(4,eq,6) output(8,eq,3) output(8,eq,0) output(8,eq,9) output(8,eq,6) output(3,eq,0) output(3,eq,9) output(3,eq,6) output(0,eq,9) output(0,eq,6) output(9,eq,6)
Optimization: 36 0
Answer: 2
preference(1,(1,10),1,for(atom(isUrchin(1))),15) preference(1,less(weight)) output(2,better,4) output(7,better,4) output(1,better,4) output(4,worse,8) output(4,worse,3) output(4,worse,0) output(4,worse,9) output(4,worse,6) output(1,eq,7) output(1,eq,2) output(1,eq,8) output(1,eq,3) output(1,eq,0) output(1,eq,9) output(1,eq,6) output(7,eq,2) output(7,eq,8) output(7,eq,3) output(7,eq,0) output(7,eq,9) output(7,eq,6) output(2,eq,8) output(2,eq,3) output(2,eq,0) output(2,eq,9) output(2,eq,6) output(8,eq,3) output(8,eq,0) output(8,eq,9) output(8,eq,6) output(3,eq,0) output(3,eq,9) output(3,eq,6) output(0,eq,9) output(0,eq,6) output(9,eq,6)
Optimization: 33 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),1) preference(1,(1,2),1,for(neg(atom(isOctopus(1)))),1) preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),1) preference(1,(1,4),1,for(neg(atom(isRoe(1)))),1) preference(1,(1,5),1,for(neg(atom(isTamago(1)))),1) preference(1,(1,6),1,for(neg(atom(isShrimp(1)))),1) preference(1,(1,7),1,for(neg(atom(isFattyFish(1)))),1) preference(1,(1,8),1,for(neg(atom(isChewy(1)))),1) preference(1,(1,9),1,for(neg(atom(isButtery(1)))),1) preference(1,(1,10),1,for(neg(atom(isCreamy(1)))),2) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(7,better,2) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(2,worse,4) output(1,worse,7) output(1,worse,4) output(1,eq,2) output(1,eq,8) output(1,eq,3) output(1,eq,0) output(1,eq,9) output(1,eq,6) output(7,eq,4) output(2,eq,8) output(2,eq,3) output(2,eq,0) output(2,eq,9) output(2,eq,6) output(8,eq,3) output(8,eq,0) output(8,eq,9) output(8,eq,6) output(3,eq,0) output(3,eq,9) output(3,eq,6) output(0,eq,9) output(0,eq,6) output(9,eq,6)
Optimization: 25 10
Answer: 4
preference(1,(1,1),1,for(neg(atom(isTamago(1)))),2) preference(1,(1,2),1,for(neg(atom(isUrchin(1)))),2) preference(1,(1,3),1,for(neg(atom(isFattyFish(1)))),2) preference(1,(1,4),1,for(neg(atom(isSweet(1)))),2) preference(1,(1,5),1,for(neg(atom(isButtery(1)))),2) preference(1,(1,6),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,8),1,for(neg(atom(isMaguro(1)))),4) preference(1,(1,9),1,for(neg(atom(isOctopus(1)))),15) preference(1,(1,10),1,for(neg(atom(isCreamy(1)))),1) preference(1,(1,7),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,0) output(2,better,9) output(2,better,6) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(7,worse,2) output(1,worse,7) output(1,worse,2) output(1,worse,4) output(1,eq,8) output(1,eq,3) output(1,eq,0) output(1,eq,9) output(1,eq,6) output(7,eq,4) output(8,eq,3) output(8,eq,0) output(8,eq,9) output(8,eq,6) output(3,eq,0) output(3,eq,9) output(3,eq,6) output(0,eq,9) output(0,eq,6) output(9,eq,6)
Optimization: 20 10
Answer: 5
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),13) preference(1,(1,3),1,for(neg(atom(isChewy(1)))),15) preference(1,(1,6),1,for(neg(atom(isRaw(1)))),3) preference(1,(1,9),1,for(neg(atom(isButtery(1)))),9) preference(1,(1,10),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,1),1,for(atom(isMaguro(1))),13) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,5),1,for(atom(isButtery(1))),9) preference(1,(1,7),1,for(atom(isRaw(0))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(4,better,0) output(4,better,9) output(2,better,9) output(7,better,9) output(0,better,9) output(1,better,7) output(1,better,2) output(1,better,4) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(3,better,0) output(3,better,9) output(3,better,6) output(4,worse,8) output(4,worse,3) output(4,worse,6) output(2,worse,4) output(2,worse,8) output(2,worse,3) output(2,worse,6) output(7,worse,2) output(7,worse,4) output(7,worse,8) output(7,worse,3) output(7,worse,0) output(7,worse,6) output(0,worse,6) output(9,worse,6) output(1,worse,8) output(1,worse,3) output(2,eq,0)
Optimization: 18 10
Answer: 6
preference(1,(1,2),1,for(neg(atom(hasMinorGrp(0)))),13) preference(1,(1,3),1,for(neg(atom(isRaw(0)))),15) preference(1,(1,6),1,for(neg(atom(isRaw(1)))),3) preference(1,(1,9),1,for(neg(atom(isButtery(1)))),9) preference(1,(1,10),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,1),1,for(atom(isMaguro(1))),13) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,5),1,for(atom(isButtery(1))),9) preference(1,(1,7),1,for(atom(isRaw(0))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(4,better,3) output(4,better,0) output(4,better,9) output(2,better,3) output(2,better,9) output(7,better,2) output(7,better,4) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(1,better,7) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(4,worse,8) output(4,worse,6) output(2,worse,4) output(2,worse,8) output(2,worse,6) output(7,worse,8) output(0,worse,6) output(9,worse,6) output(3,worse,0) output(3,worse,6) output(2,eq,0) output(3,eq,9)
Optimization: 12 10
Answer: 7
preference(1,(1,6),1,for(neg(atom(isRaw(1)))),3) preference(1,(1,9),1,for(neg(atom(isButtery(1)))),9) preference(1,(1,10),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,1),1,for(atom(isMaguro(1))),13) preference(1,(1,2),1,for(atom(isShrimp(1))),13) preference(1,(1,3),1,for(atom(isRaw(1))),15) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,5),1,for(atom(isButtery(1))),9) preference(1,(1,7),1,for(atom(isRaw(0))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,9) output(2,better,9) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(3,better,0) output(3,better,9) output(4,worse,6) output(2,worse,4) output(2,worse,8) output(2,worse,3) output(2,worse,6) output(0,worse,6) output(9,worse,6) output(1,worse,7) output(8,worse,6) output(3,worse,6) output(2,eq,0)
Optimization: 11 10
Answer: 8
preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),13) preference(1,(1,6),1,for(neg(atom(isRaw(1)))),3) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,1),1,for(atom(isOctopus(1))),15) preference(1,(1,2),1,for(atom(isFattyFish(1))),9) preference(1,(1,4),1,for(atom(hasPrice(1))),1) preference(1,(1,5),1,for(atom(isRaw(1))),15) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,10),1,for(atom(isMaguro(1))),13) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,9) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,9) output(4,worse,0) output(4,worse,6) output(9,worse,6) output(1,worse,7) output(8,worse,0) output(8,worse,6) output(3,worse,0) output(3,worse,6) output(2,eq,0) output(3,eq,9)
Optimization: 10 10
Answer: 9
preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),13) preference(1,(1,6),1,for(neg(atom(isRaw(1)))),3) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,1),1,for(atom(isUnique(1))),7) preference(1,(1,2),1,for(atom(isFattyFish(1))),9) preference(1,(1,4),1,for(atom(hasPrice(1))),1) preference(1,(1,5),1,for(atom(isRaw(1))),15) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,10),1,for(atom(isMaguro(1))),13) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,9) output(3,better,9) output(4,worse,0) output(9,worse,6) output(1,worse,7) output(8,worse,0) output(8,worse,6) output(3,worse,0) output(3,worse,6) output(2,eq,0)
Optimization: 8 10
Answer: 10
preference(1,(1,3),1,for(neg(atom(isMaguro(1)))),13) preference(1,(1,6),1,for(neg(atom(isRaw(1)))),3) preference(1,(1,7),1,for(neg(atom(hasMinorGrp(0)))),4) preference(1,(1,1),1,for(atom(isRoe(1))),12) preference(1,(1,2),1,for(atom(isFattyFish(1))),9) preference(1,(1,4),1,for(atom(hasPrice(1))),1) preference(1,(1,5),1,for(atom(isRaw(1))),15) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,10),1,for(atom(isMaguro(1))),13) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(9,better,6) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,9) output(8,better,6) output(3,better,6) output(4,worse,0) output(1,worse,7) output(8,worse,0) output(3,worse,0) output(2,eq,0) output(3,eq,9)
Optimization: 6 10
Answer: 11
preference(1,(1,3),1,for(neg(atom(isUnique(1)))),1) preference(1,(1,9),1,for(neg(atom(isRaw(0)))),2) preference(1,(1,1),1,for(atom(isTamago(1))),8) preference(1,(1,2),1,for(atom(isCreamy(1))),10) preference(1,(1,4),1,for(atom(isRoe(1))),10) preference(1,(1,5),1,for(atom(isFattyFish(1))),10) preference(1,(1,6),1,for(atom(isRaw(1))),8) preference(1,(1,7),1,for(atom(isChewy(1))),13) preference(1,(1,8),1,for(atom(isUnique(1))),13) preference(1,(1,10),1,for(atom(isShrimp(1))),9) preference(1,less(weight)) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,0) output(2,better,9) output(2,better,6) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(9,better,6) output(1,better,7) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(3,better,9) output(3,better,6) output(7,worse,2) output(3,worse,0) output(1,eq,2) output(4,eq,8)
Optimization: 4 10
Answer: 12
preference(1,(1,3),1,for(neg(atom(isUnique(1)))),1) preference(1,(1,9),1,for(neg(atom(isRaw(0)))),2) preference(1,(1,1),1,for(atom(isTamago(1))),8) preference(1,(1,2),1,for(atom(isCreamy(1))),10) preference(1,(1,4),1,for(atom(isUnique(1))),13) preference(1,(1,5),1,for(atom(isFattyFish(1))),9) preference(1,(1,6),1,for(atom(isRaw(1))),8) preference(1,(1,7),1,for(atom(isChewy(1))),13) preference(1,(1,8),1,for(atom(isRoe(1))),11) preference(1,(1,10),1,for(atom(isShrimp(1))),9) preference(1,less(weight)) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,0) output(2,better,9) output(2,better,6) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(9,better,6) output(1,better,7) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(3,better,9) output(3,better,6) output(4,worse,8) output(7,worse,2) output(3,worse,0)
Optimization: 3 10
Answer: 13
preference(1,(1,4),1,for(neg(atom(isRaw(0)))),9) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,7),1,for(neg(atom(isCreamy(1)))),13) preference(1,(1,1),1,for(atom(isButtery(1))),4) preference(1,(1,2),1,for(atom(isSweet(1))),13) preference(1,(1,3),1,for(atom(hasMinorGrp(1))),12) preference(1,(1,5),1,for(atom(isTamago(1))),8) preference(1,(1,8),1,for(atom(isShrimp(1))),8) preference(1,(1,9),1,for(atom(isFattyFish(1))),5) preference(1,(1,10),1,for(atom(isRoe(1))),12) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,0) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(1,better,7) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(3,better,9) output(3,better,6) output(9,worse,6) output(3,worse,0)
Optimization: 2 10
Answer: 14
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(0)))),13) preference(1,(1,2),1,for(neg(atom(isSweet(1)))),13) preference(1,(1,3),1,for(neg(atom(isRaw(0)))),9) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),4) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,5),1,for(atom(isChewy(1))),12) preference(1,(1,7),1,for(atom(isUnique(1))),11) preference(1,(1,8),1,for(atom(isShrimp(1))),8) preference(1,(1,9),1,for(atom(isFattyFish(1))),5) preference(1,(1,10),1,for(atom(isRoe(1))),8) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,0) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(9,better,6) output(1,better,7) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(3,better,9) output(3,better,6) output(3,worse,0)
Optimization: 1 10
Answer: 15
preference(1,(1,4),1,for(neg(atom(isMaguro(1)))),11) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),4) preference(1,(1,1),1,for(atom(isRoe(1))),14) preference(1,(1,2),1,for(atom(isRaw(1))),15) preference(1,(1,3),1,for(atom(isTamago(1))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,6),1,for(atom(isShrimp(1))),13) preference(1,(1,9),1,for(atom(isUnique(1))),6) preference(1,(1,10),1,for(atom(isMaguro(1))),5) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,0) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(9,better,6) output(1,better,7) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(3,better,0) output(3,better,9) output(3,better,6)
Optimization: 0 10
Answer: 16
preference(1,(1,4),1,for(neg(atom(isMaguro(1)))),11) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),2) preference(1,(1,8),1,for(neg(atom(isRaw(1)))),4) preference(1,(1,2),1,for(atom(isRaw(1))),15) preference(1,(1,3),1,for(atom(isTamago(1))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,6),1,for(atom(isShrimp(1))),13) preference(1,(1,9),1,for(atom(isRoe(1))),14) preference(1,(1,10),1,for(atom(isMaguro(1))),5) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,0) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(9,better,6) output(1,better,7) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(3,better,0) output(3,better,9) output(3,better,6)
Optimization: 0 9
Progression : 0 [1;9] (Error: 8)
Answer: 17
preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,8),1,for(neg(atom(isSweet(1)))),8) preference(1,(1,2),1,for(atom(isMaguro(1))),2) preference(1,(1,4),1,for(atom(isRoe(1))),15) preference(1,(1,5),1,for(atom(isShrimp(1))),5) preference(1,(1,7),1,for(atom(isButtery(1))),7) preference(1,(1,9),1,for(atom(isUnique(1))),14) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),4) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,0) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(9,better,6) output(1,better,7) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(3,better,0) output(3,better,9) output(3,better,6)
Optimization: 0 8
Answer: 18
preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),6) preference(1,(1,8),1,for(neg(atom(isSweet(1)))),8) preference(1,(1,2),1,for(atom(isRoe(1))),13) preference(1,(1,5),1,for(atom(isShrimp(1))),5) preference(1,(1,7),1,for(atom(isButtery(1))),7) preference(1,(1,9),1,for(atom(isUnique(1))),14) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),4) preference(1,less(weight)) output(4,better,8) output(4,better,3) output(4,better,0) output(4,better,9) output(4,better,6) output(2,better,4) output(2,better,8) output(2,better,3) output(2,better,0) output(2,better,9) output(2,better,6) output(7,better,2) output(7,better,4) output(7,better,8) output(7,better,3) output(7,better,0) output(7,better,9) output(7,better,6) output(0,better,9) output(0,better,6) output(9,better,6) output(1,better,7) output(1,better,2) output(1,better,4) output(1,better,8) output(1,better,3) output(1,better,0) output(1,better,9) output(1,better,6) output(8,better,3) output(8,better,0) output(8,better,9) output(8,better,6) output(3,better,0) output(3,better,9) output(3,better,6)
Optimization: 0 7
Progression : 0 [2;7] (Error: 2.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.106 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 18+
  Optimum    : unknown
Optimization : 0 7
Calls        : 1
Time         : 597.180s (Solving: 589.33s 1st Model: 0.05s Unsat: 0.00s)
CPU Time     : 2364.768s
Threads      : 4        (Winner: 4)

Choices      : 10997765 (Domain: 1626)
Conflicts    : 1741898  (Analyzed: 1741896)
Restarts     : 2410     (Average: 722.78 Last: 90701)
Model-Level  : 1042.6  
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 1745355  (Deleted: 1582761)
  Binary     : 456      (Ratio:   0.03%)
  Ternary    : 91       (Ratio:   0.01%)
  Conflict   : 1741896  (Average Length: 1596.6 Ratio:  99.80%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 3459     (Average Length:  105.5 Ratio:   0.20%) 
  Distributed: 1153     (Ratio:   0.07% Average LBD: 3.41) 
  Integrated : 3459     (Ratio: 300.00% Unit: 29 Average Jumps: 38.72)
Backjumps    : 1741896  (Average:  4.43 Max: 3543 Sum: 7708245)
  Executed   : 1741895  (Average:  4.43 Max: 3543 Sum: 7708218 Ratio: 100.00%)
  Bounded    : 1        (Average: 27.00 Max:  27 Sum:     27 Ratio:   0.00%)

Rules        : 2140283 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 767687  
Bodies       : 785142  
  Sum        : 216     
  Count      : 10      
Equivalences : 2322252  (Atom=Atom: 750364 Body=Body: 769043 Other: 802845)
Tight        : Yes
Variables    : 20923    (Eliminated:    0 Frozen: 13893)
Constraints  : 1414006  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(isUrchin(1))  ; 
  1 :: not atom(isOctopus(1))  ; 
  1 :: not atom(isMaguro(1))  ; 
  1 :: not atom(isRoe(1))  ; 
  1 :: not atom(isTamago(1))  ; 
  1 :: not atom(isShrimp(1))  ; 
  1 :: not atom(isFattyFish(1))  ; 
  1 :: not atom(isChewy(1))  ; 
  1 :: not atom(isButtery(1))  ; 
  2 :: not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(isTamago(1))  ; 
  2 :: not atom(isUrchin(1))  ; 
  2 :: not atom(isFattyFish(1))  ; 
  2 :: not atom(isSweet(1))  ; 
  2 :: not atom(isButtery(1))  ; 
  2 :: not atom(hasPrice(1))  ; 
  2 :: atom(hasPrice(0)) ; 
  4 :: not atom(isMaguro(1))  ; 
  15 :: not atom(isOctopus(1))  ; 
  1 :: not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  13 :: atom(isMaguro(1)) ; 
  13 :: not atom(hasMinorGrp(0))  ; 
  15 :: not atom(isChewy(1))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(isButtery(1)) ; 
  3 :: not atom(isRaw(1))  ; 
  4 :: atom(isRaw(0)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(isButtery(1))  ; 
  1 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  13 :: atom(isMaguro(1)) ; 
  13 :: not atom(hasMinorGrp(0))  ; 
  15 :: not atom(isRaw(0))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(isButtery(1)) ; 
  3 :: not atom(isRaw(1))  ; 
  4 :: atom(isRaw(0)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(isButtery(1))  ; 
  1 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  13 :: atom(isMaguro(1)) ; 
  13 :: atom(isShrimp(1)) ; 
  15 :: atom(isRaw(1)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(isButtery(1)) ; 
  3 :: not atom(isRaw(1))  ; 
  4 :: atom(isRaw(0)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(isButtery(1))  ; 
  1 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isOctopus(1)) ; 
  9 :: atom(isFattyFish(1)) ; 
  13 :: not atom(isMaguro(1))  ; 
  1 :: atom(hasPrice(1)) ; 
  15 :: atom(isRaw(1)) ; 
  3 :: not atom(isRaw(1))  ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  13 :: atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(isUnique(1)) ; 
  9 :: atom(isFattyFish(1)) ; 
  13 :: not atom(isMaguro(1))  ; 
  1 :: atom(hasPrice(1)) ; 
  15 :: atom(isRaw(1)) ; 
  3 :: not atom(isRaw(1))  ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  13 :: atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: atom(isRoe(1)) ; 
  9 :: atom(isFattyFish(1)) ; 
  13 :: not atom(isMaguro(1))  ; 
  1 :: atom(hasPrice(1)) ; 
  15 :: atom(isRaw(1)) ; 
  3 :: not atom(isRaw(1))  ; 
  4 :: not atom(hasMinorGrp(0))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  13 :: atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(isTamago(1)) ; 
  10 :: atom(isCreamy(1)) ; 
  1 :: not atom(isUnique(1))  ; 
  10 :: atom(isRoe(1)) ; 
  10 :: atom(isFattyFish(1)) ; 
  8 :: atom(isRaw(1)) ; 
  13 :: atom(isChewy(1)) ; 
  13 :: atom(isUnique(1)) ; 
  2 :: not atom(isRaw(0))  ; 
  9 :: atom(isShrimp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(isTamago(1)) ; 
  10 :: atom(isCreamy(1)) ; 
  1 :: not atom(isUnique(1))  ; 
  13 :: atom(isUnique(1)) ; 
  9 :: atom(isFattyFish(1)) ; 
  8 :: atom(isRaw(1)) ; 
  13 :: atom(isChewy(1)) ; 
  11 :: atom(isRoe(1)) ; 
  2 :: not atom(isRaw(0))  ; 
  9 :: atom(isShrimp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(isButtery(1)) ; 
  13 :: atom(isSweet(1)) ; 
  12 :: atom(hasMinorGrp(1)) ; 
  9 :: not atom(isRaw(0))  ; 
  8 :: atom(isTamago(1)) ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  13 :: not atom(isCreamy(1))  ; 
  8 :: atom(isShrimp(1)) ; 
  5 :: atom(isFattyFish(1)) ; 
  12 :: atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  13 :: not atom(hasMinorGrp(0))  ; 
  13 :: not atom(isSweet(1))  ; 
  9 :: not atom(isRaw(0))  ; 
  4 :: not atom(hasPrice(0))  ; 
  12 :: atom(isChewy(1)) ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  11 :: atom(isUnique(1)) ; 
  8 :: atom(isShrimp(1)) ; 
  5 :: atom(isFattyFish(1)) ; 
  8 :: atom(isRoe(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  14 :: atom(isRoe(1)) ; 
  15 :: atom(isRaw(1)) ; 
  5 :: atom(isTamago(1)) ; 
  11 :: not atom(isMaguro(1))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  13 :: atom(isShrimp(1)) ; 
  2 :: not atom(hasPrice(1))  ; 
  4 :: not atom(isRaw(1))  ; 
  6 :: atom(isUnique(1)) ; 
  5 :: atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(isRaw(1)) ; 
  5 :: atom(isTamago(1)) ; 
  11 :: not atom(isMaguro(1))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  13 :: atom(isShrimp(1)) ; 
  2 :: not atom(hasPrice(1))  ; 
  4 :: not atom(isRaw(1))  ; 
  14 :: atom(isRoe(1)) ; 
  5 :: atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(isMaguro(1)) ; 
  15 :: atom(isRoe(1)) ; 
  5 :: atom(isShrimp(1)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  7 :: atom(isButtery(1)) ; 
  8 :: not atom(isSweet(1))  ; 
  14 :: atom(isUnique(1)) ; 
  4 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  13 :: atom(isRoe(1)) ; 
  5 :: atom(isShrimp(1)) ; 
  6 :: not atom(hasMinorGrp(0))  ; 
  7 :: atom(isButtery(1)) ; 
  8 :: not atom(isSweet(1))  ; 
  14 :: atom(isUnique(1)) ; 
  4 :: atom(hasMinorGrp(1)) 
}.
