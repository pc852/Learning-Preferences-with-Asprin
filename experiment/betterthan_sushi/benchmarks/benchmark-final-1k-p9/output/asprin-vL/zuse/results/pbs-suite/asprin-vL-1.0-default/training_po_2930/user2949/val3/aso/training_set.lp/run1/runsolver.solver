asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,aso) output(1,better,8) output(7,better,2) output(7,better,8) output(7,better,9) output(7,better,5) output(7,better,0) output(2,better,8) output(6,better,9) output(6,better,5) output(6,better,0) output(9,better,5) output(1,worse,7) output(1,worse,6) output(1,worse,9) output(1,worse,0) output(2,worse,6) output(2,worse,9) output(2,worse,0) output(8,worse,6) output(8,worse,9) output(8,worse,4) output(8,worse,0) output(5,worse,0) output(1,eq,2) output(9,eq,0)
Optimization: 25 4
Answer: 2
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(isUnique(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,aso) output(1,better,2) output(7,better,2) output(7,better,8) output(7,better,5) output(7,better,0) output(6,better,9) output(6,better,5) output(6,better,0) output(9,better,5) output(9,better,0) output(4,better,5) output(4,better,0) output(1,worse,7) output(1,worse,6) output(1,worse,9) output(1,worse,4) output(1,worse,5) output(1,worse,0) output(2,worse,8) output(2,worse,6) output(2,worse,9) output(2,worse,4) output(2,worse,5) output(2,worse,0) output(8,worse,6) output(8,worse,9) output(8,worse,4) output(8,worse,5) output(8,worse,0) output(1,eq,8) output(5,eq,0)
Optimization: 24 4
Answer: 3
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,7),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isTamago(1))),()) preference(1,aso) output(1,better,2) output(7,better,2) output(7,better,8) output(7,better,9) output(7,better,5) output(7,better,0) output(6,better,9) output(6,better,5) output(6,better,0) output(9,better,5) output(9,better,0) output(4,better,5) output(4,better,0) output(1,worse,7) output(1,worse,6) output(1,worse,9) output(1,worse,4) output(2,worse,8) output(2,worse,6) output(2,worse,9) output(2,worse,4) output(8,worse,6) output(8,worse,9) output(8,worse,4) output(9,worse,4) output(1,eq,8) output(5,eq,0)
Optimization: 23 4
Answer: 4
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),3,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,7),4,for(neg(atom(isShrimp(1)))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,7),2,for(atom(isMaguro(1))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(0))),()) preference(1,aso) output(1,better,9) output(1,better,5) output(1,better,0) output(7,better,8) output(7,better,9) output(7,better,5) output(7,better,0) output(2,better,8) output(2,better,9) output(2,better,5) output(2,better,0) output(8,better,9) output(8,better,5) output(8,better,0) output(6,better,9) output(6,better,5) output(6,better,0) output(4,better,5) output(4,better,0) output(5,better,0) output(1,worse,7) output(1,worse,2) output(1,worse,6) output(1,worse,4) output(7,worse,4) output(2,worse,6) output(8,worse,6) output(8,worse,4) output(9,worse,4) output(9,worse,5) output(1,eq,8) output(9,eq,0)
Optimization: 16 4
Answer: 5
preference(1,(1,1),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,8),0,for(atom(isChewy(1))),()) preference(1,(1,3),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isSweet(1))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,1),3,for(atom(isUnique(1))),()) preference(1,aso) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(1,better,0) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(7,better,0) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(2,better,0) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(8,better,0) output(6,better,9) output(6,better,4) output(6,better,5) output(6,better,0) output(9,better,4) output(9,better,5) output(9,better,0) output(4,better,5) output(4,better,0) output(1,eq,7) output(1,eq,2) output(1,eq,8) output(7,eq,2) output(7,eq,8) output(2,eq,8) output(5,eq,0)
Optimization: 7 4
Answer: 6
preference(1,(1,2),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isChewy(1))),()) preference(1,aso) output(1,better,7) output(1,better,2) output(1,better,8) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(1,better,0) output(7,better,2) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(7,better,0) output(2,better,9) output(2,better,4) output(2,better,5) output(2,better,0) output(8,better,9) output(8,better,4) output(8,better,5) output(8,better,0) output(6,better,9) output(6,better,4) output(6,better,5) output(6,better,0) output(9,better,4) output(9,better,5) output(9,better,0) output(5,better,0)
Optimization: 6 6
Progression : [1;6] (Error: 5)
Answer: 7
preference(1,(1,2),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isChewy(1))),()) preference(1,aso) output(1,better,7) output(1,better,2) output(1,better,8) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(1,better,0) output(7,better,2) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(7,better,0) output(2,better,9) output(2,better,4) output(2,better,5) output(2,better,0) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(8,better,0) output(6,better,9) output(6,better,4) output(6,better,5) output(6,better,0) output(9,better,4) output(9,better,5) output(9,better,0) output(5,better,0)
Optimization: 5 6
Answer: 8
preference(1,(1,2),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isChewy(1))),()) preference(1,aso) output(1,better,7) output(1,better,2) output(1,better,8) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(1,better,0) output(7,better,2) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(7,better,0) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(2,better,0) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(8,better,0) output(6,better,9) output(6,better,4) output(6,better,5) output(6,better,0) output(9,better,4) output(9,better,5) output(9,better,0) output(5,better,0)
Optimization: 4 6
Answer: 9
preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,3),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isUnique(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(isChewy(1))),()) preference(1,aso) output(1,better,7) output(1,better,2) output(1,better,8) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(1,better,0) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(7,better,0) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(2,better,0) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(8,better,0) output(6,better,9) output(6,better,4) output(6,better,5) output(6,better,0) output(9,better,4) output(9,better,5) output(9,better,0) output(4,better,5) output(4,better,0) output(5,better,0) output(7,eq,2)
Optimization: 3 6
Answer: 10
preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,3),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,2),1,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,7),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isRoe(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isUnique(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isChewy(1))),()) preference(1,aso) output(1,better,7) output(1,better,2) output(1,better,8) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(1,better,0) output(7,better,2) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(7,better,0) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(2,better,0) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(8,better,0) output(6,better,9) output(6,better,4) output(6,better,5) output(6,better,0) output(9,better,4) output(9,better,5) output(9,better,0) output(4,better,5) output(4,better,0) output(5,better,0)
Optimization: 2 6
Answer: 11
preference(1,(1,1),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isTamago(1))),()) preference(1,(1,3),2,for(atom(isRaw(1))),()) preference(1,(1,5),2,for(atom(isRaw(1))),()) preference(1,(1,1),3,for(atom(isUnique(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,aso) output(1,better,7) output(1,better,2) output(1,better,8) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(1,better,0) output(7,better,8) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(7,better,0) output(2,better,8) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(2,better,0) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(8,better,0) output(6,better,9) output(6,better,4) output(6,better,5) output(6,better,0) output(9,better,4) output(9,better,5) output(9,better,0) output(4,better,5) output(4,better,0) output(5,better,0)
Optimization: 1 4
Progression : 1 [1;4] (Error: 3)
Progression : 1 [2;4] (Error: 1)
Answer: 12
preference(1,(1,3),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,6),1,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,3),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isUnique(1))),()) preference(1,aso) output(1,better,2) output(1,better,8) output(1,better,6) output(1,better,9) output(1,better,4) output(1,better,5) output(1,better,0) output(7,better,2) output(7,better,8) output(7,better,6) output(7,better,9) output(7,better,4) output(7,better,5) output(7,better,0) output(2,better,8) output(2,better,6) output(2,better,9) output(2,better,4) output(2,better,5) output(2,better,0) output(8,better,6) output(8,better,9) output(8,better,4) output(8,better,5) output(8,better,0) output(6,better,9) output(6,better,4) output(6,better,5) output(6,better,0) output(9,better,4) output(9,better,5) output(9,better,0) output(4,better,5) output(4,better,0) output(5,better,0) output(1,eq,7)
Optimization: 1 3
OPTIMUM FOUND

Models       : 12
  Optimum    : yes
Optimization : 1 3
Calls        : 1
Time         : 16.458s (Solving: 11.51s 1st Model: 0.12s Unsat: 9.10s)
CPU Time     : 50.838s
Threads      : 4        (Winner: 1)

Choices      : 277083   (Domain: 4635)
Conflicts    : 65624    (Analyzed: 65619)
Restarts     : 91       (Average: 721.09 Last: 4602)
Model-Level  : 628.2   
Problems     : 10       (Average Length: 0.40 Splits: 0)
Lemmas       : 122830   (Deleted: 46664)
  Binary     : 3914     (Ratio:   3.19%)
  Ternary    : 8055     (Ratio:   6.56%)
  Conflict   : 65616    (Average Length:  102.5 Ratio:  53.42%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 57214    (Average Length:   32.1 Ratio:  46.58%) 
  Distributed: 19100    (Ratio:  29.11% Average LBD: 3.20) 
  Integrated : 57291    (Ratio: 299.95% Unit: 322 Average Jumps: 61.80)
Backjumps    : 65619    (Average:  3.70 Max: 767 Sum: 243039)
  Executed   : 65596    (Average:  3.70 Max: 767 Sum: 242625 Ratio:  99.83%)
  Bounded    : 23       (Average: 18.00 Max:  35 Sum:    414 Ratio:   0.17%)

Rules        : 2316019 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 657530  
Bodies       : 779311  
  Count      : 1768    
Equivalences : 2014230  (Atom=Atom: 577062 Body=Body: 624463 Other: 812705)
Tight        : Yes
Variables    : 87439    (Eliminated:    0 Frozen: 58743)
Constraints  : 1782185  (Binary:  95.2% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isOctopus(1))  >> not atom(isButtery(1))  ; 
  atom(isRoe(1)) >> atom(isTamago(1)) >> not atom(hasPrice(1))  >> not atom(isShrimp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isMaguro(1))  >> not atom(isButtery(1))  ; 
  atom(isRoe(1)) >> atom(isTamago(1)) >> not atom(isUnique(1))  >> not atom(isShrimp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isChewy(1))  >> not atom(isButtery(1))  ; 
  atom(isRoe(1)) >> atom(isTamago(1)) >> not atom(isMaguro(1))  >> not atom(isShrimp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isUrchin(1)) >> atom(isTamago(1)) >> not atom(isShrimp(1))  >> not atom(isUrchin(1))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> atom(hasMinorGrp(0)) >> not atom(isButtery(1))  ; 
  atom(isRoe(1)) >> atom(isMaguro(1)) >> not atom(isRoe(1))  >> not atom(isShrimp(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isUnique(1)) >> not atom(isTamago(1))  || not atom(hasMinorGrp(0))  ; 
  not atom(isChewy(1))  >> atom(isSweet(1)) >> not atom(isSweet(1))  || not atom(hasMinorGrp(2))  ; 
  atom(hasMinorGrp(2)) >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(isChewy(1)) ; 
  not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isSweet(1))  >> not atom(hasMinorGrp(0))  || not atom(isTamago(1))  ; 
  atom(isRoe(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isFattyFish(1))  ; 
  not atom(isRaw(0))  >> atom(isOctopus(1)) >> not atom(hasMinorGrp(2))  || not atom(isFattyFish(1))  ; 
  atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || atom(isOctopus(1)) ; 
  atom(isRoe(1)) >> not atom(isRaw(0))  >> not atom(isSweet(1))  >> not atom(hasPrice(0))  ; 
  atom(isFattyFish(1)) >> not atom(isFattyFish(1))  >> atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isSweet(1))  >> not atom(hasMinorGrp(0))  || not atom(isTamago(1))  ; 
  atom(isRoe(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(isFattyFish(1))  ; 
  not atom(isRaw(0))  >> atom(isOctopus(1)) >> not atom(hasMinorGrp(2))  || not atom(isFattyFish(1))  ; 
  atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> not atom(isRaw(0))  >> not atom(isSweet(1))  >> not atom(hasPrice(0))  ; 
  atom(isFattyFish(1)) >> not atom(isFattyFish(1))  >> atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isSweet(1))  >> not atom(hasMinorGrp(0))  || not atom(isTamago(1))  ; 
  atom(isRoe(1)) >> not atom(isCreamy(1))  >> atom(isRaw(1)) || not atom(hasMinorGrp(0))  ; 
  not atom(isRaw(0))  >> atom(isOctopus(1)) >> not atom(hasMinorGrp(2))  || not atom(isFattyFish(1))  ; 
  atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> not atom(isRaw(0))  >> not atom(isSweet(1))  >> not atom(hasPrice(0))  ; 
  atom(isFattyFish(1)) >> not atom(isFattyFish(1))  >> atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(1))  >> atom(isMaguro(1)) >> not atom(isSweet(1))  >> not atom(hasMinorGrp(0))  || atom(hasPrice(0)) ; 
  atom(isRoe(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(0))  || not atom(isTamago(1))  ; 
  not atom(isRaw(0))  >> atom(isOctopus(1)) >> not atom(hasMinorGrp(2))  || not atom(isFattyFish(1))  ; 
  atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> not atom(isRaw(0))  >> not atom(isSweet(1))  >> not atom(hasPrice(0))  ; 
  atom(isFattyFish(1)) >> not atom(isFattyFish(1))  >> atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(1))  >> atom(isMaguro(1)) >> not atom(isSweet(1))  >> not atom(hasMinorGrp(0))  || atom(hasPrice(0)) ; 
  atom(isRoe(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(0))  || not atom(isTamago(1))  ; 
  not atom(isRaw(0))  >> atom(isOctopus(1)) >> not atom(hasMinorGrp(2))  || not atom(isFattyFish(1))  ; 
  atom(hasMinorGrp(1)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isOctopus(1))  || atom(isOctopus(1)) ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> atom(isRaw(1)) >> not atom(isSweet(1))  ; 
  atom(isFattyFish(1)) >> not atom(isFattyFish(1))  >> atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(0)) >> atom(isTamago(1)) >> atom(isUnique(1)) >> not atom(hasMinorGrp(0))  || not atom(isTamago(1))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> not atom(isRaw(0))  >> not atom(isFattyFish(1))  || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> atom(isRaw(1)) >> not atom(isFattyFish(1))  || not atom(isTamago(1))  ; 
  atom(isRoe(1)) >> atom(isRaw(1)) >> atom(isOctopus(1)) >> not atom(isTamago(1))  || not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> atom(isMaguro(1)) >> atom(isRaw(1)) >> not atom(hasMinorGrp(0))  || not atom(isTamago(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> atom(isUnique(1)) >> not atom(isTamago(1))  || not atom(isFattyFish(1))  ; 
  not atom(isRaw(0))  >> atom(isOctopus(1)) >> not atom(hasMinorGrp(2))  || not atom(isFattyFish(1))  
}.
