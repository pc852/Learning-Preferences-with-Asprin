asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isUnique(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(0,better,4) output(0,better,5) output(0,better,8) output(0,better,9) output(1,better,8) output(1,better,9) output(2,worse,0) output(2,worse,1) output(2,worse,6) output(0,worse,6) output(4,worse,1) output(4,worse,6) output(5,worse,1) output(5,worse,6) output(1,worse,6) output(8,worse,6) output(9,worse,6) output(2,eq,4) output(2,eq,8) output(2,eq,9) output(0,eq,1) output(4,eq,8) output(4,eq,9) output(8,eq,9)
Optimization: 22 3
Answer: 2
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(0,better,4) output(0,better,8) output(0,better,9) output(5,better,1) output(5,better,8) output(5,better,9) output(1,better,8) output(1,better,9) output(2,worse,0) output(2,worse,5) output(2,worse,1) output(2,worse,6) output(0,worse,5) output(0,worse,6) output(4,worse,5) output(4,worse,1) output(4,worse,6) output(1,worse,6) output(8,worse,6) output(9,worse,6) output(2,eq,4) output(2,eq,8) output(2,eq,9) output(0,eq,1) output(4,eq,8) output(4,eq,9) output(8,eq,9)
Optimization: 20 3
Answer: 3
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,5),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(0,better,4) output(0,better,5) output(0,better,8) output(1,better,8) output(0,worse,9) output(0,worse,6) output(4,worse,1) output(4,worse,9) output(4,worse,6) output(5,worse,1) output(5,worse,9) output(5,worse,6) output(1,worse,9) output(1,worse,6) output(8,worse,9) output(8,worse,6) output(2,eq,9) output(0,eq,1) output(4,eq,8)
Optimization: 19 3
Answer: 4
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,5),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(0,better,8) output(0,better,9) output(4,better,1) output(4,better,8) output(4,better,9) output(5,better,1) output(5,better,8) output(5,better,9) output(1,better,8) output(1,better,9) output(2,worse,0) output(2,worse,4) output(2,worse,5) output(2,worse,1) output(2,worse,6) output(0,worse,4) output(0,worse,5) output(0,worse,6) output(1,worse,6) output(8,worse,6) output(9,worse,6) output(2,eq,8) output(2,eq,9) output(0,eq,1) output(8,eq,9)
Optimization: 18 3
Answer: 5
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,6),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,5),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,5) output(2,better,1) output(2,better,9) output(0,better,5) output(0,better,9) output(4,better,5) output(4,better,1) output(4,better,9) output(1,better,9) output(8,better,9) output(0,worse,4) output(0,worse,8) output(0,worse,6) output(5,worse,1) output(5,worse,8) output(5,worse,6) output(1,worse,8) output(1,worse,6) output(9,worse,6) output(2,eq,4) output(2,eq,8) output(0,eq,1) output(4,eq,8)
Optimization: 17 3
Answer: 6
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,6),4,for(atom(hasMinorGrp(0))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,1) output(2,better,8) output(2,better,9) output(0,better,4) output(0,better,8) output(0,better,9) output(5,better,1) output(5,better,8) output(5,better,9) output(1,better,8) output(1,better,9) output(0,worse,5) output(0,worse,6) output(4,worse,5) output(4,worse,1) output(4,worse,6) output(1,worse,6) output(8,worse,6) output(9,worse,6) output(0,eq,1) output(4,eq,8) output(4,eq,9) output(8,eq,9)
Optimization: 15 3
Answer: 7
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,(1,6),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,8) output(0,better,9) output(4,better,9) output(5,better,8) output(5,better,9) output(1,better,8) output(1,better,9) output(8,better,9) output(4,worse,5) output(4,worse,1) output(4,worse,6) output(8,worse,6) output(9,worse,6) output(7,eq,2) output(0,eq,5) output(0,eq,1) output(4,eq,8) output(5,eq,1)
Optimization: 13 3
Answer: 8
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,5),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(0,better,4) output(0,better,5) output(0,better,1) output(0,better,8) output(0,better,9) output(4,better,9) output(5,better,8) output(5,better,9) output(1,better,8) output(1,better,9) output(8,better,9) output(4,worse,5) output(4,worse,1) output(4,worse,6) output(5,worse,6) output(1,worse,6) output(8,worse,6) output(9,worse,6) output(4,eq,8) output(5,eq,1)
Optimization: 12 3
Answer: 9
preference(1,(1,1),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,8),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,8),2,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isMaguro(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,1),3,for(atom(isFattyFish(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,8),3,for(atom(isRoe(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,4),4,for(atom(isShrimp(1))),()) preference(1,(1,5),4,for(atom(isUnique(1))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,7),4,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,5) output(0,better,9) output(4,better,9) output(5,better,9) output(1,better,8) output(1,better,9) output(1,better,6) output(8,better,9) output(8,better,6)
Optimization: 11 8
Answer: 10
preference(1,(1,1),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,8),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isFattyFish(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,4),4,for(atom(isShrimp(1))),()) preference(1,(1,5),4,for(atom(isUnique(1))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,7),4,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,5) output(0,better,8) output(0,better,9) output(0,better,6) output(4,better,9) output(5,better,9) output(1,better,8) output(1,better,9) output(1,better,6) output(8,better,9) output(8,better,6) output(4,worse,1) output(5,worse,1) output(9,worse,6) output(0,eq,1)
Optimization: 9 8
Answer: 11
preference(1,(1,1),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,8),0,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),2,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,2),4,for(neg(atom(isOctopus(1)))),()) preference(1,(1,3),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isRoe(1))),()) preference(1,(1,6),1,for(atom(isCreamy(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isOctopus(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isFattyFish(1))),()) preference(1,(1,3),3,for(atom(isUnique(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),3,for(atom(isUrchin(1))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,4),4,for(atom(isShrimp(1))),()) preference(1,(1,5),4,for(atom(isUnique(1))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,7),4,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,5) output(0,better,1) output(0,better,8) output(0,better,9) output(0,better,6) output(4,better,9) output(5,better,9) output(1,better,8) output(1,better,9) output(1,better,6) output(8,better,9) output(8,better,6) output(9,worse,6)
Optimization: 8 8
Answer: 12
preference(1,(1,2),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,4),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isTamago(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isButtery(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isTamago(1))),()) preference(1,(1,4),3,for(atom(isRoe(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isTamago(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,5) output(0,better,1) output(0,better,8) output(0,better,9) output(0,better,6) output(4,better,5) output(4,better,1) output(4,better,8) output(4,better,9) output(4,better,6) output(5,better,1) output(5,better,8) output(5,better,9) output(5,better,6) output(1,better,8) output(1,better,9) output(1,better,6) output(8,better,9) output(8,better,6) output(9,better,6)
Optimization: 0 8
Progression : 0 [1;8] (Error: 7)
Answer: 13
preference(1,(1,2),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),0,for(atom(isRaw(1))),()) preference(1,(1,4),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),2,for(neg(atom(isRoe(1)))),()) preference(1,(1,1),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isChewy(1)))),()) preference(1,(1,3),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isTamago(1))),()) preference(1,(1,2),1,for(atom(isCreamy(1))),()) preference(1,(1,3),1,for(atom(isButtery(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isMaguro(1))),()) preference(1,(1,2),2,for(atom(isOctopus(1))),()) preference(1,(1,5),2,for(atom(isUrchin(1))),()) preference(1,(1,6),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(isFattyFish(1))),()) preference(1,(1,4),3,for(atom(isRoe(1))),()) preference(1,(1,5),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isTamago(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,5) output(0,better,1) output(0,better,8) output(0,better,9) output(0,better,6) output(4,better,5) output(4,better,1) output(4,better,8) output(4,better,9) output(4,better,6) output(5,better,1) output(5,better,8) output(5,better,9) output(5,better,6) output(1,better,8) output(1,better,9) output(1,better,6) output(8,better,9) output(8,better,6) output(9,better,6)
Optimization: 0 7
Answer: 14
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,4),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,1),3,for(atom(isShrimp(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,4),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,4),4,for(atom(isShrimp(1))),()) preference(1,(1,5),4,for(atom(isUnique(1))),()) preference(1,(1,7),4,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,5) output(0,better,1) output(0,better,8) output(0,better,9) output(0,better,6) output(4,better,5) output(4,better,1) output(4,better,8) output(4,better,9) output(4,better,6) output(5,better,1) output(5,better,8) output(5,better,9) output(5,better,6) output(1,better,8) output(1,better,9) output(1,better,6) output(8,better,9) output(8,better,6) output(9,better,6)
Optimization: 0 6
Answer: 15
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,1),3,for(atom(isShrimp(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,5),3,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,5),4,for(atom(isUnique(1))),()) preference(1,(1,7),4,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,5) output(0,better,1) output(0,better,8) output(0,better,9) output(0,better,6) output(4,better,5) output(4,better,1) output(4,better,8) output(4,better,9) output(4,better,6) output(5,better,1) output(5,better,8) output(5,better,9) output(5,better,6) output(1,better,8) output(1,better,9) output(1,better,6) output(8,better,9) output(8,better,6) output(9,better,6)
Optimization: 0 5
Answer: 16
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),0,for(neg(atom(isUnique(1)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,7),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,1),3,for(atom(isShrimp(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,7),3,for(atom(isUnique(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,(1,7),4,for(atom(isRoe(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,5) output(0,better,1) output(0,better,8) output(0,better,9) output(0,better,6) output(4,better,5) output(4,better,1) output(4,better,8) output(4,better,9) output(4,better,6) output(5,better,1) output(5,better,8) output(5,better,9) output(5,better,6) output(1,better,8) output(1,better,9) output(1,better,6) output(8,better,9) output(8,better,6) output(9,better,6)
Optimization: 0 4
Answer: 17
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,2),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,2),2,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,1),3,for(atom(isShrimp(1))),()) preference(1,(1,3),3,for(atom(isOctopus(1))),()) preference(1,(1,1),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,4) output(7,better,5) output(7,better,1) output(7,better,8) output(7,better,9) output(7,better,6) output(2,better,0) output(2,better,4) output(2,better,5) output(2,better,1) output(2,better,8) output(2,better,9) output(2,better,6) output(0,better,4) output(0,better,5) output(0,better,1) output(0,better,8) output(0,better,9) output(0,better,6) output(4,better,5) output(4,better,1) output(4,better,8) output(4,better,9) output(4,better,6) output(5,better,1) output(5,better,8) output(5,better,9) output(5,better,6) output(1,better,8) output(1,better,9) output(1,better,6) output(8,better,9) output(8,better,6) output(9,better,6)
Optimization: 0 3
Progression : 0 [2;3] (Error: 0.5)
OPTIMUM FOUND

Models       : 17
  Optimum    : yes
Optimization : 0 3
Calls        : 1
Time         : 11.737s (Solving: 5.37s 1st Model: 0.18s Unsat: 4.06s)
CPU Time     : 27.710s
Threads      : 4        (Winner: 3)

Choices      : 131029   (Domain: 803)
Conflicts    : 18982    (Analyzed: 18979)
Restarts     : 46       (Average: 412.59 Last: 671)
Model-Level  : 764.3   
Problems     : 6        (Average Length: 0.67 Splits: 0)
Lemmas       : 41681    (Deleted: 3900)
  Binary     : 2094     (Ratio:   5.02%)
  Ternary    : 3055     (Ratio:   7.33%)
  Conflict   : 18978    (Average Length:   95.8 Ratio:  45.53%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 22703    (Average Length:   29.9 Ratio:  54.47%) 
  Distributed: 7601     (Ratio:  40.05% Average LBD: 3.12) 
  Integrated : 22795    (Ratio: 299.89% Unit: 242 Average Jumps: 96.94)
Backjumps    : 18979    (Average:  5.13 Max: 794 Sum:  97333)
  Executed   : 18972    (Average:  5.12 Max: 794 Sum:  97236 Ratio:  99.90%)
  Bounded    : 7        (Average: 13.86 Max:  35 Sum:     97 Ratio:   0.10%)

Rules        : 2316035 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 657530  
Bodies       : 779319  
  Count      : 1768    
Equivalences : 2014270  (Atom=Atom: 577078 Body=Body: 624479 Other: 812713)
Tight        : Yes
Variables    : 87431    (Eliminated:    0 Frozen: 58735)
Constraints  : 1782025  (Binary:  95.2% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(isRaw(0))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isOctopus(1))  >> not atom(isUnique(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(isRaw(0))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isOctopus(1))  >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(hasPrice(0))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isOctopus(1))  >> not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> atom(hasMinorGrp(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isOctopus(1))  >> not atom(isFattyFish(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isOctopus(1))  >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isButtery(1))  || atom(isRoe(1)) ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isRaw(1))  >> not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> atom(isRoe(1)) >> not atom(isShrimp(1))  >> not atom(isChewy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isTamago(1)) >> atom(isFattyFish(1)) >> atom(isUnique(1)) || not atom(isTamago(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> atom(isUnique(1)) >> not atom(isChewy(1))  || not atom(hasMinorGrp(0))  ; 
  atom(isRoe(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> atom(isUnique(1)) || not atom(hasMinorGrp(0))  ; 
  atom(isMaguro(1)) >> not atom(isRaw(0))  >> atom(isUrchin(1)) >> atom(isRoe(1)) || not atom(isUrchin(1))  ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(1)) >> atom(isUnique(1)) >> atom(isRoe(1)) || not atom(isUnique(1))  ; 
  atom(isMaguro(1)) >> not atom(hasMinorGrp(2))  >> atom(isRoe(1)) || not atom(isChewy(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isTamago(1))  >> not atom(isOctopus(1))  ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isShrimp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isMaguro(1)) >> atom(isFattyFish(1)) >> atom(isUnique(1)) || not atom(hasMinorGrp(0))  ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> atom(isUnique(1)) >> not atom(isChewy(1))  || not atom(hasMinorGrp(0))  ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isShrimp(1)) || not atom(isChewy(1))  ; 
  atom(isRoe(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> atom(isUnique(1)) || not atom(hasMinorGrp(0))  ; 
  atom(isCreamy(1)) >> not atom(isRaw(0))  >> atom(isUrchin(1)) >> atom(isRoe(1)) || not atom(isMaguro(1))  ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(1)) >> atom(isUnique(1)) >> atom(isRoe(1)) || not atom(isUnique(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isSweet(1))  || not atom(isChewy(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isTamago(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(hasMinorGrp(0)) >> atom(isFattyFish(1)) >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> atom(isUnique(1)) >> not atom(isChewy(1))  || not atom(hasMinorGrp(0))  ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> atom(isUrchin(1)) >> atom(isShrimp(1)) || not atom(isChewy(1))  ; 
  atom(isRoe(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> atom(isUnique(1)) || not atom(hasMinorGrp(0))  ; 
  atom(isCreamy(1)) >> not atom(isRaw(0))  >> atom(isUrchin(1)) >> atom(isRoe(1)) || not atom(isMaguro(1))  ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(1)) >> atom(isUnique(1)) >> atom(isRoe(1)) || not atom(isUnique(1))  ; 
  atom(isMaguro(1)) >> atom(isOctopus(1)) >> not atom(isSweet(1))  || not atom(isChewy(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isTamago(1))  >> not atom(isOctopus(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  atom(isButtery(1)) >> not atom(hasMinorGrp(0))  >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> not atom(isRoe(1))  >> atom(isRoe(1)) >> not atom(isMaguro(1))  || not atom(isTamago(1))  ; 
  atom(isTamago(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  not atom(isRaw(1))  >> atom(isFattyFish(1)) >> atom(isTamago(1)) >> not atom(isMaguro(1))  || not atom(isSweet(1))  ; 
  atom(isMaguro(1)) >> atom(isTamago(1)) >> not atom(isMaguro(1))  || not atom(isTamago(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isTamago(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isMaguro(1))  >> not atom(isButtery(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  atom(isButtery(1)) >> not atom(hasMinorGrp(0))  >> not atom(isMaguro(1))  || atom(isRaw(1)) ; 
  atom(isMaguro(1)) >> not atom(isRoe(1))  >> atom(isRoe(1)) >> not atom(isMaguro(1))  || not atom(isTamago(1))  ; 
  atom(isTamago(1)) >> atom(isUrchin(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  not atom(isRaw(1))  >> atom(isFattyFish(1)) >> atom(isTamago(1)) >> not atom(isMaguro(1))  || not atom(isSweet(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isTamago(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isMaguro(1))  >> not atom(isButtery(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) >> atom(isUnique(1)) || not atom(isRaw(0))  ; 
  atom(isTamago(1)) >> atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> atom(isUnique(1)) || not atom(hasMinorGrp(0))  ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(1)) >> atom(isUnique(1)) >> atom(isRoe(1)) || not atom(isUnique(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isTamago(1))  ; 
  atom(isMaguro(1)) >> not atom(isTamago(1))  >> atom(isUrchin(1)) >> atom(isShrimp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) >> atom(isUnique(1)) || not atom(isRaw(0))  ; 
  atom(isTamago(1)) >> atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(0)) >> atom(isUnique(1)) || not atom(hasMinorGrp(0))  ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(1)) >> atom(isUnique(1)) >> atom(isRoe(1)) || not atom(isUnique(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isTamago(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) >> atom(isUnique(1)) || not atom(isRaw(0))  ; 
  atom(isTamago(1)) >> atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(1)) >> atom(isUnique(1)) >> atom(isRoe(1)) || not atom(isUnique(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isTamago(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isUrchin(1)) >> atom(isFattyFish(1)) >> atom(isShrimp(1)) >> atom(isUnique(1)) || not atom(isRaw(0))  ; 
  atom(isTamago(1)) >> atom(isCreamy(1)) >> atom(isOctopus(1)) >> not atom(isChewy(1))  || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isTamago(1))  
}.
