asprin_vL version 1.0
Reading from stdin
-:275:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:300:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:381:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:655:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:832:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1033:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1037:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1037:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1043:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1142:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1168:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1288:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1322:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1344:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:192:1-16: info: no atoms over signature occur in program:
  output/3

-:184:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:185:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:186:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:187:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:217:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),1,for(atom(isFattyFish(1))),()) preference(1,(1,3),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,aso) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,9) output(0,better,5) output(0,better,3) output(0,better,9) output(1,better,9) output(7,worse,4) output(7,worse,0) output(7,worse,1) output(2,worse,6) output(2,worse,0) output(2,worse,3) output(2,worse,1) output(2,worse,9) output(6,worse,0) output(6,worse,1) output(0,worse,1) output(5,worse,1) output(3,worse,1) output(6,eq,3) output(6,eq,9) output(3,eq,9)
Optimization: 26 5
Answer: 2
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),1,for(atom(isFattyFish(1))),()) preference(1,(1,3),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,aso) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,9) output(0,better,5) output(0,better,3) output(0,better,9) output(1,better,9) output(7,worse,4) output(7,worse,6) output(7,worse,0) output(7,worse,1) output(2,worse,6) output(2,worse,0) output(2,worse,3) output(2,worse,1) output(2,worse,9) output(0,worse,1) output(5,worse,1) output(3,worse,1) output(3,eq,9)
Optimization: 22 5
Answer: 3
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),1,for(atom(isFattyFish(1))),()) preference(1,(1,3),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,aso) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,9) output(0,better,5) output(0,better,3) output(0,better,9) output(1,better,9) output(7,worse,1) output(2,worse,6) output(2,worse,0) output(2,worse,3) output(2,worse,1) output(2,worse,9) output(6,worse,0) output(6,worse,1) output(0,worse,1) output(5,worse,1) output(3,worse,1) output(6,eq,3) output(6,eq,9) output(3,eq,9)
Optimization: 20 5
Answer: 4
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),1,for(atom(isFattyFish(1))),()) preference(1,(1,3),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,5),4,for(atom(hasMinorGrp(1))),()) preference(1,aso) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,9) output(0,better,5) output(0,better,3) output(0,better,9) output(1,better,9) output(7,worse,1) output(2,worse,6) output(0,worse,1) output(5,worse,1) output(3,worse,1) output(3,eq,9)
Optimization: 18 5
Answer: 5
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isOctopus(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),1,for(atom(isFattyFish(1))),()) preference(1,(1,3),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,3),4,for(atom(isButtery(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,9) output(0,better,5) output(0,better,3) output(0,better,9) output(1,better,9) output(7,worse,1) output(2,worse,6) output(2,worse,0) output(2,worse,3) output(2,worse,1) output(2,worse,9) output(0,worse,1) output(5,worse,1) output(3,worse,1) output(3,eq,9)
Optimization: 17 5
Answer: 6
preference(1,(1,1),0,for(atom(isRoe(1))),()) preference(1,(1,1),1,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,6),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,1),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,2),4,for(neg(atom(isUrchin(1)))),()) preference(1,(1,3),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),4,for(neg(atom(isRoe(1)))),()) preference(1,(1,6),4,for(neg(atom(isButtery(1)))),()) preference(1,(1,2),1,for(atom(isFattyFish(1))),()) preference(1,(1,3),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,aso) output(7,better,2) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,9) output(0,better,3) output(0,better,9) output(5,better,3) output(5,better,9) output(1,better,9) output(7,worse,1) output(2,worse,6) output(2,worse,0) output(2,worse,5) output(2,worse,3) output(2,worse,1) output(2,worse,9) output(0,worse,1) output(5,worse,1) output(3,worse,1) output(0,eq,5) output(3,eq,9)
Optimization: 16 5
Answer: 7
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),0,for(atom(isOctopus(1))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isOctopus(1))),()) preference(1,(1,1),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),2,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,6) output(4,better,5) output(4,better,3) output(4,better,1) output(2,better,6) output(2,better,5) output(2,better,3) output(2,better,1) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(2,worse,0) output(6,worse,0) output(6,worse,5) output(6,worse,1) output(6,worse,9) output(3,worse,1) output(5,eq,1)
Optimization: 15 7
Answer: 8
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),0,for(atom(isOctopus(1))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isOctopus(1))),()) preference(1,(1,1),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isMaguro(1))),()) preference(1,(1,8),1,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,5) output(2,better,3) output(2,better,1) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(6,worse,0) output(6,worse,5) output(6,worse,1) output(6,worse,9) output(3,worse,1) output(5,eq,1)
Optimization: 13 7
Answer: 9
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),0,for(atom(isOctopus(1))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isOctopus(1))),()) preference(1,(1,1),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),2,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,3) output(2,better,1) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(5,better,1) output(2,worse,0) output(6,worse,0) output(6,worse,5) output(6,worse,9) output(2,eq,5)
Optimization: 12 7
Answer: 10
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),0,for(atom(isOctopus(1))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isOctopus(1))),()) preference(1,(1,1),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(isMaguro(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,0) output(2,better,5) output(2,better,3) output(2,better,1) output(2,better,9) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(4,worse,2) output(6,worse,0) output(6,worse,5) output(6,worse,1) output(6,worse,9) output(3,worse,1) output(5,eq,1)
Optimization: 11 7
Answer: 11
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),0,for(atom(isOctopus(1))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isOctopus(1))),()) preference(1,(1,1),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,5),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),3,for(neg(atom(isTamago(1)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,0) output(2,better,5) output(2,better,3) output(2,better,1) output(2,better,9) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(6,worse,0) output(6,worse,5) output(6,worse,1) output(6,worse,9) output(3,worse,1) output(5,eq,1)
Optimization: 10 7
Answer: 12
preference(1,(1,1),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,2),0,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,4),0,for(atom(isOctopus(1))),()) preference(1,(1,5),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,7),0,for(atom(isOctopus(1))),()) preference(1,(1,8),0,for(atom(isOctopus(1))),()) preference(1,(1,1),1,for(neg(atom(isChewy(1)))),()) preference(1,(1,2),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,2),2,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),2,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),2,for(neg(atom(isOctopus(1)))),()) preference(1,(1,2),3,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,4),3,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),3,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,7),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),4,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),4,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(hasPrice(0))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(hasPrice(0))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(isCreamy(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,0) output(2,better,5) output(2,better,3) output(2,better,1) output(2,better,9) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(5,better,1) output(6,worse,0) output(6,worse,5) output(6,worse,9)
Optimization: 9 7
Answer: 13
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),0,for(atom(hasPrice(0))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(neg(atom(isButtery(1)))),()) preference(1,(1,3),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,4),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,8),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isShrimp(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),1,for(atom(isMaguro(1))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isButtery(1))),()) preference(1,(1,8),2,for(atom(isRoe(1))),()) preference(1,(1,1),3,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(isFattyFish(1))),()) preference(1,(1,7),3,for(atom(isMaguro(1))),()) preference(1,(1,2),4,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),4,for(atom(isUnique(1))),()) preference(1,(1,6),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,0) output(2,better,5) output(2,better,3) output(2,better,1) output(2,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,1) output(6,better,9) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(5,better,1) output(5,better,9) output(3,better,1) output(3,better,9) output(1,better,9)
Optimization: 0 8
Progression : 0 [1;8] (Error: 7)
Answer: 14
preference(1,(1,1),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),0,for(atom(hasPrice(0))),()) preference(1,(1,6),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),1,for(neg(atom(isUnique(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,5),2,for(neg(atom(isTamago(1)))),()) preference(1,(1,2),3,for(neg(atom(isButtery(1)))),()) preference(1,(1,4),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,6),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),4,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isShrimp(1))),()) preference(1,(1,2),1,for(atom(isTamago(1))),()) preference(1,(1,4),1,for(atom(isMaguro(1))),()) preference(1,(1,5),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,3),2,for(atom(isMaguro(1))),()) preference(1,(1,4),2,for(atom(isChewy(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isButtery(1))),()) preference(1,(1,1),3,for(atom(isMaguro(1))),()) preference(1,(1,3),3,for(atom(isFattyFish(1))),()) preference(1,(1,7),3,for(atom(isMaguro(1))),()) preference(1,(1,2),4,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),4,for(atom(isUnique(1))),()) preference(1,(1,6),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,0) output(2,better,5) output(2,better,3) output(2,better,1) output(2,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,1) output(6,better,9) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(5,better,1) output(5,better,9) output(3,better,1) output(3,better,9) output(1,better,9)
Optimization: 0 7
Answer: 15
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,5),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,6),0,for(atom(isUrchin(1))),()) preference(1,(1,7),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,8),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),2,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,8),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,5),4,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,5),1,for(atom(isCreamy(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(isRoe(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isUrchin(1))),()) preference(1,(1,5),3,for(atom(isChewy(1))),()) preference(1,(1,6),3,for(atom(hasPrice(0))),()) preference(1,(1,1),4,for(atom(isButtery(1))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,7),4,for(atom(isOctopus(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,0) output(2,better,5) output(2,better,3) output(2,better,1) output(2,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,1) output(6,better,9) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(5,better,1) output(5,better,9) output(3,better,1) output(3,better,9) output(1,better,9)
Optimization: 0 6
Answer: 16
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(atom(isUrchin(1))),()) preference(1,(1,7),0,for(neg(atom(isTamago(1)))),()) preference(1,(1,8),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,7),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,7),1,for(atom(hasPrice(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isUrchin(1))),()) preference(1,(1,6),3,for(atom(hasPrice(0))),()) preference(1,(1,7),3,for(atom(isChewy(1))),()) preference(1,(1,1),4,for(atom(isButtery(1))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,0) output(2,better,5) output(2,better,3) output(2,better,1) output(2,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,1) output(6,better,9) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(5,better,1) output(5,better,9) output(3,better,1) output(3,better,9) output(1,better,9)
Optimization: 0 5
Progression : 0 [2;5] (Error: 1.5)
Answer: 17
preference(1,(1,1),0,for(neg(atom(isUrchin(1)))),()) preference(1,(1,6),0,for(atom(isUrchin(1))),()) preference(1,(1,8),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),4,for(neg(atom(isMaguro(1)))),()) preference(1,(1,1),1,for(atom(isTamago(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,6),1,for(atom(isOctopus(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(isTamago(1))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,6),3,for(atom(hasPrice(0))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),4,for(atom(isRoe(1))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,0) output(2,better,5) output(2,better,3) output(2,better,1) output(2,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,1) output(6,better,9) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(5,better,1) output(5,better,9) output(3,better,1) output(3,better,9) output(1,better,9)
Optimization: 0 4
Answer: 18
preference(1,(1,1),0,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),0,for(neg(atom(isMaguro(1)))),()) preference(1,(1,3),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,8),3,for(neg(atom(isShrimp(1)))),()) preference(1,(1,1),4,for(neg(atom(isChewy(1)))),()) preference(1,(1,1),1,for(atom(isMaguro(1))),()) preference(1,(1,3),1,for(atom(isTamago(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isOctopus(1))),()) preference(1,(1,1),3,for(atom(isChewy(1))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),4,for(atom(isUnique(1))),()) preference(1,aso) output(7,better,4) output(7,better,2) output(7,better,6) output(7,better,0) output(7,better,5) output(7,better,3) output(7,better,1) output(7,better,9) output(4,better,2) output(4,better,6) output(4,better,0) output(4,better,5) output(4,better,3) output(4,better,1) output(4,better,9) output(2,better,6) output(2,better,0) output(2,better,5) output(2,better,3) output(2,better,1) output(2,better,9) output(6,better,0) output(6,better,5) output(6,better,3) output(6,better,1) output(6,better,9) output(0,better,5) output(0,better,3) output(0,better,1) output(0,better,9) output(5,better,3) output(5,better,1) output(5,better,9) output(3,better,1) output(3,better,9) output(1,better,9)
Optimization: 0 3
OPTIMUM FOUND

Models       : 18
  Optimum    : yes
Optimization : 0 3
Calls        : 1
Time         : 11.686s (Solving: 4.98s 1st Model: 0.20s Unsat: 3.26s)
CPU Time     : 26.401s
Threads      : 4        (Winner: 3)

Choices      : 119418   (Domain: 503)
Conflicts    : 14831    (Analyzed: 14828)
Restarts     : 37       (Average: 400.76 Last: 1220)
Model-Level  : 611.1   
Problems     : 6        (Average Length: 0.67 Splits: 0)
Lemmas       : 35302    (Deleted: 0)
  Binary     : 1806     (Ratio:   5.12%)
  Ternary    : 3108     (Ratio:   8.80%)
  Conflict   : 14826    (Average Length:   72.0 Ratio:  42.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 20476    (Average Length:   26.7 Ratio:  58.00%) 
  Distributed: 6961     (Ratio:  46.95% Average LBD: 3.10) 
  Integrated : 20856    (Ratio: 299.61% Unit: 237 Average Jumps: 66.87)
Backjumps    : 14828    (Average:  6.37 Max: 799 Sum:  94423)
  Executed   : 14815    (Average:  6.35 Max: 799 Sum:  94213 Ratio:  99.78%)
  Bounded    : 13       (Average: 16.15 Max:  35 Sum:    210 Ratio:   0.22%)

Rules        : 2317987 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 658490  
Bodies       : 779624  
  Count      : 1768    
Equivalences : 2017023  (Atom=Atom: 578797 Body=Body: 626271 Other: 811955)
Tight        : Yes
Variables    : 86551    (Eliminated:    0 Frozen: 57855)
Constraints  : 1779385  (Binary:  95.2% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isCreamy(1))  || atom(isRoe(1)) ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> not atom(isUrchin(1))  ; 
  not atom(hasPrice(0))  >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> not atom(isUrchin(1))  ; 
  atom(isButtery(1)) >> atom(hasPrice(1)) >> not atom(isOctopus(1))  >> not atom(isButtery(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isCreamy(1))  || atom(isRoe(1)) ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> not atom(isUrchin(1))  ; 
  not atom(hasPrice(0))  >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isButtery(1)) >> atom(hasPrice(1)) >> not atom(isOctopus(1))  >> not atom(isButtery(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isCreamy(1))  || atom(isRoe(1)) ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> not atom(isSweet(1))  ; 
  not atom(hasPrice(0))  >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> not atom(isTamago(1))  ; 
  atom(isButtery(1)) >> atom(hasPrice(1)) >> not atom(isOctopus(1))  >> not atom(isButtery(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isCreamy(1))  || atom(isRoe(1)) ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> not atom(isRaw(0))  ; 
  not atom(hasPrice(0))  >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> atom(hasMinorGrp(1)) ; 
  atom(isButtery(1)) >> atom(hasPrice(1)) >> not atom(isOctopus(1))  >> not atom(isButtery(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isCreamy(1))  || atom(isRoe(1)) ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> atom(isButtery(1)) ; 
  not atom(hasPrice(0))  >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isButtery(1)) >> atom(hasPrice(1)) >> not atom(isOctopus(1))  >> not atom(isButtery(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isUrchin(1))  >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  >> not atom(isCreamy(1))  || atom(isRoe(1)) ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(hasMinorGrp(0))  >> not atom(isUrchin(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> not atom(isSweet(1))  ; 
  not atom(hasPrice(0))  >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> not atom(isRoe(1))  ; 
  atom(isButtery(1)) >> atom(hasPrice(1)) >> not atom(isUrchin(1))  >> not atom(isButtery(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isChewy(1))  >> not atom(isUrchin(1))  || not atom(isRaw(0))  ; 
  not atom(isUnique(1))  >> not atom(isUrchin(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  atom(hasPrice(0)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isTamago(1))  || atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> not atom(isShrimp(1))  || not atom(isTamago(1))  ; 
  not atom(isShrimp(1))  >> atom(hasMinorGrp(2)) >> not atom(hasPrice(1))  || atom(isOctopus(1)) ; 
  atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(isOctopus(1)) ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isChewy(1))  >> not atom(isUrchin(1))  || not atom(isRaw(0))  ; 
  not atom(isUnique(1))  >> not atom(isUrchin(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  atom(hasPrice(0)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isTamago(1))  || atom(isOctopus(1)) ; 
  atom(isMaguro(1)) >> not atom(isMaguro(1))  || not atom(isTamago(1))  ; 
  not atom(isShrimp(1))  >> atom(hasMinorGrp(2)) >> not atom(hasPrice(1))  || atom(isOctopus(1)) ; 
  atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(isOctopus(1)) ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> atom(isUnique(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isChewy(1))  >> not atom(isUrchin(1))  || not atom(isRaw(0))  ; 
  not atom(isUnique(1))  >> not atom(isUrchin(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  atom(hasPrice(0)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isTamago(1))  || atom(isOctopus(1)) ; 
  not atom(isShrimp(1))  >> atom(hasMinorGrp(2)) >> not atom(hasPrice(1))  || atom(isOctopus(1)) ; 
  atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(isOctopus(1)) ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> atom(isUnique(1)) ; 
  atom(isTamago(1)) >> not atom(isFattyFish(1))  >> not atom(isTamago(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isChewy(1))  >> not atom(isUrchin(1))  || not atom(isRaw(0))  ; 
  not atom(isUnique(1))  >> not atom(isUrchin(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(hasPrice(0)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isTamago(1))  || atom(isOctopus(1)) ; 
  atom(isTamago(1)) >> atom(isMaguro(1)) >> not atom(isMaguro(1))  || not atom(isTamago(1))  ; 
  not atom(isShrimp(1))  >> atom(hasMinorGrp(2)) >> not atom(hasPrice(1))  || atom(isOctopus(1)) ; 
  atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isChewy(1))  >> not atom(isUrchin(1))  || not atom(isRaw(0))  ; 
  not atom(isUnique(1))  >> not atom(isUrchin(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(hasPrice(0)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isTamago(1))  || atom(isOctopus(1)) ; 
  not atom(isShrimp(1))  >> atom(hasMinorGrp(2)) >> not atom(hasPrice(1))  || atom(isOctopus(1)) ; 
  atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(isOctopus(1)) ; 
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isTamago(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isChewy(1))  >> not atom(isUrchin(1))  || not atom(isRaw(0))  ; 
  not atom(isUnique(1))  >> not atom(isUrchin(1))  >> not atom(isMaguro(1))  || not atom(isRaw(0))  ; 
  atom(isTamago(1)) >> atom(isShrimp(1)) >> not atom(isUrchin(1))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(hasPrice(0)) >> not atom(isMaguro(1))  >> not atom(isUrchin(1))  >> not atom(isTamago(1))  || atom(isOctopus(1)) ; 
  atom(isTamago(1)) >> atom(isCreamy(1)) >> not atom(isFattyFish(1))  >> not atom(hasMinorGrp(1))  || not atom(isTamago(1))  ; 
  not atom(isShrimp(1))  >> atom(hasMinorGrp(2)) >> not atom(hasPrice(1))  || atom(isOctopus(1)) ; 
  atom(hasPrice(0)) >> not atom(isOctopus(1))  || atom(isOctopus(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isShrimp(1)) >> not atom(hasPrice(0))  >> atom(isMaguro(1)) >> not atom(isRaw(0))  || not atom(isRaw(1))  ; 
  not atom(isUnique(1))  >> atom(isMaguro(1)) >> atom(isFattyFish(1)) >> not atom(hasPrice(0))  || not atom(hasMinorGrp(0))  ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) || not atom(hasMinorGrp(2))  ; 
  atom(isTamago(1)) >> not atom(isTamago(1))  || atom(hasPrice(0)) ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(isMaguro(1)) >> atom(isRoe(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  || not atom(isButtery(1))  ; 
  atom(isTamago(1)) >> not atom(isTamago(1))  >> not atom(isButtery(1))  >> atom(hasMinorGrp(2)) ; 
  not atom(hasPrice(0))  >> atom(isButtery(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isShrimp(1)) >> not atom(hasPrice(0))  >> atom(isMaguro(1)) >> not atom(isRaw(0))  || not atom(isRaw(1))  ; 
  not atom(isUnique(1))  >> atom(isMaguro(1)) >> atom(isFattyFish(1)) >> not atom(hasPrice(0))  || not atom(hasMinorGrp(0))  ; 
  atom(isMaguro(1)) >> atom(isChewy(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) || not atom(hasMinorGrp(2))  ; 
  atom(isTamago(1)) >> not atom(isTamago(1))  || atom(hasPrice(0)) ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> not atom(isTamago(1))  >> not atom(isButtery(1))  >> atom(hasMinorGrp(2)) ; 
  not atom(hasPrice(0))  >> atom(isButtery(1)) >> atom(isMaguro(1)) >> not atom(isCreamy(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> atom(isUrchin(1)) >> atom(isButtery(1)) || not atom(isUrchin(1))  ; 
  atom(isCreamy(1)) >> atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isCreamy(1))  || not atom(isMaguro(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> atom(hasPrice(0)) >> atom(isRoe(1)) || atom(isUrchin(1)) ; 
  atom(isRoe(1)) >> not atom(hasMinorGrp(2))  >> not atom(isSweet(1))  >> atom(isOctopus(1)) || not atom(isMaguro(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> atom(isUrchin(1)) >> atom(isButtery(1)) || not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> atom(hasPrice(0)) >> atom(isRoe(1)) || atom(isUrchin(1)) ; 
  atom(hasPrice(1)) >> atom(hasMinorGrp(2)) >> atom(isChewy(1)) >> not atom(isMaguro(1))  || not atom(isTamago(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTamago(1)) >> atom(isRoe(1)) >> atom(isChewy(1)) >> not atom(isMaguro(1))  || not atom(isUrchin(1))  ; 
  atom(isOctopus(1)) >> atom(isTamago(1)) >> atom(hasPrice(0)) >> atom(isRoe(1)) || atom(isUrchin(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isMaguro(1)) >> atom(hasMinorGrp(2)) >> atom(isChewy(1)) >> not atom(isChewy(1))  || not atom(isCreamy(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) >> not atom(isShrimp(1))  >> atom(isUnique(1)) || not atom(isMaguro(1))  ; 
  atom(isTamago(1)) >> not atom(hasPrice(0))  >> not atom(isCreamy(1))  >> atom(hasMinorGrp(0)) 
}.
