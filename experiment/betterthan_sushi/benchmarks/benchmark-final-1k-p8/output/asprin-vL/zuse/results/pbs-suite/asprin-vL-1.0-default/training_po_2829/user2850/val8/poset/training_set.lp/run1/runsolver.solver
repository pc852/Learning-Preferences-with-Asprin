asprin_vL version 1.0
Reading from stdin
-:250:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:260:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:275:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:356:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:630:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:807:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:936:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1008:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1012:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1012:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1018:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1117:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1143:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1263:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1297:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1319:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:167:1-16: info: no atoms over signature occur in program:
  output/3

-:159:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:160:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:161:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,poset) output(4,eq,5) output(4,eq,0) output(4,eq,3) output(4,eq,6) output(4,eq,2) output(4,eq,7) output(4,eq,9) output(4,eq,1) output(5,eq,0) output(5,eq,3) output(5,eq,6) output(5,eq,2) output(5,eq,7) output(5,eq,9) output(5,eq,1) output(0,eq,3) output(0,eq,6) output(0,eq,2) output(0,eq,7) output(0,eq,9) output(0,eq,1) output(3,eq,6) output(3,eq,2) output(3,eq,7) output(3,eq,9) output(3,eq,1) output(6,eq,2) output(6,eq,7) output(6,eq,9) output(6,eq,1) output(2,eq,7) output(2,eq,9) output(2,eq,1) output(7,eq,9) output(7,eq,1) output(9,eq,1)
Optimization: 36 0
Answer: 2
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(hasPrice(0))),()) preference(1,poset) output(4,better,5) output(4,better,0) output(4,better,7) output(4,better,1) output(2,better,7) output(2,better,1) output(6,better,7) output(6,better,1) output(9,better,1) output(3,better,7) output(3,better,1) output(4,worse,2) output(5,worse,2) output(0,worse,2) output(4,worse,6) output(5,worse,6) output(0,worse,6) output(4,worse,9) output(5,worse,9) output(7,worse,9) output(4,worse,3) output(0,worse,9) output(5,worse,3) output(0,worse,3) output(5,eq,0) output(5,eq,7) output(5,eq,1) output(0,eq,7) output(0,eq,1) output(3,eq,6) output(3,eq,2) output(3,eq,9) output(6,eq,2) output(6,eq,9) output(2,eq,9) output(7,eq,1)
Optimization: 25 1
Answer: 3
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isUrchin(1))),()) preference(1,poset) output(4,better,5) output(4,better,0) output(4,better,3) output(4,better,6) output(4,better,2) output(4,better,7) output(4,better,9) output(4,better,1) output(2,better,7) output(2,better,1) output(6,better,7) output(6,better,1) output(9,better,1) output(3,better,7) output(3,better,1) output(5,worse,2) output(0,worse,2) output(5,worse,6) output(0,worse,6) output(5,worse,9) output(7,worse,9) output(0,worse,9) output(5,worse,3) output(0,worse,3) output(5,eq,0) output(5,eq,7) output(5,eq,1) output(0,eq,7) output(0,eq,1) output(3,eq,6) output(3,eq,2) output(3,eq,9) output(6,eq,2) output(6,eq,9) output(2,eq,9) output(7,eq,1)
Optimization: 21 1
Answer: 4
preference(1,(1,12),1,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isChewy(1))),()) preference(1,poset) output(4,better,5) output(4,better,0) output(4,better,7) output(4,better,1) output(5,better,7) output(5,better,1) output(2,better,7) output(2,better,1) output(6,better,7) output(6,better,1) output(0,better,7) output(0,better,1) output(9,better,1) output(3,better,6) output(3,better,2) output(3,better,7) output(3,better,9) output(3,better,1) output(5,worse,2) output(0,worse,2) output(5,worse,6) output(0,worse,6) output(5,worse,9) output(7,worse,9) output(4,worse,3) output(0,worse,9) output(5,worse,3) output(0,worse,3) output(4,eq,6) output(4,eq,2) output(4,eq,9) output(5,eq,0) output(6,eq,2) output(6,eq,9) output(2,eq,9) output(7,eq,1)
Optimization: 18 1
Answer: 5
preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,12),2,for(atom(isChewy(1))),()) preference(1,poset) output(4,better,5) output(4,better,0) output(4,better,3) output(4,better,6) output(4,better,2) output(4,better,7) output(4,better,9) output(4,better,1) output(5,better,6) output(5,better,2) output(5,better,7) output(5,better,9) output(5,better,1) output(0,better,6) output(0,better,2) output(0,better,7) output(0,better,1) output(0,better,9) output(3,better,6) output(3,better,2) output(3,better,7) output(3,better,9) output(3,better,1) output(5,eq,0) output(5,eq,3) output(0,eq,3) output(6,eq,2) output(6,eq,7) output(6,eq,9) output(6,eq,1) output(2,eq,7) output(2,eq,9) output(2,eq,1) output(7,eq,9) output(7,eq,1) output(9,eq,1)
Optimization: 13 1
Answer: 6
preference(1,(1,1),1,for(atom(isRaw(1))),()) preference(1,(1,2),1,for(atom(isSweet(1))),()) preference(1,(1,3),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isButtery(1))),()) preference(1,(1,6),1,for(atom(isRaw(1))),()) preference(1,(1,10),1,for(atom(isShrimp(1))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isSweet(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(isShrimp(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,10),2,for(atom(isRaw(1))),()) preference(1,(1,12),2,for(atom(isTamago(1))),()) preference(1,poset) output(4,better,3) output(4,better,6) output(4,better,7) output(4,better,1) output(5,better,0) output(5,better,3) output(5,better,6) output(5,better,2) output(5,better,7) output(5,better,9) output(5,better,1) output(2,better,7) output(2,better,1) output(6,better,7) output(6,better,1) output(0,better,3) output(0,better,6) output(0,better,2) output(0,better,7) output(0,better,1) output(9,better,1) output(3,better,6) output(3,better,7) output(3,better,1) output(6,worse,2) output(3,worse,9) output(6,worse,9) output(2,worse,9) output(7,worse,9) output(0,worse,9) output(4,unc,5) output(4,unc,0) output(4,unc,2) output(4,unc,9) output(3,unc,2) output(7,unc,1)
Optimization: 12 7
Answer: 7
preference(1,(1,1),1,for(atom(isUrchin(1))),()) preference(1,(1,2),1,for(atom(isButtery(1))),()) preference(1,(1,3),1,for(atom(isMaguro(1))),()) preference(1,(1,4),1,for(atom(isOctopus(1))),()) preference(1,(1,5),1,for(atom(isRaw(0))),()) preference(1,(1,6),1,for(atom(isRaw(0))),()) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),1,for(atom(isChewy(1))),()) preference(1,(1,9),1,for(atom(hasPrice(1))),()) preference(1,(1,10),1,for(atom(hasPrice(1))),()) preference(1,(1,11),1,for(atom(isChewy(1))),()) preference(1,(1,12),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isButtery(1))),()) preference(1,(1,2),2,for(atom(isShrimp(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isRaw(0))),()) preference(1,(1,5),2,for(atom(isRoe(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),2,for(atom(isButtery(1))),()) preference(1,(1,8),2,for(atom(isMaguro(1))),()) preference(1,(1,9),2,for(atom(isRaw(0))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(isCreamy(1))),()) preference(1,(1,12),2,for(atom(hasPrice(1))),()) preference(1,poset) output(4,better,6) output(4,better,7) output(4,better,9) output(4,better,1) output(5,better,0) output(5,better,3) output(5,better,6) output(5,better,2) output(5,better,7) output(5,better,9) output(5,better,1) output(2,better,9) output(7,better,9) output(7,better,1) output(0,better,3) output(0,better,6) output(0,better,2) output(0,better,7) output(0,better,1) output(0,better,9) output(3,better,6) output(3,better,2) output(3,better,7) output(3,better,9) output(3,better,1) output(6,worse,7) output(6,worse,1) output(9,worse,1) output(4,unc,5) output(4,unc,0) output(4,unc,3) output(4,unc,2) output(6,unc,2) output(6,unc,9) output(2,unc,7) output(2,unc,1)
Optimization: 11 12
Answer: 8
preference(1,(1,1),1,for(atom(isOctopus(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),1,for(atom(isTamago(1))),()) preference(1,(1,9),1,for(atom(isMaguro(1))),()) preference(1,(1,10),1,for(atom(isRaw(0))),()) preference(1,(1,11),1,for(atom(isRaw(0))),()) preference(1,(1,12),1,for(atom(isChewy(1))),()) preference(1,(1,1),2,for(atom(isTamago(1))),()) preference(1,(1,6),2,for(atom(isOctopus(1))),()) preference(1,(1,7),2,for(atom(isRaw(0))),()) preference(1,(1,9),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,10),2,for(atom(isSweet(1))),()) preference(1,(1,11),2,for(atom(isUnique(1))),()) preference(1,(1,12),2,for(atom(isMaguro(1))),()) preference(1,poset) output(4,better,9) output(4,better,1) output(5,better,0) output(5,better,3) output(5,better,6) output(5,better,2) output(5,better,7) output(5,better,9) output(5,better,1) output(2,better,7) output(2,better,9) output(2,better,1) output(6,better,9) output(6,better,1) output(7,better,9) output(7,better,1) output(0,better,3) output(0,better,6) output(0,better,2) output(0,better,7) output(0,better,1) output(0,better,9) output(3,better,6) output(3,better,2) output(3,better,7) output(3,better,9) output(3,better,1) output(4,worse,5) output(4,worse,2) output(6,worse,2) output(4,worse,7) output(6,worse,7) output(4,worse,0) output(9,worse,1) output(4,worse,3) output(4,unc,6)
Optimization: 9 7
Answer: 9
preference(1,(1,1),1,for(atom(isRoe(1))),()) preference(1,(1,2),1,for(atom(isUrchin(1))),()) preference(1,(1,3),1,for(atom(isChewy(1))),()) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,5),1,for(atom(isFattyFish(1))),()) preference(1,(1,6),1,for(atom(isButtery(1))),()) preference(1,(1,7),1,for(atom(isUrchin(1))),()) preference(1,(1,8),1,for(atom(isButtery(1))),()) preference(1,(1,9),1,for(atom(isButtery(1))),()) preference(1,(1,10),1,for(atom(isUnique(1))),()) preference(1,(1,11),1,for(atom(isTamago(1))),()) preference(1,(1,12),1,for(atom(hasPrice(1))),()) preference(1,(1,1),2,for(atom(isUnique(1))),()) preference(1,(1,2),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,4),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(isRaw(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),2,for(atom(isOctopus(1))),()) preference(1,(1,8),2,for(atom(hasPrice(0))),()) preference(1,(1,9),2,for(atom(isChewy(1))),()) preference(1,(1,10),2,for(atom(isTamago(1))),()) preference(1,(1,11),2,for(atom(isFattyFish(1))),()) preference(1,(1,12),2,for(atom(isRoe(1))),()) preference(1,poset) output(4,better,5) output(4,better,0) output(4,better,3) output(4,better,6) output(4,better,2) output(4,better,7) output(4,better,9) output(4,better,1) output(5,better,0) output(5,better,3) output(5,better,6) output(5,better,2) output(5,better,7) output(5,better,1) output(6,better,2) output(6,better,7) output(6,better,1) output(7,better,1) output(0,better,3) output(0,better,6) output(0,better,2) output(0,better,7) output(0,better,1) output(9,better,1) output(3,better,6) output(3,better,2) output(3,better,7) output(3,better,1) output(2,worse,7) output(2,worse,9) output(2,worse,1) output(5,unc,9) output(0,unc,9) output(3,unc,9) output(6,unc,9) output(7,unc,9)
Optimization: 8 12
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.075 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 9+
  Optimum    : unknown
Optimization : 8 12
Calls        : 1
Time         : 597.174s (Solving: 588.90s 1st Model: 1.39s Unsat: 0.00s)
CPU Time     : 2362.561s
Threads      : 4        (Winner: 4)

Choices      : 3900855  (Domain: 1887)
Conflicts    : 165983   (Analyzed: 165983)
Restarts     : 186      (Average: 892.38 Last: 5036)
Model-Level  : 700.2   
Problems     : 4        (Average Length: 1.00 Splits: 0)
Lemmas       : 17841839 (Deleted: 17701977)
  Binary     : 902      (Ratio:   0.01%)
  Ternary    : 53562    (Ratio:   0.30%)
  Conflict   : 165983   (Average Length: 1015.5 Ratio:   0.93%) 
  Loop       : 17622706 (Average Length:  319.9 Ratio:  98.77%) 
  Other      : 53150    (Average Length:    3.4 Ratio:   0.30%) 
  Distributed: 17731    (Ratio:   0.10% Average LBD: 2.86) 
  Integrated : 53193    (Ratio: 300.00% Unit: 111 Average Jumps: 1489.86)
Backjumps    : 165983   (Average: 19.93 Max: 93637 Sum: 3308245)
  Executed   : 165960   (Average: 19.93 Max: 93637 Sum: 3308163 Ratio: 100.00%)
  Bounded    : 23       (Average:  3.57 Max:  38 Sum:     82 Ratio:   0.00%)

Rules        : 1507891 
  Choice     : 37      
  Minimize   : 2       
Atoms        : 28455   
Bodies       : 1146038 
  Count      : 48      
Equivalences : 31752    (Atom=Atom: 5107 Body=Body: 7762 Other: 18883)
Tight        : No       (SCCs: 37 Non-Hcfs: 0 Nodes: 1089612 Gammas: 0)
Variables    : 1103056  (Eliminated:    0 Frozen: 1092559)
Constraints  : 6431347  (Binary:  82.5% Ternary:   3.6% Other:  13.9%)

No preference instances learned!

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isUrchin(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(hasPrice(1)) >> atom(isChewy(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRaw(1)) >> atom(isSweet(1)) ; 
  atom(isSweet(1)) >> atom(hasPrice(1)) ; 
  atom(isOctopus(1)) >> atom(isShrimp(1)) ; 
  atom(isButtery(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isRaw(1)) >> atom(hasMinorGrp(0)) ; 
  atom(isShrimp(1)) >> atom(isRaw(1)) ; 
  atom(hasPrice(1)) >> atom(isTamago(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isUrchin(1)) >> atom(isButtery(1)) ; 
  atom(isButtery(1)) >> atom(isShrimp(1)) ; 
  atom(isMaguro(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isOctopus(1)) >> atom(isRaw(0)) ; 
  atom(isRaw(0)) >> atom(isRoe(1)) ; 
  atom(isRaw(0)) >> atom(hasMinorGrp(1)) ; 
  atom(hasMinorGrp(1)) >> atom(isButtery(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) ; 
  atom(hasPrice(1)) >> atom(isRaw(0)) ; 
  atom(hasPrice(1)) >> atom(isSweet(1)) ; 
  atom(isChewy(1)) >> atom(isCreamy(1)) ; 
  atom(isChewy(1)) >> atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isOctopus(1)) >> atom(isTamago(1)) ; 
  atom(hasMinorGrp(2)) >> atom(isOctopus(1)) ; 
  atom(isTamago(1)) >> atom(isRaw(0)) ; 
  atom(isMaguro(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isRaw(0)) >> atom(isSweet(1)) ; 
  atom(isRaw(0)) >> atom(isUnique(1)) ; 
  atom(isChewy(1)) >> atom(isMaguro(1)) 
}.

Learned preference statement: 

#preference(1,poset){
  atom(isRoe(1)) >> atom(isUnique(1)) ; 
  atom(isUrchin(1)) >> atom(hasMinorGrp(1)) ; 
  atom(isChewy(1)) >> atom(hasMinorGrp(2)) ; 
  atom(hasMinorGrp(1)) >> atom(hasPrice(1)) ; 
  atom(isFattyFish(1)) >> atom(isRaw(0)) ; 
  atom(isButtery(1)) >> atom(hasMinorGrp(2)) ; 
  atom(isUrchin(1)) >> atom(isOctopus(1)) ; 
  atom(isButtery(1)) >> atom(hasPrice(0)) ; 
  atom(isButtery(1)) >> atom(isChewy(1)) ; 
  atom(isUnique(1)) >> atom(isTamago(1)) ; 
  atom(isTamago(1)) >> atom(isFattyFish(1)) ; 
  atom(hasPrice(1)) >> atom(isRoe(1)) 
}.
