asprin_vL version 1.0
Reading from stdin
-:299:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:309:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:324:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:405:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:666:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:679:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:856:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:985:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1057:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1061:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1061:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1166:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1192:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1312:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1346:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1368:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:216:1-16: info: no atoms over signature occur in program:
  output/3

-:208:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:209:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(19,eq,3) output(19,eq,55) output(19,eq,50) output(19,eq,87) output(19,eq,6) output(19,eq,41) output(19,eq,0) output(19,eq,9) output(19,eq,38) output(3,eq,55) output(3,eq,50) output(3,eq,87) output(3,eq,6) output(3,eq,41) output(3,eq,0) output(3,eq,9) output(3,eq,38) output(55,eq,50) output(55,eq,87) output(55,eq,6) output(55,eq,41) output(55,eq,0) output(55,eq,9) output(55,eq,38) output(50,eq,87) output(50,eq,6) output(50,eq,41) output(50,eq,0) output(50,eq,9) output(50,eq,38) output(87,eq,6) output(87,eq,41) output(87,eq,0) output(87,eq,9) output(87,eq,38) output(6,eq,41) output(6,eq,0) output(6,eq,9) output(6,eq,38) output(41,eq,0) output(41,eq,9) output(41,eq,38) output(0,eq,9) output(0,eq,38) output(9,eq,38)
Optimization: 45 0
Answer: 2
preference(1,(1,1),1,for(atom(hasOiliness(0))),6) preference(1,(1,2),1,for(atom(hasOiliness(1))),8) preference(1,(1,3),1,for(atom(hasPrice(1))),5) preference(1,(1,5),1,for(atom(hasPrice(0))),8) preference(1,less(weight)) output(0,better,9) output(0,better,38) output(3,better,50) output(3,better,6) output(3,better,41) output(3,better,9) output(3,better,38) output(6,better,9) output(6,better,38) output(19,better,50) output(19,better,9) output(19,better,38) output(41,better,9) output(41,better,38) output(55,better,50) output(55,better,6) output(55,better,41) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,41) output(87,better,9) output(87,better,38) output(6,worse,0) output(19,worse,3) output(19,worse,55) output(19,worse,87) output(19,worse,0) output(41,worse,0) output(50,worse,87) output(50,worse,6) output(50,worse,41) output(50,worse,0) output(19,eq,6) output(19,eq,41) output(3,eq,55) output(3,eq,87) output(3,eq,0) output(55,eq,87) output(55,eq,0) output(50,eq,9) output(50,eq,38) output(87,eq,0) output(6,eq,41) output(9,eq,38)
Optimization: 22 4
Answer: 3
preference(1,(1,1),1,for(atom(hasOiliness(0))),6) preference(1,(1,2),1,for(atom(hasOiliness(1))),8) preference(1,(1,3),1,for(atom(hasPrice(1))),5) preference(1,(1,5),1,for(atom(hasPrice(0))),8) preference(1,(1,9),1,for(atom(hasStyle(0))),5) preference(1,less(weight)) output(0,better,9) output(0,better,38) output(3,better,50) output(3,better,6) output(3,better,41) output(3,better,9) output(3,better,38) output(6,better,9) output(6,better,38) output(9,better,38) output(19,better,50) output(19,better,9) output(19,better,38) output(41,better,9) output(41,better,38) output(50,better,38) output(55,better,50) output(55,better,6) output(55,better,41) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,41) output(87,better,9) output(87,better,38) output(6,worse,0) output(19,worse,3) output(19,worse,55) output(19,worse,87) output(19,worse,0) output(41,worse,0) output(50,worse,87) output(50,worse,6) output(50,worse,41) output(50,worse,0) output(19,eq,6) output(19,eq,41) output(3,eq,55) output(3,eq,87) output(3,eq,0) output(55,eq,87) output(55,eq,0) output(50,eq,9) output(87,eq,0) output(6,eq,41)
Optimization: 20 5
Answer: 4
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,2),1,for(atom(hasStyle(0))),1) preference(1,(1,3),1,for(atom(hasStyle(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,7),1,for(atom(hasPrice(0))),9) preference(1,(1,8),1,for(atom(hasOiliness(1))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,10),1,for(atom(hasOiliness(0))),5) preference(1,(1,11),1,for(atom(hasPrice(1))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(11))),7) preference(1,(1,13),1,for(atom(hasMajorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(1))),2) preference(1,less(weight)) output(0,better,38) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,0) output(3,better,38) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,87) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,0) output(55,better,38) output(87,better,38) output(0,worse,9) output(3,worse,41) output(6,worse,41) output(6,worse,0) output(6,worse,9) output(50,worse,6) output(50,worse,41) output(50,worse,0) output(50,worse,9) output(55,worse,41) output(87,worse,6) output(87,worse,41) output(87,worse,0) output(87,worse,9) output(3,eq,55) output(3,eq,9) output(55,eq,9)
Optimization: 17 14
Answer: 5
preference(1,(1,1),1,for(atom(hasOiliness(0))),8) preference(1,(1,3),1,for(atom(hasMajorGrp(0))),1) preference(1,(1,4),1,for(atom(hasPrice(1))),7) preference(1,(1,5),1,for(atom(hasPrice(0))),7) preference(1,(1,6),1,for(atom(hasStyle(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,10),1,for(atom(hasOiliness(1))),9) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,12),1,for(atom(hasStyle(0))),9) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),10) preference(1,less(weight)) output(0,better,38) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,0) output(3,better,38) output(6,better,0) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,0) output(19,better,38) output(41,better,0) output(41,better,38) output(50,better,87) output(50,better,0) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,0) output(55,better,38) output(87,better,0) output(87,better,38) output(0,worse,9) output(3,worse,41) output(3,worse,9) output(6,worse,41) output(6,worse,9) output(50,worse,41) output(50,worse,9) output(55,worse,41) output(55,worse,9) output(87,worse,6) output(87,worse,41) output(87,worse,9) output(19,eq,41) output(19,eq,9) output(3,eq,55) output(50,eq,6) output(41,eq,9)
Optimization: 17 13
Answer: 6
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,2),1,for(atom(hasStyle(0))),7) preference(1,(1,3),1,for(atom(hasStyle(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,7),1,for(atom(hasPrice(0))),9) preference(1,(1,8),1,for(atom(hasOiliness(1))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),8) preference(1,(1,10),1,for(atom(hasOiliness(0))),5) preference(1,(1,11),1,for(atom(hasPrice(1))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,13),1,for(atom(hasMajorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),1) preference(1,less(weight)) output(0,better,38) output(3,better,55) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,0) output(3,better,38) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,87) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,0) output(55,better,38) output(87,better,38) output(0,worse,9) output(3,worse,41) output(6,worse,41) output(6,worse,0) output(6,worse,9) output(50,worse,6) output(50,worse,41) output(50,worse,0) output(50,worse,9) output(55,worse,41) output(55,worse,9) output(87,worse,6) output(87,worse,41) output(87,worse,0) output(87,worse,9) output(3,eq,9)
Optimization: 16 14
Answer: 7
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,3),1,for(atom(hasStyle(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,5),1,for(atom(hasStyle(0))),10) preference(1,(1,7),1,for(atom(hasPrice(0))),9) preference(1,(1,8),1,for(atom(hasOiliness(1))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,10),1,for(atom(hasOiliness(0))),5) preference(1,(1,11),1,for(atom(hasPrice(1))),4) preference(1,(1,13),1,for(atom(hasMajorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),6) preference(1,less(weight)) output(0,better,38) output(3,better,55) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,0) output(3,better,38) output(6,better,0) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,87) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,0) output(55,better,38) output(87,better,38) output(0,worse,9) output(3,worse,41) output(6,worse,41) output(6,worse,9) output(50,worse,6) output(50,worse,41) output(50,worse,0) output(50,worse,9) output(55,worse,41) output(55,worse,9) output(87,worse,6) output(87,worse,41) output(87,worse,0) output(87,worse,9) output(3,eq,9)
Optimization: 15 12
Answer: 8
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,3),1,for(atom(hasStyle(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),3) preference(1,(1,7),1,for(atom(hasPrice(0))),9) preference(1,(1,8),1,for(atom(hasOiliness(1))),8) preference(1,(1,9),1,for(atom(hasOiliness(0))),6) preference(1,(1,12),1,for(atom(hasPrice(1))),5) preference(1,(1,13),1,for(atom(hasMajorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),10) preference(1,less(weight)) output(0,better,38) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,0) output(3,better,9) output(3,better,38) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,0) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,0) output(87,better,38) output(0,worse,9) output(3,worse,41) output(6,worse,41) output(6,worse,0) output(6,worse,9) output(50,worse,87) output(50,worse,6) output(50,worse,41) output(50,worse,0) output(50,worse,9) output(55,worse,41) output(87,worse,41) output(3,eq,55) output(87,eq,9)
Optimization: 14 11
Answer: 9
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,3),1,for(atom(hasStyle(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,5),1,for(atom(hasStyle(0))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,7),1,for(atom(hasPrice(0))),9) preference(1,(1,8),1,for(atom(hasOiliness(1))),8) preference(1,(1,10),1,for(atom(hasOiliness(0))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),5) preference(1,(1,13),1,for(atom(hasMajorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),10) preference(1,less(weight)) output(0,better,38) output(3,better,55) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,0) output(3,better,9) output(3,better,38) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,38) output(55,better,50) output(55,better,6) output(55,better,0) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,0) output(87,better,9) output(87,better,38) output(3,worse,41) output(6,worse,41) output(6,worse,0) output(6,worse,9) output(50,worse,87) output(50,worse,6) output(50,worse,41) output(50,worse,0) output(50,worse,9) output(55,worse,41) output(87,worse,41) output(55,eq,87) output(0,eq,9)
Optimization: 13 13
Answer: 10
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,2),1,for(atom(hasStyle(0))),2) preference(1,(1,3),1,for(atom(hasStyle(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,7),1,for(atom(hasPrice(0))),9) preference(1,(1,8),1,for(atom(hasOiliness(1))),8) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,10),1,for(atom(hasOiliness(0))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),1) preference(1,(1,13),1,for(atom(hasMajorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),6) preference(1,less(weight)) output(0,better,38) output(3,better,55) output(3,better,50) output(3,better,6) output(3,better,0) output(3,better,9) output(3,better,38) output(6,better,0) output(6,better,9) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,38) output(55,better,50) output(55,better,6) output(55,better,0) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,0) output(87,better,9) output(87,better,38) output(3,worse,41) output(6,worse,41) output(50,worse,87) output(50,worse,6) output(50,worse,41) output(50,worse,0) output(50,worse,9) output(55,worse,87) output(55,worse,41) output(87,worse,41) output(3,eq,87) output(0,eq,9)
Optimization: 12 13
Answer: 11
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,2),1,for(atom(hasStyle(0))),2) preference(1,(1,3),1,for(atom(hasStyle(1))),2) preference(1,(1,4),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(hasPrice(0))),9) preference(1,(1,8),1,for(atom(hasOiliness(1))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(11))),7) preference(1,(1,10),1,for(atom(hasOiliness(0))),8) preference(1,(1,12),1,for(atom(hasPrice(1))),1) preference(1,(1,13),1,for(atom(hasMajorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),6) preference(1,less(weight)) output(0,better,38) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,0) output(3,better,9) output(3,better,38) output(6,better,0) output(6,better,9) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,0) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,0) output(87,better,9) output(87,better,38) output(3,worse,41) output(6,worse,41) output(50,worse,87) output(50,worse,6) output(50,worse,41) output(50,worse,0) output(50,worse,9) output(55,worse,41) output(87,worse,41) output(3,eq,55) output(0,eq,9)
Optimization: 11 12
Answer: 12
preference(1,(1,1),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,4),1,for(atom(hasOiliness(0))),3) preference(1,(1,5),1,for(atom(hasOiliness(1))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),5) preference(1,(1,7),1,for(atom(hasStyle(0))),10) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,10),1,for(atom(hasPrice(0))),7) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(5))),7) preference(1,(1,14),1,for(atom(hasPrice(1))),2) preference(1,less(weight)) output(0,better,9) output(0,better,38) output(3,better,55) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,41) output(3,better,0) output(3,better,9) output(3,better,38) output(6,better,41) output(6,better,0) output(6,better,9) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,87) output(50,better,6) output(50,better,41) output(50,better,0) output(50,better,9) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,41) output(55,better,0) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,41) output(87,better,0) output(87,better,9) output(87,better,38)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 13
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,2),1,for(atom(hasOiliness(0))),2) preference(1,(1,3),1,for(atom(hasMajorGrp(0))),5) preference(1,(1,4),1,for(atom(hasStyle(1))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,7),1,for(atom(hasPrice(0))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,9),1,for(atom(hasPrice(1))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,12),1,for(atom(hasStyle(0))),5) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),10) preference(1,less(weight)) output(0,better,9) output(0,better,38) output(3,better,55) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,41) output(3,better,0) output(3,better,9) output(3,better,38) output(6,better,41) output(6,better,0) output(6,better,9) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,87) output(50,better,6) output(50,better,41) output(50,better,0) output(50,better,9) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,41) output(55,better,0) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,41) output(87,better,0) output(87,better,9) output(87,better,38)
Optimization: 0 13
Answer: 14
preference(1,(1,1),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,2),1,for(atom(hasOiliness(0))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,5),1,for(atom(hasOiliness(1))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,8),1,for(atom(hasPrice(1))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),9) preference(1,(1,10),1,for(atom(hasPrice(0))),7) preference(1,(1,11),1,for(atom(hasStyle(0))),8) preference(1,(1,12),1,for(atom(hasStyle(1))),4) preference(1,(1,13),1,for(atom(hasMajorGrp(0))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),6) preference(1,less(weight)) output(0,better,9) output(0,better,38) output(3,better,55) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,41) output(3,better,0) output(3,better,9) output(3,better,38) output(6,better,41) output(6,better,0) output(6,better,9) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,87) output(50,better,6) output(50,better,41) output(50,better,0) output(50,better,9) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,41) output(55,better,0) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,41) output(87,better,0) output(87,better,9) output(87,better,38)
Optimization: 0 12
Progression : 0 [ 2;12] (Error: 5)
Answer: 15
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,2),1,for(atom(hasOiliness(1))),7) preference(1,(1,3),1,for(atom(hasOiliness(0))),9) preference(1,(1,6),1,for(atom(hasPrice(0))),5) preference(1,(1,7),1,for(atom(hasPrice(1))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),8) preference(1,less(weight)) output(0,better,9) output(0,better,38) output(3,better,55) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,41) output(3,better,0) output(3,better,9) output(3,better,38) output(6,better,41) output(6,better,0) output(6,better,9) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,87) output(50,better,6) output(50,better,41) output(50,better,0) output(50,better,9) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,41) output(55,better,0) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,41) output(87,better,0) output(87,better,9) output(87,better,38)
Optimization: 0 9
Answer: 16
preference(1,(1,1),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,6),1,for(atom(hasPrice(1))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,10),1,for(atom(hasOiliness(0))),3) preference(1,(1,12),1,for(atom(hasPrice(0))),6) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,14),1,for(atom(hasStyle(0))),8) preference(1,less(weight)) output(0,better,9) output(0,better,38) output(3,better,55) output(3,better,50) output(3,better,87) output(3,better,6) output(3,better,41) output(3,better,0) output(3,better,9) output(3,better,38) output(6,better,41) output(6,better,0) output(6,better,9) output(6,better,38) output(9,better,38) output(19,better,3) output(19,better,55) output(19,better,50) output(19,better,87) output(19,better,6) output(19,better,41) output(19,better,0) output(19,better,9) output(19,better,38) output(41,better,0) output(41,better,9) output(41,better,38) output(50,better,87) output(50,better,6) output(50,better,41) output(50,better,0) output(50,better,9) output(50,better,38) output(55,better,50) output(55,better,87) output(55,better,6) output(55,better,41) output(55,better,0) output(55,better,9) output(55,better,38) output(87,better,6) output(87,better,41) output(87,better,0) output(87,better,9) output(87,better,38)
Optimization: 0 8
Progression : 0 [3;8] (Error: 1.66667)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.031 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 16+
  Optimum    : unknown
Optimization : 0 8
Calls        : 1
Time         : 298.315s (Solving: 296.36s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1186.467s
Threads      : 4        (Winner: 4)

Choices      : 8394601  (Domain: 659293)
Conflicts    : 7028994  (Analyzed: 7028991)
Restarts     : 6354     (Average: 1106.23 Last: 439555)
Model-Level  : 52.9    
Problems     : 8        (Average Length: 0.50 Splits: 0)
Lemmas       : 7128172  (Deleted: 6865120)
  Binary     : 516      (Ratio:   0.01%)
  Ternary    : 12720    (Ratio:   0.18%)
  Conflict   : 7028991  (Average Length:  209.1 Ratio:  98.61%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 99181    (Average Length:   37.8 Ratio:   1.39%) 
  Distributed: 33092    (Ratio:   0.47% Average LBD: 3.63) 
  Integrated : 99276    (Ratio: 300.00% Unit: 227 Average Jumps: 6.72)
Backjumps    : 7028991  (Average:  1.16 Max: 868 Sum: 8138634)
  Executed   : 7028990  (Average:  1.16 Max: 868 Sum: 8138591 Ratio: 100.00%)
  Bounded    : 1        (Average: 43.00 Max:  43 Sum:     43 Ratio:   0.00%)

Rules        : 187386  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 10479   
Bodies       : 8723    
  Sum        : 90      
  Count      : 14      
Equivalences : 5335     (Atom=Atom: 463 Body=Body: 194 Other: 4678)
Tight        : Yes
Variables    : 7579     (Eliminated:    0 Frozen: 4919)
Constraints  : 190041   (Binary:  97.5% Ternary:   1.4% Other:   1.1%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPrice(1)) ; 
  8 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOiliness(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasPrice(1)) ; 
  8 :: atom(hasPrice(0)) ; 
  5 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasStyle(0)) ; 
  2 :: atom(hasStyle(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  9 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasPrice(1)) ; 
  7 :: atom(hasMinorGrp(11)) ; 
  2 :: atom(hasMajorGrp(0)) ; 
  2 :: atom(hasMinorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMajorGrp(0)) ; 
  7 :: atom(hasPrice(1)) ; 
  7 :: atom(hasPrice(0)) ; 
  6 :: atom(hasStyle(1)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasStyle(0)) ; 
  8 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasStyle(0)) ; 
  2 :: atom(hasStyle(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasMinorGrp(10)) ; 
  5 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasPrice(1)) ; 
  10 :: atom(hasMinorGrp(11)) ; 
  2 :: atom(hasMajorGrp(0)) ; 
  1 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasStyle(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasStyle(0)) ; 
  9 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasOiliness(0)) ; 
  4 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMajorGrp(0)) ; 
  6 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasStyle(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasMinorGrp(11)) ; 
  9 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMajorGrp(0)) ; 
  10 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasStyle(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasStyle(0)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMajorGrp(0)) ; 
  10 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasStyle(0)) ; 
  2 :: atom(hasStyle(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  8 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMajorGrp(0)) ; 
  6 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasStyle(0)) ; 
  2 :: atom(hasStyle(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOiliness(1)) ; 
  7 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMajorGrp(0)) ; 
  6 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasStyle(0)) ; 
  2 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasMajorGrp(0)) ; 
  5 :: atom(hasStyle(1)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasStyle(0)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasPrice(1)) ; 
  9 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasPrice(0)) ; 
  8 :: atom(hasStyle(0)) ; 
  4 :: atom(hasStyle(1)) ; 
  4 :: atom(hasMajorGrp(0)) ; 
  6 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(6)) ; 
  7 :: atom(hasOiliness(1)) ; 
  9 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasPrice(0)) ; 
  2 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  5 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasPrice(1)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  8 :: atom(hasStyle(0)) 
}.
