asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(13,eq,41) output(13,eq,1) output(13,eq,11) output(13,eq,2) output(13,eq,33) output(13,eq,4) output(13,eq,10) output(13,eq,44) output(13,eq,84) output(41,eq,1) output(41,eq,11) output(41,eq,2) output(41,eq,33) output(41,eq,4) output(41,eq,10) output(41,eq,44) output(41,eq,84) output(1,eq,11) output(1,eq,2) output(1,eq,33) output(1,eq,4) output(1,eq,10) output(1,eq,44) output(1,eq,84) output(11,eq,2) output(11,eq,33) output(11,eq,4) output(11,eq,10) output(11,eq,44) output(11,eq,84) output(2,eq,33) output(2,eq,4) output(2,eq,10) output(2,eq,44) output(2,eq,84) output(33,eq,4) output(33,eq,10) output(33,eq,44) output(33,eq,84) output(4,eq,10) output(4,eq,44) output(4,eq,84) output(10,eq,44) output(10,eq,84) output(44,eq,84)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(1,better,11) output(13,better,11) output(41,better,11) output(11,worse,2) output(11,worse,33) output(11,worse,4) output(11,worse,10) output(11,worse,44) output(11,worse,84) output(13,eq,41) output(13,eq,1) output(13,eq,2) output(13,eq,33) output(13,eq,4) output(13,eq,10) output(13,eq,44) output(13,eq,84) output(41,eq,1) output(41,eq,2) output(41,eq,33) output(41,eq,4) output(41,eq,10) output(41,eq,44) output(41,eq,84) output(1,eq,2) output(1,eq,33) output(1,eq,4) output(1,eq,10) output(1,eq,44) output(1,eq,84) output(2,eq,33) output(2,eq,4) output(2,eq,10) output(2,eq,44) output(2,eq,84) output(33,eq,4) output(33,eq,10) output(33,eq,44) output(33,eq,84) output(4,eq,10) output(4,eq,44) output(4,eq,84) output(10,eq,44) output(10,eq,84) output(44,eq,84)
Optimization: 42 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(1,better,11) output(1,better,84) output(2,better,84) output(4,better,84) output(10,better,84) output(13,better,11) output(13,better,84) output(33,better,84) output(41,better,11) output(41,better,84) output(44,better,84) output(11,worse,2) output(11,worse,33) output(11,worse,4) output(11,worse,10) output(11,worse,44) output(13,eq,41) output(13,eq,1) output(13,eq,2) output(13,eq,33) output(13,eq,4) output(13,eq,10) output(13,eq,44) output(41,eq,1) output(41,eq,2) output(41,eq,33) output(41,eq,4) output(41,eq,10) output(41,eq,44) output(1,eq,2) output(1,eq,33) output(1,eq,4) output(1,eq,10) output(1,eq,44) output(11,eq,84) output(2,eq,33) output(2,eq,4) output(2,eq,10) output(2,eq,44) output(33,eq,4) output(33,eq,10) output(33,eq,44) output(4,eq,10) output(4,eq,44) output(10,eq,44)
Optimization: 34 2
Answer: 4
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,14),1,for(atom(hasOftenSold(1))),10) preference(1,less(weight)) output(1,better,33) output(1,better,84) output(2,better,33) output(2,better,84) output(4,better,84) output(10,better,84) output(11,better,33) output(11,better,84) output(13,better,33) output(13,better,84) output(41,better,33) output(41,better,84) output(44,better,84) output(33,worse,4) output(33,worse,10) output(33,worse,44) output(13,eq,41) output(13,eq,1) output(13,eq,11) output(13,eq,2) output(13,eq,4) output(13,eq,10) output(13,eq,44) output(41,eq,1) output(41,eq,11) output(41,eq,2) output(41,eq,4) output(41,eq,10) output(41,eq,44) output(1,eq,11) output(1,eq,2) output(1,eq,4) output(1,eq,10) output(1,eq,44) output(11,eq,2) output(11,eq,4) output(11,eq,10) output(11,eq,44) output(2,eq,4) output(2,eq,10) output(2,eq,44) output(33,eq,84) output(4,eq,10) output(4,eq,44) output(10,eq,44)
Optimization: 32 2
Answer: 5
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(2))),10) preference(1,less(weight)) output(1,better,11) output(1,better,33) output(1,better,84) output(2,better,33) output(2,better,84) output(4,better,84) output(10,better,84) output(13,better,11) output(13,better,33) output(13,better,84) output(41,better,11) output(41,better,33) output(41,better,84) output(44,better,84) output(11,worse,2) output(11,worse,4) output(11,worse,10) output(11,worse,44) output(33,worse,4) output(33,worse,10) output(33,worse,44) output(13,eq,41) output(13,eq,1) output(13,eq,2) output(13,eq,4) output(13,eq,10) output(13,eq,44) output(41,eq,1) output(41,eq,2) output(41,eq,4) output(41,eq,10) output(41,eq,44) output(1,eq,2) output(1,eq,4) output(1,eq,10) output(1,eq,44) output(11,eq,33) output(11,eq,84) output(2,eq,4) output(2,eq,10) output(2,eq,44) output(33,eq,84) output(4,eq,10) output(4,eq,44) output(10,eq,44)
Optimization: 31 3
Answer: 6
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(1,better,33) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,44) output(2,better,84) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(11,better,33) output(11,better,44) output(11,better,84) output(13,better,33) output(13,better,44) output(13,better,84) output(41,better,33) output(41,better,44) output(41,better,84) output(33,worse,4) output(33,worse,10) output(13,eq,41) output(13,eq,1) output(13,eq,11) output(13,eq,2) output(13,eq,4) output(13,eq,10) output(41,eq,1) output(41,eq,11) output(41,eq,2) output(41,eq,4) output(41,eq,10) output(1,eq,11) output(1,eq,2) output(1,eq,4) output(1,eq,10) output(11,eq,2) output(11,eq,4) output(11,eq,10) output(2,eq,4) output(2,eq,10) output(33,eq,44) output(33,eq,84) output(4,eq,10) output(44,eq,84)
Optimization: 26 3
Answer: 7
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,11),1,for(atom(hasPrice(0))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(1,better,11) output(1,better,4) output(1,better,44) output(1,better,84) output(2,better,4) output(2,better,44) output(2,better,84) output(10,better,44) output(10,better,84) output(13,better,11) output(13,better,4) output(13,better,44) output(13,better,84) output(33,better,4) output(33,better,44) output(33,better,84) output(41,better,11) output(41,better,4) output(41,better,44) output(41,better,84) output(4,worse,10) output(11,worse,2) output(11,worse,33) output(11,worse,10) output(13,eq,41) output(13,eq,1) output(13,eq,2) output(13,eq,33) output(13,eq,10) output(41,eq,1) output(41,eq,2) output(41,eq,33) output(41,eq,10) output(1,eq,2) output(1,eq,33) output(1,eq,10) output(11,eq,4) output(11,eq,44) output(11,eq,84) output(2,eq,33) output(2,eq,10) output(33,eq,10) output(4,eq,44) output(4,eq,84) output(44,eq,84)
Optimization: 25 4
Answer: 8
preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,12),1,for(atom(hasOftenSold(1))),10) preference(1,(1,13),1,for(atom(hasPrice(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(1,better,33) output(1,better,4) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,4) output(2,better,44) output(2,better,84) output(10,better,44) output(10,better,84) output(11,better,33) output(11,better,4) output(11,better,44) output(11,better,84) output(13,better,33) output(13,better,4) output(13,better,44) output(13,better,84) output(41,better,33) output(41,better,4) output(41,better,44) output(41,better,84) output(4,worse,10) output(33,worse,10) output(13,eq,41) output(13,eq,1) output(13,eq,11) output(13,eq,2) output(13,eq,10) output(41,eq,1) output(41,eq,11) output(41,eq,2) output(41,eq,10) output(1,eq,11) output(1,eq,2) output(1,eq,10) output(11,eq,2) output(11,eq,10) output(2,eq,10) output(33,eq,4) output(33,eq,44) output(33,eq,84) output(4,eq,44) output(4,eq,84) output(44,eq,84)
Optimization: 23 4
Answer: 9
preference(1,(1,1),1,for(neg(atom(hasPrice(2)))),1) preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,3),1,for(neg(atom(hasOftenSold(0)))),8) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(3)))),9) preference(1,(1,9),1,for(neg(atom(hasOiliness(1)))),7) preference(1,(1,4),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,5),1,for(atom(hasOftenSold(2))),3) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,8),1,for(atom(hasOftenSold(1))),4) preference(1,(1,10),1,for(atom(hasPrice(1))),6) preference(1,(1,11),1,for(atom(hasOftenSold(3))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),2) preference(1,less(weight)) output(1,better,11) output(1,better,2) output(1,better,33) output(1,better,4) output(1,better,10) output(2,better,10) output(4,better,10) output(11,better,2) output(11,better,10) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(33,better,10) output(41,better,1) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,84) output(44,better,84) output(1,worse,44) output(1,worse,84) output(2,worse,33) output(2,worse,4) output(2,worse,44) output(2,worse,84) output(4,worse,44) output(4,worse,84) output(10,worse,44) output(10,worse,84) output(11,worse,44) output(11,worse,84) output(13,worse,41) output(13,worse,44) output(13,worse,84) output(33,worse,44) output(33,worse,84) output(13,eq,1) output(41,eq,44) output(11,eq,33) output(11,eq,4) output(33,eq,4)
Optimization: 22 14
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,3),1,for(neg(atom(hasOftenSold(0)))),8) preference(1,(1,4),1,for(neg(atom(hasOiliness(2)))),6) preference(1,(1,7),1,for(neg(atom(hasOiliness(1)))),7) preference(1,(1,8),1,for(neg(atom(hasPrice(2)))),1) preference(1,(1,1),1,for(atom(hasPrice(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,6),1,for(atom(hasOiliness(2))),9) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,10),1,for(atom(hasOftenSold(3))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(10))),10) preference(1,(1,12),1,for(atom(hasOftenSold(1))),4) preference(1,(1,13),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),2) preference(1,less(weight)) output(2,better,33) output(2,better,4) output(2,better,10) output(2,better,84) output(4,better,10) output(4,better,84) output(11,better,33) output(11,better,10) output(11,better,84) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,84) output(33,better,10) output(33,better,84) output(41,better,1) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,84) output(44,better,84) output(1,worse,11) output(1,worse,2) output(1,worse,33) output(1,worse,4) output(1,worse,10) output(1,worse,44) output(1,worse,84) output(2,worse,44) output(4,worse,44) output(10,worse,44) output(11,worse,2) output(11,worse,4) output(11,worse,44) output(13,worse,41) output(13,worse,44) output(33,worse,4) output(33,worse,44) output(41,eq,44) output(10,eq,84)
Optimization: 19 14
Answer: 11
preference(1,(1,2),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,3),1,for(neg(atom(hasOftenSold(0)))),8) preference(1,(1,4),1,for(neg(atom(hasOiliness(2)))),6) preference(1,(1,7),1,for(neg(atom(hasOiliness(1)))),7) preference(1,(1,8),1,for(neg(atom(hasPrice(2)))),1) preference(1,(1,11),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,1),1,for(atom(hasPrice(1))),2) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,6),1,for(atom(hasOiliness(2))),9) preference(1,(1,9),1,for(atom(hasMinorGrp(3))),10) preference(1,(1,10),1,for(atom(hasOftenSold(3))),5) preference(1,(1,12),1,for(atom(hasOftenSold(1))),4) preference(1,(1,13),1,for(atom(hasOftenSold(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),2) preference(1,less(weight)) output(2,better,33) output(2,better,4) output(2,better,10) output(2,better,44) output(2,better,84) output(11,better,33) output(11,better,4) output(11,better,10) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,4) output(33,better,10) output(33,better,84) output(41,better,1) output(41,better,11) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,84) output(44,better,84) output(1,worse,11) output(1,worse,2) output(1,worse,33) output(1,worse,4) output(1,worse,10) output(1,worse,44) output(1,worse,84) output(4,worse,10) output(4,worse,44) output(4,worse,84) output(10,worse,44) output(11,worse,2) output(11,worse,44) output(33,worse,44) output(41,worse,2) output(41,eq,44) output(10,eq,84)
Optimization: 17 14
Answer: 12
preference(1,(1,1),1,for(neg(atom(hasOiliness(1)))),6) preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,5),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,3),1,for(atom(hasOiliness(1))),9) preference(1,(1,7),1,for(atom(hasPrice(0))),6) preference(1,(1,8),1,for(atom(hasPrice(1))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,11),1,for(atom(hasPrice(2))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),4) preference(1,(1,13),1,for(atom(hasOiliness(0))),9) preference(1,(1,14),1,for(atom(hasOftenSold(3))),5) preference(1,less(weight)) output(1,better,11) output(1,better,84) output(2,better,33) output(2,better,4) output(2,better,44) output(2,better,84) output(4,better,84) output(10,better,44) output(10,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,4) output(33,better,44) output(33,better,84) output(41,better,1) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,44) output(41,better,84) output(44,better,84) output(1,worse,2) output(1,worse,33) output(1,worse,10) output(1,worse,44) output(2,worse,10) output(4,worse,10) output(4,worse,44) output(11,worse,2) output(11,worse,33) output(11,worse,4) output(11,worse,10) output(11,worse,44) output(11,worse,84) output(33,worse,10) output(41,worse,10) output(1,eq,4)
Optimization: 16 14
Answer: 13
preference(1,(1,1),1,for(neg(atom(hasOiliness(1)))),6) preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,5),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,6),1,for(neg(atom(hasMinorGrp(0)))),2) preference(1,(1,3),1,for(atom(hasOiliness(1))),9) preference(1,(1,7),1,for(atom(hasPrice(0))),6) preference(1,(1,8),1,for(atom(hasPrice(1))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,11),1,for(atom(hasOiliness(2))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),4) preference(1,(1,13),1,for(atom(hasOiliness(0))),9) preference(1,(1,14),1,for(atom(hasOftenSold(3))),5) preference(1,less(weight)) output(1,better,11) output(1,better,84) output(2,better,33) output(2,better,4) output(2,better,10) output(2,better,44) output(2,better,84) output(4,better,84) output(10,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,4) output(33,better,10) output(33,better,44) output(33,better,84) output(41,better,1) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,44) output(41,better,84) output(44,better,84) output(1,worse,2) output(1,worse,33) output(1,worse,10) output(1,worse,44) output(4,worse,10) output(4,worse,44) output(10,worse,44) output(11,worse,2) output(11,worse,33) output(11,worse,4) output(11,worse,10) output(11,worse,44) output(11,worse,84) output(1,eq,4)
Optimization: 14 14
Answer: 14
preference(1,(1,1),1,for(neg(atom(hasMinorGrp(3)))),2) preference(1,(1,2),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),7) preference(1,(1,5),1,for(neg(atom(hasMajorGrp(0)))),8) preference(1,(1,3),1,for(atom(hasOiliness(1))),9) preference(1,(1,6),1,for(atom(hasPrice(2))),9) preference(1,(1,7),1,for(atom(hasPrice(0))),6) preference(1,(1,8),1,for(atom(hasPrice(1))),3) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,11),1,for(atom(hasOiliness(2))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),4) preference(1,(1,13),1,for(atom(hasOiliness(0))),9) preference(1,(1,14),1,for(atom(hasOftenSold(3))),5) preference(1,less(weight)) output(1,better,11) output(1,better,33) output(1,better,4) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,4) output(2,better,44) output(2,better,84) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,44) output(33,better,84) output(41,better,1) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,44) output(41,better,84) output(44,better,84) output(1,worse,2) output(1,worse,10) output(2,worse,10) output(4,worse,10) output(11,worse,2) output(11,worse,33) output(11,worse,4) output(11,worse,10) output(11,worse,44) output(11,worse,84) output(33,worse,10) output(41,worse,10) output(33,eq,4)
Optimization: 13 14
Answer: 15
preference(1,(1,1),1,for(atom(hasOiliness(1))),4) preference(1,(1,2),1,for(atom(hasPrice(3))),8) preference(1,(1,3),1,for(atom(hasPrice(1))),9) preference(1,(1,4),1,for(atom(hasPrice(2))),10) preference(1,(1,5),1,for(atom(hasOiliness(0))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),3) preference(1,(1,7),1,for(atom(hasOftenSold(0))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,9),1,for(atom(hasOiliness(2))),4) preference(1,(1,10),1,for(atom(hasOftenSold(1))),6) preference(1,(1,11),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,12),1,for(atom(hasPrice(0))),10) preference(1,(1,13),1,for(atom(hasOftenSold(3))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),3) preference(1,less(weight)) output(1,better,4) output(1,better,44) output(2,better,33) output(2,better,4) output(2,better,44) output(2,better,84) output(4,better,44) output(10,better,44) output(10,better,84) output(11,better,2) output(11,better,33) output(11,better,4) output(11,better,10) output(11,better,44) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,4) output(33,better,44) output(41,better,1) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,44) output(41,better,84) output(1,worse,11) output(1,worse,2) output(1,worse,33) output(1,worse,10) output(1,worse,84) output(4,worse,10) output(4,worse,84) output(33,worse,10) output(41,worse,11) output(44,worse,84) output(2,eq,10) output(33,eq,84)
Optimization: 12 14
Answer: 16
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),6) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(3)))),4) preference(1,(1,2),1,for(atom(hasPrice(1))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasOftenSold(3))),8) preference(1,(1,5),1,for(atom(hasPrice(0))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,7),1,for(atom(hasPrice(3))),9) preference(1,(1,9),1,for(atom(hasOiliness(1))),5) preference(1,(1,11),1,for(atom(hasOiliness(2))),9) preference(1,(1,12),1,for(atom(hasOftenSold(0))),2) preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,less(weight)) output(1,better,11) output(1,better,2) output(1,better,33) output(1,better,4) output(1,better,10) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,4) output(2,better,10) output(2,better,44) output(2,better,84) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(11,better,44) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,4) output(33,better,44) output(33,better,84) output(41,better,11) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,44) output(41,better,84) output(4,worse,10) output(11,worse,2) output(11,worse,33) output(11,worse,10) output(33,worse,10) output(41,worse,1) output(41,worse,2) output(11,eq,4) output(44,eq,84)
Optimization: 9 14
Answer: 17
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),6) preference(1,(1,8),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(3)))),4) preference(1,(1,2),1,for(atom(hasPrice(1))),6) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,4),1,for(atom(hasOftenSold(3))),8) preference(1,(1,5),1,for(atom(hasPrice(0))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(8))),10) preference(1,(1,7),1,for(atom(hasPrice(3))),9) preference(1,(1,9),1,for(atom(hasOiliness(1))),5) preference(1,(1,11),1,for(atom(hasOiliness(2))),9) preference(1,(1,12),1,for(atom(hasOftenSold(0))),2) preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,less(weight)) output(1,better,11) output(1,better,2) output(1,better,33) output(1,better,4) output(1,better,10) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,4) output(2,better,10) output(2,better,44) output(2,better,84) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(11,better,44) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,4) output(33,better,44) output(33,better,84) output(41,better,11) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,44) output(41,better,84) output(44,better,84) output(4,worse,10) output(11,worse,2) output(11,worse,33) output(11,worse,10) output(33,worse,10) output(41,worse,1) output(41,worse,2) output(11,eq,4)
Optimization: 8 14
Answer: 18
preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,2),1,for(atom(hasOiliness(2))),1) preference(1,(1,3),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,5),1,for(atom(hasOftenSold(1))),8) preference(1,(1,6),1,for(atom(hasOftenSold(0))),6) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasOftenSold(3))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,12),1,for(atom(hasMinorGrp(8))),2) preference(1,(1,13),1,for(atom(hasPrice(1))),3) preference(1,(1,14),1,for(atom(hasPrice(2))),5) preference(1,less(weight)) output(1,better,11) output(1,better,2) output(1,better,33) output(1,better,4) output(1,better,10) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,10) output(2,better,44) output(2,better,84) output(4,better,10) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(11,better,2) output(11,better,33) output(11,better,4) output(11,better,10) output(11,better,44) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,44) output(33,better,84) output(41,better,33) output(41,better,10) output(41,better,44) output(41,better,84) output(44,better,84) output(33,worse,4) output(33,worse,10) output(41,worse,1) output(41,worse,11) output(41,worse,2) output(41,worse,4) output(2,eq,4)
Optimization: 7 14
Answer: 19
preference(1,(1,2),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),10) preference(1,(1,13),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,14),1,for(neg(atom(hasOftenSold(3)))),3) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,3),1,for(atom(hasPrice(0))),7) preference(1,(1,5),1,for(atom(hasOftenSold(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasOftenSold(3))),5) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),3) preference(1,less(weight)) output(1,better,11) output(1,better,2) output(1,better,33) output(1,better,4) output(1,better,10) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,10) output(2,better,44) output(2,better,84) output(4,better,10) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(11,better,2) output(11,better,33) output(11,better,10) output(11,better,44) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,44) output(33,better,84) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,10) output(41,better,44) output(41,better,84) output(44,better,84) output(2,worse,4) output(11,worse,4) output(33,worse,4) output(33,worse,10) output(41,worse,1) output(41,eq,4)
Optimization: 6 14
Answer: 20
preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),10) preference(1,(1,14),1,for(neg(atom(hasOftenSold(3)))),3) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,3),1,for(atom(hasPrice(0))),7) preference(1,(1,5),1,for(atom(hasOftenSold(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasOftenSold(3))),5) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,12),1,for(atom(hasPrice(1))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(8))),1) preference(1,less(weight)) output(1,better,11) output(1,better,2) output(1,better,33) output(1,better,4) output(1,better,10) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,10) output(2,better,44) output(2,better,84) output(4,better,10) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(11,better,2) output(11,better,33) output(11,better,10) output(11,better,44) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,44) output(33,better,84) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,44) output(41,better,84) output(44,better,84) output(2,worse,4) output(33,worse,4) output(33,worse,10) output(41,worse,1) output(11,eq,4)
Optimization: 5 14
Answer: 21
preference(1,(1,3),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,4),1,for(neg(atom(hasPrice(1)))),10) preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),8) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,2),1,for(atom(hasPrice(0))),2) preference(1,(1,5),1,for(atom(hasOftenSold(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,7),1,for(atom(hasOiliness(1))),2) preference(1,(1,8),1,for(atom(hasOftenSold(3))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,14),1,for(atom(hasPrice(1))),3) preference(1,less(weight)) output(1,better,11) output(1,better,2) output(1,better,33) output(1,better,4) output(1,better,10) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,10) output(2,better,44) output(2,better,84) output(4,better,10) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(11,better,2) output(11,better,33) output(11,better,4) output(11,better,10) output(11,better,44) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,44) output(33,better,84) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,44) output(41,better,84) output(44,better,84) output(2,worse,4) output(33,worse,4) output(41,worse,1) output(33,eq,10)
Optimization: 4 14
Answer: 22
preference(1,(1,6),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,1),1,for(atom(hasOftenSold(3))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,4),1,for(atom(hasPrice(1))),1) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,7),1,for(atom(hasPrice(0))),7) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(8))),3) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,12),1,for(atom(hasPrice(2))),3) preference(1,(1,13),1,for(atom(hasPrice(3))),4) preference(1,(1,14),1,for(atom(hasOftenSold(1))),1) preference(1,less(weight)) output(1,better,11) output(1,better,2) output(1,better,33) output(1,better,4) output(1,better,10) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,4) output(2,better,10) output(2,better,44) output(2,better,84) output(4,better,10) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(11,better,2) output(11,better,33) output(11,better,4) output(11,better,10) output(11,better,44) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,4) output(33,better,10) output(33,better,44) output(33,better,84) output(41,better,1) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,44) output(41,better,84) output(44,better,84)
Optimization: 0 13
Progression : 0 [ 1;13] (Error: 12)
Progression : 0 [ 2;13] (Error: 5.5)
Answer: 23
preference(1,(1,11),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),5) preference(1,(1,3),1,for(atom(hasPrice(3))),4) preference(1,(1,4),1,for(atom(hasPrice(0))),9) preference(1,(1,5),1,for(atom(hasOftenSold(3))),9) preference(1,(1,6),1,for(atom(hasOftenSold(1))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,10),1,for(atom(hasOiliness(2))),1) preference(1,(1,12),1,for(atom(hasOiliness(1))),2) preference(1,(1,13),1,for(atom(hasOftenSold(0))),4) preference(1,less(weight)) output(1,better,11) output(1,better,2) output(1,better,33) output(1,better,4) output(1,better,10) output(1,better,44) output(1,better,84) output(2,better,33) output(2,better,4) output(2,better,10) output(2,better,44) output(2,better,84) output(4,better,10) output(4,better,44) output(4,better,84) output(10,better,44) output(10,better,84) output(11,better,2) output(11,better,33) output(11,better,4) output(11,better,10) output(11,better,44) output(11,better,84) output(13,better,41) output(13,better,1) output(13,better,11) output(13,better,2) output(13,better,33) output(13,better,4) output(13,better,10) output(13,better,44) output(13,better,84) output(33,better,4) output(33,better,10) output(33,better,44) output(33,better,84) output(41,better,1) output(41,better,11) output(41,better,2) output(41,better,33) output(41,better,4) output(41,better,10) output(41,better,44) output(41,better,84) output(44,better,84)
Optimization: 0 12
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.137 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 23+
  Optimum    : unknown
Optimization : 0 12
Calls        : 1
Time         : 598.243s (Solving: 584.04s 1st Model: 0.07s Unsat: 0.00s)
CPU Time     : 2349.881s
Threads      : 4        (Winner: 4)

Choices      : 9655756  (Domain: 14148)
Conflicts    : 1921805  (Analyzed: 1921803)
Restarts     : 1833     (Average: 1048.45 Last: 191443)
Model-Level  : 1974.3  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1927512  (Deleted: 1753040)
  Binary     : 832      (Ratio:   0.04%)
  Ternary    : 286      (Ratio:   0.01%)
  Conflict   : 1921803  (Average Length: 1861.1 Ratio:  99.70%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 5709     (Average Length:  187.6 Ratio:   0.30%) 
  Distributed: 1903     (Ratio:   0.10% Average LBD: 3.36) 
  Integrated : 5709     (Ratio: 300.00% Unit: 14 Average Jumps: 76.57)
Backjumps    : 1921803  (Average:  3.16 Max: 3021 Sum: 6074018)
  Executed   : 1921802  (Average:  3.16 Max: 3021 Sum: 6074009 Ratio: 100.00%)
  Bounded    : 1        (Average:  9.00 Max:   9 Sum:      9 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(hasPrice(2))  ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  8 :: not atom(hasOftenSold(0))  ; 
  3 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasOftenSold(2)) ; 
  9 :: not atom(hasMinorGrp(3))  ; 
  1 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  7 :: not atom(hasOiliness(1))  ; 
  6 :: atom(hasPrice(1)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasMinorGrp(10)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(1)) ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  8 :: not atom(hasOftenSold(0))  ; 
  6 :: not atom(hasOiliness(2))  ; 
  3 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(hasOiliness(2)) ; 
  7 :: not atom(hasOiliness(1))  ; 
  1 :: not atom(hasPrice(2))  ; 
  10 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasMinorGrp(10)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasPrice(1)) ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  8 :: not atom(hasOftenSold(0))  ; 
  6 :: not atom(hasOiliness(2))  ; 
  3 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(hasOiliness(2)) ; 
  7 :: not atom(hasOiliness(1))  ; 
  1 :: not atom(hasPrice(2))  ; 
  10 :: atom(hasMinorGrp(3)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  9 :: not atom(hasPrice(1))  ; 
  4 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasOiliness(1))  ; 
  1 :: not atom(hasOftenSold(1))  ; 
  9 :: atom(hasOiliness(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  6 :: atom(hasPrice(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasPrice(2)) ; 
  4 :: atom(hasMinorGrp(10)) ; 
  9 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasOiliness(1))  ; 
  1 :: not atom(hasOftenSold(1))  ; 
  9 :: atom(hasOiliness(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  2 :: not atom(hasMinorGrp(0))  ; 
  6 :: atom(hasPrice(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasMinorGrp(10)) ; 
  9 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasMinorGrp(3))  ; 
  1 :: not atom(hasOftenSold(1))  ; 
  9 :: atom(hasOiliness(1)) ; 
  7 :: not atom(hasPrice(1))  ; 
  8 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasPrice(2)) ; 
  6 :: atom(hasPrice(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasMinorGrp(3)) ; 
  6 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasMinorGrp(10)) ; 
  9 :: atom(hasOiliness(0)) ; 
  5 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasPrice(3)) ; 
  9 :: atom(hasPrice(1)) ; 
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasPrice(0)) ; 
  6 :: atom(hasOftenSold(3)) ; 
  3 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasOftenSold(3))  ; 
  6 :: atom(hasPrice(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasOftenSold(3)) ; 
  9 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasPrice(3)) ; 
  3 :: not atom(hasMinorGrp(0))  ; 
  5 :: atom(hasOiliness(1)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasPrice(2)) ; 
  4 :: not atom(hasMinorGrp(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: not atom(hasOftenSold(3))  ; 
  6 :: atom(hasPrice(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasOftenSold(3)) ; 
  7 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasPrice(3)) ; 
  3 :: not atom(hasMinorGrp(0))  ; 
  5 :: atom(hasOiliness(1)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  9 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasPrice(2)) ; 
  4 :: not atom(hasMinorGrp(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(1)) ; 
  1 :: atom(hasOiliness(2)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  10 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  2 :: atom(hasMinorGrp(8)) ; 
  3 :: atom(hasPrice(1)) ; 
  5 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasStyle(1))  ; 
  7 :: atom(hasPrice(0)) ; 
  10 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasPrice(1)) ; 
  5 :: not atom(hasMajorGrp(0))  ; 
  3 :: not atom(hasOftenSold(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  7 :: atom(hasPrice(0)) ; 
  10 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasMinorGrp(10)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasPrice(1)) ; 
  1 :: atom(hasMinorGrp(8)) ; 
  3 :: not atom(hasOftenSold(3))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasPrice(0)) ; 
  5 :: not atom(hasMajorGrp(0))  ; 
  10 :: not atom(hasPrice(1))  ; 
  8 :: atom(hasOftenSold(1)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasOftenSold(3)) ; 
  8 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasMinorGrp(8)) ; 
  3 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasOftenSold(3)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasPrice(1)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  7 :: atom(hasPrice(0)) ; 
  7 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasMinorGrp(8)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasPrice(2)) ; 
  4 :: atom(hasPrice(3)) ; 
  1 :: atom(hasOftenSold(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasPrice(3)) ; 
  9 :: atom(hasPrice(0)) ; 
  9 :: atom(hasOftenSold(3)) ; 
  6 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(8)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasOiliness(2)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  2 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasOftenSold(0)) 
}.
