asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(2,eq,15) output(2,eq,13) output(2,eq,1) output(2,eq,6) output(2,eq,25) output(2,eq,46) output(2,eq,74) output(2,eq,56) output(2,eq,55) output(15,eq,13) output(15,eq,1) output(15,eq,6) output(15,eq,25) output(15,eq,46) output(15,eq,74) output(15,eq,56) output(15,eq,55) output(13,eq,1) output(13,eq,6) output(13,eq,25) output(13,eq,46) output(13,eq,74) output(13,eq,56) output(13,eq,55) output(1,eq,6) output(1,eq,25) output(1,eq,46) output(1,eq,74) output(1,eq,56) output(1,eq,55) output(6,eq,25) output(6,eq,46) output(6,eq,74) output(6,eq,56) output(6,eq,55) output(25,eq,46) output(25,eq,74) output(25,eq,56) output(25,eq,55) output(46,eq,74) output(46,eq,56) output(46,eq,55) output(74,eq,56) output(74,eq,55) output(56,eq,55)
Optimization: 45 0
Answer: 2
preference(1,(1,1),1,for(neg(atom(hasStyle(0)))),10) preference(1,less(weight)) output(74,better,56) output(74,better,55) output(1,worse,74) output(2,worse,74) output(6,worse,74) output(13,worse,74) output(15,worse,74) output(25,worse,74) output(46,worse,74) output(2,eq,15) output(2,eq,13) output(2,eq,1) output(2,eq,6) output(2,eq,25) output(2,eq,46) output(2,eq,56) output(2,eq,55) output(15,eq,13) output(15,eq,1) output(15,eq,6) output(15,eq,25) output(15,eq,46) output(15,eq,56) output(15,eq,55) output(13,eq,1) output(13,eq,6) output(13,eq,25) output(13,eq,46) output(13,eq,56) output(13,eq,55) output(1,eq,6) output(1,eq,25) output(1,eq,46) output(1,eq,56) output(1,eq,55) output(6,eq,25) output(6,eq,46) output(6,eq,56) output(6,eq,55) output(25,eq,46) output(25,eq,56) output(25,eq,55) output(46,eq,56) output(46,eq,55) output(56,eq,55)
Optimization: 43 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasOftenSold(3)))),9) preference(1,(1,2),1,for(neg(atom(hasOiliness(1)))),9) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),9) preference(1,(1,9),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,10),1,for(neg(atom(hasStyle(0)))),10) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(1)))),9) preference(1,(1,3),1,for(atom(hasOftenSold(2))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(3))),9) preference(1,(1,5),1,for(atom(hasOiliness(0))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,8),1,for(atom(hasOftenSold(0))),9) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),9) preference(1,(1,13),1,for(atom(hasStyle(1))),10) preference(1,less(weight)) output(74,better,56) output(74,better,55) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,56) output(2,better,55) output(1,worse,74) output(2,worse,74) output(6,worse,74) output(13,worse,74) output(15,worse,74) output(25,worse,74) output(46,worse,74) output(15,eq,13) output(15,eq,1) output(15,eq,6) output(15,eq,25) output(15,eq,46) output(15,eq,56) output(15,eq,55) output(13,eq,1) output(13,eq,6) output(13,eq,25) output(13,eq,46) output(13,eq,56) output(13,eq,55) output(1,eq,6) output(1,eq,25) output(1,eq,46) output(1,eq,56) output(1,eq,55) output(6,eq,25) output(6,eq,46) output(6,eq,56) output(6,eq,55) output(25,eq,46) output(25,eq,56) output(25,eq,55) output(46,eq,56) output(46,eq,55) output(56,eq,55)
Optimization: 35 14
Answer: 4
preference(1,(1,1),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,14),1,for(atom(hasPrice(2))),10) preference(1,less(weight)) output(1,better,25) output(1,better,74) output(2,better,25) output(2,better,74) output(6,better,25) output(6,better,74) output(13,better,25) output(13,better,74) output(15,better,25) output(15,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(2,eq,15) output(2,eq,13) output(2,eq,1) output(2,eq,6) output(2,eq,46) output(2,eq,56) output(2,eq,55) output(15,eq,13) output(15,eq,1) output(15,eq,6) output(15,eq,46) output(15,eq,56) output(15,eq,55) output(13,eq,1) output(13,eq,6) output(13,eq,46) output(13,eq,56) output(13,eq,55) output(1,eq,6) output(1,eq,46) output(1,eq,56) output(1,eq,55) output(6,eq,46) output(6,eq,56) output(6,eq,55) output(25,eq,74) output(46,eq,56) output(46,eq,55) output(56,eq,55)
Optimization: 34 2
Answer: 5
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,13),1,for(atom(hasPrice(2))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(2,better,6) output(2,better,25) output(2,better,74) output(13,better,6) output(13,better,25) output(13,better,74) output(15,better,6) output(15,better,25) output(15,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(6,worse,46) output(6,worse,56) output(6,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(2,eq,15) output(2,eq,13) output(2,eq,1) output(2,eq,46) output(2,eq,56) output(2,eq,55) output(15,eq,13) output(15,eq,1) output(15,eq,46) output(15,eq,56) output(15,eq,55) output(13,eq,1) output(13,eq,46) output(13,eq,56) output(13,eq,55) output(1,eq,46) output(1,eq,56) output(1,eq,55) output(6,eq,25) output(6,eq,74) output(25,eq,74) output(46,eq,56) output(46,eq,55) output(56,eq,55)
Optimization: 32 3
Answer: 6
preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,11),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasStyle(0))),9) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(2,better,13) output(2,better,6) output(2,better,25) output(2,better,74) output(6,better,74) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,74) output(25,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(6,worse,46) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,46) output(13,worse,56) output(13,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(2,eq,15) output(2,eq,1) output(2,eq,46) output(2,eq,56) output(2,eq,55) output(15,eq,1) output(15,eq,46) output(15,eq,56) output(15,eq,55) output(13,eq,6) output(13,eq,25) output(1,eq,46) output(1,eq,56) output(1,eq,55) output(6,eq,25) output(46,eq,56) output(46,eq,55) output(56,eq,55)
Optimization: 30 5
Answer: 7
preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,1),1,for(atom(hasMinorGrp(1))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,11),1,for(atom(hasOftenSold(1))),10) preference(1,(1,12),1,for(atom(hasOftenSold(3))),1) preference(1,(1,14),1,for(atom(hasStyle(0))),9) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(2,better,13) output(2,better,6) output(2,better,25) output(2,better,74) output(6,better,74) output(13,better,6) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,74) output(25,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(1,worse,46) output(1,worse,56) output(1,worse,55) output(2,worse,15) output(2,worse,1) output(2,worse,46) output(2,worse,56) output(2,worse,55) output(6,worse,25) output(6,worse,46) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,46) output(13,worse,56) output(13,worse,55) output(15,worse,1) output(15,worse,46) output(15,worse,56) output(15,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(13,eq,25) output(46,eq,56) output(46,eq,55) output(56,eq,55)
Optimization: 29 7
Answer: 8
preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,11),1,for(atom(hasOftenSold(1))),10) preference(1,(1,12),1,for(atom(hasOftenSold(3))),1) preference(1,(1,14),1,for(atom(hasStyle(0))),9) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(2,better,13) output(2,better,6) output(2,better,25) output(2,better,74) output(6,better,74) output(13,better,6) output(13,better,25) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,74) output(25,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(1,worse,46) output(1,worse,56) output(1,worse,55) output(2,worse,46) output(2,worse,56) output(2,worse,55) output(6,worse,25) output(6,worse,46) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,46) output(13,worse,56) output(13,worse,55) output(15,worse,46) output(15,worse,56) output(15,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(2,eq,15) output(2,eq,1) output(15,eq,1) output(46,eq,56) output(46,eq,55) output(56,eq,55)
Optimization: 28 7
Answer: 9
preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,12),1,for(atom(hasOftenSold(3))),1) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasStyle(0))),9) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(2,better,13) output(2,better,6) output(2,better,25) output(2,better,74) output(6,better,25) output(6,better,74) output(13,better,6) output(13,better,25) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,74) output(25,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(1,worse,46) output(1,worse,56) output(1,worse,55) output(2,worse,46) output(2,worse,56) output(2,worse,55) output(6,worse,46) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,46) output(13,worse,56) output(13,worse,55) output(15,worse,46) output(15,worse,56) output(15,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(2,eq,15) output(2,eq,1) output(15,eq,1) output(46,eq,56) output(46,eq,55) output(56,eq,55)
Optimization: 27 8
Answer: 10
preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,8),1,for(atom(hasOftenSold(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,12),1,for(atom(hasOftenSold(3))),1) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasStyle(0))),9) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(2,better,15) output(2,better,13) output(2,better,6) output(2,better,25) output(2,better,74) output(6,better,25) output(6,better,74) output(13,better,6) output(13,better,25) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,74) output(25,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(1,worse,46) output(1,worse,56) output(1,worse,55) output(2,worse,46) output(2,worse,56) output(2,worse,55) output(6,worse,46) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,46) output(13,worse,56) output(13,worse,55) output(15,worse,1) output(15,worse,46) output(15,worse,56) output(15,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(2,eq,1) output(46,eq,56) output(46,eq,55) output(56,eq,55)
Optimization: 26 8
Answer: 11
preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,2),1,for(atom(hasPrice(1))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,5),1,for(atom(hasPrice(3))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,7),1,for(atom(hasStyle(0))),9) preference(1,(1,8),1,for(atom(hasOftenSold(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),5) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(6,better,25) output(6,better,74) output(13,better,6) output(13,better,25) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,74) output(25,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(1,worse,55) output(6,worse,46) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,46) output(13,worse,56) output(13,worse,55) output(15,worse,1) output(15,worse,46) output(15,worse,56) output(15,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(46,worse,55) output(56,worse,55) output(2,eq,55) output(1,eq,46) output(1,eq,56) output(46,eq,56)
Optimization: 23 12
Answer: 12
preference(1,(1,1),1,for(atom(hasStyle(0))),9) preference(1,(1,2),1,for(atom(hasPrice(1))),4) preference(1,(1,3),1,for(atom(hasPrice(3))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,8),1,for(atom(hasOftenSold(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),5) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,74) output(2,better,56) output(6,better,25) output(6,better,74) output(13,better,6) output(13,better,25) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,74) output(25,better,74) output(46,better,74) output(46,better,56) output(46,better,55) output(74,worse,56) output(74,worse,55) output(1,worse,46) output(1,worse,55) output(2,worse,46) output(6,worse,46) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,46) output(13,worse,56) output(13,worse,55) output(15,worse,1) output(15,worse,46) output(15,worse,56) output(15,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(56,worse,55) output(2,eq,55) output(1,eq,56)
Optimization: 22 10
Answer: 13
preference(1,(1,1),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,2),1,for(atom(hasPrice(1))),4) preference(1,(1,3),1,for(atom(hasPrice(3))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(hasStyle(0))),9) preference(1,(1,8),1,for(atom(hasOftenSold(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),5) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,74) output(2,better,56) output(2,better,55) output(6,better,25) output(6,better,74) output(13,better,6) output(13,better,25) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,74) output(25,better,74) output(46,better,74) output(46,better,56) output(46,better,55) output(74,worse,56) output(74,worse,55) output(1,worse,46) output(2,worse,46) output(6,worse,46) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,46) output(13,worse,56) output(13,worse,55) output(15,worse,1) output(15,worse,46) output(15,worse,56) output(15,worse,55) output(25,worse,46) output(25,worse,56) output(25,worse,55) output(1,eq,56) output(1,eq,55) output(56,eq,55)
Optimization: 21 11
Answer: 14
preference(1,(1,1),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,2),1,for(atom(hasPrice(1))),4) preference(1,(1,3),1,for(atom(hasStyle(0))),9) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,8),1,for(atom(hasOftenSold(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),1) preference(1,(1,11),1,for(atom(hasPrice(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,13),1,for(atom(hasPrice(3))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),5) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,46) output(1,better,74) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(6,better,25) output(6,better,46) output(6,better,74) output(13,better,6) output(13,better,25) output(13,better,46) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,46) output(15,better,74) output(25,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(1,worse,55) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,56) output(13,worse,55) output(15,worse,1) output(15,worse,56) output(15,worse,55) output(25,worse,56) output(25,worse,55) output(46,worse,56) output(46,worse,55) output(56,worse,55) output(2,eq,55) output(1,eq,56) output(25,eq,46)
Optimization: 19 11
Answer: 15
preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),8) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),4) preference(1,(1,2),1,for(atom(hasPrice(1))),4) preference(1,(1,3),1,for(atom(hasOiliness(2))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,8),1,for(atom(hasOftenSold(2))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,11),1,for(atom(hasPrice(2))),10) preference(1,(1,12),1,for(atom(hasMinorGrp(3))),1) preference(1,(1,13),1,for(atom(hasPrice(3))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),5) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,46) output(1,better,74) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(2,better,55) output(6,better,25) output(6,better,46) output(6,better,74) output(13,better,6) output(13,better,25) output(13,better,46) output(13,better,74) output(15,better,13) output(15,better,6) output(15,better,25) output(15,better,46) output(15,better,74) output(25,better,46) output(25,better,74) output(46,better,74) output(74,worse,56) output(74,worse,55) output(6,worse,56) output(6,worse,55) output(13,worse,1) output(13,worse,56) output(13,worse,55) output(15,worse,1) output(15,worse,56) output(15,worse,55) output(25,worse,56) output(25,worse,55) output(46,worse,56) output(46,worse,55) output(1,eq,56) output(1,eq,55) output(56,eq,55)
Optimization: 17 11
Answer: 16
preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),3) preference(1,(1,3),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,4),1,for(atom(hasOiliness(0))),4) preference(1,(1,5),1,for(atom(hasPrice(2))),1) preference(1,(1,8),1,for(atom(hasOftenSold(2))),2) preference(1,(1,9),1,for(atom(hasMinorGrp(10))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),10) preference(1,less(weight)) output(1,better,6) output(1,better,25) output(1,better,74) output(1,better,56) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(2,better,55) output(6,better,74) output(6,better,56) output(13,better,1) output(13,better,6) output(13,better,25) output(13,better,74) output(13,better,56) output(15,better,13) output(15,better,1) output(15,better,6) output(15,better,25) output(15,better,46) output(15,better,74) output(15,better,56) output(15,better,55) output(25,better,74) output(25,better,56) output(46,better,74) output(46,better,56) output(74,worse,55) output(1,worse,46) output(1,worse,55) output(6,worse,46) output(6,worse,55) output(25,worse,46) output(25,worse,55) output(56,worse,55) output(13,eq,46) output(13,eq,55) output(6,eq,25) output(46,eq,55) output(74,eq,56)
Optimization: 13 11
Answer: 17
preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,4),1,for(atom(hasOiliness(0))),4) preference(1,(1,5),1,for(atom(hasPrice(2))),1) preference(1,(1,8),1,for(atom(hasOftenSold(2))),2) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),9) preference(1,less(weight)) output(74,better,55) output(1,better,6) output(1,better,25) output(1,better,46) output(1,better,74) output(1,better,56) output(1,better,55) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(2,better,55) output(6,better,46) output(6,better,74) output(6,better,56) output(6,better,55) output(13,better,1) output(13,better,6) output(13,better,25) output(13,better,46) output(13,better,74) output(13,better,56) output(13,better,55) output(15,better,13) output(15,better,1) output(15,better,6) output(15,better,25) output(15,better,46) output(15,better,74) output(15,better,56) output(15,better,55) output(25,better,46) output(25,better,74) output(25,better,56) output(25,better,55) output(56,better,55) output(46,worse,74) output(46,worse,56) output(6,eq,25) output(46,eq,55) output(74,eq,56)
Optimization: 5 11
Answer: 18
preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,14),1,for(neg(atom(hasStyle(0)))),8) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),7) preference(1,(1,2),1,for(atom(hasMinorGrp(11))),1) preference(1,(1,3),1,for(atom(hasPrice(2))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,5),1,for(atom(hasOftenSold(1))),1) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),4) preference(1,(1,7),1,for(atom(hasOiliness(2))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,12),1,for(atom(hasOiliness(3))),10) preference(1,(1,13),1,for(atom(hasPrice(0))),2) preference(1,less(weight)) output(74,better,56) output(1,better,6) output(1,better,25) output(1,better,46) output(1,better,74) output(1,better,56) output(1,better,55) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(2,better,55) output(6,better,25) output(6,better,46) output(6,better,74) output(6,better,56) output(6,better,55) output(13,better,1) output(13,better,6) output(13,better,25) output(13,better,46) output(13,better,74) output(13,better,56) output(13,better,55) output(15,better,13) output(15,better,1) output(15,better,6) output(15,better,25) output(15,better,46) output(15,better,74) output(15,better,56) output(15,better,55) output(25,better,46) output(25,better,74) output(25,better,56) output(25,better,55) output(46,better,74) output(46,better,56) output(74,worse,55) output(56,worse,55) output(2,eq,15) output(46,eq,55)
Optimization: 4 14
Answer: 19
preference(1,(1,8),1,for(neg(atom(hasStyle(0)))),4) preference(1,(1,10),1,for(neg(atom(hasMajorGrp(0)))),7) preference(1,(1,14),1,for(neg(atom(hasOftenSold(0)))),9) preference(1,(1,1),1,for(atom(hasMinorGrp(7))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(2))),10) preference(1,(1,3),1,for(atom(hasOiliness(0))),3) preference(1,(1,4),1,for(atom(hasOftenSold(1))),2) preference(1,(1,5),1,for(atom(hasOiliness(2))),10) preference(1,(1,6),1,for(atom(hasOftenSold(0))),6) preference(1,(1,7),1,for(atom(hasOftenSold(2))),1) preference(1,(1,9),1,for(atom(hasPrice(1))),9) preference(1,(1,11),1,for(atom(hasOiliness(3))),8) preference(1,(1,12),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(3))),1) preference(1,less(weight)) output(74,better,56) output(74,better,55) output(1,better,6) output(1,better,25) output(1,better,46) output(1,better,74) output(1,better,56) output(1,better,55) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(2,better,55) output(6,better,25) output(6,better,46) output(6,better,74) output(6,better,56) output(6,better,55) output(13,better,1) output(13,better,6) output(13,better,25) output(13,better,46) output(13,better,74) output(13,better,56) output(13,better,55) output(15,better,13) output(15,better,1) output(15,better,6) output(15,better,25) output(15,better,46) output(15,better,74) output(15,better,56) output(15,better,55) output(25,better,46) output(25,better,74) output(25,better,56) output(25,better,55) output(46,better,74) output(46,better,56) output(46,better,55) output(56,better,55)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 20
preference(1,(1,10),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,2),1,for(atom(hasStyle(0))),1) preference(1,(1,3),1,for(atom(hasOftenSold(1))),3) preference(1,(1,4),1,for(atom(hasStyle(1))),9) preference(1,(1,6),1,for(atom(hasPrice(2))),2) preference(1,(1,7),1,for(atom(hasOiliness(3))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(10))),1) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),10) preference(1,(1,12),1,for(atom(hasPrice(1))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),8) preference(1,less(weight)) output(74,better,56) output(74,better,55) output(1,better,6) output(1,better,25) output(1,better,46) output(1,better,74) output(1,better,56) output(1,better,55) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(2,better,55) output(6,better,25) output(6,better,46) output(6,better,74) output(6,better,56) output(6,better,55) output(13,better,1) output(13,better,6) output(13,better,25) output(13,better,46) output(13,better,74) output(13,better,56) output(13,better,55) output(15,better,13) output(15,better,1) output(15,better,6) output(15,better,25) output(15,better,46) output(15,better,74) output(15,better,56) output(15,better,55) output(25,better,46) output(25,better,74) output(25,better,56) output(25,better,55) output(46,better,74) output(46,better,56) output(46,better,55) output(56,better,55)
Optimization: 0 13
Answer: 21
preference(1,(1,10),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,2),1,for(atom(hasStyle(0))),1) preference(1,(1,3),1,for(atom(hasOftenSold(1))),3) preference(1,(1,4),1,for(atom(hasStyle(1))),9) preference(1,(1,6),1,for(atom(hasPrice(2))),2) preference(1,(1,7),1,for(atom(hasOiliness(3))),2) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),10) preference(1,(1,12),1,for(atom(hasPrice(1))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),8) preference(1,less(weight)) output(74,better,56) output(74,better,55) output(1,better,6) output(1,better,25) output(1,better,46) output(1,better,74) output(1,better,56) output(1,better,55) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(2,better,55) output(6,better,25) output(6,better,46) output(6,better,74) output(6,better,56) output(6,better,55) output(13,better,1) output(13,better,6) output(13,better,25) output(13,better,46) output(13,better,74) output(13,better,56) output(13,better,55) output(15,better,13) output(15,better,1) output(15,better,6) output(15,better,25) output(15,better,46) output(15,better,74) output(15,better,56) output(15,better,55) output(25,better,46) output(25,better,74) output(25,better,56) output(25,better,55) output(46,better,74) output(46,better,56) output(46,better,55) output(56,better,55)
Optimization: 0 12
Answer: 22
preference(1,(1,10),1,for(neg(atom(hasStyle(1)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(3))),4) preference(1,(1,2),1,for(atom(hasStyle(0))),1) preference(1,(1,4),1,for(atom(hasStyle(1))),9) preference(1,(1,5),1,for(atom(hasPrice(2))),5) preference(1,(1,7),1,for(atom(hasOiliness(3))),2) preference(1,(1,9),1,for(atom(hasOftenSold(2))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),10) preference(1,(1,12),1,for(atom(hasPrice(1))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),8) preference(1,less(weight)) output(74,better,56) output(74,better,55) output(1,better,6) output(1,better,25) output(1,better,46) output(1,better,74) output(1,better,56) output(1,better,55) output(2,better,15) output(2,better,13) output(2,better,1) output(2,better,6) output(2,better,25) output(2,better,46) output(2,better,74) output(2,better,56) output(2,better,55) output(6,better,25) output(6,better,46) output(6,better,74) output(6,better,56) output(6,better,55) output(13,better,1) output(13,better,6) output(13,better,25) output(13,better,46) output(13,better,74) output(13,better,56) output(13,better,55) output(15,better,13) output(15,better,1) output(15,better,6) output(15,better,25) output(15,better,46) output(15,better,74) output(15,better,56) output(15,better,55) output(25,better,46) output(25,better,74) output(25,better,56) output(25,better,55) output(46,better,74) output(46,better,56) output(46,better,55) output(56,better,55)
Optimization: 0 11
Progression : 0 [ 2;11] (Error: 4.5)
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.104 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 22+
  Optimum    : unknown
Optimization : 0 11
Calls        : 1
Time         : 598.138s (Solving: 582.87s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 2345.905s
Threads      : 4        (Winner: 4)

Choices      : 12808146 (Domain: 3955)
Conflicts    : 2404343  (Analyzed: 2404341)
Restarts     : 2638     (Average: 911.43 Last: 236431)
Model-Level  : 1028.8  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 2412420  (Deleted: 2239674)
  Binary     : 1104     (Ratio:   0.05%)
  Ternary    : 422      (Ratio:   0.02%)
  Conflict   : 2404341  (Average Length: 1651.4 Ratio:  99.67%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 8079     (Average Length:  218.1 Ratio:   0.33%) 
  Distributed: 2693     (Ratio:   0.11% Average LBD: 3.31) 
  Integrated : 8079     (Ratio: 300.00% Unit: 31 Average Jumps: 56.35)
Backjumps    : 2404341  (Average:  3.43 Max: 3450 Sum: 8240650)
  Executed   : 2404340  (Average:  3.43 Max: 3450 Sum: 8240648 Ratio: 100.00%)
  Bounded    : 1        (Average:  2.00 Max:   2 Sum:      2 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: not atom(hasOftenSold(3))  ; 
  9 :: not atom(hasOiliness(1))  ; 
  9 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasMinorGrp(3)) ; 
  9 :: atom(hasOiliness(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  9 :: not atom(hasPrice(1))  ; 
  9 :: atom(hasOftenSold(0)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  10 :: not atom(hasStyle(0))  ; 
  9 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasMinorGrp(2)) ; 
  10 :: atom(hasStyle(1)) ; 
  9 :: not atom(hasMinorGrp(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasPrice(2)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  9 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasStyle(1))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  9 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(1)) ; 
  10 :: not atom(hasStyle(1))  ; 
  2 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(10)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(10)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasOftenSold(3)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(1)) ; 
  10 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasPrice(3)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasStyle(0)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(10)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasStyle(0)) ; 
  4 :: atom(hasPrice(1)) ; 
  1 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(10)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasPrice(1)) ; 
  1 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasStyle(0)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(10)) ; 
  7 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  5 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasPrice(1)) ; 
  9 :: atom(hasStyle(0)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  4 :: atom(hasMinorGrp(2)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(10)) ; 
  10 :: atom(hasPrice(2)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  7 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(2)) ; 
  4 :: atom(hasPrice(1)) ; 
  1 :: atom(hasOiliness(2)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  8 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasPrice(2)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  7 :: atom(hasPrice(3)) ; 
  5 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  4 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasMinorGrp(10)) ; 
  2 :: not atom(hasMajorGrp(0))  ; 
  5 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  10 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  4 :: atom(hasOiliness(0)) ; 
  1 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  2 :: not atom(hasMajorGrp(0))  ; 
  5 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(2)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  4 :: atom(hasPrice(2)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  3 :: atom(hasMinorGrp(3)) ; 
  10 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasPrice(0)) ; 
  8 :: not atom(hasStyle(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  4 :: not atom(hasStyle(0))  ; 
  9 :: atom(hasPrice(1)) ; 
  7 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(3)) ; 
  9 :: not atom(hasOftenSold(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasStyle(0)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasStyle(1)) ; 
  2 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOiliness(3)) ; 
  1 :: atom(hasMinorGrp(10)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  7 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasStyle(0)) ; 
  3 :: atom(hasOftenSold(1)) ; 
  9 :: atom(hasStyle(1)) ; 
  2 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOiliness(3)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  7 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasStyle(0)) ; 
  9 :: atom(hasStyle(1)) ; 
  5 :: atom(hasPrice(2)) ; 
  2 :: atom(hasOiliness(3)) ; 
  1 :: atom(hasOftenSold(2)) ; 
  7 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasOftenSold(0)) ; 
  3 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(7)) 
}.
