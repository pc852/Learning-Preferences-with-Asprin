asprin_vL version 1.0
Reading from stdin
-:299:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:309:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:324:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:405:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:666:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:679:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:856:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:985:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1057:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1061:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1061:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1067:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1166:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1192:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1312:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1346:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1368:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:216:1-16: info: no atoms over signature occur in program:
  output/3

-:208:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:209:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(4,eq,6) output(4,eq,13) output(4,eq,3) output(4,eq,0) output(4,eq,21) output(4,eq,66) output(4,eq,83) output(4,eq,77) output(4,eq,56) output(6,eq,13) output(6,eq,3) output(6,eq,0) output(6,eq,21) output(6,eq,66) output(6,eq,83) output(6,eq,77) output(6,eq,56) output(13,eq,3) output(13,eq,0) output(13,eq,21) output(13,eq,66) output(13,eq,83) output(13,eq,77) output(13,eq,56) output(3,eq,0) output(3,eq,21) output(3,eq,66) output(3,eq,83) output(3,eq,77) output(3,eq,56) output(0,eq,21) output(0,eq,66) output(0,eq,83) output(0,eq,77) output(0,eq,56) output(21,eq,66) output(21,eq,83) output(21,eq,77) output(21,eq,56) output(66,eq,83) output(66,eq,77) output(66,eq,56) output(83,eq,77) output(83,eq,56) output(77,eq,56)
Optimization: 45 0
Answer: 2
preference(1,(1,1),1,for(atom(hasOiliness(0))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,9),1,for(atom(hasPrice(0))),5) preference(1,less(weight)) output(0,better,66) output(0,better,77) output(3,better,66) output(3,better,77) output(4,better,13) output(4,better,66) output(4,better,77) output(6,better,13) output(6,better,66) output(6,better,77) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(83,better,77) output(0,worse,21) output(3,worse,21) output(4,worse,3) output(4,worse,0) output(4,worse,21) output(4,worse,83) output(4,worse,56) output(6,worse,3) output(6,worse,0) output(6,worse,21) output(6,worse,83) output(6,worse,56) output(13,worse,3) output(13,worse,0) output(13,worse,21) output(13,worse,83) output(13,worse,56) output(66,worse,83) output(66,worse,56) output(77,worse,56) output(4,eq,6) output(13,eq,66) output(13,eq,77) output(3,eq,0) output(3,eq,83) output(3,eq,56) output(0,eq,83) output(0,eq,56) output(66,eq,77) output(83,eq,56)
Optimization: 30 3
Answer: 3
preference(1,(1,1),1,for(atom(hasStyle(1))),5) preference(1,(1,2),1,for(atom(hasOiliness(1))),6) preference(1,(1,3),1,for(atom(hasMajorGrp(0))),5) preference(1,(1,4),1,for(atom(hasPrice(1))),5) preference(1,(1,5),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,8),1,for(atom(hasPrice(0))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(8))),6) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,11),1,for(atom(hasOiliness(0))),5) preference(1,less(weight)) output(0,better,56) output(3,better,56) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,56) output(21,better,56) output(66,better,56) output(77,better,56) output(83,better,56) output(4,worse,6) output(4,eq,13) output(4,eq,3) output(4,eq,0) output(4,eq,21) output(4,eq,66) output(4,eq,83) output(4,eq,77) output(13,eq,3) output(13,eq,0) output(13,eq,21) output(13,eq,66) output(13,eq,83) output(13,eq,77) output(3,eq,0) output(3,eq,21) output(3,eq,66) output(3,eq,83) output(3,eq,77) output(0,eq,21) output(0,eq,66) output(0,eq,83) output(0,eq,77) output(21,eq,66) output(21,eq,83) output(21,eq,77) output(66,eq,83) output(66,eq,77) output(83,eq,77)
Optimization: 29 10
Answer: 4
preference(1,(1,1),1,for(atom(hasStyle(1))),5) preference(1,(1,2),1,for(atom(hasOiliness(1))),6) preference(1,(1,3),1,for(atom(hasMajorGrp(0))),5) preference(1,(1,4),1,for(atom(hasPrice(1))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,8),1,for(atom(hasPrice(0))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,11),1,for(atom(hasOiliness(0))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,14),1,for(atom(hasMinorGrp(8))),6) preference(1,less(weight)) output(3,better,0) output(3,better,56) output(4,better,0) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,0) output(13,better,56) output(21,better,56) output(66,better,56) output(77,better,56) output(83,better,56) output(0,worse,21) output(0,worse,66) output(0,worse,83) output(0,worse,77) output(4,worse,6) output(4,eq,13) output(4,eq,3) output(4,eq,21) output(4,eq,66) output(4,eq,83) output(4,eq,77) output(13,eq,3) output(13,eq,21) output(13,eq,66) output(13,eq,83) output(13,eq,77) output(3,eq,21) output(3,eq,66) output(3,eq,83) output(3,eq,77) output(0,eq,56) output(21,eq,66) output(21,eq,83) output(21,eq,77) output(66,eq,83) output(66,eq,77) output(83,eq,77)
Optimization: 27 11
Answer: 5
preference(1,(1,1),1,for(atom(hasStyle(1))),8) preference(1,(1,2),1,for(atom(hasOiliness(0))),2) preference(1,(1,4),1,for(atom(hasPrice(0))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,6),1,for(atom(hasMajorGrp(0))),7) preference(1,(1,7),1,for(atom(hasPrice(1))),5) preference(1,(1,8),1,for(atom(hasMajorGrp(1))),10) preference(1,(1,9),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,11),1,for(atom(hasOiliness(1))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),2) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,77) output(21,better,56) output(66,better,56) output(77,better,56) output(83,better,77) output(83,better,56) output(21,worse,83) output(66,worse,83) output(4,eq,6) output(0,eq,83) output(66,eq,77)
Optimization: 5 13
Answer: 6
preference(1,(1,1),1,for(atom(hasMajorGrp(0))),4) preference(1,(1,2),1,for(atom(hasPrice(0))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(10))),5) preference(1,(1,7),1,for(atom(hasPrice(1))),6) preference(1,(1,8),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,9),1,for(atom(hasStyle(1))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,11),1,for(atom(hasOiliness(1))),9) preference(1,(1,12),1,for(atom(hasOiliness(0))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),7) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),8) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,83) output(66,better,56) output(77,better,56) output(83,better,56) output(4,worse,13) output(6,worse,13) output(83,worse,77) output(66,eq,77)
Optimization: 4 14
Answer: 7
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,3),1,for(atom(hasPrice(1))),3) preference(1,(1,4),1,for(atom(hasStyle(1))),7) preference(1,(1,5),1,for(atom(hasOiliness(1))),8) preference(1,(1,8),1,for(atom(hasMinorGrp(11))),10) preference(1,(1,11),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,14),1,for(atom(hasPrice(0))),8) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,83) output(66,better,56) output(77,better,56) output(83,better,56) output(83,worse,77) output(4,eq,6) output(13,eq,3) output(66,eq,77)
Optimization: 4 8
Answer: 8
preference(1,(1,1),1,for(atom(hasStyle(1))),8) preference(1,(1,3),1,for(atom(hasOiliness(1))),10) preference(1,(1,4),1,for(atom(hasPrice(1))),6) preference(1,(1,5),1,for(atom(hasMajorGrp(0))),4) preference(1,(1,6),1,for(atom(hasPrice(0))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),7) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,56) output(77,better,56) output(83,better,77) output(83,better,56) output(66,worse,83) output(4,eq,6) output(66,eq,77)
Optimization: 3 10
Answer: 9
preference(1,(1,1),1,for(atom(hasStyle(1))),9) preference(1,(1,2),1,for(atom(hasOiliness(1))),9) preference(1,(1,3),1,for(atom(hasMinorGrp(10))),3) preference(1,(1,4),1,for(atom(hasPrice(0))),10) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,7),1,for(atom(hasMajorGrp(0))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),7) preference(1,(1,12),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,14),1,for(atom(hasPrice(1))),4) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,83) output(66,better,56) output(77,better,56) output(83,better,56) output(83,worse,77) output(66,eq,77)
Optimization: 2 13
Progression : [2;2] (Error: 0)
Progression : 2 [ 1;13] (Error: 12)
Answer: 10
preference(1,(1,1),1,for(atom(hasPrice(0))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(10))),6) preference(1,(1,3),1,for(atom(hasStyle(1))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,6),1,for(atom(hasOiliness(1))),1) preference(1,(1,8),1,for(atom(hasMajorGrp(0))),4) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,11),1,for(atom(hasPrice(1))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,83) output(66,better,56) output(77,better,56) output(83,better,56) output(83,worse,77) output(66,eq,77)
Optimization: 2 12
Answer: 11
preference(1,(1,3),1,for(atom(hasMinorGrp(6))),6) preference(1,(1,4),1,for(atom(hasMinorGrp(10))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(11))),8) preference(1,(1,7),1,for(atom(hasMajorGrp(0))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,9),1,for(atom(hasPrice(1))),5) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,11),1,for(atom(hasOiliness(1))),10) preference(1,(1,12),1,for(atom(hasStyle(1))),5) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),7) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,83) output(66,better,56) output(77,better,56) output(83,better,56) output(83,worse,77) output(66,eq,77)
Optimization: 2 11
Progression : 2 [ 2;11] (Error: 4.5)
Answer: 12
preference(1,(1,3),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,4),1,for(atom(hasPrice(0))),8) preference(1,(1,5),1,for(atom(hasPrice(1))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),7) preference(1,(1,10),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,11),1,for(atom(hasOiliness(1))),8) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),8) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),7) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,56) output(77,better,56) output(83,better,77) output(83,better,56) output(66,worse,83) output(66,eq,77)
Optimization: 2 10
Answer: 13
preference(1,(1,1),1,for(atom(hasPrice(0))),6) preference(1,(1,2),1,for(atom(hasPrice(1))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(7))),3) preference(1,(1,5),1,for(atom(hasOiliness(1))),7) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),9) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),4) preference(1,(1,14),1,for(atom(hasMinorGrp(11))),3) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,83) output(66,better,56) output(77,better,56) output(83,better,56) output(83,worse,77) output(66,eq,77)
Optimization: 2 9
Progression : 2 [3;9] (Error: 2)
Answer: 14
preference(1,(1,1),1,for(atom(hasMinorGrp(6))),1) preference(1,(1,2),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,6),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,14),1,for(atom(hasOiliness(1))),3) preference(1,less(weight)) output(0,better,21) output(0,better,66) output(0,better,83) output(0,better,77) output(0,better,56) output(3,better,0) output(3,better,21) output(3,better,66) output(3,better,83) output(3,better,77) output(3,better,56) output(4,better,6) output(4,better,13) output(4,better,3) output(4,better,0) output(4,better,21) output(4,better,66) output(4,better,83) output(4,better,77) output(4,better,56) output(6,better,13) output(6,better,3) output(6,better,0) output(6,better,21) output(6,better,66) output(6,better,83) output(6,better,77) output(6,better,56) output(13,better,3) output(13,better,0) output(13,better,21) output(13,better,66) output(13,better,83) output(13,better,77) output(13,better,56) output(21,better,66) output(21,better,83) output(21,better,77) output(21,better,56) output(66,better,56) output(77,better,56) output(83,better,77) output(83,better,56) output(66,worse,83) output(66,eq,77)
Optimization: 2 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.034 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 14+
  Optimum    : unknown
Optimization : 2 7
Bounds       : 2 [3;7]
Calls        : 1
Time         : 297.876s (Solving: 295.98s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 1182.587s
Threads      : 4        (Winner: 4)

Choices      : 6919457  (Domain: 591289)
Conflicts    : 6238416  (Analyzed: 6238410)
Restarts     : 5526     (Average: 1128.92 Last: 467655)
Model-Level  : 37.6    
Problems     : 11       (Average Length: 0.36 Splits: 0)
Lemmas       : 6343149  (Deleted: 6027459)
  Binary     : 2127     (Ratio:   0.03%)
  Ternary    : 2896     (Ratio:   0.05%)
  Conflict   : 6238410  (Average Length:  318.6 Ratio:  98.35%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 104739   (Average Length:  308.5 Ratio:   1.65%) 
  Distributed: 34958    (Ratio:   0.56% Average LBD: 3.75) 
  Integrated : 104874   (Ratio: 300.00% Unit: 32 Average Jumps: 6.31)
Backjumps    : 6238410  (Average:  1.10 Max:  55 Sum: 6849627)
  Executed   : 6238404  (Average:  1.10 Max:  55 Sum: 6849566 Ratio: 100.00%)
  Bounded    : 6        (Average: 10.17 Max:  26 Sum:     61 Ratio:   0.00%)

Rules        : 186683  
  Choice     : 15      
  Minimize   : 2       
Atoms        : 10469   
Bodies       : 8708    
  Sum        : 75      
  Count      : 14      
Equivalences : 9340     (Atom=Atom: 496 Body=Body: 230 Other: 8614)
Tight        : Yes
Variables    : 7546     (Eliminated:    0 Frozen: 4886)
Constraints  : 189291   (Binary:  97.5% Ternary:   1.4% Other:   1.1%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasOiliness(0)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasStyle(1)) ; 
  6 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMajorGrp(0)) ; 
  5 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasPrice(0)) ; 
  6 :: atom(hasMinorGrp(8)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasOiliness(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasStyle(1)) ; 
  6 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMajorGrp(0)) ; 
  5 :: atom(hasPrice(1)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  5 :: atom(hasOiliness(0)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMinorGrp(8)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasStyle(1)) ; 
  2 :: atom(hasOiliness(0)) ; 
  4 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMajorGrp(0)) ; 
  5 :: atom(hasPrice(1)) ; 
  10 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  6 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasMinorGrp(11)) ; 
  2 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMajorGrp(0)) ; 
  4 :: atom(hasPrice(0)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasMinorGrp(10)) ; 
  6 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasStyle(1)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  9 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasOiliness(0)) ; 
  7 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasPrice(1)) ; 
  7 :: atom(hasStyle(1)) ; 
  8 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasMinorGrp(11)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasPrice(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasStyle(1)) ; 
  10 :: atom(hasOiliness(1)) ; 
  6 :: atom(hasPrice(1)) ; 
  4 :: atom(hasMajorGrp(0)) ; 
  3 :: atom(hasPrice(0)) ; 
  6 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasMajorGrp(1)) ; 
  6 :: atom(hasMinorGrp(11)) ; 
  7 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasStyle(1)) ; 
  9 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasMinorGrp(10)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasMajorGrp(0)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMinorGrp(4)) ; 
  7 :: atom(hasMinorGrp(11)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  4 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(0)) ; 
  6 :: atom(hasMinorGrp(10)) ; 
  3 :: atom(hasStyle(1)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasMajorGrp(0)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  5 :: atom(hasPrice(1)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(0)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasMinorGrp(10)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasMinorGrp(11)) ; 
  5 :: atom(hasMajorGrp(0)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasPrice(1)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasStyle(1)) ; 
  7 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasMinorGrp(5)) ; 
  8 :: atom(hasPrice(0)) ; 
  5 :: atom(hasPrice(1)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(4)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  8 :: atom(hasOiliness(1)) ; 
  4 :: atom(hasMinorGrp(6)) ; 
  8 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasPrice(0)) ; 
  4 :: atom(hasPrice(1)) ; 
  3 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  9 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasMinorGrp(11)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(hasMinorGrp(6)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMinorGrp(11)) ; 
  3 :: atom(hasOiliness(1)) 
}.
