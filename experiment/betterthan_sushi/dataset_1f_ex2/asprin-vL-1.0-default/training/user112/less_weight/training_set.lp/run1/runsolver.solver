asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(12,eq,33) output(12,eq,14) output(12,eq,5) output(12,eq,21) output(12,eq,52) output(12,eq,60) output(12,eq,49) output(12,eq,44) output(12,eq,23) output(33,eq,14) output(33,eq,5) output(33,eq,21) output(33,eq,52) output(33,eq,60) output(33,eq,49) output(33,eq,44) output(33,eq,23) output(14,eq,5) output(14,eq,21) output(14,eq,52) output(14,eq,60) output(14,eq,49) output(14,eq,44) output(14,eq,23) output(5,eq,21) output(5,eq,52) output(5,eq,60) output(5,eq,49) output(5,eq,44) output(5,eq,23) output(21,eq,52) output(21,eq,60) output(21,eq,49) output(21,eq,44) output(21,eq,23) output(52,eq,60) output(52,eq,49) output(52,eq,44) output(52,eq,23) output(60,eq,49) output(60,eq,44) output(60,eq,23) output(49,eq,44) output(49,eq,23) output(44,eq,23)
Optimization: 45 0
Answer: 2
preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(5,better,49) output(5,better,44) output(12,better,49) output(12,better,44) output(14,better,49) output(14,better,44) output(21,better,49) output(21,better,44) output(33,better,49) output(33,better,44) output(52,better,49) output(52,better,44) output(44,worse,23) output(49,worse,23) output(12,eq,33) output(12,eq,14) output(12,eq,5) output(12,eq,21) output(12,eq,52) output(12,eq,60) output(12,eq,23) output(33,eq,14) output(33,eq,5) output(33,eq,21) output(33,eq,52) output(33,eq,60) output(33,eq,23) output(14,eq,5) output(14,eq,21) output(14,eq,52) output(14,eq,60) output(14,eq,23) output(5,eq,21) output(5,eq,52) output(5,eq,60) output(5,eq,23) output(21,eq,52) output(21,eq,60) output(21,eq,23) output(52,eq,60) output(52,eq,23) output(60,eq,23) output(49,eq,44)
Optimization: 31 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,13),1,for(atom(hasPrice(1))),10) preference(1,(1,14),1,for(atom(hasOiliness(1))),10) preference(1,less(weight)) output(5,better,52) output(5,better,60) output(5,better,44) output(12,better,52) output(12,better,60) output(12,better,44) output(14,better,52) output(14,better,60) output(14,better,44) output(21,better,52) output(21,better,60) output(21,better,44) output(33,better,52) output(33,better,60) output(33,better,44) output(49,better,44) output(60,worse,49) output(60,worse,23) output(44,worse,23) output(52,worse,49) output(52,worse,23) output(12,eq,33) output(12,eq,14) output(12,eq,5) output(12,eq,21) output(12,eq,49) output(12,eq,23) output(33,eq,14) output(33,eq,5) output(33,eq,21) output(33,eq,49) output(33,eq,23) output(14,eq,5) output(14,eq,21) output(14,eq,49) output(14,eq,23) output(5,eq,21) output(5,eq,49) output(5,eq,23) output(21,eq,49) output(21,eq,23) output(52,eq,60) output(52,eq,44) output(60,eq,44) output(49,eq,23)
Optimization: 29 4
Answer: 4
preference(1,(1,13),1,for(atom(hasPrice(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(7))),10) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(5,better,52) output(5,better,49) output(5,better,44) output(12,better,52) output(12,better,49) output(12,better,44) output(14,better,52) output(14,better,49) output(14,better,44) output(21,better,52) output(21,better,49) output(21,better,44) output(33,better,52) output(33,better,49) output(33,better,44) output(44,worse,23) output(49,worse,23) output(52,worse,60) output(52,worse,23) output(12,eq,33) output(12,eq,14) output(12,eq,5) output(12,eq,21) output(12,eq,60) output(12,eq,23) output(33,eq,14) output(33,eq,5) output(33,eq,21) output(33,eq,60) output(33,eq,23) output(14,eq,5) output(14,eq,21) output(14,eq,60) output(14,eq,23) output(5,eq,21) output(5,eq,60) output(5,eq,23) output(21,eq,60) output(21,eq,23) output(52,eq,49) output(52,eq,44) output(60,eq,23) output(49,eq,44)
Optimization: 28 2
Answer: 5
preference(1,(1,1),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,5),1,for(atom(hasOftenSold(2))),8) preference(1,(1,6),1,for(atom(hasStyle(0))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(5))),10) preference(1,(1,9),1,for(atom(hasPrice(3))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),6) preference(1,(1,12),1,for(atom(hasOiliness(1))),10) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasPrice(1))),10) preference(1,less(weight)) output(5,better,52) output(5,better,60) output(5,better,44) output(12,better,52) output(12,better,60) output(12,better,44) output(14,better,52) output(14,better,60) output(14,better,44) output(21,better,52) output(21,better,60) output(21,better,44) output(33,better,52) output(33,better,60) output(33,better,44) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,44) output(60,worse,49) output(60,worse,44) output(60,worse,23) output(5,worse,21) output(5,worse,49) output(5,worse,23) output(12,worse,21) output(12,worse,49) output(12,worse,23) output(14,worse,21) output(14,worse,49) output(14,worse,23) output(21,worse,49) output(33,worse,21) output(33,worse,49) output(33,worse,23) output(44,worse,23) output(52,worse,49) output(52,worse,23) output(12,eq,33) output(12,eq,14) output(12,eq,5) output(33,eq,14) output(33,eq,5) output(14,eq,5) output(21,eq,23)
Optimization: 26 11
Answer: 6
preference(1,(1,1),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,2),1,for(neg(atom(hasOiliness(2)))),10) preference(1,(1,7),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,5),1,for(atom(hasOftenSold(2))),8) preference(1,(1,6),1,for(atom(hasStyle(0))),9) preference(1,(1,8),1,for(atom(hasMinorGrp(5))),10) preference(1,(1,9),1,for(atom(hasPrice(3))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,11),1,for(atom(hasOftenSold(0))),6) preference(1,(1,12),1,for(atom(hasOiliness(1))),9) preference(1,(1,13),1,for(atom(hasOftenSold(1))),10) preference(1,(1,14),1,for(atom(hasPrice(1))),10) preference(1,less(weight)) output(60,better,44) output(5,better,52) output(5,better,60) output(5,better,44) output(12,better,52) output(12,better,60) output(12,better,44) output(14,better,52) output(14,better,60) output(14,better,44) output(21,better,52) output(21,better,60) output(21,better,44) output(33,better,52) output(33,better,60) output(33,better,44) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,44) output(60,worse,49) output(60,worse,23) output(5,worse,21) output(5,worse,49) output(5,worse,23) output(12,worse,21) output(12,worse,49) output(12,worse,23) output(14,worse,21) output(14,worse,49) output(14,worse,23) output(21,worse,49) output(33,worse,21) output(33,worse,49) output(33,worse,23) output(44,worse,23) output(52,worse,49) output(52,worse,23) output(12,eq,33) output(12,eq,14) output(12,eq,5) output(33,eq,14) output(33,eq,5) output(14,eq,5) output(21,eq,23)
Optimization: 25 12
Answer: 7
preference(1,(1,2),1,for(neg(atom(hasOiliness(2)))),10) preference(1,(1,1),1,for(atom(hasOftenSold(1))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,4),1,for(atom(hasMajorGrp(1))),6) preference(1,(1,5),1,for(atom(hasOftenSold(2))),8) preference(1,(1,6),1,for(atom(hasStyle(0))),9) preference(1,(1,7),1,for(atom(hasOftenSold(0))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(5))),10) preference(1,(1,9),1,for(atom(hasPrice(3))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(2))),1) preference(1,(1,12),1,for(atom(hasOiliness(1))),9) preference(1,(1,13),1,for(atom(hasPrice(0))),10) preference(1,(1,14),1,for(atom(hasPrice(1))),10) preference(1,less(weight)) output(5,better,52) output(5,better,60) output(5,better,44) output(5,better,23) output(12,better,52) output(12,better,60) output(12,better,44) output(12,better,23) output(14,better,52) output(14,better,60) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,44) output(21,better,23) output(33,better,14) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,44) output(33,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,44) output(52,better,23) output(60,worse,49) output(60,worse,44) output(60,worse,23) output(5,worse,21) output(5,worse,49) output(12,worse,33) output(12,worse,21) output(12,worse,49) output(14,worse,21) output(14,worse,49) output(21,worse,49) output(33,worse,49) output(44,worse,23) output(52,worse,49) output(12,eq,14) output(12,eq,5) output(14,eq,5)
Optimization: 17 14
Answer: 8
preference(1,(1,2),1,for(neg(atom(hasOiliness(2)))),10) preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),2) preference(1,(1,1),1,for(atom(hasOftenSold(1))),2) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),1) preference(1,(1,5),1,for(atom(hasOftenSold(2))),8) preference(1,(1,6),1,for(atom(hasOftenSold(0))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,8),1,for(atom(hasMinorGrp(5))),10) preference(1,(1,9),1,for(atom(hasPrice(3))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(11))),9) preference(1,(1,11),1,for(atom(hasMinorGrp(8))),1) preference(1,(1,12),1,for(atom(hasOiliness(1))),9) preference(1,(1,13),1,for(atom(hasPrice(0))),10) preference(1,(1,14),1,for(atom(hasPrice(1))),10) preference(1,less(weight)) output(5,better,52) output(5,better,60) output(5,better,44) output(5,better,23) output(12,better,52) output(12,better,60) output(12,better,44) output(12,better,23) output(14,better,52) output(14,better,60) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,44) output(21,better,23) output(33,better,14) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,44) output(52,better,23) output(60,worse,49) output(60,worse,23) output(5,worse,21) output(5,worse,49) output(12,worse,33) output(12,worse,21) output(12,worse,49) output(14,worse,21) output(14,worse,49) output(21,worse,49) output(44,worse,23) output(52,worse,49) output(12,eq,14) output(12,eq,5) output(14,eq,5) output(60,eq,44)
Optimization: 16 14
Answer: 9
preference(1,(1,2),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,3),1,for(neg(atom(hasStyle(1)))),9) preference(1,(1,8),1,for(neg(atom(hasOftenSold(2)))),5) preference(1,(1,14),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,(1,1),1,for(atom(hasPrice(1))),4) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,5),1,for(atom(hasOftenSold(2))),8) preference(1,(1,6),1,for(atom(hasOftenSold(0))),1) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,9),1,for(atom(hasPrice(3))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,11),1,for(atom(hasPrice(2))),8) preference(1,(1,12),1,for(atom(hasOiliness(1))),10) preference(1,(1,13),1,for(atom(hasPrice(0))),3) preference(1,less(weight)) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,33) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(49,better,44) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(60,worse,49) output(60,worse,44) output(60,worse,23) output(12,worse,5) output(14,worse,5) output(33,worse,14) output(33,worse,5) output(33,worse,21) output(33,worse,52) output(44,worse,23) output(49,worse,23) output(12,eq,14) output(12,eq,21) output(14,eq,21)
Optimization: 14 14
Answer: 10
preference(1,(1,2),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,7),1,for(neg(atom(hasOiliness(2)))),3) preference(1,(1,8),1,for(neg(atom(hasOftenSold(2)))),5) preference(1,(1,12),1,for(neg(atom(hasStyle(1)))),6) preference(1,(1,13),1,for(neg(atom(hasOftenSold(0)))),3) preference(1,(1,1),1,for(atom(hasPrice(1))),4) preference(1,(1,3),1,for(atom(hasOiliness(1))),7) preference(1,(1,4),1,for(atom(hasMinorGrp(0))),5) preference(1,(1,5),1,for(atom(hasOftenSold(2))),8) preference(1,(1,6),1,for(atom(hasOftenSold(0))),1) preference(1,(1,9),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,10),1,for(atom(hasPrice(2))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(4))),3) preference(1,(1,14),1,for(atom(hasMajorGrp(1))),10) preference(1,less(weight)) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,33) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(49,better,44) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(60,worse,49) output(60,worse,23) output(12,worse,5) output(14,worse,5) output(21,worse,52) output(33,worse,14) output(33,worse,5) output(33,worse,52) output(44,worse,23) output(49,worse,23) output(12,eq,14) output(33,eq,21) output(60,eq,44)
Optimization: 13 14
Progression : [ 1;13] (Error: 12)
Progression : [ 2;13] (Error: 5.5)
Answer: 11
preference(1,(1,5),1,for(neg(atom(hasPrice(2)))),2) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(4)))),4) preference(1,(1,1),1,for(atom(hasPrice(2))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),7) preference(1,(1,3),1,for(atom(hasOiliness(3))),1) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),7) preference(1,(1,7),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,9),1,for(atom(hasOiliness(1))),3) preference(1,(1,10),1,for(atom(hasOiliness(0))),1) preference(1,(1,11),1,for(atom(hasOiliness(2))),9) preference(1,(1,13),1,for(atom(hasOftenSold(0))),5) preference(1,(1,14),1,for(atom(hasPrice(1))),1) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(60,better,23) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,33) output(12,better,5) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,5) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,49) output(33,better,21) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(44,better,23) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(21,worse,52) output(21,worse,60) output(21,worse,44) output(21,worse,23) output(33,worse,14) output(33,worse,5) output(33,worse,52) output(49,worse,44) output(49,worse,23) output(12,eq,14)
Optimization: 10 14
Answer: 12
preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,10),1,for(neg(atom(hasMinorGrp(0)))),7) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(4)))),4) preference(1,(1,13),1,for(neg(atom(hasPrice(2)))),7) preference(1,(1,14),1,for(neg(atom(hasStyle(1)))),6) preference(1,(1,1),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,2),1,for(atom(hasOftenSold(2))),3) preference(1,(1,3),1,for(atom(hasPrice(1))),9) preference(1,(1,4),1,for(atom(hasOiliness(1))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,7),1,for(atom(hasOiliness(2))),1) preference(1,(1,8),1,for(atom(hasPrice(0))),8) preference(1,(1,9),1,for(atom(hasPrice(2))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),9) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(60,better,23) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,5) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,5) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(44,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(12,eq,33) output(12,eq,14) output(33,eq,14)
Optimization: 3 14
Answer: 13
preference(1,(1,5),1,for(neg(atom(hasPrice(0)))),5) preference(1,(1,10),1,for(neg(atom(hasStyle(1)))),6) preference(1,(1,12),1,for(neg(atom(hasMinorGrp(4)))),4) preference(1,(1,13),1,for(neg(atom(hasPrice(2)))),7) preference(1,(1,1),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,2),1,for(atom(hasOftenSold(2))),3) preference(1,(1,3),1,for(atom(hasOftenSold(0))),7) preference(1,(1,4),1,for(atom(hasOiliness(1))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),2) preference(1,(1,7),1,for(atom(hasOiliness(2))),1) preference(1,(1,8),1,for(atom(hasPrice(0))),8) preference(1,(1,9),1,for(atom(hasPrice(2))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,14),1,for(atom(hasPrice(1))),9) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(60,better,23) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,5) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,5) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,14) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(44,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(12,worse,33) output(12,eq,14)
Optimization: 2 14
Progression : 2 [ 1;14] (Error: 13)
Answer: 14
preference(1,(1,3),1,for(neg(atom(hasPrice(2)))),3) preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,5),1,for(neg(atom(hasOiliness(2)))),3) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,1),1,for(atom(hasPrice(0))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,7),1,for(atom(hasOftenSold(0))),5) preference(1,(1,9),1,for(atom(hasOiliness(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,11),1,for(atom(hasOftenSold(1))),4) preference(1,(1,12),1,for(atom(hasOiliness(3))),1) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),1) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(60,better,23) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,33) output(12,better,5) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,5) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(44,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(33,worse,14) output(12,eq,14)
Optimization: 2 13
Answer: 15
preference(1,(1,3),1,for(neg(atom(hasPrice(2)))),3) preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,5),1,for(neg(atom(hasOiliness(2)))),3) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,1),1,for(atom(hasPrice(0))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,6),1,for(atom(hasOiliness(3))),1) preference(1,(1,7),1,for(atom(hasOftenSold(0))),5) preference(1,(1,9),1,for(atom(hasOiliness(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,11),1,for(atom(hasOftenSold(1))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),1) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(60,better,23) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,33) output(12,better,5) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,5) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(44,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(33,worse,14) output(12,eq,14)
Optimization: 2 12
Answer: 16
preference(1,(1,3),1,for(neg(atom(hasPrice(2)))),3) preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,5),1,for(neg(atom(hasOiliness(2)))),3) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,1),1,for(atom(hasPrice(0))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,7),1,for(atom(hasOftenSold(0))),5) preference(1,(1,9),1,for(atom(hasOiliness(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),1) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(60,better,23) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,33) output(12,better,5) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,5) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(44,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(33,worse,14) output(12,eq,14)
Optimization: 2 11
Answer: 17
preference(1,(1,3),1,for(neg(atom(hasPrice(2)))),3) preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,5),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,1),1,for(atom(hasPrice(0))),4) preference(1,(1,2),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,6),1,for(atom(hasMinorGrp(8))),8) preference(1,(1,7),1,for(atom(hasOftenSold(0))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),1) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(60,better,23) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,33) output(12,better,5) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,5) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(44,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(33,worse,14) output(12,eq,14)
Optimization: 2 10
Answer: 18
preference(1,(1,2),1,for(neg(atom(hasPrice(2)))),3) preference(1,(1,4),1,for(neg(atom(hasOftenSold(2)))),4) preference(1,(1,6),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,14),1,for(neg(atom(hasMinorGrp(0)))),3) preference(1,(1,1),1,for(atom(hasPrice(0))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,7),1,for(atom(hasOftenSold(0))),5) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(11))),1) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(60,better,23) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,33) output(12,better,5) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,5) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(44,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(33,worse,14) output(12,eq,14)
Optimization: 2 9
Progression : 2 [2;9] (Error: 3.5)
Answer: 19
preference(1,(1,2),1,for(atom(hasPrice(0))),9) preference(1,(1,3),1,for(atom(hasOiliness(2))),3) preference(1,(1,5),1,for(atom(hasOftenSold(2))),5) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(7))),2) preference(1,(1,13),1,for(atom(hasOftenSold(0))),9) preference(1,(1,14),1,for(atom(hasOiliness(1))),4) preference(1,less(weight)) output(60,better,49) output(60,better,44) output(60,better,23) output(5,better,21) output(5,better,52) output(5,better,60) output(5,better,49) output(5,better,44) output(5,better,23) output(12,better,5) output(12,better,21) output(12,better,52) output(12,better,60) output(12,better,49) output(12,better,44) output(12,better,23) output(14,better,5) output(14,better,21) output(14,better,52) output(14,better,60) output(14,better,49) output(14,better,44) output(14,better,23) output(21,better,52) output(21,better,60) output(21,better,49) output(21,better,44) output(21,better,23) output(33,better,14) output(33,better,5) output(33,better,21) output(33,better,52) output(33,better,60) output(33,better,49) output(33,better,44) output(33,better,23) output(44,better,23) output(49,better,44) output(49,better,23) output(52,better,60) output(52,better,49) output(52,better,44) output(52,better,23) output(12,worse,33) output(12,eq,14)
Optimization: 2 8
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.075 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 19+
  Optimum    : unknown
Optimization : 2 8
Bounds       : 2 [2;8]
Calls        : 1
Time         : 298.294s (Solving: 283.28s 1st Model: 0.09s Unsat: 0.00s)
CPU Time     : 1147.365s
Threads      : 4        (Winner: 4)

Choices      : 3738100  (Domain: 797)
Conflicts    : 722382   (Analyzed: 722378)
Restarts     : 636      (Average: 1135.81 Last: 50016)
Model-Level  : 1881.1  
Problems     : 9        (Average Length: 0.44 Splits: 0)
Lemmas       : 726161   (Deleted: 622874)
  Binary     : 396      (Ratio:   0.05%)
  Ternary    : 170      (Ratio:   0.02%)
  Conflict   : 722378   (Average Length: 1565.6 Ratio:  99.48%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 3783     (Average Length:  173.0 Ratio:   0.52%) 
  Distributed: 1261     (Ratio:   0.17% Average LBD: 3.45) 
  Integrated : 3783     (Ratio: 300.00% Unit: 18 Average Jumps: 63.33)
Backjumps    : 722378   (Average:  3.80 Max: 4396 Sum: 2745522)
  Executed   : 722355   (Average:  3.80 Max: 4396 Sum: 2745010 Ratio:  99.98%)
  Bounded    : 23       (Average: 22.26 Max:  46 Sum:    512 Ratio:   0.02%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: not atom(hasStyle(1))  ; 
  10 :: atom(hasPrice(1)) ; 
  10 :: atom(hasOiliness(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(1)) ; 
  10 :: atom(hasMinorGrp(7)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  8 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasStyle(0)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasStyle(1))  ; 
  10 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasStyle(0)) ; 
  10 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasOftenSold(0)) ; 
  9 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOftenSold(1)) ; 
  10 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOftenSold(1)) ; 
  10 :: not atom(hasOiliness(2))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  6 :: atom(hasMajorGrp(1)) ; 
  8 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasStyle(0)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(3)) ; 
  1 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(2)) ; 
  9 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOftenSold(1)) ; 
  10 :: not atom(hasOiliness(2))  ; 
  1 :: atom(hasMinorGrp(0)) ; 
  2 :: not atom(hasMajorGrp(0))  ; 
  8 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(3)) ; 
  9 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasMinorGrp(8)) ; 
  9 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasPrice(0)) ; 
  10 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(1)) ; 
  2 :: not atom(hasPrice(2))  ; 
  9 :: not atom(hasStyle(1))  ; 
  5 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  5 :: not atom(hasOftenSold(2))  ; 
  2 :: atom(hasPrice(3)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  8 :: atom(hasPrice(2)) ; 
  10 :: atom(hasOiliness(1)) ; 
  3 :: atom(hasPrice(0)) ; 
  10 :: not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(1)) ; 
  2 :: not atom(hasPrice(2))  ; 
  7 :: atom(hasOiliness(1)) ; 
  5 :: atom(hasMinorGrp(0)) ; 
  8 :: atom(hasOftenSold(2)) ; 
  1 :: atom(hasOftenSold(0)) ; 
  3 :: not atom(hasOiliness(2))  ; 
  5 :: not atom(hasOftenSold(2))  ; 
  6 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasPrice(2)) ; 
  3 :: atom(hasMinorGrp(4)) ; 
  6 :: not atom(hasStyle(1))  ; 
  3 :: not atom(hasOftenSold(0))  ; 
  10 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(2)) ; 
  7 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasOiliness(3)) ; 
  9 :: atom(hasMinorGrp(4)) ; 
  2 :: not atom(hasPrice(2))  ; 
  7 :: atom(hasMinorGrp(7)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  3 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasOiliness(0)) ; 
  9 :: atom(hasOiliness(2)) ; 
  4 :: not atom(hasMinorGrp(4))  ; 
  5 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasOftenSold(2)) ; 
  9 :: atom(hasPrice(1)) ; 
  10 :: atom(hasOiliness(1)) ; 
  5 :: not atom(hasPrice(0))  ; 
  2 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasOiliness(2)) ; 
  8 :: atom(hasPrice(0)) ; 
  3 :: atom(hasPrice(2)) ; 
  7 :: not atom(hasMinorGrp(0))  ; 
  9 :: atom(hasMinorGrp(0)) ; 
  4 :: not atom(hasMinorGrp(4))  ; 
  7 :: not atom(hasPrice(2))  ; 
  6 :: not atom(hasStyle(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  8 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasOftenSold(2)) ; 
  7 :: atom(hasOftenSold(0)) ; 
  10 :: atom(hasOiliness(1)) ; 
  5 :: not atom(hasPrice(0))  ; 
  2 :: atom(hasMinorGrp(4)) ; 
  1 :: atom(hasOiliness(2)) ; 
  8 :: atom(hasPrice(0)) ; 
  3 :: atom(hasPrice(2)) ; 
  6 :: not atom(hasStyle(1))  ; 
  9 :: atom(hasMinorGrp(0)) ; 
  4 :: not atom(hasMinorGrp(4))  ; 
  7 :: not atom(hasPrice(2))  ; 
  9 :: atom(hasPrice(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasPrice(2))  ; 
  4 :: not atom(hasOftenSold(2))  ; 
  3 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasOiliness(3)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  3 :: not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasPrice(2))  ; 
  4 :: not atom(hasOftenSold(2))  ; 
  3 :: not atom(hasOiliness(2))  ; 
  1 :: atom(hasOiliness(3)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  4 :: atom(hasOftenSold(1)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  3 :: not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasPrice(2))  ; 
  4 :: not atom(hasOftenSold(2))  ; 
  3 :: not atom(hasOiliness(2))  ; 
  1 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  1 :: atom(hasOiliness(1)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  3 :: not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(0)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: not atom(hasPrice(2))  ; 
  4 :: not atom(hasOftenSold(2))  ; 
  1 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasMinorGrp(8)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  3 :: not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasPrice(0)) ; 
  3 :: not atom(hasPrice(2))  ; 
  4 :: not atom(hasOftenSold(2))  ; 
  9 :: atom(hasMinorGrp(0)) ; 
  1 :: not atom(hasOiliness(2))  ; 
  5 :: atom(hasOftenSold(0)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasMinorGrp(11)) ; 
  3 :: not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  9 :: atom(hasPrice(0)) ; 
  3 :: atom(hasOiliness(2)) ; 
  5 :: atom(hasOftenSold(2)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  2 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  4 :: atom(hasOiliness(1)) 
}.
