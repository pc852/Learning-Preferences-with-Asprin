asprin_vL version 1.0
Reading from stdin
-:310:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:320:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:335:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:416:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:677:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:690:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:867:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:996:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1068:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1072:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1072:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1078:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1177:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1203:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1323:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1357:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1379:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:227:1-16: info: no atoms over signature occur in program:
  output/3

-:219:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:220:25-37: info: atom does not occur in any rule head:
  forbid_equal

Solving...
Answer: 1
preference(1,less(weight)) output(25,eq,9) output(25,eq,43) output(25,eq,0) output(25,eq,10) output(25,eq,30) output(25,eq,18) output(25,eq,24) output(25,eq,15) output(25,eq,6) output(9,eq,43) output(9,eq,0) output(9,eq,10) output(9,eq,30) output(9,eq,18) output(9,eq,24) output(9,eq,15) output(9,eq,6) output(43,eq,0) output(43,eq,10) output(43,eq,30) output(43,eq,18) output(43,eq,24) output(43,eq,15) output(43,eq,6) output(0,eq,10) output(0,eq,30) output(0,eq,18) output(0,eq,24) output(0,eq,15) output(0,eq,6) output(10,eq,30) output(10,eq,18) output(10,eq,24) output(10,eq,15) output(10,eq,6) output(30,eq,18) output(30,eq,24) output(30,eq,15) output(30,eq,6) output(18,eq,24) output(18,eq,15) output(18,eq,6) output(24,eq,15) output(24,eq,6) output(15,eq,6)
Optimization: 45 0
Answer: 2
preference(1,(1,1),1,for(neg(atom(hasMajorGrp(0)))),10) preference(1,less(weight)) output(9,better,43) output(25,better,43) output(43,worse,0) output(43,worse,10) output(43,worse,30) output(43,worse,18) output(43,worse,24) output(43,worse,15) output(43,worse,6) output(25,eq,9) output(25,eq,0) output(25,eq,10) output(25,eq,30) output(25,eq,18) output(25,eq,24) output(25,eq,15) output(25,eq,6) output(9,eq,0) output(9,eq,10) output(9,eq,30) output(9,eq,18) output(9,eq,24) output(9,eq,15) output(9,eq,6) output(0,eq,10) output(0,eq,30) output(0,eq,18) output(0,eq,24) output(0,eq,15) output(0,eq,6) output(10,eq,30) output(10,eq,18) output(10,eq,24) output(10,eq,15) output(10,eq,6) output(30,eq,18) output(30,eq,24) output(30,eq,15) output(30,eq,6) output(18,eq,24) output(18,eq,15) output(18,eq,6) output(24,eq,15) output(24,eq,6) output(15,eq,6)
Optimization: 43 1
Answer: 3
preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,10) output(0,better,24) output(9,better,10) output(9,better,24) output(18,better,24) output(25,better,10) output(25,better,24) output(30,better,24) output(43,better,10) output(43,better,24) output(10,worse,30) output(10,worse,18) output(10,worse,15) output(10,worse,6) output(24,worse,15) output(24,worse,6) output(25,eq,9) output(25,eq,43) output(25,eq,0) output(25,eq,30) output(25,eq,18) output(25,eq,15) output(25,eq,6) output(9,eq,43) output(9,eq,0) output(9,eq,30) output(9,eq,18) output(9,eq,15) output(9,eq,6) output(43,eq,0) output(43,eq,30) output(43,eq,18) output(43,eq,15) output(43,eq,6) output(0,eq,30) output(0,eq,18) output(0,eq,15) output(0,eq,6) output(10,eq,24) output(30,eq,18) output(30,eq,15) output(30,eq,6) output(18,eq,15) output(18,eq,6) output(15,eq,6)
Optimization: 35 1
Answer: 4
preference(1,(1,13),1,for(atom(hasPrice(3))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,10) output(0,better,24) output(0,better,6) output(9,better,10) output(9,better,24) output(9,better,6) output(15,better,6) output(18,better,24) output(18,better,6) output(25,better,10) output(25,better,24) output(25,better,6) output(30,better,24) output(30,better,6) output(43,better,10) output(43,better,24) output(43,better,6) output(10,worse,30) output(10,worse,18) output(10,worse,15) output(24,worse,15) output(25,eq,9) output(25,eq,43) output(25,eq,0) output(25,eq,30) output(25,eq,18) output(25,eq,15) output(9,eq,43) output(9,eq,0) output(9,eq,30) output(9,eq,18) output(9,eq,15) output(43,eq,0) output(43,eq,30) output(43,eq,18) output(43,eq,15) output(0,eq,30) output(0,eq,18) output(0,eq,15) output(10,eq,24) output(10,eq,6) output(30,eq,18) output(30,eq,15) output(18,eq,15) output(24,eq,6)
Optimization: 28 2
Answer: 5
preference(1,(1,12),1,for(atom(hasPrice(3))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(5))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,24) output(0,better,6) output(9,better,10) output(9,better,30) output(9,better,24) output(9,better,6) output(15,better,6) output(18,better,24) output(18,better,6) output(25,better,10) output(25,better,30) output(25,better,24) output(25,better,6) output(43,better,10) output(43,better,30) output(43,better,24) output(43,better,6) output(10,worse,18) output(10,worse,15) output(24,worse,15) output(30,worse,18) output(30,worse,15) output(25,eq,9) output(25,eq,43) output(25,eq,0) output(25,eq,18) output(25,eq,15) output(9,eq,43) output(9,eq,0) output(9,eq,18) output(9,eq,15) output(43,eq,0) output(43,eq,18) output(43,eq,15) output(0,eq,18) output(0,eq,15) output(10,eq,30) output(10,eq,24) output(10,eq,6) output(30,eq,24) output(30,eq,6) output(18,eq,15) output(24,eq,6)
Optimization: 26 3
Answer: 6
preference(1,(1,12),1,for(atom(hasPrice(3))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),10) preference(1,less(weight)) output(0,better,10) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,10) output(9,better,24) output(9,better,15) output(9,better,6) output(18,better,24) output(18,better,15) output(18,better,6) output(25,better,10) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,10) output(43,better,24) output(43,better,15) output(43,better,6) output(10,worse,30) output(10,worse,18) output(25,eq,9) output(25,eq,43) output(25,eq,0) output(25,eq,30) output(25,eq,18) output(9,eq,43) output(9,eq,0) output(9,eq,30) output(9,eq,18) output(43,eq,0) output(43,eq,30) output(43,eq,18) output(0,eq,30) output(0,eq,18) output(10,eq,24) output(10,eq,15) output(10,eq,6) output(30,eq,18) output(24,eq,15) output(24,eq,6) output(15,eq,6)
Optimization: 23 3
Answer: 7
preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,14),1,for(atom(hasMinorGrp(5))),1) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,6) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,6) output(15,better,6) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,6) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,6) output(10,worse,30) output(10,worse,15) output(18,worse,15) output(24,worse,15) output(30,worse,15) output(25,eq,9) output(25,eq,43) output(25,eq,0) output(25,eq,15) output(9,eq,43) output(9,eq,0) output(9,eq,15) output(43,eq,0) output(43,eq,15) output(0,eq,15) output(10,eq,18) output(10,eq,24) output(10,eq,6) output(18,eq,24) output(18,eq,6) output(24,eq,6)
Optimization: 21 4
Answer: 8
preference(1,(1,1),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,2),1,for(atom(hasOiliness(2))),8) preference(1,(1,4),1,for(atom(hasOftenSold(0))),2) preference(1,(1,5),1,for(atom(hasOiliness(0))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(6))),8) preference(1,(1,9),1,for(atom(hasMinorGrp(5))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,14),1,for(atom(hasOftenSold(2))),3) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,6) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,6) output(15,better,6) output(18,better,24) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,6) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,6) output(0,worse,15) output(9,worse,15) output(10,worse,30) output(10,worse,18) output(10,worse,15) output(10,worse,6) output(18,worse,15) output(18,worse,6) output(24,worse,15) output(24,worse,6) output(25,worse,15) output(30,worse,15) output(43,worse,15) output(25,eq,9) output(25,eq,43) output(25,eq,0) output(9,eq,43) output(9,eq,0) output(43,eq,0) output(10,eq,24)
Optimization: 20 11
Answer: 9
preference(1,(1,1),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,3),1,for(atom(hasPrice(3))),2) preference(1,(1,4),1,for(atom(hasOftenSold(0))),2) preference(1,(1,5),1,for(atom(hasOiliness(0))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,9),1,for(atom(hasOiliness(2))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,14),1,for(atom(hasOftenSold(2))),3) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,6) output(9,better,43) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,6) output(15,better,6) output(18,better,24) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,6) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,6) output(10,worse,30) output(10,worse,18) output(10,worse,15) output(10,worse,6) output(18,worse,15) output(24,worse,15) output(24,worse,6) output(25,worse,9) output(25,worse,0) output(25,worse,15) output(30,worse,15) output(43,worse,0) output(43,worse,15) output(25,eq,43) output(9,eq,0) output(9,eq,15) output(0,eq,15) output(10,eq,24) output(18,eq,6)
Optimization: 19 12
Answer: 10
preference(1,(1,1),1,for(atom(hasMinorGrp(11))),6) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,3),1,for(atom(hasPrice(3))),2) preference(1,(1,4),1,for(atom(hasOftenSold(0))),2) preference(1,(1,5),1,for(atom(hasOiliness(0))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(6))),3) preference(1,(1,9),1,for(atom(hasOiliness(2))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,14),1,for(atom(hasOftenSold(2))),3) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,6) output(9,better,43) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,6) output(15,better,6) output(18,better,24) output(25,better,43) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,6) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,6) output(10,worse,30) output(10,worse,18) output(10,worse,15) output(10,worse,6) output(18,worse,15) output(24,worse,15) output(24,worse,6) output(25,worse,9) output(25,worse,0) output(25,worse,15) output(30,worse,15) output(43,worse,0) output(43,worse,15) output(9,eq,0) output(9,eq,15) output(0,eq,15) output(10,eq,24) output(18,eq,6)
Optimization: 18 13
Answer: 11
preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),1) preference(1,(1,1),1,for(atom(hasOiliness(1))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,3),1,for(atom(hasOftenSold(3))),10) preference(1,(1,4),1,for(atom(hasPrice(3))),4) preference(1,(1,5),1,for(atom(hasOiliness(0))),2) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,9),1,for(atom(hasPrice(0))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,14),1,for(atom(hasOftenSold(2))),3) preference(1,less(weight)) output(0,better,18) output(0,better,6) output(9,better,18) output(9,better,6) output(10,better,30) output(10,better,18) output(10,better,6) output(15,better,6) output(18,better,6) output(24,better,6) output(25,better,9) output(25,better,43) output(25,better,0) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6) output(0,worse,10) output(0,worse,30) output(0,worse,24) output(0,worse,15) output(9,worse,43) output(9,worse,10) output(9,worse,30) output(9,worse,24) output(9,worse,15) output(18,worse,24) output(18,worse,15) output(30,worse,24) output(30,worse,15) output(9,eq,0) output(10,eq,24) output(10,eq,15) output(24,eq,15)
Optimization: 17 14
Answer: 12
preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),1) preference(1,(1,1),1,for(atom(hasOiliness(1))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,3),1,for(atom(hasOftenSold(3))),10) preference(1,(1,4),1,for(atom(hasPrice(3))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,9),1,for(atom(hasPrice(0))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(6))),2) preference(1,(1,13),1,for(atom(hasPrice(2))),2) preference(1,(1,14),1,for(atom(hasOftenSold(2))),3) preference(1,less(weight)) output(0,better,18) output(0,better,6) output(9,better,18) output(9,better,6) output(10,better,30) output(10,better,18) output(10,better,24) output(10,better,6) output(15,better,6) output(18,better,6) output(24,better,6) output(25,better,9) output(25,better,43) output(25,better,0) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6) output(0,worse,10) output(0,worse,30) output(0,worse,15) output(9,worse,43) output(9,worse,10) output(9,worse,30) output(9,worse,15) output(18,worse,24) output(18,worse,15) output(24,worse,15) output(30,worse,15) output(9,eq,0) output(9,eq,24) output(0,eq,24) output(10,eq,15)
Optimization: 15 14
Answer: 13
preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),1) preference(1,(1,1),1,for(atom(hasOiliness(1))),2) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),8) preference(1,(1,3),1,for(atom(hasOftenSold(3))),10) preference(1,(1,4),1,for(atom(hasPrice(3))),4) preference(1,(1,5),1,for(atom(hasMinorGrp(0))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(3))),3) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),1) preference(1,(1,9),1,for(atom(hasPrice(0))),3) preference(1,(1,10),1,for(atom(hasMinorGrp(4))),10) preference(1,(1,11),1,for(atom(hasMinorGrp(1))),5) preference(1,(1,12),1,for(atom(hasMinorGrp(10))),6) preference(1,(1,13),1,for(atom(hasPrice(2))),2) preference(1,(1,14),1,for(atom(hasOftenSold(2))),3) preference(1,less(weight)) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,6) output(9,better,18) output(9,better,6) output(10,better,30) output(10,better,18) output(10,better,24) output(10,better,6) output(15,better,6) output(18,better,6) output(24,better,6) output(25,better,9) output(25,better,43) output(25,better,0) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6) output(9,worse,43) output(9,worse,0) output(9,worse,10) output(9,worse,30) output(9,worse,15) output(18,worse,24) output(18,worse,15) output(24,worse,15) output(30,worse,15) output(9,eq,24) output(0,eq,10) output(0,eq,15) output(10,eq,15)
Optimization: 13 14
Answer: 14
preference(1,(1,4),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),1) preference(1,(1,12),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,1),1,for(atom(hasPrice(2))),7) preference(1,(1,2),1,for(atom(hasOiliness(2))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,6),1,for(atom(hasPrice(3))),9) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,9),1,for(atom(hasPrice(0))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),2) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,13),1,for(atom(hasOftenSold(2))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),3) preference(1,less(weight)) output(0,better,10) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,43) output(9,better,0) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,15) output(9,better,6) output(10,better,24) output(10,better,15) output(10,better,6) output(15,better,6) output(18,better,24) output(18,better,15) output(18,better,6) output(24,better,6) output(25,better,10) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,24) output(43,better,15) output(43,better,6) output(0,worse,18) output(10,worse,30) output(10,worse,18) output(24,worse,15) output(25,worse,9) output(25,worse,43) output(25,worse,0) output(25,worse,30) output(25,worse,18) output(30,worse,18) output(43,eq,18) output(0,eq,30)
Optimization: 12 14
Answer: 15
preference(1,(1,4),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,12),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,1),1,for(atom(hasPrice(2))),7) preference(1,(1,2),1,for(atom(hasOiliness(2))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(0))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,8),1,for(atom(hasPrice(3))),9) preference(1,(1,9),1,for(atom(hasPrice(0))),1) preference(1,(1,10),1,for(atom(hasOiliness(3))),1) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,13),1,for(atom(hasOftenSold(2))),3) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),3) preference(1,less(weight)) output(0,better,10) output(0,better,18) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,43) output(9,better,0) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,15) output(9,better,6) output(10,better,24) output(10,better,15) output(10,better,6) output(15,better,6) output(18,better,24) output(18,better,15) output(18,better,6) output(24,better,6) output(25,better,10) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6) output(10,worse,30) output(24,worse,15) output(25,worse,9) output(25,worse,43) output(25,worse,0) output(25,worse,30) output(0,eq,30) output(10,eq,18)
Optimization: 8 14
Answer: 16
preference(1,(1,4),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,12),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,1),1,for(atom(hasPrice(2))),7) preference(1,(1,2),1,for(atom(hasOiliness(2))),4) preference(1,(1,3),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,6),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,9),1,for(atom(hasPrice(0))),1) preference(1,(1,10),1,for(atom(hasOiliness(3))),8) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,13),1,for(atom(hasPrice(3))),9) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),3) preference(1,less(weight)) output(0,better,10) output(0,better,18) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,43) output(9,better,0) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,15) output(9,better,6) output(10,better,24) output(10,better,15) output(10,better,6) output(15,better,6) output(18,better,24) output(18,better,15) output(18,better,6) output(24,better,15) output(24,better,6) output(25,better,10) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6) output(10,worse,30) output(25,worse,9) output(25,worse,43) output(25,worse,0) output(25,worse,30) output(0,eq,30) output(10,eq,18)
Optimization: 7 14
Answer: 17
preference(1,(1,4),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,12),1,for(neg(atom(hasOftenSold(1)))),1) preference(1,(1,1),1,for(atom(hasPrice(2))),7) preference(1,(1,2),1,for(atom(hasOiliness(2))),4) preference(1,(1,3),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,6),1,for(atom(hasPrice(3))),9) preference(1,(1,7),1,for(atom(hasMajorGrp(1))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(5))),3) preference(1,(1,9),1,for(atom(hasPrice(0))),1) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),3) preference(1,(1,11),1,for(atom(hasMinorGrp(11))),2) preference(1,(1,13),1,for(atom(hasOftenSold(2))),6) preference(1,(1,14),1,for(atom(hasMinorGrp(4))),3) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,43) output(9,better,0) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,15) output(9,better,6) output(10,better,24) output(10,better,15) output(10,better,6) output(15,better,6) output(18,better,24) output(18,better,15) output(18,better,6) output(24,better,15) output(24,better,6) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6) output(25,worse,9) output(25,worse,43) output(25,worse,0) output(10,eq,30) output(10,eq,18) output(30,eq,18)
Optimization: 6 14
Answer: 18
preference(1,(1,6),1,for(neg(atom(hasOftenSold(3)))),3) preference(1,(1,1),1,for(atom(hasPrice(2))),5) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),5) preference(1,(1,3),1,for(atom(hasMinorGrp(11))),5) preference(1,(1,4),1,for(atom(hasOiliness(1))),1) preference(1,(1,5),1,for(atom(hasOftenSold(2))),10) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,8),1,for(atom(hasMinorGrp(1))),8) preference(1,(1,9),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,10),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,11),1,for(atom(hasOftenSold(1))),2) preference(1,(1,12),1,for(atom(hasOiliness(2))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,14),1,for(atom(hasOftenSold(3))),10) preference(1,less(weight)) output(0,better,10) output(0,better,18) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,43) output(9,better,0) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,15) output(9,better,6) output(10,better,18) output(10,better,15) output(10,better,6) output(18,better,15) output(18,better,6) output(24,better,15) output(24,better,6) output(25,better,9) output(25,better,43) output(25,better,0) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6) output(10,worse,30) output(15,worse,6) output(18,worse,24) output(0,eq,30) output(10,eq,24)
Optimization: 5 14
Answer: 19
preference(1,(1,3),1,for(neg(atom(hasOftenSold(1)))),10) preference(1,(1,7),1,for(neg(atom(hasPrice(1)))),1) preference(1,(1,8),1,for(neg(atom(hasOiliness(2)))),1) preference(1,(1,1),1,for(atom(hasMinorGrp(5))),2) preference(1,(1,2),1,for(atom(hasPrice(0))),3) preference(1,(1,4),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,5),1,for(atom(hasPrice(2))),3) preference(1,(1,6),1,for(atom(hasMinorGrp(7))),9) preference(1,(1,9),1,for(atom(hasPrice(3))),8) preference(1,(1,10),1,for(atom(hasMinorGrp(1))),9) preference(1,(1,11),1,for(atom(hasOftenSold(1))),5) preference(1,(1,12),1,for(atom(hasOiliness(2))),4) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,14),1,for(atom(hasOftenSold(2))),3) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,43) output(9,better,0) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,15) output(9,better,6) output(10,better,15) output(10,better,6) output(15,better,6) output(18,better,24) output(18,better,15) output(18,better,6) output(24,better,15) output(24,better,6) output(25,better,9) output(25,better,43) output(25,better,0) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6) output(10,worse,30) output(10,worse,18) output(10,worse,24) output(43,eq,0)
Optimization: 4 14
Answer: 20
preference(1,(1,12),1,for(neg(atom(hasMinorGrp(1)))),1) preference(1,(1,13),1,for(neg(atom(hasPrice(1)))),4) preference(1,(1,14),1,for(neg(atom(hasOiliness(1)))),2) preference(1,(1,1),1,for(atom(hasPrice(2))),3) preference(1,(1,2),1,for(atom(hasPrice(3))),9) preference(1,(1,3),1,for(atom(hasMinorGrp(4))),8) preference(1,(1,4),1,for(atom(hasOftenSold(3))),4) preference(1,(1,5),1,for(atom(hasOftenSold(0))),5) preference(1,(1,6),1,for(atom(hasMinorGrp(5))),6) preference(1,(1,7),1,for(atom(hasMinorGrp(7))),6) preference(1,(1,8),1,for(atom(hasMinorGrp(6))),7) preference(1,(1,9),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,10),1,for(atom(hasOftenSold(2))),9) preference(1,(1,11),1,for(atom(hasPrice(0))),3) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,43) output(9,better,0) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,15) output(9,better,6) output(10,better,30) output(10,better,18) output(10,better,24) output(10,better,15) output(10,better,6) output(15,better,6) output(18,better,24) output(18,better,15) output(18,better,6) output(24,better,15) output(24,better,6) output(25,better,9) output(25,better,43) output(25,better,0) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6)
Optimization: 0 14
Progression : 0 [ 1;14] (Error: 13)
Answer: 21
preference(1,(1,1),1,for(atom(hasMinorGrp(1))),10) preference(1,(1,2),1,for(atom(hasMinorGrp(5))),4) preference(1,(1,3),1,for(atom(hasPrice(3))),10) preference(1,(1,4),1,for(atom(hasOftenSold(0))),9) preference(1,(1,5),1,for(atom(hasOftenSold(1))),5) preference(1,(1,6),1,for(atom(hasOiliness(2))),3) preference(1,(1,8),1,for(atom(hasMinorGrp(4))),6) preference(1,(1,9),1,for(atom(hasMinorGrp(6))),5) preference(1,(1,10),1,for(atom(hasOftenSold(2))),5) preference(1,(1,11),1,for(atom(hasMinorGrp(7))),8) preference(1,(1,12),1,for(atom(hasPrice(1))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(0))),9) preference(1,(1,14),1,for(atom(hasPrice(2))),1) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,43) output(9,better,0) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,15) output(9,better,6) output(10,better,30) output(10,better,18) output(10,better,24) output(10,better,15) output(10,better,6) output(15,better,6) output(18,better,24) output(18,better,15) output(18,better,6) output(24,better,15) output(24,better,6) output(25,better,9) output(25,better,43) output(25,better,0) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6)
Optimization: 0 13
Progression : 0 [ 2;13] (Error: 5.5)
Answer: 22
preference(1,(1,12),1,for(neg(atom(hasMajorGrp(0)))),3) preference(1,(1,2),1,for(atom(hasMinorGrp(1))),7) preference(1,(1,3),1,for(atom(hasOftenSold(1))),7) preference(1,(1,4),1,for(atom(hasOftenSold(2))),6) preference(1,(1,5),1,for(atom(hasOiliness(1))),8) preference(1,(1,6),1,for(atom(hasMinorGrp(4))),1) preference(1,(1,8),1,for(atom(hasMinorGrp(0))),4) preference(1,(1,9),1,for(atom(hasPrice(3))),7) preference(1,(1,10),1,for(atom(hasOiliness(2))),10) preference(1,(1,11),1,for(atom(hasOftenSold(3))),2) preference(1,(1,13),1,for(atom(hasMinorGrp(7))),10) preference(1,(1,14),1,for(atom(hasPrice(2))),2) preference(1,less(weight)) output(0,better,10) output(0,better,30) output(0,better,18) output(0,better,24) output(0,better,15) output(0,better,6) output(9,better,43) output(9,better,0) output(9,better,10) output(9,better,30) output(9,better,18) output(9,better,24) output(9,better,15) output(9,better,6) output(10,better,30) output(10,better,18) output(10,better,24) output(10,better,15) output(10,better,6) output(15,better,6) output(18,better,24) output(18,better,15) output(18,better,6) output(24,better,15) output(24,better,6) output(25,better,9) output(25,better,43) output(25,better,0) output(25,better,10) output(25,better,30) output(25,better,18) output(25,better,24) output(25,better,15) output(25,better,6) output(30,better,18) output(30,better,24) output(30,better,15) output(30,better,6) output(43,better,0) output(43,better,10) output(43,better,30) output(43,better,18) output(43,better,24) output(43,better,15) output(43,better,6)
Optimization: 0 12
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.068 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 22+
  Optimum    : unknown
Optimization : 0 12
Calls        : 1
Time         : 298.320s (Solving: 283.46s 1st Model: 0.08s Unsat: 0.00s)
CPU Time     : 1148.270s
Threads      : 4        (Winner: 4)

Choices      : 5520318  (Domain: 812)
Conflicts    : 1055370  (Analyzed: 1055368)
Restarts     : 1112     (Average: 949.07 Last: 99874)
Model-Level  : 1421.5  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1058134  (Deleted: 950065)
  Binary     : 412      (Ratio:   0.04%)
  Ternary    : 106      (Ratio:   0.01%)
  Conflict   : 1055368  (Average Length: 1748.7 Ratio:  99.74%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 2766     (Average Length:  207.2 Ratio:   0.26%) 
  Distributed: 922      (Ratio:   0.09% Average LBD: 3.34) 
  Integrated : 2766     (Ratio: 300.00% Unit: 5 Average Jumps: 1.40)
Backjumps    : 1055368  (Average:  3.29 Max: 2616 Sum: 3469005)
  Executed   : 1055367  (Average:  3.29 Max: 2616 Sum: 3468978 Ratio: 100.00%)
  Bounded    : 1        (Average: 27.00 Max:  27 Sum:     27 Ratio:   0.00%)

Rules        : 4282222 
  Choice     : 15      
  Minimize   : 2       
Atoms        : 1413767 
Bodies       : 1456703 
  Sum        : 270     
  Count      : 14      
Equivalences : 4281818  (Atom=Atom: 1388483 Body=Body: 1419194 Other: 1474141)
Tight        : Yes
Variables    : 39267    (Eliminated:    0 Frozen: 17707)
Constraints  : 2957569  (Binary:  98.9% Ternary:   0.7% Other:   0.3%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  10 :: not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  10 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasMinorGrp(5)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  8 :: atom(hasMinorGrp(6)) ; 
  1 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasOiliness(2)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(hasMinorGrp(11)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  2 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(6)) ; 
  3 :: atom(hasOiliness(2)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasPrice(3)) ; 
  2 :: atom(hasOiliness(0)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  1 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  1 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  2 :: atom(hasMinorGrp(6)) ; 
  2 :: atom(hasPrice(2)) ; 
  3 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasOiliness(1)) ; 
  8 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasOftenSold(3)) ; 
  4 :: atom(hasPrice(3)) ; 
  10 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMinorGrp(3)) ; 
  1 :: atom(hasMajorGrp(1)) ; 
  1 :: not atom(hasStyle(1))  ; 
  3 :: atom(hasPrice(0)) ; 
  10 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMinorGrp(1)) ; 
  6 :: atom(hasMinorGrp(10)) ; 
  2 :: atom(hasPrice(2)) ; 
  3 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(2)) ; 
  4 :: atom(hasOiliness(2)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  2 :: not atom(hasOiliness(1))  ; 
  8 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(hasPrice(3)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  1 :: not atom(hasStyle(1))  ; 
  1 :: atom(hasPrice(0)) ; 
  2 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  3 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(2)) ; 
  4 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasMinorGrp(0)) ; 
  2 :: not atom(hasOiliness(1))  ; 
  8 :: atom(hasMinorGrp(1)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  9 :: atom(hasPrice(3)) ; 
  1 :: atom(hasPrice(0)) ; 
  1 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  3 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(2)) ; 
  4 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  2 :: not atom(hasOiliness(1))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  10 :: atom(hasMinorGrp(7)) ; 
  1 :: atom(hasPrice(0)) ; 
  8 :: atom(hasOiliness(3)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  9 :: atom(hasPrice(3)) ; 
  3 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasPrice(2)) ; 
  4 :: atom(hasOiliness(2)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  2 :: not atom(hasOiliness(1))  ; 
  10 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(hasPrice(3)) ; 
  3 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasMinorGrp(5)) ; 
  1 :: atom(hasPrice(0)) ; 
  3 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasMinorGrp(11)) ; 
  1 :: not atom(hasOftenSold(1))  ; 
  6 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasMinorGrp(4)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(hasPrice(2)) ; 
  5 :: atom(hasMinorGrp(5)) ; 
  5 :: atom(hasMinorGrp(11)) ; 
  1 :: atom(hasOiliness(1)) ; 
  10 :: atom(hasOftenSold(2)) ; 
  3 :: not atom(hasOftenSold(3))  ; 
  8 :: atom(hasMinorGrp(7)) ; 
  8 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  2 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasOiliness(2)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  10 :: atom(hasOftenSold(3)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: atom(hasMinorGrp(5)) ; 
  3 :: atom(hasPrice(0)) ; 
  10 :: not atom(hasOftenSold(1))  ; 
  6 :: atom(hasMinorGrp(4)) ; 
  3 :: atom(hasPrice(2)) ; 
  9 :: atom(hasMinorGrp(7)) ; 
  1 :: not atom(hasPrice(1))  ; 
  1 :: not atom(hasOiliness(2))  ; 
  8 :: atom(hasPrice(3)) ; 
  9 :: atom(hasMinorGrp(1)) ; 
  5 :: atom(hasOftenSold(1)) ; 
  4 :: atom(hasOiliness(2)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  3 :: atom(hasOftenSold(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(hasPrice(2)) ; 
  9 :: atom(hasPrice(3)) ; 
  8 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasOftenSold(3)) ; 
  5 :: atom(hasOftenSold(0)) ; 
  6 :: atom(hasMinorGrp(5)) ; 
  6 :: atom(hasMinorGrp(7)) ; 
  7 :: atom(hasMinorGrp(6)) ; 
  10 :: atom(hasMinorGrp(1)) ; 
  9 :: atom(hasOftenSold(2)) ; 
  3 :: atom(hasPrice(0)) ; 
  1 :: not atom(hasMinorGrp(1))  ; 
  4 :: not atom(hasPrice(1))  ; 
  2 :: not atom(hasOiliness(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  10 :: atom(hasMinorGrp(1)) ; 
  4 :: atom(hasMinorGrp(5)) ; 
  10 :: atom(hasPrice(3)) ; 
  9 :: atom(hasOftenSold(0)) ; 
  5 :: atom(hasOftenSold(1)) ; 
  3 :: atom(hasOiliness(2)) ; 
  6 :: atom(hasMinorGrp(4)) ; 
  5 :: atom(hasMinorGrp(6)) ; 
  5 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasPrice(1)) ; 
  9 :: atom(hasMinorGrp(0)) ; 
  1 :: atom(hasPrice(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  7 :: atom(hasMinorGrp(1)) ; 
  7 :: atom(hasOftenSold(1)) ; 
  6 :: atom(hasOftenSold(2)) ; 
  8 :: atom(hasOiliness(1)) ; 
  1 :: atom(hasMinorGrp(4)) ; 
  4 :: atom(hasMinorGrp(0)) ; 
  7 :: atom(hasPrice(3)) ; 
  10 :: atom(hasOiliness(2)) ; 
  2 :: atom(hasOftenSold(3)) ; 
  3 :: not atom(hasMajorGrp(0))  ; 
  10 :: atom(hasMinorGrp(7)) ; 
  2 :: atom(hasPrice(2)) 
}.
